{
  "5672a98bdbdd995fad00000f": "def rps(p1, p2):\r\n    beats = {'rock': 'scissors', 'scissors': 'paper', 'paper': 'rock'}\r\n    if beats[p1] == p2:\r\n    return \"Player 1 won!\"\r\n    if beats[p2] == p1:\r\n    return \"Player 2 won!\"\r\n    return \"Draw!\"\r\n",
  "50ee6b0bdeab583673000025": "a = \"code\"\nb = \"wa.rs\"\nname = a + b\n",
  "5ae62fcf252e66d44d00008e": "def expression_matter(a, b, c):\r\n    return max(a * b * c, a + b + c, (a + b) * c, a * (b + c))\r\n",
  "5899dc03bc95b1bf1b0000ad": "def invert(lst):\r\n    return [- x for x in lst]\r\n",
  "57f24e6a18e9fad8eb000296": "def how_much_i_love_you(nb_petals):\r\n    return [\"I love you\", \"a little\", \"a lot\", \"passionately\", \"madly\", \"not at all\"][nb_petals % 6 - 1]  # g\r\n",
  "57cebe1dc6fdc20c57000ac9": "def find_short(s):\r\n    return min(len(x) for x in s . split())\r\n",
  "54ba84be607a92aa900000f1": "def is_isogram(string):\r\n    return len(string) == len(set(string . lower()))\r\n",
  "5526fc09a1bbd946250002dc": "def find_outlier(int):\r\n    odds = [x for x in int if x % 2 != 0]\r\n    evens = [x for x in int if x % 2 == 0]\r\n    return odds[0] if len(odds) < len(evens) else evens[0]\r\n",
  "59ca8246d751df55cc00014c": "def hero(bullets, dragons):\r\n    return bullets >= dragons * 2\r\n",
  "57a0e5c372292dd76d000d7e": "def repeat_str(repeat, string):\r\n    return repeat * string\r\n",
  "5a2be17aee1aaefe2a000151": "def array_plus_array(arr1, arr2):\r\n    return sum(arr1 + arr2)\r\n",
  "61123a6f2446320021db987d": "def prev_mult_of_three(n):\r\n    while n % 3:\r\n    n / /= 10\r\n    return n or None\r\n",
  "529eef7a9194e0cbc1000255": "def is_anagram(test, original):\r\n    return sorted(original . lower()) == sorted(test . lower())\r\n",
  "55c28f7304e3eaebef0000da": "def create_array(n):\r\n    res = []\r\n    i = 1\r\n    while i <= n:\r\n    res += [i]\r\n    i += 1\r\n    return res\r\n",
  "5875b200d520904a04000003": "def enough(cap, on, wait):\r\n    return max(0, wait - (cap - on))\r\n",
  "56efc695740d30f963000557": "def to_alternating_case(string):\r\n    return string . swapcase()\r\n",
  "51fda2d95d6efda45e00004e": "class User:\r\n    Ranks = [- 8, - 7, - 6, - 5, - 4, - 3, - 2, - 1, 1, 2, 3, 4, 5, 6, 7, 8]\r\n\r\n    def __init__(self):\r\n    self . __rank = - 8\r\n    self . __progress = 0\r\n    @ property\r\n    def rank(self):\r\n    return self . __rank\r\n    @ property\r\n    def progress(self):\r\n    return self . __progress\r\n    def inc_progress(self, kata_rank):\r\n    self . __validate_rank(kata_rank)\r\n    progress_made = self . __calc_progress(kata_rank)\r\n    new_progress = self . progress + progress_made\r\n    extra_rank, progress_left = self . __calc_rank(new_progress)\r\n    self . __update_rank(extra_rank)\r\n    self . __update_progress(progress_left)\r\n\r\n    def __validate_rank(self, in_rank):\r\n    if (in_rank not in self . Ranks):\r\n    raise ValueError(\"Rank must be in range [-8,-1]U[1,8]\")\r\n\r\n    def __calc_progress(self, kata_rank):\r\n    diff = self . Ranks . index(kata_rank) - self . Ranks . index(self . rank)\r\n    if (kata_rank > self . rank):\r\n    return 10 * diff * * 2\r\n    elif (kata_rank == self . rank):\r\n    return 3\r\n    elif (diff == - 1):\r\n    return 1\r\n    else:\r\n    return 0\r\n    def __calc_rank(self, new_progress):\r\n    extra_rank = 0\r\n    progress_left = new_progress\r\n    if (new_progress > 99 and self . rank < 8):\r\n    extra_rank = new_progress / / 100\r\n    progress_left = new_progress % 100\r\n    return extra_rank, progress_left\r\n    def __update_progress(self, new_progress):\r\n    self . __progress = new_progress\r\n    if (self . rank == 8 and self . progress > 0):\r\n    self . __progress = 0\r\n    def __update_rank(self, extra_rank):\r\n    new_rank = self . rank + extra_rank\r\n    if (self . rank < 0 and new_rank >= 0):\r\n    new_rank = new_rank + 1\r\n    if (new_rank > 8):\r\n    self . __rank = 8\r\n    else:\r\n    self . __rank = new_rank\r\n",
  "577ff15ad648a14b780000e7": "def greet(language):\r\n    return {\r\n        'czech': 'Vitejte',\r\n        'danish': 'Velkomst',\r\n        'dutch': 'Welkom',\r\n        'english': 'Welcome',\r\n        'estonian': 'Tere tulemast',\r\n        'finnish': 'Tervetuloa',\r\n        'flemish': 'Welgekomen',\r\n        'french': 'Bienvenue',\r\n        'german': 'Willkommen',\r\n        'irish': 'Failte',\r\n        'italian': 'Benvenuto',\r\n        'latvian': 'Gaidits',\r\n        'lithuanian': 'Laukiamas',\r\n        'polish': 'Witamy',\r\n        'spanish': 'Bienvenido',\r\n        'swedish': 'Valkommen',\r\n        'welsh': 'Croeso'\r\n    }. get(language, 'Welcome')\r\n",
  "547274e24481cfc469000416": "def God():\r\n    return [Man(), Woman()]\r\n\r\n    class Human (object):\r\n    pass\r\n    class Man (Human):\r\n    pass\r\n    class Woman (Human):\r\n    pass\r\n",
  "5254ca2719453dcc0b00027d": "import itertools\n\n\ndef permutations(string):\n    return list(\"\" . join(p) for p in set(itertools . permutations(string)))\n",
  "56541980fa08ab47a0000040": "from re import sub\n\n\ndef printer_error(s):\n    return \"{}/{}\" . format(len(sub(\"[a-m]\", '', s)), len(s))\n",
  "56f6ad906b88de513f000d96": "def bonus_time(salary, bonus):\r\n    return \"${}\" . format(salary * (10 if bonus else 1))\r\n",
  "59fca81a5712f9fa4700159a": "def to_binary(n):\r\n    return int(f' { n : b } ')\r\n",
  "5265326f5fda8eb1160004c8": "def number_to_string(num):\r\n    return str(num)\r\n",
  "540c33513b6532cd58000259": "def sum_args(* args):\r\n    return sum(args)\r\n",
  "56f69d9f9400f508fb000ba7": "def monkey_count(n):\r\n    return range(1, n + 1)\r\n",
  "57e92e91b63b6cbac20001e5": "def duty_free(price, discount, holiday_cost):\r\n    saving = price * discount / 100.0\r\n    return int(holiday_cost / saving)\r\n",
  "5545f109004975ea66000086": "def is_divisible(n, x, y):\r\n    return n % x == 0 and n % y == 0\r\n",
  "5519a584a73e70fa570005f5": "import numpy as np\r\n\r\n\r\nclass PrimeSieve:\r\n    def __init__(self, maximum):\r\n    self . primes = [2, 3]\r\n    # self.sieve = [0] * (maximum + 1)\r\n    self . sieve = np . zeros(maximum + 1, dtype=np . int8)\r\n    for p in self . primes:\r\n    self . sieve[p * p:: p] = 1\r\n    def extend(self):\r\n    p = self . primes[- 1] + 2\r\n    while self . sieve[p]:\r\n        p += 2\r\n    self . sieve[p * p:: p] = 1\r\n    self . primes . append(p)\r\n    return p\r\n    class Primes:\r\n    @ staticmethod\r\n    def stream():\r\n    prime_sieve = PrimeSieve(2 * 10 * * 7)\r\n    yield from iter(prime_sieve . primes)\r\n    yield from iter(prime_sieve . extend, 0)\r\n",
  "5266876b8f4bf2da9b000362": "def likes(names):\r\n    n = len(names)\r\n    return {\r\n        0: 'no one likes this',\r\n        1: '{} likes this',\r\n        2: '{} and {} like this',\r\n        3: '{}, {} and {} like this',\r\n        4: '{}, {} and {others} others like this'\r\n    }[min(4, n)]. format(* names[: 3], others=n - 2)\r\n",
  "55192f4ecd82ff826900089e": "def divide(weight):\r\n    return weight > 2 and weight % 2 == 0\r\n",
  "5779f894ec8832493f00002d": "from collections import Counter\n\n\ndef fib_digits(n):\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return sorted(((b, int(a)) for a, b in Counter(str(a)). items()), reverse=True)\n",
  "58649884a1659ed6cb000072": "def update_light(current):\r\n    return {\"green\": \"yellow\", \"yellow\": \"red\", \"red\": \"green\"}[current]\r\n",
  "515e271a311df0350d00000f": "def square_sum(numbers):\r\n    return sum(x * * 2 for x in numbers)\r\n",
  "57126304cdbf63c6770012bd": "def isDigit(string):\r\n    try:\r\n    float(string)\r\n    return True\r\n    except:\r\n    return False\r\n",
  "57a049e253ba33ac5e000212": "from math import factorial\n",
  "551b4501ac0447318f0009cd": "def boolean_to_string(b):\r\n    return str(b)\r\n",
  "563b74ddd19a3ad462000054": "def stringy(size):\r\n    return ('10' * size)[: size]\r\n",
  "52a382ee44408cea2500074c": "import numpy as np\n\n\ndef determinant(a):\n    return round(np . linalg . det(np . matrix(a)))\n",
  "55d8618adfda93c89600012e": "def what_is(x):\r\n    if x == 42:\r\n    return 'everything'\r\n    elif x == 42 * 42:\r\n    return 'everything squared'\r\n    else:\r\n    return 'nothing'\r\n",
  "523b4ff7adca849afe000035": "def greet():\r\n    return \"hello world!\"\r\n",
  "56b7771481290cc283000f28": "def last_fib_digit(n):\r\n    return [0, 1, 1, 2, 3, 5, 8, 3, 1, 4, 5, 9, 4, 3, 7, 0, 7, 7, 4, 1, 5, 6, 1, 7, 8, 5, 3, 8, 1, 9, 0, 9, 9, 8, 7, 5, 2, 7, 9, 6, 5, 1, 6, 7, 3, 0, 3, 3, 6, 9, 5, 4, 9, 3, 2, 5, 7, 2, 9, 1][n % 60]\r\n",
  "529adbf7533b761c560004e5": "def memoized(f):\r\n    cache = {}\r\n    def wrapped(k):\r\n    v = cache . get(k)\r\n    if v is None:\r\n    v = cache[k] = f(k)\r\n    return v\r\n    return wrapped\r\n    @ memoized\r\n    def fibonacci(n):\r\n    if n in [0, 1]:\r\n    return n\r\n    return fibonacci(n - 1) + fibonacci(n - 2)\r\n",
  "51b66044bce5799a7f000003": "from collections import OrderedDict\r\nimport re\r\nROMAN_NUMERALS = OrderedDict([\r\n    ('M', 1000),\r\n    ('CM', 900),\r\n    ('D', 500),\r\n    ('CD', 400),\r\n    ('C', 100),\r\n    ('XC', 90),\r\n    ('L', 50),\r\n    ('XL', 40),\r\n    ('X', 10),\r\n    ('IX', 9),\r\n    ('V', 5),\r\n    ('IV', 4),\r\n    ('I', 1),\r\n])\r\n\r\nDECIMAL_TO_ROMAN = [(v, k) for k, v in ROMAN_NUMERALS . items()]\r\n\r\nROMAN_RE = '|' . join(ROMAN_NUMERALS)\r\n\r\n\r\nclass RomanNumerals (object):\r\n    @ staticmethod\r\n    def from_roman(roman):\r\n    return sum(ROMAN_NUMERALS[d] for d in re . findall(ROMAN_RE, roman))\r\n\r\n    @ staticmethod\r\n    def to_roman(decimal):\r\n    result = []\r\n    for number, roman in DECIMAL_TO_ROMAN:\r\n    while decimal >= number:\r\n    decimal -= number\r\n    result . append(roman)\r\n    return '' . join(result)\r\n",
  "5552101f47fc5178b1000050": "def dig_pow(n, p):\r\n    s = 0\r\n    for i, c in enumerate(str(n)):\r\n    s += pow(int(c), p + i)\r\n    return s / n if s % n == 0 else - 1\r\n",
  "5467e4d82edf8bbf40000155": "def Descending_Order(num):\r\n    return int(\"\" . join(sorted(str(num), reverse=True)))\r\n",
  "52756e5ad454534f220001ef": "def lcs(x, y):\r\n    if len(x) == 0 or len(y) == 0:\r\n    return ''\r\n    if x[- 1] == y[- 1]:\r\n    return lcs(x[: - 1], y[: - 1]) + x[- 1]\r\n    else:\r\n    lcs1 = lcs(x, y[: - 1])\r\n    lcs2 = lcs(x[: - 1], y)\r\n    if len(lcs1) > len(lcs2):\r\n    return lcs1\r\n    else:\r\n    return lcs2\r\n",
  "5547cc7dcad755e480000004": "def removNb(n):\r\n    total = n * (n + 1) / 2\r\n    sol = []\r\n    for a in range(1, n + 1):\r\n    b = (total - a) / (a + 1.0)\r\n    if b . is_integer() and b <= n:\r\n    sol . append((a, int(b)))\r\n    return sol\r\n",
  "51f2d1cafc9c0f745c00037d": "def solution(string, ending):\r\n    return string . endswith(ending)\r\n",
  "5ce9c1000bab0b001134f5af": "def quarter_of(month):\r\n    # your code here\r\n    if month in range(1, 4):\r\n    return 1\r\n    elif month in range(4, 7):\r\n    return 2\r\n    elif month in range(7, 10):\r\n    return 3\r\n    elif month in range(10, 13):\r\n    return 4\r\n",
  "56598d8076ee7a0759000087": "from math import ceil\r\n\r\n\r\ndef calculate_tip(amount, rating):\r\n    tips = {\r\n        'terrible': 0,\r\n        'poor': .05,\r\n        'good': .1,\r\n        'great': .15,\r\n        'excellent': .2\r\n    }\r\n    if rating . lower() in tips:\r\n    return ceil(amount * tips[rating . lower()])\r\n    else:\r\n    return 'Rating not recognised'\r\n",
  "551dc350bf4e526099000ae5": "def song_decoder(song):\r\n    return \" \" . join(song . replace('WUB', ' '). split())\r\n",
  "526571aae218b8ee490006f4": "def countBits(n):\r\n    return bin(n). count(\"1\")\r\n",
  "566efcfbf521a3cfd2000056": "def reverse_fun(n):\r\n    for i in range(len(n)):\r\n    n = n[: i] + n[i:][:: - 1]\r\n    return n\r\n",
  "593b1909e68ff627c9000186": "def nickname_generator(name):\r\n    return \"Error: Name too short\" if len(name) < 4 else name[: 3 + (name[2] in \"aeiuo\")]\r\n",
  "57d6b40fbfcdc5e9280002ee": "from itertools import chain\n\n\ndef how_many_bees(hive):\n    return bool(hive) and sum(s . count('bee') + s . count('eeb') for s in map('' . join, chain(hive, zip(* hive))))\n",
  "5aa736a455f906981800360d": "def feast(beast, dish):\r\n    return beast[0] == dish[0] and dish[- 1] == beast[- 1]\r\n",
  "55cbd4ba903825f7970000f5": "def get_grade(s1, s2, s3):\r\n    m = (s1 + s2 + s3) / 3.0\r\n    if 90 <= m <= 100:\r\n    return 'A'\r\n    elif 80 <= m < 90:\r\n    return 'B'\r\n    elif 70 <= m < 80:\r\n    return 'C'\r\n    elif 60 <= m < 70:\r\n    return 'D'\r\n    return \"F\"\r\n",
  "59a8570b570190d313000037": "def sum_cubes(n):\r\n    return sum(i * * 3 for i in range(0, n + 1))\r\n",
  "521c2db8ddc89b9b7a0000c1": "import numpy as np\r\n\r\n\r\ndef snail(array):\r\n    m = []\r\n    array = np . array(array)\r\n    while len(array) > 0:\r\n    m += array[0]. tolist()\r\n    array = np . rot90(array[1:])\r\n    return m\r\n",
  "58f8a3a27a5c28d92e000144": "def first_non_consecutive(arr):\r\n    if not arr:\r\n        return 0\r\n    for i, x in enumerate(arr[: - 1]):\r\n    if x + 1 != arr[i + 1]:\r\n    return arr[i + 1]\r\n",
  "56747fd5cb988479af000028": "def get_middle(s):\r\n    index, odd = divmod(len(s), 2)\r\n    return s[index] if odd else s[index - 1: index + 1]\r\n",
  "57a0556c7cb1f31ab3000ad7": "def make_upper_case(s): return s . upper()\n",
  "5174a4c0f2769dd8b1000003": "def solution(nums):\r\n    return sorted(nums) if nums else []\r\n",
  "53e30ec0116393fe1a00060b": "from collections import OrderedDict\n\n\ndef unique(integers):\n    return list(OrderedDict . fromkeys(integers))\n",
  "5f55ecd770692e001484af7d": "def mirror(data: list) - > list:\r\n    arr = sorted(data)\r\n    return arr + arr[- 2:: - 1]\r\n",
  "55685cd7ad70877c23000102": "def make_negative(number):\r\n    return - abs(number)\r\n",
  "54d512e62a5e54c96200019e": "def primeFactors(n):\n    i = 2\n    r = ''\n    while n != 1:\n    k = 0\n    while n % i == 0:\n    n = n / i\n    k += 1\n    if k == 1:\n    r = r + '(' + str(i) + ')'\n    elif k == 0:\n        pass\n    else:\n    r = r + '(' + str(i) + '**' + str(k) + ')'\n    i += 1\n    return r\n",
  "541c8630095125aba6000c00": "def digital_root(n):\r\n    return n if n < 10 else digital_root(sum(map(int, str(n))))\r\n",
  "54b72c16cd7f5154e9000457": "def decodeBits(bits):\r\n    import re\r\n    # remove trailing and leading 0's\r\n    bits = bits . strip('0')\r\n\r\n    # find the least amount of occurrences of either a 0 or 1, and that is the time hop\r\n    time_unit = min(len(m) for m in re . findall(r'1+|0+', bits))\r\n\r\n    # hop through the bits and translate to morse\r\n    return bits[:: time_unit]. replace('111', '-'). replace('1', '.'). replace('0000000', ' '). replace('000', ' '). replace('0', '')\r\n\r\n    def decodeMorse(morseCode):\r\n    return ' ' . join('' . join(MORSE_CODE[l] for l in w . split()) for w in morseCode . split(' '))\r\n",
  "55fd2d567d94ac3bc9000064": "def row_sum_odd_numbers(n):\r\n    # your code here\r\n    return n * * 3\r\n",
  "55f9bca8ecaa9eac7100004a": "def past(h, m, s):\r\n    return (3600 * h + 60 * m + s) * 1000\r\n",
  "5bb148b840196d1be50000b1": "def convert(s):\r\n    w2n = dict(zip(dict . fromkeys(s . upper()), '1023456789'))\r\n    return int('0' + '' . join([w2n[ch] for ch in s . upper()]))\r\n",
  "55ccdf1512938ce3ac000056": "def is_lock_ness_monster(s):\r\n    return any(i in s for i in ('tree fiddy', 'three fifty', '3.50'))\r\n",
  "5625618b1fe21ab49f00001f": "def say_hello(name):\r\n    return f\"Hello, { name } \"\r\n",
  "5672682212c8ecf83e000050": "from collections import deque\r\n\r\n\r\ndef dbl_linear(n):\r\n    h = 1\r\n    cnt = 0\r\n    q2, q3 = deque([]), deque([])\r\n    while True:\r\n    if (cnt >= n):\r\n    return h\r\n    q2 . append(2 * h + 1)\r\n    q3 . append(3 * h + 1)\r\n    h = min(q2[0], q3[0])\r\n    if h == q2[0]:\r\n        h = q2 . popleft()\r\n    if h == q3[0]:\r\n        h = q3 . popleft()\r\n    cnt += 1\r\n",
  "57a429e253ba3381850000fb": "def bmi(weight, height):\r\n    bmi = weight / height * * 2\r\n    if bmi <= 18.5:\r\n    return \"Underweight\"\r\n    elif bmi <= 25:\r\n    return \"Normal\"\r\n    elif bmi <= 30:\r\n    return \"Overweight\"\r\n    else:\r\n    return \"Obese\"\r\n",
  "57036f007fd72e3b77000023": "class Solution:\r\n\r\n    @ staticmethod\r\n    def main(self, * args):\r\n    print(\"Hello World!\")\r\n",
  "559590633066759614000063": "def min_max(lst):\r\n    return [min(lst), max(lst)]\r\n",
  "52549d3e19453df56f0000fe": "def fib(n):\r\n    a, b = 0, 1\r\n    for _ in range(n - 1):\r\n    a, b = b, a + b\r\n    return a\r\n",
  "54ff0d1f355cfd20e60001fc": "def factorial(n):\r\n    if n < 0 or n > 12:\r\n    raise ValueError\r\n    return 1 if n <= 1 else n * factorial(n - 1)\r\n",
  "56b7f2f3f18876033f000307": "def in_asc_order(arr):\r\n    return arr == sorted(arr)\r\n",
  "523b66342d0c301ae400003b": "def multiply(x, y):\r\n    return x * y\r\n",
  "53af2b8861023f1d88000832": "def areYouPlayingBanjo(name):\r\n    if name[0]. lower() == 'r':\r\n    return name + ' plays banjo'\r\n    else:\r\n    return name + ' does not play banjo'\r\n",
  "57356c55867b9b7a60000bd7": "def basic_op(operator, value1, value2):\r\n    if operator == '+':\r\n    return value1 + value2\r\n    if operator == '-':\r\n    return value1 - value2\r\n    if operator == '/':\r\n    return value1 / value2\r\n    if operator == '*':\r\n    return value1 * value2\r\n",
  "57f781872e3d8ca2a000007e": "def maps(a):\r\n    return [2 * x for x in a]\r\n",
  "554e4a2f232cdd87d9000038": "import string\n\n\ndef DNA_strand(dna):\n    return dna . translate(string . maketrans(\"ATCG\", \"TAGC\"))\n    # Python 3.4 solution || you don't need to import anything :)\n    # return dna.translate(str.maketrans(\"ATCG\",\"TAGC\"))\n",
  "580dda86c40fa6c45f00028a": "def cube_odd(arr):\r\n    return sum(n * * 3 for n in arr if n % 2) if all(type(n) == int for n in arr) else None\r\n",
  "5416f1834c24604c46000696": "def cycle(sequence):\r\n    for j, x in enumerate(sequence):\r\n    i = sequence . index(x)\r\n    if 0 <= i < j:\r\n    return [i, j - i]\r\n    return []\r\n",
  "5a3fe3dde1ce0e8ed6000097": "def century(year):\r\n    return (year + 99) / / 100\r\n",
  "555a67db74814aa4ee0001b5": "def is_even(n):\r\n    return n % 2 == 0\r\n",
  "6071ef9cbe6ec400228d9531": "def calculator(txt):\r\n    a, op, b = txt . split()\r\n    a, b = len(a), len(b)\r\n    return '.' * eval(f' { a } { op } { b } ')\r\n",
  "525c1a07bb6dda6944000031": "websites = [\"codewars\"] * 1000\n",
  "5865918c6b569962950002a1": "def strCount(string, letter):\r\n    return string . count(letter)\r\n",
  "5601409514fc93442500010b": "def better_than_average(class_points, your_points):\r\n    return your_points > sum(class_points) / len(class_points)\r\n",
  "57680d0128ed87c94f000bfd": "def find_word(board, word):\r\n    grid = [l + [''] for l in board] + [[''] * (len(board[0]) + 1)]\r\n    def rc(x, y, i):\r\n    if i == len(word):\r\n        return True\r\n    if grid[x][y] != word[i]:\r\n        return False\r\n    grid[x][y] = ''\r\n    r = any(rc(x + u, y + v, i + 1)\r\n            for u in range(- 1, 2)\r\n            for v in range(- 1, 2))\r\n    grid[x][y] = word[i]\r\n    return r\r\n    return any(rc(x, y, 0)\r\n               for x in range(len(board))\r\n               for y in range(len(board[x])))\r\n",
  "544675c6f971f7399a000e79": "def string_to_number(s):\r\n    return int(s)\r\n",
  "59590976838112bfea0000fa": "def beggars(values, n):\r\n    return [sum(values[i:: n]) for i in range(n)]\r\n",
  "57eadb7ecd143f4c9c0000a3": "def abbrevName(name):\r\n    return '.' . join(w[0] for w in name . split()). upper()\r\n",
  "57f780909f7e8e3183000078": "def grow(arr):\r\n\t product = 1\r\n for i in arr :\r\n\t\t product *= i \r\n return product",
  "54cb771c9b30e8b5250011d4": "def height(n, m):\n    h, t = 0, 1\n    for i in range(1, n + 1):\n    t = t * (m - i + 1) / / i\n    h += t\n    return h\n",
  "5a48fab7bdb9b5b3690009b6": "import numpy as np\n\n\ndef reorder(a, b):\n    return np . roll(np . arange(a). reshape(2, - 1), b, 1). tolist()\n",
  "591588d49f4056e13f000001": "LINES = \"{0} of beer on the wall, {0} of beer.\\nTake one down and pass it around, {1} of beer on the wall.\"\nSONG = '\\n' . join(LINES . format(\"{} bottles\" . format(\n    n), \"{} bottle\" . format(n - 1) + \"s\" * (n != 2)) for n in range(99, 1, - 1))\nSONG += \"\"\" \n 1 bottle of beer on the wall, 1 bottle of beer. \n Take one down and pass it around, no more bottles of beer on the wall. \n No more bottles of beer on the wall, no more bottles of beer. \n Go to the store and buy some more, 99 bottles of beer on the wall.\"\"\"\n\n\ndef HQ9(code):\n    return {'H': 'Hello World!', 'Q': 'Q', '9': SONG}. get(code, None)\n",
  "529bf0e9bdf7657179000008": "correct = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n\r\n\r\ndef validSolution(board):\r\n    # check rows\r\n    for row in board:\r\n    if sorted(row) != correct:\r\n    return False\r\n    # check columns\r\n    for column in zip(* board):\r\n    if sorted(column) != correct:\r\n    return False\r\n    # check regions\r\n    for i in range(3):\r\n    for j in range(3):\r\n    region = []\r\n    for line in board[i * 3:(i + 1) * 3]:\r\n    region += line[j * 3:(j + 1) * 3]\r\n\r\n    if sorted(region) != correct:\r\n    return False\r\n    # if everything correct\r\n    return True\r\n",
  "523a86aa4230ebb5420001e1": "def anagrams(word, words): return [\n    item for item in words if sorted(item) == sorted(word)]\n",
  "55cb632c1a5d7b3ad0000145": "def hoopCount(n):\r\n    return \"Keep at it until you get it\" if n < 10 else \"Great, now move on to tricks\"\r\n",
  "5a805d8cafa10f8b930005ba": "def nearest_sq(n):\r\n    return round(n * * 0.5) * * 2\r\n",
  "5390bac347d09b7da40006f6": "def to_jaden_case(string):\r\n    return ' ' . join(word . capitalize() for word in string . split())\r\n",
  "54b724efac3d5402db00065e": "def decodeMorse(morseCode):\r\n    return ' ' . join('' . join(MORSE_CODE[letter] for letter in word . split(' ')) for word in morseCode . strip(). split(' '))\r\n",
  "51c8991dee245d7ddf00000e": "def reverseWords(str):\r\n    return \" \" . join(str . split(\" \")[:: - 1])\r\n",
  "54da539698b8a2ad76000228": "def isValidWalk(walk):\r\n    return len(walk) == 10 and walk . count('n') == walk . count('s') and walk . count('e') == walk . count('w')\r\n",
  "57ec8bd8f670e9a47a000f89": "def mouth_size(animal):\r\n    return 'small' if animal . lower() == 'alligator' else 'wide'\r\n",
  "53369039d7ab3ac506000467": "def bool_to_word(bool):\r\n    return \"Yes\" if bool else \"No\"\r\n",
  "578553c3a1b8d5c40300037c": "def binary_array_to_number(arr):\r\n    return int(\"\" . join(map(str, arr)), 2)\r\n",
  "5a00e05cc374cb34d100000d": "def reverseseq(n):\r\n    return list(range(n, 0, - 1))\r\n",
  "56f173a35b91399a05000cb7": "def find_longest(strng):\r\n    return max(len(a) for a in strng . split())\r\n",
  "56fa3c5ce4d45d2a52001b3c": "def xor(a, b):\r\n    return a != b\r\n",
  "55e2de13b668981d3300003d": "from re import compile\nREGEX = compile(r\"(-?\\d*)(x?)\\^?(-?\\d*)\"). fullmatch\n\n\ndef differentiate(poly):\n    a, x, n = REGEX(poly). groups()\n    a, n = int(- 1 if a == '-' else a or 1), int(n or bool(x))\n    if n == 0 or n == 1:\n        return f\" { a * n } \"\n    if n == 2:\n        return f\" { a * n } x\"\n    return f\" { a * n } x^ { n - 1 } \"\n",
  "5412509bd436bd33920011bc": "# return masked string\ndef maskify(cc):\n    return \"#\" * (len(cc) - 4) + cc[- 4:]\n",
  "5277c8a221e209d3f6000b56": "def validBraces(string):\r\n    braces = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\r\n    stack = []\r\n    for character in string:\r\n    if character in braces . keys():\r\n    stack . append(character)\r\n    else:\r\n    if len(stack) == 0 or braces[stack . pop()] != character:\r\n    return False\r\n    return len(stack) == 0\r\n",
  "57a2013acf1fa5bfc4000921": "def find_average(array):\r\n    return sum(array) / len(array) if array else 0\r\n",
  "5946a0a64a2c5b596500019a": "def split_and_add(numbers, n):\r\n    for _ in range(n):\r\n    middle = len(numbers) / / 2\r\n    left = numbers[: middle]\r\n    right = numbers[middle:]\r\n    numbers = [a + b for a,\r\n               b in zip((len(right) - len(left)) * [0] + left, right)]\r\n    if len(numbers) == 1:\r\n    return numbers\r\n    return numbers\r\n",
  "5810ad962b321bac8f000178": "from random import shuffle\r\n\r\n\r\ndef shuffled_deck():\r\n    arr = [f' { x } { i } ' for x in \"HCDS\" for i in range(1, 14)]\r\n    shuffle(arr)\r\n    return arr\r\n",
  "582cb0224e56e068d800003c": "def litres(time):\r\n    return time / / 2\r\n",
  "5772da22b89313a4d50012f7": "def greet(name, owner):\r\n    return \"Hello boss\" if name == owner else \"Hello guest\"\r\n",
  "570409d3d80ec699af001bf9": "def fusc(n):\r\n    assert type(n) == int and n >= 0\r\n    if n < 2:\r\n    return n\r\n    if n % 2 == 0:\r\n    return fusc(n / / 2)\r\n    else:\r\n    return fusc(n / / 2) + fusc(n / / 2 + 1)\r\n",
  "53da3dbb4a5168369a0000fe": "def even_or_odd(number):\r\n    return 'Odd' if number % 2 else 'Even'\r\n",
  "568dcc3c7f12767a62000038": "def set_alarm(employed, vacation):\r\n    return employed and not vacation\r\n",
  "5862f663b4e9d6f12b00003b": "def guess_blue(blue_start, red_start, blue_pulled, red_pulled):\n    blue_remaining = blue_start - blue_pulled\n    red_remaining = red_start - red_pulled\n    return blue_remaining / (blue_remaining + red_remaining)\n",
  "563f037412e5ada593000114": "def calculate_years(principal, interest, tax, desired):\r\n    years = 0\r\n    while principal < desired:\r\n    principal += (interest * principal) * (1 - tax)\r\n    years += 1\r\n    return years\r\n",
  "55a2d7ebe362935a210000b2": "def findSmallestInt(arr):\r\n    return min(arr)\r\n",
  "52a78825cdfc2cfc87000005": "import re\r\nfrom operator import mul, truediv as div, add, sub\r\nOPS = {'*': mul, '/': div, '-': sub, '+': add}\r\n\r\n\r\ndef calc(expression):\r\n    tokens = re . findall(r'[.\\d]+|[()+*/-]', expression)\r\n    return parse_AddSub(tokens, 0)[0]\r\n\r\n    def parse_AddSub(tokens, iTok):\r\n\r\n    v, iTok = parse_MulDiv(tokens, iTok)\r\n\r\n    while iTok < len(tokens) and tokens[iTok] != ')':\r\n    tok = tokens[iTok]\r\n    if tok in '-+':\r\n    v2, iTok = parse_MulDiv(tokens, iTok + 1)\r\n    v = OPS[tok](v, v2)\r\n\r\n    return v, iTok\r\n    def parse_MulDiv(tokens, iTok):\r\n\r\n    v, iTok = parse_Term(tokens, iTok)\r\n\r\n    while iTok < len(tokens) and tokens[iTok] in '*/':\r\n    op = tokens[iTok]\r\n    v2, iTok = parse_Term(tokens, iTok + 1)\r\n    v = OPS[op](v, v2)\r\n\r\n    return v, iTok\r\n    def parse_Term(tokens, iTok):\r\n    tok = tokens[iTok]\r\n\r\n    if tok == '(':\r\n    v, iTok = parse_AddSub(tokens, iTok + 1)\r\n    if iTok < len(tokens) and tokens[iTok] != ')':\r\n        raise Exception()\r\n\r\n    elif tok == '-':\r\n    v, iTok = parse_Term(tokens, iTok + 1)\r\n    v, iTok = - v, iTok - 1\r\n    else:\r\n    v = float(tok)\r\n\r\n    return v, iTok + 1\r\n",
  "55d277882e139d0b6000005d": "def find_average(nums):\r\n    return sum(nums) / len(nums) if nums else 0\r\n",
  "52f787eb172a8b4ae1000a34": "def zeros(n):\n    \"\"\" \n    No factorial is going to have fewer zeros than the factorial of a smaller \n    number. \n    Each multiple of 5 adds a 0, so first we count how many multiples of 5 are \n    smaller than `n` (`n // 5`). \n    Each multiple of 25 adds two 0's, so next we add another 0 for each multiple \n    of 25 smaller than n. \n    We continue on for all powers of 5 smaller than (or equal to) n. \n    \"\"\"\n    pow_of_5 = 5\n    zeros = 0\n    while n >= pow_of_5:\n    zeros += n / / pow_of_5\n    pow_of_5 *= 5\n    return zeros\n",
  "56f6919a6b88de18ff000b36": "def how_many_dalmatians(n):\r\n    dogs = [\"Hardly any\", \"More than a handful!\",\r\n            \"Woah that's a lot of dogs!\", \"101 DALMATIONS!!!\"]\r\n    return dogs[0] if n <= 10 else dogs[1] if n <= 50 else dogs[3] if n == 101 else dogs[2]\r\n",
  "55f9b48403f6b87a7c0000bd": "def paperwork(n, m):\r\n    return n * m if n > 0 and m > 0 else 0\r\n",
  "52ec24228a515e620b0005ef": "ANSWERS = {\r\n    0: 1,\r\n    1: 1,\r\n    2: 2,\r\n    3: 3,\r\n    4: 5,\r\n    5: 7,\r\n    6: 11,\r\n    7: 15,\r\n    8: 22,\r\n    9: 30,\r\n    10: 42,\r\n    11: 56,\r\n    12: 77,\r\n    13: 101,\r\n    14: 135,\r\n    15: 176,\r\n    16: 231,\r\n    17: 297,\r\n    18: 385,\r\n    19: 490,\r\n    20: 627,\r\n    21: 792,\r\n    22: 1002,\r\n    23: 1255,\r\n    24: 1575,\r\n    25: 1958,\r\n    26: 2436,\r\n    27: 3010,\r\n    28: 3718,\r\n    29: 4565,\r\n    30: 5604,\r\n    31: 6842,\r\n    32: 8349,\r\n    33: 10143,\r\n    34: 12310,\r\n    35: 14883,\r\n    36: 17977,\r\n    37: 21637,\r\n    38: 26015,\r\n    39: 31185,\r\n    40: 37338,\r\n    41: 44583,\r\n    42: 53174,\r\n    43: 63261,\r\n    44: 75175,\r\n    45: 89134,\r\n    46: 105558,\r\n    47: 124754,\r\n    48: 147273,\r\n    49: 173525,\r\n    50: 204226,\r\n    51: 239943,\r\n    52: 281589,\r\n    53: 329931,\r\n    54: 386155,\r\n    55: 451276,\r\n    56: 526823,\r\n    57: 614154,\r\n    58: 715220,\r\n    59: 831820,\r\n    60: 966467,\r\n    61: 1121505,\r\n    62: 1300156,\r\n    63: 1505499,\r\n    64: 1741630,\r\n    65: 2012558,\r\n    66: 2323520,\r\n    67: 2679689,\r\n    68: 3087735,\r\n    69: 3554345,\r\n    70: 4087968,\r\n    71: 4697205,\r\n    72: 5392783,\r\n    73: 6185689,\r\n    74: 7089500,\r\n    75: 8118264,\r\n    76: 9289091,\r\n    77: 10619863,\r\n    78: 12132164,\r\n    79: 13848650,\r\n    80: 15796476,\r\n    81: 18004327,\r\n    82: 20506255,\r\n    83: 23338469,\r\n    84: 26543660,\r\n    85: 30167357,\r\n    86: 34262962,\r\n    87: 38887673,\r\n    88: 44108109,\r\n    89: 49995925,\r\n    90: 56634173,\r\n    91: 64112359,\r\n    92: 72533807,\r\n    93: 82010177,\r\n    94: 92669720,\r\n    95: 104651419,\r\n    96: 118114304,\r\n    97: 133230930,\r\n    98: 150198136,\r\n    99: 169229875,\r\n    100: 190569292,\r\n    101: 214481126,\r\n    102: 241265379,\r\n    103: 271248950,\r\n    104: 304801365,\r\n    105: 342325709,\r\n    106: 384276336,\r\n    107: 431149389,\r\n    108: 483502844,\r\n    109: 541946240,\r\n    110: 607163746,\r\n    111: 679903203,\r\n    112: 761002156,\r\n    113: 851376628,\r\n    114: 952050665,\r\n    115: 1064144451,\r\n    116: 1188908248,\r\n    117: 1327710076,\r\n    118: 1482074143,\r\n    119: 1653668665,\r\n    120: 1844349560,\r\n    121: 2056148051,\r\n    122: 2291320912,\r\n    123: 2552338241,\r\n    124: 2841940500,\r\n    125: 3163127352,\r\n    126: 3519222692,\r\n    127: 3913864295,\r\n    128: 4351078600,\r\n    129: 4835271870,\r\n    130: 5371315400,\r\n    131: 5964539504,\r\n    132: 6620830889,\r\n    133: 7346629512,\r\n    134: 8149040695,\r\n    135: 9035836076,\r\n    136: 10015581680,\r\n    137: 11097645016,\r\n    138: 12292341831,\r\n    139: 13610949895,\r\n    140: 15065878135,\r\n    141: 16670689208,\r\n    142: 18440293320,\r\n    143: 20390982757,\r\n    144: 22540654445,\r\n    145: 24908858009,\r\n    146: 27517052599,\r\n    147: 30388671978,\r\n    148: 33549419497,\r\n    149: 37027355200,\r\n    150: 40853235313,\r\n    151: 45060624582,\r\n    152: 49686288421,\r\n    153: 54770336324,\r\n    154: 60356673280,\r\n    155: 66493182097,\r\n    156: 73232243759,\r\n    157: 80630964769,\r\n    158: 88751778802,\r\n    159: 97662728555,\r\n    160: 107438159466,\r\n    161: 118159068427,\r\n    162: 129913904637,\r\n    163: 142798995930,\r\n    164: 156919475295,\r\n    165: 172389800255,\r\n    166: 189334822579,\r\n    167: 207890420102,\r\n    168: 228204732751,\r\n    169: 250438925115,\r\n    170: 274768617130,\r\n    171: 301384802048,\r\n    172: 330495499613,\r\n    173: 362326859895,\r\n    174: 397125074750,\r\n    175: 435157697830,\r\n    176: 476715857290,\r\n    177: 522115831195,\r\n    178: 571701605655,\r\n    179: 625846753120,\r\n    180: 684957390936,\r\n    181: 749474411781,\r\n    182: 819876908323,\r\n    183: 896684817527,\r\n    184: 980462880430,\r\n    185: 1071823774337,\r\n    186: 1171432692373,\r\n    187: 1280011042268,\r\n    188: 1398341745571,\r\n    189: 1527273599625,\r\n    190: 1667727404093,\r\n    191: 1820701100652,\r\n    192: 1987276856363,\r\n    193: 2168627105469,\r\n    194: 2366022741845,\r\n    195: 2580840212973,\r\n    196: 2814570987591,\r\n    197: 3068829878530,\r\n    198: 3345365983698,\r\n    199: 3646072432125,\r\n    200: 3972999029388,\r\n    201: 4328363658647,\r\n    202: 4714566886083,\r\n    203: 5134205287973,\r\n    204: 5590088317495,\r\n    205: 6085253859260,\r\n    206: 6622987708040,\r\n    207: 7206841706490,\r\n    208: 7840656226137,\r\n    209: 8528581302375,\r\n    210: 9275102575355,\r\n    211: 10085065885767,\r\n    212: 10963707205259,\r\n    213: 11916681236278,\r\n    214: 12950095925895,\r\n    215: 14070545699287,\r\n    216: 15285151248481,\r\n    217: 16601598107914,\r\n    218: 18028182516671,\r\n    219: 19573856161145,\r\n    220: 21248279009367,\r\n    221: 23061871173849,\r\n    222: 25025873760111,\r\n    223: 27152408925615,\r\n    224: 29454549941750,\r\n    225: 31946390696157,\r\n    226: 34643126322519,\r\n    227: 37561133582570,\r\n    228: 40718063627362,\r\n    229: 44132934884255,\r\n    230: 47826239745920,\r\n    231: 51820051838712,\r\n    232: 56138148670947,\r\n    233: 60806135438329,\r\n    234: 65851585970275,\r\n    235: 71304185514919,\r\n    236: 77195892663512,\r\n    237: 83561103925871,\r\n    238: 90436839668817,\r\n    239: 97862933703585,\r\n    240: 105882246722733,\r\n    241: 114540884553038,\r\n    242: 123888443077259,\r\n    243: 133978259344888,\r\n    244: 144867692496445,\r\n    245: 156618412527946,\r\n    246: 169296722391554,\r\n    247: 182973889854026,\r\n    248: 197726516681672,\r\n    249: 213636919820625,\r\n    250: 230793554364681,\r\n    251: 249291451168559,\r\n    252: 269232701252579,\r\n    253: 290726957916112,\r\n    254: 313891991306665,\r\n    255: 338854264248680,\r\n    256: 365749566870782,\r\n    257: 394723676655357,\r\n    258: 425933084409356,\r\n    259: 459545750448675,\r\n    260: 495741934760846,\r\n    261: 534715062908609,\r\n    262: 576672674947168,\r\n    263: 621837416509615,\r\n    264: 670448123060170,\r\n    265: 722760953690372,\r\n    266: 779050629562167,\r\n    267: 839611730366814,\r\n    268: 904760108316360,\r\n    269: 974834369944625,\r\n    270: 1050197489931117,\r\n    271: 1131238503938606,\r\n    272: 1218374349844333,\r\n    273: 1312051800816215,\r\n    274: 1412749565173450,\r\n    275: 1520980492851175,\r\n    276: 1637293969337171,\r\n    277: 1762278433057269,\r\n    278: 1896564103591584,\r\n    279: 2040825852575075,\r\n    280: 2195786311682516,\r\n    281: 2362219145337711,\r\n    282: 2540952590045698,\r\n    283: 2732873183547535,\r\n    284: 2938929793929555,\r\n    285: 3160137867148997,\r\n    286: 3397584011986773,\r\n    287: 3652430836071053,\r\n    288: 3925922161489422,\r\n    289: 4219388528587095,\r\n    290: 4534253126900886,\r\n    291: 4872038056472084,\r\n    292: 5234371069753672,\r\n    293: 5622992691950605,\r\n    294: 6039763882095515,\r\n    295: 6486674127079088,\r\n    296: 6965850144195831,\r\n    297: 7479565078510584,\r\n    298: 8030248384943040,\r\n    299: 8620496275465025,\r\n    300: 9253082936723602,\r\n    301: 9930972392403501,\r\n    302: 10657331232548839,\r\n    303: 11435542077822104,\r\n    304: 12269218019229465,\r\n    305: 13162217895057704,\r\n    306: 14118662665280005,\r\n    307: 15142952738857194,\r\n    308: 16239786535829663,\r\n    309: 17414180133147295,\r\n    310: 18671488299600364,\r\n    311: 20017426762576945,\r\n    312: 21458096037352891,\r\n    313: 23000006655487337,\r\n    314: 24650106150830490,\r\n    315: 26415807633566326,\r\n    316: 28305020340996003,\r\n    317: 30326181989842964,\r\n    318: 32488293351466654,\r\n    319: 34800954869440830,\r\n    320: 37274405776748077,\r\n    321: 39919565526999991,\r\n    322: 42748078035954696,\r\n    323: 45772358543578028,\r\n    324: 49005643635237875,\r\n    325: 52462044228828641,\r\n    326: 56156602112874289,\r\n    327: 60105349839666544,\r\n    328: 64325374609114550,\r\n    329: 68834885946073850,\r\n    330: 73653287861850339,\r\n    331: 78801255302666615,\r\n    332: 84300815636225119,\r\n    333: 90175434980549623,\r\n    334: 96450110192202760,\r\n    335: 103151466321735325,\r\n    336: 110307860425292772,\r\n    337: 117949491546113972,\r\n    338: 126108517833796355,\r\n    339: 134819180623301520,\r\n    340: 144117936527873832,\r\n    341: 154043597379576030,\r\n    342: 164637479165761044,\r\n    343: 175943559810422753,\r\n    344: 188008647052292980,\r\n    345: 200882556287683159,\r\n    346: 214618299743286299,\r\n    347: 229272286871217150,\r\n    348: 244904537455382406,\r\n    349: 261578907351144125,\r\n    350: 279363328483702152,\r\n    351: 298330063062758076,\r\n    352: 318555973788329084,\r\n    353: 340122810048577428,\r\n    354: 363117512048110005,\r\n    355: 387632532919029223,\r\n    356: 413766180933342362,\r\n    357: 441622981929358437,\r\n    358: 471314064268398780,\r\n    359: 502957566506000020,\r\n    360: 536679070310691121,\r\n    361: 572612058898037559,\r\n    362: 610898403751884101,\r\n    363: 651688879997206959,\r\n    364: 695143713458946040,\r\n    365: 741433159884081684,\r\n    366: 790738119649411319,\r\n    367: 843250788562528427,\r\n    368: 899175348396088349,\r\n    369: 958728697912338045,\r\n    370: 1022141228367345362,\r\n    371: 1089657644424399782,\r\n    372: 1161537834849962850,\r\n    373: 1238057794119125085,\r\n    374: 1319510599727473500,\r\n    375: 1406207446561484054,\r\n    376: 1498478743590581081,\r\n    377: 1596675274490756791,\r\n    378: 1701169427975813525,\r\n    379: 1812356499739472950,\r\n    380: 1930656072350465812,\r\n    381: 2056513475336633805,\r\n    382: 2190401332423765131,\r\n    383: 2332821198543892336,\r\n    384: 2484305294265418180,\r\n    385: 2645418340688763701,\r\n    386: 2816759503217942792,\r\n    387: 2998964447736452194,\r\n    388: 3192707518433532826,\r\n    389: 3398704041358160275,\r\n    390: 3617712763867604423,\r\n    391: 3850538434667429186,\r\n    392: 4098034535626594791,\r\n    393: 4361106170762284114,\r\n    394: 4640713124699623515,\r\n    395: 4937873096788191655,\r\n    396: 5253665124416975163,\r\n    397: 5589233202595404488,\r\n    398: 5945790114707874597,\r\n    399: 6324621482504294325,\r\n    400: 6727090051741041926,\r\n    401: 7154640222653942321,\r\n    402: 7608802843339879269,\r\n    403: 8091200276484465581,\r\n    404: 8603551759348655060,\r\n    405: 9147679068859117602,\r\n    406: 9725512513742021729,\r\n    407: 10339097267123947241,\r\n    408: 10990600063775926994,\r\n    409: 11682316277192317780,\r\n    410: 12416677403151190382,\r\n    411: 13196258966925435702,\r\n    412: 14023788883518847344,\r\n    413: 14902156290309948968,\r\n    414: 15834420884488187770,\r\n    415: 16823822787139235544,\r\n    416: 17873792969689876004,\r\n    417: 18987964267331664557,\r\n    418: 20170183018805933659,\r\n    419: 21424521360255636320,\r\n    420: 22755290216580025259,\r\n    421: 24167053021441363961,\r\n    422: 25664640213837714846,\r\n    423: 27253164546230421739,\r\n    424: 28938037257084798150,\r\n    425: 30724985147095051099,\r\n    426: 32620068617410232189,\r\n    427: 34629700713903575934,\r\n    428: 36760667241831527309,\r\n    429: 39020148000237259665,\r\n    430: 41415739207102358378,\r\n    431: 43955477170518116534,\r\n    432: 46647863284229267991,\r\n    433: 49501890409405150715,\r\n    434: 52527070729108240605,\r\n    435: 55733465144636286656,\r\n    436: 59131714309169618645,\r\n    437: 62733071376043079215,\r\n    438: 66549436566966297367,\r\n    439: 70593393646562135510,\r\n    440: 74878248419470886233,\r\n    441: 79418069346443402240,\r\n    442: 84227730407729499781,\r\n    443: 89322956321353645667,\r\n    444: 94720370257893471820,\r\n    445: 100437544171752847604,\r\n    446: 106493051905239118581,\r\n    447: 112906525199196103354,\r\n    448: 119698712782720205954,\r\n    449: 126891542690981418000,\r\n    450: 134508188001572923840,\r\n    451: 142573136155347404229,\r\n    452: 151112262071917313678,\r\n    453: 160152905244553715585,\r\n    454: 169723951046458040965,\r\n    455: 179855916453958267598,\r\n    456: 190581040442651931034,\r\n    457: 201933379285114688629,\r\n    458: 213948907032733069132,\r\n    459: 226665621435831345565,\r\n    460: 240123655613925192081,\r\n    461: 254365395758574199975,\r\n    462: 269435605212954994471,\r\n    463: 285381555241961986287,\r\n    464: 302253162872576636605,\r\n    465: 320103136152993290544,\r\n    466: 338987127249525432549,\r\n    467: 358963893768162876613,\r\n    468: 380095468763120598477,\r\n    469: 402447339861711475160,\r\n    470: 426088638015652413417,\r\n    471: 451092336355096099864,\r\n    472: 477535459708164115593,\r\n    473: 505499305314204629558,\r\n    474: 535069675351607262125,\r\n    475: 566337121865805599675,\r\n    476: 599397204782301852926,\r\n    477: 634350763653787028583,\r\n    478: 671304203896731807232,\r\n    479: 710369798236628238005,\r\n    480: 751666004194993125591,\r\n    481: 795317798414758232180,\r\n    482: 841457028742823649455,\r\n    483: 890222784951928088294,\r\n    484: 941761789114997698055,\r\n    485: 996228806608573411012,\r\n    486: 1053787078862455346513,\r\n    487: 1114608778936426484248,\r\n    488: 1178875491155735802646,\r\n    489: 1246778716001272919665,\r\n    490: 1318520401612270233223,\r\n    491: 1394313503224447816939,\r\n    492: 1474382572040363953132,\r\n    493: 1558964374994977806173,\r\n    494: 1648308547066172438760,\r\n    495: 1742678277747760981187,\r\n    496: 1842351033503159891466,\r\n    497: 1947619317987658064007,\r\n    498: 2058791472042884901563,\r\n    499: 2176192515439287461625,\r\n    500: 2300165032574323995027,\r\n    501: 2431070104309287327876,\r\n    502: 2569288288377098289281,\r\n    503: 2715220650772245313220,\r\n    504: 2869289850802400662045,\r\n    505: 3031941282464413132742,\r\n    506: 3203644275096202070012,\r\n    507: 3384893356244349844341,\r\n    508: 3576209579998154653671,\r\n    509: 3778141924035171537110,\r\n    510: 3991268758958164118300,\r\n    511: 4216199393504640098482,\r\n    512: 4453575699570940947378,\r\n    513: 4704073821002175842062,\r\n    514: 4968405970488126319775,\r\n    515: 5247322318923878793976,\r\n    516: 5541612982013113936133,\r\n    517: 5852110108921301661040,\r\n    518: 6179690078238084808000,\r\n    519: 6525275806549652788115,\r\n    520: 6889839175409542385648,\r\n    521: 7274403582551733377346,\r\n    522: 7680046623716094332553,\r\n    523: 8107902911527474124146,\r\n    524: 8559167038437716736150,\r\n    525: 9035096690829005915201,\r\n    526: 9537015921990240021538,\r\n    527: 10066318591787500106586,\r\n    528: 10624471981512075020731,\r\n    529: 11213020592521695111580,\r\n    530: 11833590138006300416410,\r\n    531: 12487891737367521803652,\r\n    532: 13177726323474524612308,\r\n    533: 13904989273245567335012,\r\n    534: 14671675272840783232475,\r\n    535: 15479883428970761068959,\r\n    536: 16331822638729701493803,\r\n    537: 17229817230617210720599,\r\n    538: 18176312890390861435034,\r\n    539: 19173882885687454484110,\r\n    540: 20225234604409151266221,\r\n    541: 21333216422211708570598,\r\n    542: 22500824915577356165493,\r\n    543: 23731212437346370138355,\r\n    544: 25027695072821279146420,\r\n    545: 26393760995005382968154,\r\n    546: 27833079238879849385687,\r\n    547: 29349508915133986374841,\r\n    548: 30947108885217475101876,\r\n    549: 32630147920163234060900,\r\n    550: 34403115367205050943160,\r\n    551: 36270732348871285128752,\r\n    552: 38237963520943177237554,\r\n    553: 40310029416409244587122,\r\n    554: 42492419404397720872600,\r\n    555: 44790905293907018009131,\r\n    556: 47211555614160398040338,\r\n    557: 49760750604354432757376,\r\n    558: 52445197947746313627407,\r\n    559: 55271949286085137715955,\r\n    560: 58248417552751868050007,\r\n    561: 61382395164161775318496,\r\n    562: 64682073111542943380454,\r\n    563: 68156060996536236172174,\r\n    564: 71813408056839596203570,\r\n    565: 75663625229609055443637,\r\n    566: 79716708303343130521599,\r\n    567: 83983162210640880002321,\r\n    568: 88474026517495817981253,\r\n    569: 93200902166643654187580,\r\n    570: 98175979536033971312388,\r\n    571: 103412067875563710992446,\r\n    572: 108922626189067392956037,\r\n    573: 114721795630860408658491,\r\n    574: 120824433490320564237125,\r\n    575: 127246148840551966562301,\r\n    576: 134003339931725153597473,\r\n    577: 141113233412529912746558,\r\n    578: 148593925468119890197615,\r\n    579: 156464424966082817448060,\r\n    580: 164744698707340387584240,\r\n    581: 173455718882380096095248,\r\n    582: 182619512839056823919887,\r\n    583: 192259215272078129526277,\r\n    584: 202399122950629095580175,\r\n    585: 213064752104884207160129,\r\n    586: 224282898599046831034631,\r\n    587: 236081701023305130945921,\r\n    588: 248490706844586261413858,\r\n    589: 261540941761240642265710,\r\n    590: 275264982414934173206642,\r\n    591: 289697032618827122974972,\r\n    592: 304873003269975366031783,\r\n    593: 320830596120295386610807,\r\n    594: 337609391590065169560935,\r\n    595: 355250940815002702558187,\r\n    596: 373798862128436852709430,\r\n    597: 393298942187883251157044,\r\n    598: 413799241966727832978027,\r\n    599: 435350207840317348270000,\r\n    600: 458004788008144308553622,\r\n    601: 481818554503286362923739,\r\n    602: 506849831053734861481872,\r\n    603: 533159827070679866278987,\r\n    604: 560812778053476538349420,\r\n    605: 589876092712502332463864,\r\n    606: 620420507127059714307352,\r\n    607: 652520246268116112057164,\r\n    608: 686253193233019826880477,\r\n    609: 721701066553229757379480,\r\n    610: 758949605954969709105721,\r\n    611: 798088766967999186006767,\r\n    612: 839212924798226411060795,\r\n    613: 882421087896683264554175,\r\n    614: 927817121679723721849795,\r\n    615: 975509982873756796925504,\r\n    616: 1025613964982134990453294,\r\n    617: 1078248955392080004474789,\r\n    618: 1133540704665979618906662,\r\n    619: 1191621108583631746910145,\r\n    620: 1252628503530795506440909,\r\n    621: 1316707975853817969920561,\r\n    622: 1384011685831426958558879,\r\n    623: 1454699206941558115141676,\r\n    624: 1528937881135168275063375,\r\n    625: 1606903190858354689128371,\r\n    626: 1688779148601189609516729,\r\n    627: 1774758704783877366657989,\r\n    628: 1865044174831202682776536,\r\n    629: 1959847686321528964669495,\r\n    630: 2059391647140527228529479,\r\n    631: 2163909235608484556362424,\r\n    632: 2273644913597837330081136,\r\n    633: 2388854963699932382735982,\r\n    634: 2509808051552031608082535,\r\n    635: 2636785814481962651219075,\r\n    636: 2770083477684418110395121,\r\n    637: 2910010499193691843303014,\r\n    638: 3056891244979232231862474,\r\n    639: 3211065695545980277248740,\r\n    640: 3372890185488482409685019,\r\n    641: 3542738177508596708707874,\r\n    642: 3721001072479541451508397,\r\n    643: 3908089057205582486668934,\r\n    644: 4104431991606013700457110,\r\n    645: 4310480337124871462076948,\r\n    646: 4526706128254173781044298,\r\n    647: 4753603989138067267826945,\r\n    648: 4991692197319220372390544,\r\n    649: 5241513796775816319683700,\r\n    650: 5503637762499727151307095,\r\n    651: 5778660218961559003723580,\r\n    652: 6067205714919484306343541,\r\n    653: 6369928557132709817142929,\r\n    654: 6687514205661440172553650,\r\n    655: 7020680733548749464953877,\r\n    656: 7370180353811425547662139,\r\n    657: 7736801016790889035132284,\r\n    658: 8121368081058512888507057,\r\n    659: 8524746061205131302394950,\r\n    660: 8947840456000332817673697,\r\n    661: 9391599660555044587641517,\r\n    662: 9857016966290401433259592,\r\n    663: 10345132652677367520056676,\r\n    664: 10857036174895938656583295,\r\n    665: 11393868451739000294452939,\r\n    666: 11956824258286445517629485,\r\n    667: 12547154728067493595502055,\r\n    668: 13166169969647255482980383,\r\n    669: 13815241802783448943206160,\r\n    670: 14495806619536377005379418,\r\n    671: 15209368375944215483241988,\r\n    672: 15957501720133631304230773,\r\n    673: 16741855262985451980947171,\r\n    674: 17564154997755650263621500,\r\n    675: 18426207875324210441995136,\r\n    676: 19329905542049511423199336,\r\n    677: 20277228247502764885900784,\r\n    678: 21270248929688765106878025,\r\n    679: 22311137485682880566295780,\r\n    680: 23402165235974892374954302,\r\n    681: 24545709591163085124246501,\r\n    682: 25744258930034131533263392,\r\n    683: 27000417698448800353553865,\r\n    684: 28316911738879831363625420,\r\n    685: 29696593860867277871605321,\r\n    686: 31142449663120060247020395,\r\n    687: 32657603618448918933404658,\r\n    688: 34245325433219728719773420,\r\n    689: 35909036693513349075724695,\r\n    690: 37652317810725762600765183,\r\n    691: 39478915279883795756623331,\r\n    692: 41392749264546866860893416,\r\n    693: 43397921522754943172592795,\r\n    694: 45498723689129703063649450,\r\n    695: 47699645928878027716139269,\r\n    696: 50005385980149860746062163,\r\n    697: 52420858601901549459658530,\r\n    698: 54951205445179608281719072,\r\n    699: 57601805366500810491219000,\r\n    700: 60378285202834474611028659,\r\n    701: 63286531028521032840985510,\r\n    702: 66332699915362724119980694,\r\n    703: 69523232218023552371152320,\r\n    704: 72864864407855341219969825,\r\n    705: 76364642479247406973532354,\r\n    706: 80029935953661656574123574,\r\n    707: 83868452507581852374822598,\r\n    708: 87888253251761884175130183,\r\n    709: 92097768690318501305952845,\r\n    710: 96505815389469697877049934,\r\n    711: 101121613386982294887579670,\r\n    712: 105954804374756131323439197,\r\n    713: 111015470688345108146850290,\r\n    714: 116314155138696524440183805,\r\n    715: 121861881722882938654960142,\r\n    716: 127670177252209281782740521,\r\n    717: 133751093937700984130081285,\r\n    718: 140117232974725477106760252,\r\n    719: 146781769170263852819573505,\r\n    720: 153758476658245881594406593,\r\n    721: 161061755750279477635534762,\r\n    722: 168706660971164630122439117,\r\n    723: 176708930330666271859881567,\r\n    724: 185085015885255746880625875,\r\n    725: 193852115645795752984189381,\r\n    726: 203028206889569986197651315,\r\n    727: 212632080937520072186590492,\r\n    728: 222683379460186024851577401,\r\n    729: 233202632378520643600875145,\r\n    730: 244211297428606706709925517,\r\n    731: 255731801462210865865001525,\r\n    732: 267787583558210323920375877,\r\n    733: 280403140023083872114273884,\r\n    734: 293604071362025285843562670,\r\n    735: 307417131305664218954016427,\r\n    736: 321870277981032622582593573,\r\n    737: 336992727319136467572139095,\r\n    738: 352815008795455957133215652,\r\n    739: 369369023603738655757458075,\r\n    740: 386688105367749941220651375,\r\n    741: 404807083500032850651734059,\r\n    742: 423762349321394151918928481,\r\n    743: 443591925059596733749014862,\r\n    744: 464335535850798483634138280,\r\n    745: 486034684872448271784326296,\r\n    746: 508732731741838107613602755,\r\n    747: 532474974320122372524707631,\r\n    748: 557308734067567635805394638,\r\n    749: 583283445101886813536239875,\r\n    750: 610450747117966916191771809,\r\n    751: 638864582333908382360557376,\r\n    752: 668581296635294279311393900,\r\n    753: 699659745096778286894322787,\r\n    754: 732161402067670820574405230,\r\n    755: 766150476015982127183457373,\r\n    756: 801694029333610862568750951,\r\n    757: 838862103313805798709299373,\r\n    758: 877727848520950325159242658,\r\n    759: 918367660781873199488134935,\r\n    760: 960861323037560814483873080,\r\n    761: 1005292153304074193879898920,\r\n    762: 1051747159001957690209588887,\r\n    763: 1100317197924192833923669753,\r\n    764: 1151097146124113726578727360,\r\n    765: 1204186073016375022219516992,\r\n    766: 1259687423996378387111229150,\r\n    767: 1317709210896221493178043552,\r\n    768: 1378364210608578997366598385,\r\n    769: 1441770172223648126550509165,\r\n    770: 1508050033038752490738311726,\r\n    771: 1577332143815074048889599022,\r\n    772: 1649750503671651735806603894,\r\n    773: 1725445005022910006140645612,\r\n    774: 1804561688982956164492944650,\r\n    775: 1887253011677361609828822380,\r\n    776: 1973678121921532286407950000,\r\n    777: 2064003150743712843868729636,\r\n    778: 2158401513250589964731360493,\r\n    779: 2257054223353982965849642005,\r\n    780: 2360150221898687182164777966,\r\n    781: 2467886718753771981901721670,\r\n    782: 2580469549453004933593920862,\r\n    783: 2698113546994164480174756373,\r\n    784: 2821042929432312216467202070,\r\n    785: 2949491703928193388274450292,\r\n    786: 3083704087940340693022764503,\r\n    787: 3223934948277725160271634798,\r\n    788: 3370450258759473520427114109,\r\n    789: 3523527577258789108163787100,\r\n    790: 3683456542940343404363084600,\r\n    791: 3850539394533563994343413787,\r\n    792: 4025091510519029370421431033,\r\n    793: 4207441972141088280734057870,\r\n    794: 4397934150197476827913759850,\r\n    795: 4596926316595586652827474186,\r\n    796: 4804792281705797515062559743,\r\n    797: 5021922058584382849328869242,\r\n    798: 5248722555182613689484387822,\r\n    799: 5485618295704258477069984050,\r\n    800: 5733052172321422504456911979,\r\n    801: 5991486228508002426815719537,\r\n    802: 6261402475301701333080509487,\r\n    803: 6543303741858946450905285538,\r\n    804: 6837714561722963378455094385,\r\n    805: 7145182096283051986707103605,\r\n    806: 7466277096963606051213804496,\r\n    807: 7801594907743960700949000443,\r\n    808: 8151756509675604512522473567,\r\n    809: 8517409609130970421571757565,\r\n    810: 8899229771588828461969917962,\r\n    811: 9297921602834531195851268718,\r\n    812: 9714219979529959777862768265,\r\n    813: 10148891331187245215547993864,\r\n    814: 10602734975663191221223594155,\r\n    815: 11076584510377034355391142064,\r\n    816: 11571309261543787320061392679,\r\n    817: 12087815793808125625662163707,\r\n    818: 12627049482760689878061744701,\r\n    819: 13189996152918959195978870030,\r\n    820: 13777683783859651786576215682,\r\n    821: 14391184287298069419105856949,\r\n    822: 15031615358023124634594092724,\r\n    823: 15700142401714084441377203063,\r\n    824: 16397980542787591098996821750,\r\n    825: 17126396715550358417594267021,\r\n    826: 17886711842065410771034749979,\r\n    827: 18680303100276877491522988120,\r\n    828: 19508606286081561360311437674,\r\n    829: 20373118273183778133458320225,\r\n    830: 21275399574724765449983360003,\r\n    831: 22217077010838260632179411313,\r\n    832: 23199846486451169343993151122,\r\n    833: 24225475883821531494697782922,\r\n    834: 25295808074486832813101046425,\r\n    835: 26412764055483014097178757689,\r\n    836: 27578346214889968804237171486,\r\n    837: 28794641731961759722351371983,\r\n    838: 30063826117310982372086476080,\r\n    839: 31388166898835484452139885750,\r\n    840: 32770027459303858556350798600,\r\n    841: 34211871031752548278772284453,\r\n    842: 35716264859093977687647313415,\r\n    843: 37285884524590579748861394570,\r\n    844: 38923518460115987806848673270,\r\n    845: 40632072639400673752129300324,\r\n    846: 42414575463747094337180792099,\r\n    847: 44274182847997609942310578598,\r\n    848: 46214183514849300594196193732,\r\n    849: 48238004505931946889525421000,\r\n    850: 50349216918401212177548479675,\r\n    851: 52551541876147039010384562987,\r\n    852: 54848856745079917639394818823,\r\n    853: 57245201602333536237114022805,\r\n    854: 59744785969613964515539259105,\r\n    855: 62351995821331449988466091712,\r\n    856: 65071400878573831543609957267,\r\n    857: 67907762200418949875852866531,\r\n    858: 70866040084540107092698343096,\r\n    859: 73951402289532005957331751320,\r\n    860: 77169232591877674590168543277,\r\n    861: 80525139690988018278755885205,\r\n    862: 84024966476277979232856334449,\r\n    863: 87674799670795146675673859587,\r\n    864: 91480979866491345649258758095,\r\n    865: 95450111966823518214883921610,\r\n    866: 99589076052990565170686659417,\r\n    867: 103905038690755971019484297576,\r\n    868: 108405464695475636367939373595,\r\n    869: 113098129373644577851404473535,\r\n    870: 117991131259998859170817958839,\r\n    871: 123092905369958432777075796052,\r\n    872: 128412236987976529870072690275,\r\n    873: 133958276013169939669531019316,\r\n    874: 139740551884446204479331411000,\r\n    875: 145768989108216487062234772851,\r\n    876: 152053923412691097170490155923,\r\n    877: 158606118553696417431847045996,\r\n    878: 165436783797931931934295220337,\r\n    879: 172557592110602218633091543840,\r\n    880: 179980699075416049556058362840,\r\n    881: 187718762576041099642814429720,\r\n    882: 195784963269243383580949581161,\r\n    883: 204193025881123335512830178821,\r\n    884: 212957241359090878236182734445,\r\n    885: 222092489913497780851227603386,\r\n    886: 231614264984172822820073009257,\r\n    887: 241538698168481624527315178361,\r\n    888: 251882585148964518765460484674,\r\n    889: 262663412660090356154504995095,\r\n    890: 273899386535208029575034561337,\r\n    891: 285609460876378579895067651923,\r\n    892: 297813368391435715163322531331,\r\n    893: 310531651944349233813920512829,\r\n    894: 323785697366761254448562966675,\r\n    895: 337597767580427105501057917306,\r\n    896: 351991038082228660789452118410,\r\n    897: 366989633845435601723754690835,\r\n    898: 382618667692977386826261193199,\r\n    899: 398904280200653395819254517900,\r\n    900: 415873681190459054784114365430,\r\n    901: 433555192876539531087229255477,\r\n    902: 451978294728708525214023001725,\r\n    903: 471173670120985588372050797999,\r\n    904: 491173254835220446432862090800,\r\n    905: 512010287492584845146484412308,\r\n    906: 533719361988531136324395159455,\r\n    907: 556336482009740068071399064008,\r\n    908: 579899117714618242279047917300,\r\n    909: 604446264662056374189988834755,\r\n    910: 630018505076433611630379753807,\r\n    911: 656658071540248718776792346785,\r\n    912: 684408913209287275550344075013,\r\n    913: 713316764648893234122621625751,\r\n    914: 743429217393715213042975617565,\r\n    915: 774795794337240928934816284899,\r\n    916: 807468027061529837515792402675,\r\n    917: 841499536221802614337232047468,\r\n    918: 876946115104959930393838357571,\r\n    919: 913865816485680423486405066750,\r\n    920: 952319042908502961911588247808,\r\n    921: 992368640529229737341624411924,\r\n    922: 1034079996654109332431762911842,\r\n    923: 1077521141120571341397403386532,\r\n    924: 1122762851668802145076610697775,\r\n    925: 1169878763459173895733432737528,\r\n    926: 1218945482896482311379736998403,\r\n    927: 1270042705928112564209840426896,\r\n    928: 1323253340989653981276400185806,\r\n    929: 1378663636778122744608506419570,\r\n    930: 1436363315039845896899358328033,\r\n    931: 1496445708567209282036578487803,\r\n    932: 1559007904605896258842021462474,\r\n    933: 1624150893881942976244820893255,\r\n    934: 1691979725465930503404211099660,\r\n    935: 1762603667699924360130192603237,\r\n    936: 1836136375421380008668856717532,\r\n    937: 1912696063727159213943851080855,\r\n    938: 1992405688530070149968413761596,\r\n    939: 2075393134169954709485716047155,\r\n    940: 2161791408351324312330912522447,\r\n    941: 2251738844689892053427982289844,\r\n    942: 2345379313161090374436414551558,\r\n    943: 2442862438754801545567295092897,\r\n    944: 2544343828652090726779455860435,\r\n    945: 2649985308251720770267133439311,\r\n    946: 2759955166386673475403099789409,\r\n    947: 2874428410083806869907819978392,\r\n    948: 2993587029233173241168779714732,\r\n    949: 3117620271547411926979127053250,\r\n    950: 3246724928206047105940972859506,\r\n    951: 3381105630594468612010288127863,\r\n    952: 3520975158562887897616477410546,\r\n    953: 3666554760646647127956344306190,\r\n    954: 3818074486705953843294627812035,\r\n    955: 3975773533460423034845675035419,\r\n    956: 4139900603411771887815710365915,\r\n    957: 4310714277666637214536144927329,\r\n    958: 4488483403190813123215639907302,\r\n    959: 4673487495046245204241629451110,\r\n    960: 4866017154182911354694265206413,\r\n    961: 5066374501379277964399166419563,\r\n    962: 5274873627947390097986152243705,\r\n    963: 5491841063841846500452896053582,\r\n    964: 5717616263835974099255567733750,\r\n    965: 5952552112453464578853008309794,\r\n    966: 6197015448369619941842104648894,\r\n    967: 6451387609023188709970129910797,\r\n    968: 6716064996207615136996693074302,\r\n    969: 6991459663439386169435859778910,\r\n    970: 7277999925931103886207676505429,\r\n    971: 7576130994027952290703815097177,\r\n    972: 7886315630998429231248733036419,\r\n    973: 8209034836103596418058528755338,\r\n    974: 8544788553903729460741526714750,\r\n    975: 8894096410797147287955714755082,\r\n    976: 9257498479823236816318777820416,\r\n    977: 9635556074800288403768986034253,\r\n    978: 10028852574908795418824727341746,\r\n    979: 10437994280872373856676062879735,\r\n    980: 10863611303931504965592652844878,\r\n    981: 11306358488849924787366667765407,\r\n    982: 11766916372239763961801564990016,\r\n    983: 12245992177539511607834487453052,\r\n    984: 12744320848028628464246059627690,\r\n    985: 13262666119314202551196742822008,\r\n    986: 13801821632778520931079437719552,\r\n    987: 14362612091531863067120268402228,\r\n    988: 14945894460472306341153073892017,\r\n    989: 15552559212113915719970799358900,\r\n    990: 16183531619906475296861224625027,\r\n    991: 16839773100833956878604913215477,\r\n    992: 17522282609145324707635966077022,\r\n    993: 18232098083140097717852712346115,\r\n    994: 18970297947002453464660671155990,\r\n    995: 19738002669751617842096992232436,\r\n    996: 20536376383452971700767593594021,\r\n    997: 21366628562913781584556907794729,\r\n    998: 22230015769169865076825741905555,\r\n    999: 23127843459154899464880444632250,\r\n    1000: 24061467864032622473692149727991,\r\n    1001: 25032297938763929621013218349796,\r\n    1002: 26041797385576000582369625213281,\r\n    1003: 27091486754099167408984061096127,\r\n    1004: 28182945621039436811282417218990,\r\n    1005: 29317814852360484763188469380980,\r\n    1006: 30497798951058731380716134731126,\r\n    1007: 31724668493728872881006491578226,\r\n    1008: 33000262659235183814081519827753,\r\n    1009: 34326491852926110526276105821510,\r\n    1010: 35705340429956356495500048880518,\r\n    1011: 37138869521411924622451440267117,\r\n    1012: 38629219967069644267226780200798,\r\n    1013: 40178615358763694337831877170404,\r\n    1014: 41789365198477765393682507986660,\r\n    1015: 43463868175432916528376380161993,\r\n    1016: 45204615566598118821992112719830,\r\n    1017: 47014194765213080671467587361162,\r\n    1018: 48895292942081479136595740785155,\r\n    1019: 50850700844567331975836762416180,\r\n    1020: 52883316738408211899530127054215,\r\n    1021: 54996150497646497195116039121846,\r\n    1022: 57192327848174163803231700285962,\r\n    1023: 59475094770587936660132803278445,\r\n    1024: 61847822068260244309086870983975,\r\n    1025: 64314010106747559065438412709786,\r\n    1026: 66877293730881687431325192921834,\r\n    1027: 69541447366121616918816177545634,\r\n    1028: 72310390310983979753319152713934,\r\n    1029: 75188192227619293524858181464065,\r\n    1030: 78179078837859260757658669457252,\r\n    1031: 81287437832327804842152878336251,\r\n    1032: 84517825000485590628268677129623,\r\n    1033: 87874970589764795726619149717517,\r\n    1034: 91363785902248291467082481888195,\r\n    1035: 94989370137655453801161398756590,\r\n    1036: 98757017491716010698603869808070,\r\n    1037: 102672224519343960454073227246547,\r\n    1038: 106740697772366151410092496101554,\r\n    1039: 110968361721914939732387042839470,\r\n    1040: 115361366975961956826368092270559,\r\n    1041: 119926098802850790583643914139778,\r\n    1042: 124669185972080868004022654618279,\r\n    1043: 129597509924003418690815024769614,\r\n    1044: 134718214280513689012974236132740,\r\n    1045: 140038714709261994367964528304147,\r\n    1046: 145566709154360370820516947589011,\r\n    1047: 151310188447031979898125505211430,\r\n    1048: 157277447310137702096803724432844,\r\n    1049: 163477095771019024080265786609550,\r\n    1050: 169918070997619096807349078318498,\r\n    1051: 176609649573385253852206425342508,\r\n    1052: 183561460227017093724267411668558,\r\n    1053: 190783497033705025399011223174627,\r\n    1054: 198286133105105766051740791002035,\r\n    1055: 206080134785924286913455951259466,\r\n    1056: 214176676375616994965530422655441,\r\n    1057: 222587355394399185288134561600051,\r\n    1058: 231324208413431926871476886628488,\r\n    1059: 240399727469780275150398352541295,\r\n    1060: 249826877087477024806306436682550,\r\n    1061: 259619111926794902903903858282467,\r\n    1062: 269790395084626208521306859330203,\r\n    1063: 280355217069693265922512204254601,\r\n    1064: 291328615477166797747643128851965,\r\n    1065: 302726195388153340970512449363108,\r\n    1066: 314564150520428320398942429589829,\r\n    1067: 326859285157739328217944658021195,\r\n    1068: 339629036885985812650521091739503,\r\n    1069: 352891500165597792693064105229860,\r\n    1070: 366665450770488753893927654278831,\r\n    1071: 380970371125047658469252263285168,\r\n    1072: 395826476571763477972460354798893,\r\n    1073: 411254742603244027745802489871124,\r\n    1074: 427276933093600703409672633110750,\r\n    1075: 443915629565423279460548833975619,\r\n    1076: 461194261529865886819548193737883,\r\n    1077: 479137137938708024340405275972933,\r\n    1078: 497769479788644748304553495300446,\r\n    1079: 517117453919499510741582247311995,\r\n    1080: 537208208049543370281513128274546,\r\n    1081: 558069907092647074919064078269009,\r\n    1082: 579731770803589829653889090465310,\r\n    1083: 602224112799502127836867703068534,\r\n    1084: 625578381007131993715400129218655,\r\n    1085: 649827199587396195485096741151797,\r\n    1086: 675004412390512738195023734124239,\r\n    1087: 701145127996910209394091171983043,\r\n    1088: 728285766401075776846633724874013,\r\n    1089: 756464107397538946738052845597325,\r\n    1090: 785719340730295196686468011045384,\r\n    1091: 816092118069154575020287144949660,\r\n    1092: 847624606878758096201928227674051,\r\n    1093: 880360546248341702038727418718373,\r\n    1094: 914345304752746677204951178080640,\r\n    1095: 949625940417679322961779585842763,\r\n    1096: 986251262864814583017230902369159,\r\n    1097: 1024271897715020987348060381346241,\r\n    1098: 1063740353330761125682320075116819,\r\n    1099: 1104711089981595892462307006170625,\r\n    1100: 1147240591519695580043346988281283,\r\n    1101: 1191387439655339764253910592315288,\r\n    1102: 1237212390925574690626025966996290,\r\n    1103: 1284778456452494990829233226377379,\r\n    1104: 1334150984591030161739618104847170,\r\n    1105: 1385397746569649033264079085023363,\r\n    1106: 1438589025231051837956193683375282,\r\n    1107: 1493797706983703451005350179037500,\r\n    1108: 1551099377078977592324977502565855,\r\n    1109: 1610572418332734533482318570551190,\r\n    1110: 1672298113414349146588255526290127,\r\n    1111: 1736360750830546535004742869861557,\r\n    1112: 1802847734735894350158767668809929,\r\n    1113: 1871849698706449115822481531031302,\r\n    1114: 1943460623617864164855763103650900,\r\n    1115: 2017777959774244383161311335135412,\r\n    1116: 2094902753439183950276117590000925,\r\n    1117: 2174939777925753277977786731439319,\r\n    1118: 2257997669407716887103312005936867,\r\n    1119: 2344189067619971039484826726136835,\r\n    1120: 2433630761622095504505007624351926,\r\n    1121: 2526443840805024325560621670846260,\r\n    1122: 2622753851327163276606626468293628,\r\n    1123: 2722690958172823755991785784326387,\r\n    1124: 2826390113032612069265970456163500,\r\n    1125: 2933991228212416784843441604124699,\r\n    1126: 3045639356784883554548008634432380,\r\n    1127: 3161484879204764376319516386806829,\r\n    1128: 3281683696617285755657387337131749,\r\n    1129: 3406397431096706053660787897070925,\r\n    1130: 3535793633060536116646611744883745,\r\n    1131: 3670045996113488118329838058723628,\r\n    1132: 3809334579584105681944821254585338,\r\n    1133: 3953846039026223475533484851711932,\r\n    1134: 4103773864966917551549475742004630,\r\n    1135: 4259318630192449100691154502765975,\r\n    1136: 4420688245873885709566584952625897,\r\n    1137: 4588098226844616747507844508037264,\r\n    1138: 4761771966352875646576237849731855,\r\n    1139: 4941941020623653451737160975884815,\r\n    1140: 5128845403576048431946742302750170,\r\n    1141: 5322733892054158457915227866236060,\r\n    1142: 5523864341942100491068450472029219,\r\n    1143: 5732504015546648477080676455520535,\r\n    1144: 5948929920644332374606657683899745,\r\n    1145: 6173429161603651508297858791951031,\r\n    1146: 6406299303007341112943259722223788,\r\n    1147: 6647848746214407376439536432805536,\r\n    1148: 6898397119316930779355317551024978,\r\n    1149: 7158275680962446691834888697663475,\r\n    1150: 7427827738529064471293660118664110,\r\n    1151: 7707409081157399483953096394984678,\r\n    1152: 7997388428160886234821473483000555,\r\n    1153: 8298147893354134143293856722998488,\r\n    1154: 8610083465857701451154337181278065,\r\n    1155: 8933605507957017621037375468973282,\r\n    1156: 9269139270613202791504126859283685,\r\n    1157: 9617125427244236129299819591578718,\r\n    1158: 9978020626416337178370164768812546,\r\n    1159: 10352298064107568778430054733760345,\r\n    1160: 10740448076228572334937735566562385,\r\n    1161: 11142978752109030998555590333304243,\r\n    1162: 11560416569682950887414131083801684,\r\n    1163: 11993307053131181401163436777097233,\r\n    1164: 12442215453765791987839842332792770,\r\n    1165: 12907727454968012800119940123354311,\r\n    1166: 13390449902019461518054086533162960,\r\n    1167: 13891011557695348536983250121102793,\r\n    1168: 14410063884518310798493113995825913,\r\n    1169: 14948281854602503175542820411276425,\r\n    1170: 15506364788049610799716682308517542,\r\n    1171: 16085037220891570656183958875514689,\r\n    1172: 16685049803609043819824168449851071,\r\n    1173: 17307180231290097851615771678718278,\r\n    1174: 17952234206530182283975172821446800,\r\n    1175: 18621046436212348314484589328413725,\r\n    1176: 19314481663345819649385158162679300,\r\n    1177: 20033435735181507108244024178275807,\r\n    1178: 20778836708864920831259413450679734,\r\n    1179: 21551645995930215818617016034137500,\r\n    1180: 22352859546983857840754489692613399,\r\n    1181: 23183509077972665661421886007454584,\r\n    1182: 24044663339478824029548767493555588,\r\n    1183: 24937429430533921473492651656959612,\r\n    1184: 25862954158495203059166455452470495,\r\n    1185: 26822425446580095904068198565803164,\r\n    1186: 27817073790709723558345700246365971,\r\n    1187: 28848173767368633057992125893483779,\r\n    1188: 29917045594246378653834785571179351,\r\n    1189: 31025056745487001593014803461929555,\r\n    1190: 32173623623434883211416744742294747,\r\n    1191: 33364213288829995905464566634140396,\r\n    1192: 34598345251472305106432161856883007,\r\n    1193: 35877593323444056632515580254383154,\r\n    1194: 37203587537049994338271609307035630,\r\n    1195: 38578016129709269105524749061283955,\r\n    1196: 40002627598109003613035027587346239,\r\n    1197: 41479232824008249429294178038617951,\r\n    1198: 43009707274162500911950054844789890,\r\n    1199: 44595993276923101114218051405894000,\r\n    1200: 46240102378152881298913555099661657,\r\n    1201: 47944117779189310556261099429006223,\r\n    1202: 49710196859679394486867802358932901,\r\n    1203: 51540573788206651013836802198036893,\r\n    1204: 53437562223729812777303406841914935,\r\n    1205: 55403558110955564979344325681437822,\r\n    1206: 57441042572873737644094937785113022,\r\n    1207: 59552584903793044889004529388335732,\r\n    1208: 61740845666328821093587961517238033,\r\n    1209: 64008579895911365238424857597692590,\r\n    1210: 66358640416504598253672231293216761,\r\n    1211: 68793981271349892486345394543503614,\r\n    1212: 71317661272679283934970057444157431,\r\n    1213: 73932847674475963853859804733408932,\r\n    1214: 76642819972498112301511348487927130,\r\n    1215: 79450973835924928534740056571220837,\r\n    1216: 82360825175131287067719845184002304,\r\n    1217: 85376014350249959857626768802856615,\r\n    1218: 88500310525337959944194241004565748,\r\n    1219: 91737616173126446538485123122674660,\r\n    1220: 95091971735501962459496140992085663,\r\n    1221: 98567560445040729668418191983592407,\r\n    1222: 102168713313097495533124764187939944,\r\n    1223: 105899914290136190948927875636615483,\r\n    1224: 109765805604181632042444034426405625,\r\n    1225: 113771193283469872120310539095739833,\r\n    1226: 117921052869579803514689801523449638,\r\n    1227: 122220535327540435729044764084697099,\r\n    1228: 126674973159627164610485151798391797,\r\n    1229: 131289886729786527240095013237443045,\r\n    1230: 136070990805862651658706033366694460,\r\n    1231: 141024201327040104811696041691045190,\r\n    1232: 146155642404167375009402954907061316,\r\n    1233: 151471653560883058451095421311451141,\r\n    1234: 156978797223733228787865722354959930,\r\n    1235: 162683866469743733376335192519362494,\r\n    1236: 168593893040195573779320686453020964,\r\n    1237: 174716155629645388794651866300906835,\r\n    1238: 181058188459536679140275000227478496,\r\n    1239: 187627790146061111217741961494883890,\r\n    1240: 194433032872253346998515292619988830,\r\n    1241: 201482271874637706375741021005730181,\r\n    1242: 208784155255090933098578892158986338,\r\n    1243: 216347634128942766400406396453655835,\r\n    1244: 224181973120705296790445342451587490,\r\n    1245: 232296761219203590802475861123264133,\r\n    1246: 240701923004274209788971782007579802,\r\n    1247: 249407730257605432130910077287592727,\r\n    1248: 258424813970713646981839124047488243,\r\n    1249: 267764176763484957967824140618533500,\r\n    1250: 277437205727159975794000686688315348,\r\n    1251: 287455685706103555386947650491244181,\r\n    1252: 297831813033180334721514504126791124,\r\n    1253: 308578209734051855476222280888835192,\r\n    1254: 319707938216222310789920115620477565,\r\n    1255: 331234516459188101998422700026723439,\r\n    1256: 343171933722591949005782567849433641,\r\n    1257: 355534666789845852070090701405470932,\r\n    1258: 368337696765269337188595637416276068,\r\n    1259: 381596526443390734228095202493032600,\r\n    1260: 395327198269680365975835178420652411,\r\n    1261: 409546312912626108164576640399383898,\r\n    1262: 424271048467724485839916892830607059,\r\n    1263: 439519180314644983035319377172158032,\r\n    1264: 455309101649532274915393819410766690,\r\n    1265: 471659844715141371979173526935980437,\r\n    1266: 488591102752254955447569352295355812,\r\n    1267: 506123252696611256922641286254645760,\r\n    1268: 524277378646375504218896129395592376,\r\n    1269: 543075296126019045035073055561928520,\r\n    1270: 562539577173328634024088141916141596,\r\n    1271: 582693576277154906994867051360796655,\r\n    1272: 603561457194424687753064451343608383,\r\n    1273: 625168220675887416175494833282535136,\r\n    1274: 647539733131042629585359752478706350,\r\n    1275: 670702756263704072335812679441391888,\r\n    1276: 694684977710697693392039019806832594,\r\n    1277: 719515042717266582828863521396088515,\r\n    1278: 745222586883866905899271646915240282,\r\n    1279: 771838270020186251303063741763018130,\r\n    1280: 799393811143400700904158178331205389,\r\n    1281: 827922024658910558926936487548336568,\r\n    1282: 857456857763058308684876665745077292,\r\n    1283: 888033429108637280324653641355847207,\r\n    1284: 919688068775347054572190680423598070,\r\n    1285: 952458359588743164917093657911776850,\r\n    1286: 986383179832665621554422059019604497,\r\n    1287: 1021502747401614623677846147487591813,\r\n    1288: 1057858665441074072255055670604124719,\r\n    1289: 1095493969525365696982675003469664810,\r\n    1290: 1134453176424250386882487822532585142,\r\n    1291: 1174782334511180318623311370757902964,\r\n    1292: 1216529075867847432892383159101984374,\r\n    1293: 1259742670141472479018316728428818781,\r\n    1294: 1304474080213136065603158197122179375,\r\n    1295: 1350776019737370796417180820702333527,\r\n    1296: 1398703012615213588677365804960180341,\r\n    1297: 1448311454464961662889458094993182194,\r\n    1298: 1499659676156986538068572255824972432,\r\n    1299: 1552808009481139790520320395733292300,\r\n    1300: 1607818855017534550841511230454411672,\r\n    1301: 1664756752283809987147800849591201736,\r\n    1302: 1723688452234384707674372422071320679,\r\n    1303: 1784682992189681523983975379146100758,\r\n    1304: 1847811773275862853601073393199008865,\r\n    1305: 1913148640458255774876416600453369682,\r\n    1306: 1980769965254371045106648307068906619,\r\n    1307: 2050754731215233987976941410834180457,\r\n    1308: 2123184622266649887649796215921782211,\r\n    1309: 2198144114005025303125952328225613580,\r\n    1310: 2275720568045462559712283145467243327,\r\n    1311: 2356004329523040680859896842728890474,\r\n    1312: 2439088827851495409213115816339495726,\r\n    1313: 2525070680846917026164254568053937634,\r\n    1314: 2614049802327600836872111661056230165,\r\n    1315: 2706129513304814950403979441635984290,\r\n    1316: 2801416656882996994241981980679918559,\r\n    1317: 2900021716991759392273170147031719072,\r\n    1318: 3002058941076075680836616507226015622,\r\n    1319: 3107646466875142011769945929778234485,\r\n    1320: 3216906453424662618200536823961141148,\r\n    1321: 3329965216421699826558324552595808770,\r\n    1322: 3446953368095762574438358199469775528,\r\n    1323: 3568005961734486838351757966808790919,\r\n    1324: 3693262641017091556254336031236632750,\r\n    1325: 3822867794313779335421691039194332368,\r\n    1326: 3956970714114397433384120384166003416,\r\n    1327: 4095725761754986283464866437718755283,\r\n    1328: 4239292537616325490949332681096528358,\r\n    1329: 4387836056974246172531213471126988170,\r\n    1330: 4541526931687319371792477450694975225,\r\n    1331: 4700541557913558825461268913956492487,\r\n    1332: 4865062310053998559115610911870100035,\r\n    1333: 5035277741127427794082646196764289585,\r\n    1334: 5211382789787193810929017395424321210,\r\n    1335: 5393578994197824268512706677957552625,\r\n    1336: 5582074712996280787878705083147454523,\r\n    1337: 5777085353569942323599828874448120571,\r\n    1338: 5978833607890937159258923653545207827,\r\n    1339: 6187549696154203668120613167259109435,\r\n    1340: 6403471618474669930531089742522848797,\r\n    1341: 6626845414907208756853259936695984136,\r\n    1342: 6857925434061555771629308454994509373,\r\n    1343: 7096974610593182332652154711768629954,\r\n    1344: 7344264751860200848154682253520601870,\r\n    1345: 7600076834045756410267481267000412856,\r\n    1346: 7864701308055034793828023244287340980,\r\n    1347: 8138438415506002236313232141990462682,\r\n    1348: 8421598515143296812402544776496284973,\r\n    1349: 8714502420015324706702901500511538625,\r\n    1350: 9017481745765587687202719206979752339,\r\n    1351: 9330879270400591290587334955958115107,\r\n    1352: 9655049305908367725798746534773552348,\r\n    1353: 9990358082113704664098849646925432237,\r\n    1354: 10337184143168612691406936474627379320,\r\n    1355: 10695918757089402353832391602114778863,\r\n    1356: 11066966338764988954966020552846311185,\r\n    1357: 11450744886874712432979257653673465667,\r\n    1358: 11847686435168064074325478460954986607,\r\n    1359: 12258237518573265193633495987026371935,\r\n    1360: 12682859654616659385819889316805008574,\r\n    1361: 13122029840650374087829702479479965035,\r\n    1362: 13576241067401694028191547060980833568,\r\n    1363: 14046002849374084164798517831067165046,\r\n    1364: 14531841772646818920248481411605550560,\r\n    1365: 15034302060637734370093170532411179780,\r\n    1366: 15553946158411737537905952886830918329,\r\n    1367: 16091355336136399592075372322853441977,\r\n    1368: 16647130312305245611392419213169232605,\r\n    1369: 17221891897369251284144496300865473815,\r\n    1370: 17816281658437585657529146257903261665,\r\n    1371: 18430962605729818628447970674590396131,\r\n    1372: 19066619901483662703451906966061889217,\r\n    1373: 19723961592044861669045607586672623550,\r\n    1374: 20403719363889095930868650315257219250,\r\n    1375: 21106649324349767740001100592550916016,\r\n    1376: 21833532807850282420908580590825862986,\r\n    1377: 22585177208464977793681819296712788065,\r\n    1378: 23362416839659197789401547387242312544,\r\n    1379: 24166113822086183031380235679888630795,\r\n    1380: 24997159000346486985219767235597236100,\r\n    1381: 25856472889644547994140059803514309099,\r\n    1382: 26745006653306882839626895694957692242,\r\n    1383: 27663743112157144914230446319916689190,\r\n    1384: 28613697786775039130057416743650633105,\r\n    1385: 29595919973698836617070193875375888205,\r\n    1386: 30611493856665016404478212802210021309,\r\n    1387: 31661539654013410832232951778996345076,\r\n    1388: 32747214803422179685312303680676279243,\r\n    1389: 33869715185174019207110095647396061120,\r\n    1390: 35030276385193261591559928994266853030,\r\n    1391: 36230174999132974647956742131787699078,\r\n    1392: 37470729978831867653000833781535492047,\r\n    1393: 38753304022502786601002774984625192104,\r\n    1394: 40079305010057880061198034072619085310,\r\n    1395: 41450187485020176719746625583516317963,\r\n    1396: 42867454184517379844972195257339462150,\r\n    1397: 44332657618901196005888853882051385939,\r\n    1398: 45847401702584520468158717245312104000,\r\n    1399: 47413343437739346154537960139775251600,\r\n    1400: 49032194652550394774839040691532998261,\r\n    1401: 50705723795773236966373450556265512689,\r\n    1402: 52435757789401123913939450130086135644,\r\n    1403: 54224183941301948277230817879517159495,\r\n    1404: 56072951919745741389655873424027752720,\r\n    1405: 57984075791803952210030966295696158116,\r\n    1406: 59959636127664498822125654803605200455,\r\n    1407: 62001782172971294457628166694777458740,\r\n    1408: 64112734091363688056165357762141754716,\r\n    1409: 66294785279460087023332346767177823090,\r\n    1410: 68550304756601011890673498202891728627,\r\n    1411: 70881739631740035679525259959146526016,\r\n    1412: 73291617649946553739726907624791770380,\r\n    1413: 75782549821062183481895201583751205263,\r\n    1414: 78357233133132880842076215608511229415,\r\n    1415: 81018453353321656721019131504035339537,\r\n    1416: 83769087919092159661630333467319344902,\r\n    1417: 86612108922541440552472192615179632742,\r\n    1418: 89550586190851013626818983550558814889,\r\n    1419: 92587690465918960312381724727166445110,\r\n    1420: 95726696686332376146505918443171660625,\r\n    1421: 98970987374939026118276437676742560264,\r\n    1422: 102324056135379743432459471263142178485,\r\n    1423: 105789511261048976512902596439531532566,\r\n    1424: 109371079460060057837671640558228717300,\r\n    1425: 113072609699904337559514844445146843472,\r\n    1426: 116898077175609399692092533607036637857,\r\n    1427: 120851587405321266865514819340648620862,\r\n    1428: 124937380457358912643772141796859437854,\r\n    1429: 129159835312916652764103424563956670300,\r\n    1430: 133523474368721196662101633251149823925,\r\n    1431: 138032968084085429989744342641002104875,\r\n    1432: 142693139776940493084095678732486636969,\r\n    1433: 147508970573571548730224671300676243591,\r\n    1434: 152485604516930928407097683383484266510,\r\n    1435: 157628353838555246722760639034336216136,\r\n    1436: 162942704399270720489853224525723269795,\r\n    1437: 168434321304033467550147269349447360294,\r\n    1438: 174109054696419141315515890296286539118,\r\n    1439: 179972945738449034728553750103340839325,\r\n    1440: 186032232781617921513478910563182232444,\r\n    1441: 192293357735172557401982780429019456969,\r\n    1442: 198762972637879108865432799270626669004,\r\n    1443: 205447946439712986100137659510287259781,\r\n    1444: 212355372000105810413242676805207816705,\r\n    1445: 219492573309591728816879034317080350983,\r\n    1446: 226867112941909191440813277312570747145,\r\n    1447: 234486799743834826784604048875528356971,\r\n    1448: 242359696770253388472695000770509170206,\r\n    1449: 250494129472202113601016657658116885375,\r\n    1450: 258898694145869442049569648660373941152,\r\n    1451: 267582266650777119653998333871688332247,\r\n    1452: 276554011405631474170238269248906446792,\r\n    1453: 285823390670594346502222808229127105074,\r\n    1454: 295400174124997022998049389765214784995,\r\n    1455: 305294448749801797154111873648107967492,\r\n    1456: 315516629024405747970164359073870491229,\r\n    1457: 326077467447680222173319384811207626600,\r\n    1458: 336988065393447621514574974879775699372,\r\n    1459: 348259884310914705271679879631949049780,\r\n    1460: 359904757280909011630794460361074410538,\r\n    1461: 371934900939102477916959218389244857418,\r\n    1462: 384362927777754206102413138268506970021,\r\n    1463: 397201858837862893052822862772992037235,\r\n    1464: 410465136803989050790556876831592919085,\r\n    1465: 424166639514388116438037562729473373486,\r\n    1466: 438320693899488240621648045435196959242,\r\n    1467: 452942090362151303283202948578566379295,\r\n    1468: 468046097613572904390385124958730619192,\r\n    1469: 483648477979107092056857426409232236010,\r\n    1470: 499765503188744811845488653259134061244,\r\n    1471: 516413970667431889729975411863080081224,\r\n    1472: 533611220340883210895592492267492392503,\r\n    1473: 551375151973035052959106187501778547015,\r\n    1474: 569724243051777714078869714336553502625,\r\n    1475: 588677567240126095472954965375170347997,\r\n    1476: 608254813410517219620274841577537789254,\r\n    1477: 628476305280471269092869681239382035111,\r\n    1478: 649363021668417110482089106581996800736,\r\n    1479: 670936617389064931646215631627734512060,\r\n    1480: 693219444808308092528746108408911793239,\r\n    1481: 716234576078254109447577888083725273959,\r\n    1482: 740005826073621415936329176309708825539,\r\n    1483: 764557776051394742131574284792974302805,\r\n    1484: 789915798056308219059157433980611758115,\r\n    1485: 816106080095422250986408555099636706156,\r\n    1486: 843155652105778433840074131252109568468,\r\n    1487: 871092412739856974449839116812405949463,\r\n    1488: 899945156994323847635597208986502059289,\r\n    1489: 929743604708340998940330812008055415670,\r\n    1490: 960518429958522963981451968247615571768,\r\n    1491: 992301291378458055449596203783102865285,\r\n    1492: 1025124863431572512298240504372933893698,\r\n    1493: 1059022868667002481099668362066093137208,\r\n    1494: 1094030110989052198741424671895432081910,\r\n    1495: 1130182509971758083662737515471154158801,\r\n    1496: 1167517136251048459523457118438435734632,\r\n    1497: 1206072248027988195015615498189010425646,\r\n    1498: 1245887328717627537181110407053143579875,\r\n    1499: 1287003125779035759903231323132670516000,\r\n    1500: 1329461690763193888825263136701886891117,\r\n    1501: 1373306420616547671126845059808771245199,\r\n    1502: 1418582100279183135137313919163744611210,\r\n    1503: 1465334946617783561814630036179107930696,\r\n    1504: 1513612653734759530017526259861629678205,\r\n    1505: 1563464439696213993716384678301014319431,\r\n    1506: 1614941094722713228367155822930278965324,\r\n    1507: 1668095030888183105149797247519563263487,\r\n    1508: 1722980333373639710221714255936544610213,\r\n    1509: 1779652813323895051112691937493275900640,\r\n    1510: 1838170062356853750560836014387165897751,\r\n    1511: 1898591508776536523215092101916644734126,\r\n    1512: 1960978475542532205781057345396110080746,\r\n    1513: 2025394240050193548750246784190116959083,\r\n    1514: 2091904095777554301862779830720186765825,\r\n    1515: 2160575415856657801620130127396601613839,\r\n    1516: 2231477718628751807313395954393627156678,\r\n    1517: 2304682735244622286166458817442330457493,\r\n    1518: 2380264479373211819043135033180865953593,\r\n    1519: 2458299319083597933290739975588639913960,\r\n    1520: 2538866050967394665741511337736337646822,\r\n    1521: 2622045976570688763353306228619701197220,\r\n    1522: 2707922981206731940550655607258234921458,\r\n    1523: 2796583615222784382740474040856321114152,\r\n    1524: 2888117177796744121961996863481080757250,\r\n    1525: 2982615803341503976179051696005120224577,\r\n    1526: 3080174550597354460133578989992600710402,\r\n    1527: 3180891494495199523837557418419727460583,\r\n    1528: 3284867820875874297854866890890114734440,\r\n    1529: 3392207924153452428300151849140308700620,\r\n    1530: 3503019508013107340706503153715459439135,\r\n    1531: 3617413689236849218690486699230663550120,\r\n    1532: 3735505104753300028632631618647052984126,\r\n    1533: 3857412022010595043668172932897782160438,\r\n    1534: 3983256452774513571402317362452698824910,\r\n    1535: 4113164270457046596687344259862579939532,\r\n    1536: 4247265331083807518632379721321456268679,\r\n    1537: 4385693598011986873811172464601561040968,\r\n    1538: 4528587270513945762405321738705440092603,\r\n    1539: 4676088916345038581429933773569294261235,\r\n    1540: 4828345608417856657751813260670405103571,\r\n    1541: 4985509065708793590462102906287902242693,\r\n    1542: 5147735798526653777473353718656776051935,\r\n    1543: 5315187258276961029029844229698454778001,\r\n    1544: 5488029991859677773715074283837789258005,\r\n    1545: 5666435800842220652541448314024017081118,\r\n    1546: 5850581905553958890153341953182905874297,\r\n    1547: 6040651114252811450773802339294340809537,\r\n    1548: 6236831997519121462431059121804263835744,\r\n    1549: 6439319068036685669987130768251283335700,\r\n    1550: 6648312965925656816271400679772663779731,\r\n    1551: 6864020649797022030147590897007762961557,\r\n    1552: 7086655593703494823378002063833638733692,\r\n    1553: 7316437990166946592699616833531354911573,\r\n    1554: 7553594959467950148686513765206276332400,\r\n    1555: 7798360765388617440490476800142578927168,\r\n    1556: 8050977037605691145961262617379106893607,\r\n    1557: 8311693000936800120986617647413681760089,\r\n    1558: 8580765711648916968128569908862807858077,\r\n    1559: 8858460301044367459544239649173485609090,\r\n    1560: 9145050226546241655095435675456471213374,\r\n    1561: 9440817530511750873400887128525102883050,\r\n    1562: 9746053107008968945969854946579275550253,\r\n    1563: 10061056976799496323982724378320247274070,\r\n    1564: 10386138570776897699583240005533846228720,\r\n    1565: 10721617022118294111300879958656795681727,\r\n    1566: 11067821467414245473548388055474400555521,\r\n    1567: 11425091357050045737330444087123696839842,\r\n    1568: 11793776775119777282986614097061549565288,\r\n    1569: 12174238769162940693809364157051309012420,\r\n    1570: 12566849690022197996332017608789608083314,\r\n    1571: 12971993542129749223451407990577313551957,\r\n    1572: 13390066344539111423681390555352209300441,\r\n    1573: 13821476503028593889295382128265725457026,\r\n    1574: 14266645193612571525140101316505187638875,\r\n    1575: 14726006757806758281011522810861817647486,\r\n    1576: 15200009110004083021400239371051767831673,\r\n    1577: 15689114157328479953978540694207577474781,\r\n    1578: 16193798232344933888778097136641377589301,\r\n    1579: 16714552539015476523707617004948193446275,\r\n    1580: 17251883612302523293667801378616630723938,\r\n    1581: 17806313791832981004049940595952236488989,\r\n    1582: 18378381710048954709565959117356034045626,\r\n    1583: 18968642795283648606471174187975250526914,\r\n    1584: 19577669790214200898277149916663590160135,\r\n    1585: 20206053286156727802917377116665528100452,\r\n    1586: 20854402273682788549513827814948445887987,\r\n    1587: 21523344710050833153156141436233019518750,\r\n    1588: 22213528103960970088758743797991090055558,\r\n    1589: 22925620118156604193077050587843661667620,\r\n    1590: 23660309190412159054931489112539937306848,\r\n    1591: 24418305173462226026373553546995875617627,\r\n    1592: 25200339994444087406536213435901662689794,\r\n    1593: 26007168334442658312725535116810982082161,\r\n    1594: 26839568328744494665699148030346372021260,\r\n    1595: 27698342288425638399643940633635778570228,\r\n    1596: 28584317443916730715736989648170031498488,\r\n    1597: 29498346711208035625096160181520548669694,\r\n    1598: 30441309481376795323275876211869020871017,\r\n    1599: 31414112434139702720919278494304352579875,\r\n    1600: 32417690376154241824102577250721959572183,\r\n    1601: 33453007104814231206634568834252067530087,\r\n    1602: 34521056298307127650200260789840693447039,\r\n    1603: 35622862432723524773564047600591620474611,\r\n    1604: 36759481727032834297334619181982868193810,\r\n    1605: 37932003116763385216396036596083684144149,\r\n    1606: 39141549257250138871243034824146893141432,\r\n    1607: 40389277557338916599575631087245664105779,\r\n    1608: 41676381244462492794128018619459154745923,\r\n    1609: 43004090462031141893576046232131339283625,\r\n    1610: 44373673400108265833414174147846823131033,\r\n    1611: 45786437460370592180018097454654125762209,\r\n    1612: 47243730456382146639125256475201485557926,\r\n    1613: 48746941850241791637271332996842921594539,\r\n    1614: 50297504026695610706485495279896144769485,\r\n    1615: 51896893605837832676324724372468638684687,\r\n    1616: 53546632795557357169752166455397628534844,\r\n    1617: 55248290784921291361962286829338022618145,\r\n    1618: 57003485179722265948521834701738678421349,\r\n    1619: 58813883481452695155464304054870553436360,\r\n    1620: 60681204611006611632952513664174735563434,\r\n    1621: 62607220478448273296879161314388228250413,\r\n    1622: 64593757600226437608809675150800761682315,\r\n    1623: 66642698765254062321100804776702438717922,\r\n    1624: 68755984751315254218264566880232672144875,\r\n    1625: 70935616093304583685847007991159666098679,\r\n    1626: 73183654904848448867540438473174344075670,\r\n    1627: 75502226754904045590148716826986516533057,\r\n    1628: 77893522600978716067675261669847531834806,\r\n    1629: 80359800780661049649804576562965921695475,\r\n    1630: 82903389063205132690374405132401276101050,\r\n    1631: 85526686762960833261150746165714536727005,\r\n    1632: 88232166916496002397533755182876654157205,\r\n    1633: 91022378525311020523414800627504843113662,\r\n    1634: 93899948866102260607570160618726171594330,\r\n    1635: 96867585870588824684642587049077568806146,\r\n    1636: 99928080576976385190854302771818195507418,\r\n    1637: 103084309655193176038845274579543287624753,\r\n    1638: 106339238008096180814672350296895542938848,\r\n    1639: 109695921450910408688484641855278054316360,\r\n    1640: 113157509471230885841519620824589853318260,\r\n    1641: 116727248071985676199747488789041121983568,\r\n    1642: 120408482699828936375465082551662467674163,\r\n    1643: 124204661261505763907840490901149694071182,\r\n    1644: 128119337230805474780434782661196752002675,\r\n    1645: 132156172848797007097973143732608413596901,\r\n    1646: 136318942420119455804633282594364118870621,\r\n    1647: 140611535708182363299559887896839185406573,\r\n    1648: 145037961432214389489427685180617331098024,\r\n    1649: 149602350869185430852497209043356597608875,\r\n    1650: 154308961563716222079735293780517268790662,\r\n    1651: 159162181149181008424137378091161149008138,\r\n    1652: 164166531283303096726173462843072095335410,\r\n    1653: 169326671701640055015539018518705699850330,\r\n    1654: 174647404392455113639317800019372440640580,\r\n    1655: 180133677896574006306024799468201257241780,\r\n    1656: 185790591735932160859341593488427864239206,\r\n    1657: 191623400974625892978847721669762887224010,\r\n    1658: 197637520916393159778610138707329017740693,\r\n    1659: 203838531942564585384018857484505756167480,\r\n    1660: 210232184494643970555920434333513855824223,\r\n    1661: 216824404205799439501151597527348613503086,\r\n    1662: 223621297185671858108005694276757667011704,\r\n    1663: 230629155463036280733315769829856728366831,\r\n    1664: 237854462590985052006674013310829555807395,\r\n    1665: 245303899419437913541037116166052239846061,\r\n    1666: 252984350039925153650180418719145316631826,\r\n    1667: 260902907907734605017003921684746498516403,\r\n    1668: 269066882146662257820916698151184555362272,\r\n    1669: 277483804041759534527674431707495428212025,\r\n    1670: 286161433725627991209904771339900788624872,\r\n    1671: 295107767063974496251592243518106809957385,\r\n    1672: 304331042746306921569506210339059205494747,\r\n    1673: 313839749587822198745641666552447374489321,\r\n    1674: 323642634048715381224461508374001874352425,\r\n    1675: 333748707977320256428395802157949938763484,\r\n    1676: 344167256583679214774724367914264615318981,\r\n    1677: 354907846650332656774577448740278805781989,\r\n    1678: 365980334987316359577499492665661423156220,\r\n    1679: 377394877138559089794329589034333523822720,\r\n    1680: 389161936347082504011271085636055422264324,\r\n    1681: 401292292786621190557291178310378056588836,\r\n    1682: 413797053067502749043669672231562125696658,\r\n    1683: 426687660024856256094871226711613620285845,\r\n    1684: 439975902797452509721828685778957458838000,\r\n    1685: 453673927205721269316833783775783610703320,\r\n    1686: 467794246437739506976775111608393022209053,\r\n    1687: 482349752052240657962887540925835136720740,\r\n    1688: 497353725307958208396664918548576500570384,\r\n    1689: 512819848828887897371554062220903289550130,\r\n    1690: 528762218615331555088826226879544901167527,\r\n    1691: 545195356410872371074704272735369048924689,\r\n    1692: 562134222435726415975597022642148002675881,\r\n    1693: 579594228497218762288102882601473336765100,\r\n    1694: 597591251488444805746508999799665944566660,\r\n    1695: 616141647286498628873307956507246249662412,\r\n    1696: 635262265061980727342758633558885467930686,\r\n    1697: 654970462011837401470060834112028353314761,\r\n    1698: 675284118527933869908522234215965152162520,\r\n    1699: 696221653814122968723573796976021441661750,\r\n    1700: 717802041964941442478681516751205185010007,\r\n    1701: 740044828519446608929091853958115568986164,\r\n    1702: 762970147504097887787893822256219849371554,\r\n    1703: 786598738978990637725956554797278124357808,\r\n    1704: 810951967102164263980984405643613443347625,\r\n    1705: 836051838727132970358751925465426223753244,\r\n    1706: 861921022549226171951777077723669881527186,\r\n    1707: 888582868816776806015468170319304987709289,\r\n    1708: 916061429623659935353293704664261165680563,\r\n    1709: 944381479800161498529884419450242134471605,\r\n    1710: 973568538419648201851756811932637866236071,\r\n    1711: 1003648890939014757529114525804772812444576,\r\n    1712: 1034649611991404349880377024889805948451966,\r\n    1713: 1066598588850232767185892564930056790115492,\r\n    1714: 1099524545584096492698787529446425808960485,\r\n    1715: 1133457067922710638072138797746330685194571,\r\n    1716: 1168426628854604371943988173648061076656356,\r\n    1717: 1204464614977899904017040550277724793430409,\r\n    1718: 1241603353626116601935133531509635427501801,\r\n    1719: 1279876140791574929056038110412443745546155,\r\n    1720: 1319317269869626093912245397158785002901753,\r\n    1721: 1359962061247603108750056330533001022811146,\r\n    1722: 1401846892763077891420050435782921418973709,\r\n    1723: 1445009231056717653171633051674494164837538,\r\n    1724: 1489487663845762650867366119648959070605125,\r\n    1725: 1535321933144897017630429081796659362863565,\r\n    1726: 1582552969462055408849028210050341395113316,\r\n    1727: 1631222926997501215103529967929557707274660,\r\n    1728: 1681375219875327721201833943152266777825092,\r\n    1729: 1733054559437372469717283290044275542482740,\r\n    1730: 1786306992630397874710969065930279993530728,\r\n    1731: 1841179941518278501517284167616876198477309,\r\n    1732: 1897722243951848075290887164802970670035779,\r\n    1733: 1955984195429997917538913727371549522655006,\r\n    1734: 2016017592186583869120124322228807307858970,\r\n    1735: 2077875775538691593667272042037771337062872,\r\n    1736: 2141613677532831241625032098057988491948517,\r\n    1737: 2207287867926682588244859017849269988676029,\r\n    1738: 2274956602545091757332316519809900057062533,\r\n    1739: 2344679873050131347512524469147852330603290,\r\n    1740: 2416519458166178053962910323080826683013954,\r\n    1741: 2490538976402136614754617183069000726495038,\r\n    1742: 2566803940314147020741857199436825485292885,\r\n    1743: 2645381812353354350387072647528700656565179,\r\n    1744: 2726342062344598291243970336667065409029860,\r\n    1745: 2809756226643193380147979076327264594704745,\r\n    1746: 2895697969018322254247325865029474629995508,\r\n    1747: 2984243143312953802987213049129995837626487,\r\n    1748: 3075469857931627124375487934417729522202013,\r\n    1749: 3169458542208911724615579730356050273697000,\r\n    1750: 3266292014712865596629588272103919719684547,\r\n    1751: 3366055553539366839888542445766361166135204,\r\n    1752: 3468836968654792543650918885868953010691040,\r\n    1753: 3574726676346161983924385238571158169261725,\r\n    1754: 3683817775839551051322373817401051497424420,\r\n    1755: 3796206128149322537872121900182662159228241,\r\n    1756: 3911990437222503807420937006192549828899684,\r\n    1757: 4031272333444480835500888704164496363681686,\r\n    1758: 4154156459574067047582172896269352052007031,\r\n    1759: 4280750559177948266124532321685590709003370,\r\n    1760: 4411165567636502893727652799725970383582718,\r\n    1761: 4545515705795050750500358651870382988186314,\r\n    1762: 4683918576336696329734155119529513589827658,\r\n    1763: 4826495262955104262123827190438060829061153,\r\n    1764: 4973370432407778155253526316242844344573385,\r\n    1765: 5124672439532710418254508515826522600609941,\r\n    1766: 5280533435313631955425559713040649796775465,\r\n    1767: 5441089478081518530016413892489308199319929,\r\n    1768: 5606480647942507023374562583725669127988521,\r\n    1769: 5776851164524941659873115036048663114937695,\r\n    1770: 5952349508140909502130662763236950728528684,\r\n    1771: 6133128544460338166089749412557583307068767,\r\n    1772: 6319345652798518839604562697210438023241550,\r\n    1773: 6511162858120786446819766577778364926946013,\r\n    1774: 6708746966871038378408979787060247103179750,\r\n    1775: 6912269706733805859936155115580770892194054,\r\n    1776: 7121907870442710074828422368434553047727682,\r\n    1777: 7337843463751340976339671250105665526337260,\r\n    1778: 7560263857685892761905455418833343917244062,\r\n    1779: 7789361945202278758472065509114228369126600,\r\n    1780: 8025336302373932563237571980294779250756300,\r\n    1781: 8268391354240084356595173268406241855198176,\r\n    1782: 8518737545447984082077112629884273268761094,\r\n    1783: 8776591515826329476185591848477738781761689,\r\n    1784: 9042176281031049610986292577509011838783245,\r\n    1785: 9315721418408596645489064435708989370524469,\r\n    1786: 9597463258226012911089716132158337004512929,\r\n    1787: 9887645080421270408475092400425112950304770,\r\n    1788: 10186517317031728481382143156507032880864866,\r\n    1789: 10494337760463026157910800552509870425432010,\r\n    1790: 10811371777765321805152346144711499265489879,\r\n    1791: 11137892531088517813516189325593809889812108,\r\n    1792: 11474181204492965595127263976240658672733891,\r\n    1793: 11820527237297139926370474832027317722017807,\r\n    1794: 12177228564148905369732416163985994571309670,\r\n    1795: 12544591862012275060173347722472359244046903,\r\n    1796: 12922932804266987528897386291108558284524280,\r\n    1797: 13312576322123804564848753689176255125112158,\r\n    1798: 13713856873564166596625513497299706749207160,\r\n    1799: 14127118720018736045636750699617456881311725,\r\n    1800: 14552716211005418005132948684850541312590849,\r\n    1801: 14991014076953676011289439394970540421861988,\r\n    1802: 15442387730448363289492676946827168544596921,\r\n    1803: 15907223576132871507960364168750022280398562,\r\n    1804: 16385919329518164710931105850817769087241385,\r\n    1805: 16878884344951220830025131180984215659580858,\r\n    1806: 17386539953003552219964871974446413826117272,\r\n    1807: 17909319807547825412134603270711842061393357,\r\n    1808: 18447670242798154252456532648116438246904907,\r\n    1809: 19002050640597405466197703977606842321053540,\r\n    1810: 19572933808242837304672225027800498209481360,\r\n    1811: 20160806367149596270203427106156960870472824,\r\n    1812: 20766169152660030143204019897118002904900168,\r\n    1813: 21389537625315443974415368124511782893607123,\r\n    1814: 22031442293915835855052489509763576677617505,\r\n    1815: 22692429150702307814484325155610270148732358,\r\n    1816: 23373060119006260978552660565770602425866730,\r\n    1817: 24073913513719160198707702330267411589158084,\r\n    1818: 24795584514946598972622146485353975132184526,\r\n    1819: 25538685655220618058549873928821959736691905,\r\n    1820: 26303847320654738379516399526912590943781620,\r\n    1821: 27091718266436968469332058999564180929593866,\r\n    1822: 27902966147067146894819024985472934375689121,\r\n    1823: 28738278061756389082181003004910619210874204,\r\n    1824: 29598361115418134291077518460315335403586750,\r\n    1825: 30483942995692340860959609721949330792795099,\r\n    1826: 31395772566456765282571775715588003409132613,\r\n    1827: 32334620478291992350263579043602637456626234,\r\n    1828: 33301279796379969106727880491661424703794769,\r\n    1829: 34296566646329244238310747147664839490574535,\r\n    1830: 35321320878433937019039707727760782467717785,\r\n    1831: 36376406750887666110543978036746824592455791,\r\n    1832: 37462713632488269058784695792011875893039111,\r\n    1833: 38581156725384149030225659607573893303383795,\r\n    1834: 39732677808428507338475836002967756141425565,\r\n    1835: 40918246001723570069537718918088365292496141,\r\n    1836: 42138858552953206373244111655326855421732185,\r\n    1837: 43395541646119076823784928057386091817027588,\r\n    1838: 44689351233312655065605577356497222364030752,\r\n    1839: 46021373890173147491957400810472661489846635,\r\n    1840: 47392727695699507038180086415408337440470086,\r\n    1841: 48804563137103411752378288723762455918172986,\r\n    1842: 50258064040409270440055764682612968116562013,\r\n    1843: 51754448527527040549257397842950059733038281,\r\n    1844: 53294970000543912137117431914902281880953875,\r\n    1845: 54880918154001741201408795026747551723720527,\r\n    1846: 56513620015948521242261975310131861303268895,\r\n    1847: 58194441018574179427502571579696887885537742,\r\n    1848: 59924786099263589386584792985885004002385100,\r\n    1849: 61706100832922923109471297093651456522575000,\r\n    1850: 63539872596459336786702846316806859551222764,\r\n    1851: 65427631766318517268030842666066129833124679,\r\n    1852: 67370952950009825188774721810114716943378422,\r\n    1853: 69371456252574676254257996014226320491002233,\r\n    1854: 71430808578980422724679205565325409535341535,\r\n    1855: 73550724973449352362958820460243849915161295,\r\n    1856: 75732969996760532083864127998517020593740791,\r\n    1857: 77979359142591108905489195759391328910134418,\r\n    1858: 80291760293993362744249170815935430293952943,\r\n    1859: 82672095221134305875868191384112819286758200,\r\n    1860: 85122341121455964860570648618210990142492639,\r\n    1861: 87644532203446685358824902714882088097498633,\r\n    1862: 90240761315246892123800470058435668367783935,\r\n    1863: 92913181619346739765141403639335218061558813,\r\n    1864: 95664008314668029507699782676107535163671365,\r\n    1865: 98495520407358668662814112828386043342039288,\r\n    1866: 101410062531664839123433827120996801871554118,\r\n    1867: 104410046822283945831589672011997862390810762,\r\n    1868: 107497954839640363519148716631132136446924023,\r\n    1869: 110676339549566018509524250906452596245408440,\r\n    1870: 113947827358908961175629034752466582068886470,\r\n    1871: 117315120208635333752283890034504840221064086,\r\n    1872: 120780997726033548383095326244127836720276225,\r\n    1873: 124348319437674093156601079636921240241787962,\r\n    1874: 128020027044824211921357710559027384266649000,\r\n    1875: 131799146763063790207250005304405120478900361,\r\n    1876: 135688791727897158862480183289001251910301886,\r\n    1877: 139692164468205234207238255169848532611147557,\r\n    1878: 143812559449433484718637448310794816419480218,\r\n    1879: 148053365688463686582704780998822076298210405,\r\n    1880: 152418069442171341962802939167993644252844977,\r\n    1881: 156910256971726023650131079907915129924767174,\r\n    1882: 161533617384748818044426030157299715901448409,\r\n    1883: 166291945557499506406187783344043042314534878,\r\n    1884: 171189145139326194380356742395417581059236130,\r\n    1885: 176229231641671815409487530302217850452007387,\r\n    1886: 181416335613995339496338175675291780004357523,\r\n    1887: 186754705909030660706666553292223320927706878,\r\n    1888: 192248713039873061921465120214608474899151280,\r\n    1889: 197902852631451912018290889751846175017276700,\r\n    1890: 203721748969018888548080806839085873409222663,\r\n    1891: 209710158646353589075380551065506324110555541,\r\n    1892: 215872974316462949034790068311792114803360768,\r\n    1893: 222215228547627476999327377660931337519227930,\r\n    1894: 228742097787726004875938672290676073251112495,\r\n    1895: 235458906439851487440117948662414751746035425,\r\n    1896: 242371131052313431017875037233367567350390976,\r\n    1897: 249484404626207844803286441041017222801266718,\r\n    1898: 256804521043823251651497040551112296246458295,\r\n    1899: 264337439621241331244215401011574782781334700,\r\n    1900: 272089289788583262011466359201428623427767364,\r\n    1901: 280066375901447845568248481717977121765830398,\r\n    1902: 288275182187185106927480861934498895209154826,\r\n    1903: 296722377829749335448869068867067104949579464,\r\n    1904: 305414822196978537321624475491324386207138350,\r\n    1905: 314359570214253084228181897886953506729950270,\r\n    1906: 323563877888595040544848710079341268243350278,\r\n    1907: 333035207987381310882223234930566921371066351,\r\n    1908: 342781235875958450915909855966319285240611144,\r\n    1909: 352809855518564809408156722848357746339640390,\r\n    1910: 363129185647086702371268910149149152584766993,\r\n    1911: 373747576102299648025575523786476989131026713,\r\n    1912: 384673614352373402423945044973430693054218643,\r\n    1913: 395916132193550721591800039752382776657876433,\r\n    1914: 407484212638044530444951338680763930621994820,\r\n    1915: 419387196994336597778328640988515637140928750,\r\n    1916: 431634692145202999016827948773519398239274548,\r\n    1917: 444236578028937695571550278721551746219224713,\r\n    1918: 457203015329395575643972370763403591173830810,\r\n    1919: 470544453380630393038248327984084169870052370,\r\n    1920: 484271638292061317700921219995285769876393805,\r\n    1921: 498395621300264386957594139661914904785275330,\r\n    1922: 512927767353652135411965358701027725220931707,\r\n    1923: 527879763936476202951968110645920036905758794,\r\n    1924: 543263630138763896173977941441058199308011100,\r\n    1925: 559091725978980633941148481298313317618632967,\r\n    1926: 575376761986396071222827176058084413124270202,\r\n    1927: 592131809050322598728023510231907577504041350,\r\n    1928: 609370308543590994569721078158344505753246979,\r\n    1929: 627106082727829397306582084065079630894972195,\r\n    1930: 645353345448318619933615779058934561872409372,\r\n    1931: 664126713126409278261223804893870154281524038,\r\n    1932: 683441216057704415059243252710086070145621992,\r\n    1933: 703312310024435417776917212697059694728111811,\r\n    1934: 723755888230689211116144545349876787252027480,\r\n    1935: 744788293569381118983800284897623329523811384,\r\n    1936: 766426331230110600455862693324715237997598939,\r\n    1937: 788687281657286442867926694461098498097562065,\r\n    1938: 811588913868164118077309502293768840003949925,\r\n    1939: 835149499140701056072067990291237777551833530,\r\n    1940: 859387825081405748983159033075649135425638325,\r\n    1941: 884323210083634058665255574996164926064666511,\r\n    1942: 909975518187071057883524303147934812769277935,\r\n    1943: 936365174349429389500998978473009079907862954,\r\n    1944: 963513180141695685953126594506747030515761180,\r\n    1945: 991441129878565264237073831290682236831192947,\r\n    1946: 1020171227196022316757683410004293870517496706,\r\n    1947: 1049726302088348378540247976304143049122065214,\r\n    1948: 1080129828417176195331669321286587690711167057,\r\n    1949: 1111405941905549479818145590739116367242780000,\r\n    1950: 1143579458630301665664240006110545368915059329,\r\n    1951: 1176675894026428898785508782184245465533665048,\r\n    1952: 1210721482417504396219216523662601652136179376,\r\n    1953: 1245743197086563215894590527223118960072913202,\r\n    1954: 1281768770902278683167516719540860443130307320,\r\n    1955: 1318826717515654486899160825985211020969456836,\r\n    1956: 1356946353142870071117550937780046987060960843,\r\n    1957: 1396157818950341697358512735475562356104045295,\r\n    1958: 1436492104058497734745724852296636956267964954,\r\n    1959: 1477981069181214654702422049514025480619599210,\r\n    1960: 1520657470918320177914639277247113472181645153,\r\n    1961: 1564554986719042364085227429425894281463674979,\r\n    1962: 1609708240534768479916261201915809290266567989,\r\n    1963: 1656152829179975566133060952832169077820577902,\r\n    1964: 1703925349420706097654088225457498186848567210,\r\n    1965: 1753063425810487348828764073209783931216955698,\r\n    1966: 1803605739294132404035202382553315081341190088,\r\n    1967: 1855592056600414568536728473961840601327835478,\r\n    1968: 1909063260445175620937659060948648856259756235,\r\n    1969: 1964061380567012302624155966071951926644451875,\r\n    1970: 2020629625618285067432170725261207144994992239,\r\n    1971: 2078812415934808833368620144510853807585221613,\r\n    1972: 2138655417208217715431844885515291279369574680,\r\n    1973: 2200205575085644913617857845505033592721522553,\r\n    1974: 2263511150722025533817142690940119270064496250,\r\n    1975: 2328621757311014594133664064174539456980750339,\r\n    1976: 2395588397621215290008835331658621643021314292,\r\n    1977: 2464463502565134245725579502592034085209328984,\r\n    1978: 2535300970829021467547395315846813198183591546,\r\n    1979: 2608156209592513548223075037746157905702847505,\r\n    1980: 2683086176367779880674969950590007819202341357,\r\n    1981: 2760149421988673761061033114268064448054050548,\r\n    1982: 2839406134781213852952373747778159055380262422,\r\n    1983: 2920918185947567114582770377976676661508796149,\r\n    1984: 3004749176196572544459946686955919368234128060,\r\n    1985: 3090964483654736576896042159262866214940589314,\r\n    1986: 3179631313092546273793802882159493889001969611,\r\n    1987: 3270818746501886244063493400323024051287288941,\r\n    1988: 3364597795061310125684361619251416376860936489,\r\n    1989: 3461041452526908153028282986522280729367368365,\r\n    1990: 3560224750087529486464584716859554522268776125,\r\n    1991: 3662224812724162303217742306542356590926722479,\r\n    1992: 3767120917114346857096063738777247515406335526,\r\n    1993: 3874994551123597548057533501867770741416429535,\r\n    1994: 3985929474926940257994009093217001343955328335,\r\n    1995: 4100011783804831583821441379839563991285227198,\r\n    1996: 4217329972658917930562969936711305445974785514,\r\n    1997: 4337975002294315534109569503386742455494341143,\r\n    1998: 4462040367516348205694592687945941817364967127,\r\n    1999: 4589622167090968789784046573687400867942870250,\r\n    2000: 4720819175619413888601432406799959512200344166,\r\n    2001: 4855732917379000237574365609687488912697273143,\r\n    2002: 4994467742183366148074839035447416380393781644,\r\n    2003: 5137130903316893622770745464235084139384928426,\r\n    2004: 5283832637599517075572081746564260420858901705,\r\n    2005: 5434686247639634059061258993904042430607990074,\r\n    2006: 5589808186334383050291570992756471405633041387,\r\n    2007: 5749318143678144230778676663789672984169195116,\r\n    2008: 5913339135941752405965378691599572441324623941,\r\n    2009: 6081997597286587859405678030809218670282246785,\r\n    2010: 6255423473879432172551153347179787953125682826,\r\n    2011: 6433750320575743037411316728215679204642749660,\r\n    2012: 6617115400240816052275556661314890288999332009,\r\n    2013: 6805659785780163657391920602286596663406217911,\r\n    2014: 6999528464952353007567067145415164276505069670,\r\n    2015: 7198870448039506994791503590601126801607534137,\r\n    2016: 7403838878452687162912842119176262318542314409,\r\n    2017: 7614591146351445269661694564912786246445478891,\r\n    2018: 7831289005358953156344654888013498638339711692,\r\n    2019: 8054098692456299826324570548607480763080403880,\r\n    2020: 8283191051141781691732068101840743191755759916,\r\n    2021: 8518741657943308344041302580996941768179250799,\r\n    2022: 8760930952374403498169602637389577451855415964,\r\n    2023: 9009944370426700552244228695797096011740585251,\r\n    2024: 9265972481694316138437595284729122693073711400,\r\n    2025: 9529211130228034799395854632912272457677896880,\r\n    2026: 9799861579219855238744997642818047729388291567,\r\n    2027: 10078130659621135236933601810787303619515113811,\r\n    2028: 10364230922800330115415428619787879783434758914,\r\n    2029: 10658380797349150440403847607713189208549844510,\r\n    2030: 10960804750148870398245267228037581609577682339,\r\n    2031: 11271733451811500913798689538973402825112404379,\r\n    2032: 11591403946613603138135282386492611425148475178,\r\n    2033: 11920059827043660471886625110700606109457615243,\r\n    2034: 12257951413087152938966999455842406831025654415,\r\n    2035: 12605335936376788660643906067688568691477294599,\r\n    2036: 12962477729338745637101954446070534143126297085,\r\n    2037: 13329648419469265315863347103932314055721954884,\r\n    2038: 13707127128879519866370496154104287110788727040,\r\n    2039: 14095200679250350101462435045670967566714006190,\r\n    2040: 14494163802342243065803242497250145705564482929,\r\n    2041: 14904319356209789989230727462504226498494263931,\r\n    2042: 15325978547273839186092526952960232758544597811,\r\n    2043: 15759461158408637244144834830819680263402565217,\r\n    2044: 16205095783205438232082764786847977319531548455,\r\n    2045: 16663220066578357477963673318612506891057322162,\r\n    2046: 17134180951882656619355889974597586372298980947,\r\n    2047: 17618334934720173062514849536736413843694654543,\r\n    2048: 18116048323611252751541173214616030020513022685,\r\n    2049: 18627697507717313357328883548487129542980353125,\r\n    2050: 19153669231803058848943059805108758933859747374,\r\n    2051: 19694360878632389188479682121479772827588278091,\r\n    2052: 20250180758997203961018562965051517467373563574,\r\n    2053: 20821548409583589567679943310731809893410960813,\r\n    2054: 21408894898885309715106534167513145969112337635,\r\n    2055: 22012663141380091963647773040348591535494857021,\r\n    2056: 22633308220189922777870335143856096247251187948,\r\n    2057: 23271297718452433681930253947266040250043569734,\r\n    2058: 23927112059636485682887466272819725468557276242,\r\n    2059: 24601244857041242112722641487525252331485884885,\r\n    2060: 25294203272724365584159904646608138971697036406,\r\n    2061: 26006508386111487092631615069752229687889047419,\r\n    2062: 26738695572545778772495897103306702147812265676,\r\n    2063: 27491314892043320887814631666080168776331811888,\r\n    2064: 28264931488526992879603605279805458570836160570,\r\n    2065: 29060125999818842393508123538658855855869573724,\r\n    2066: 29877494978678299986437859187588252356283557915,\r\n    2067: 30717651325181215594079225685922159612710890246,\r\n    2068: 31581224730742500897001026737587458361246031363,\r\n    2069: 32468862134093174645484430948409904593113694670,\r\n    2070: 33381228189530831120385246576357623531476650368,\r\n    2071: 34319005747770990684777087747947525376490393829,\r\n    2072: 35282896349735451425203004555804514075824949148,\r\n    2073: 36273620733622647942922713748119798292462316154,\r\n    2074: 37291919355614143333586997222803939193763027250,\r\n    2075: 38338552924580739339245889549713324449360541521,\r\n    2076: 39414302951161293776274047281093717842584188891,\r\n    2077: 40519972311597190003244878215733219997449415843,\r\n    2078: 41656385826715516924455731088372893657996361228,\r\n    2079: 42824390856464396526209228476474575762774879465,\r\n    2080: 44024857910414546084950481401735302373848095782,\r\n    2081: 45258681274652091016547586287700221970008068755,\r\n    2082: 46526779655498859083237494859206365034702358134,\r\n    2083: 47830096840507894753763929606166424148960110424,\r\n    2084: 49169602377193741528342591922356853935149504975,\r\n    2085: 50546292269969157794099110029993948769746687671,\r\n    2086: 51961189695772366269783089381199090558960547606,\r\n    2087: 53415345738881696537662435419712492307334180478,\r\n    2088: 54909840145427572963129830596638040418770704515,\r\n    2089: 56445782098125235102442269204682620745124030885,\r\n    2090: 58024311011765363351557172881384457469348901699,\r\n    2091: 59646597350013928176910703744766844433767270677,\r\n    2092: 61313843464087096107973721257849778294625405081,\r\n    2093: 63027284453881919316292784641070835053831354052,\r\n    2094: 64788189052158817856342546799691255570877518150,\r\n    2095: 66597860532387544551063529093372826237515675728,\r\n    2096: 68457637640884412378329010378860869685804024262,\r\n    2097: 70368895553885073626926030071097479233359907864,\r\n    2098: 72333046860214079886074787715712944920415424984,\r\n    2099: 74351542570229833233029956235268391407949627875,\r\n    2100: 76425873151741373195807749021080021459080291165,\r\n    2101: 78557569593611742891613633197716231871513782517,\r\n    2102: 80748204497781453174729297053600127492388932998,\r\n    2103: 82999393200464827976246067679320326020971457938,\r\n    2104: 85312794923291779902869927934730036659721510375,\r\n    2105: 87690113955187845526792666366851401712801134274,\r\n    2106: 90133100865806117918203480753613859038381596324,\r\n    2107: 92643553751346063460833585063932351673594098859,\r\n    2108: 95223319513616114811576859302283546424619314506,\r\n    2109: 97874295173219406337291510865301717288885200445,\r\n    2110: 100598429217765077170980775830078597915978709260,\r\n    2111: 103397722986031225236603653787203378188231402292,\r\n    2112: 106274232089029868642533106912359104776603150690,\r\n    2113: 109230067868949174578477633685673008965957469120,\r\n    2114: 112267398896973766514395710229044460157179222920,\r\n    2115: 115388452511010134752244464747991318862444784689,\r\n    2116: 118595516394371070307305070689995677519803374830,\r\n    2117: 121890940196500635216372474879596908517840948778,\r\n    2118: 125277137196849491653446187682001921308870438795,\r\n    2119: 128756586013039456106279781429309224204637155235,\r\n    2120: 132331832354485942225817194731144948296095338913,\r\n    2121: 136005490822677526183628341619662696228169437779,\r\n    2122: 139780246759343231332496879136294914183920566235,\r\n    2123: 143658858143770305041408732118198629930850140819,\r\n    2124: 147644157540568270666807354340091712330909224000,\r\n    2125: 151739054099208903158067016467162544501125246216,\r\n    2126: 155946535606706519753573960842521384418556790909,\r\n    2127: 160269670594838620141199867367375227901178121673,\r\n    2128: 164711610503343476443764262455655533446463188624,\r\n    2129: 169275591900568786145109713871008667212574145360,\r\n    2130: 173964938763083984897646967444489323060065487907,\r\n    2131: 178783064815808295968062329270497666350416021621,\r\n    2132: 183733475934247094438727208707795835845879643176,\r\n    2133: 188819772610470713392617031395550078686410106988,\r\n    2134: 194045652484512443040038057363040342445733893240,\r\n    2135: 199414912942906199650168544999618866932966543484,\r\n    2136: 204931453786129197483756438132982529754356479553,\r\n    2137: 210599279966760972657750340621024569609658319243,\r\n    2138: 216422504400217312716806872498425178952708753752,\r\n    2139: 222405350849966070103844047835296998593257719870,\r\n    2140: 228552156889181512949138540918848061266047740791,\r\n    2141: 234867376940844824665120188180587152072518199582,\r\n    2142: 241355585398350637585388084310633650150819331465,\r\n    2143: 248021479828733108998565670865001643954560554353,\r\n    2144: 254869884260680054932039940494913967190530868955,\r\n    2145: 261905752559560083345100350260758248905652921875,\r\n    2146: 269134171891745550301357546978902318483150550307,\r\n    2147: 276560366280573537433149830945908221546675684073,\r\n    2148: 284189700256347954756384460822072399114186994724,\r\n    2149: 292027682602848348780952829894171946286185196525,\r\n    2150: 300079970202875082019467410865495625479979094694,\r\n    2151: 308352371985426287572392634796034918345831989966,\r\n    2152: 316850852977169433649870812195036854291507911207,\r\n    2153: 325581538460939500937426146405250734530774231825,\r\n    2154: 334550718244066724977417207615678241114465752975,\r\n    2155: 343764851039409631696645200323540686552303329604,\r\n    2156: 353230568962043743490045985418104968175497835998,\r\n    2157: 362954682144632903677995273534058279957414924705,\r\n    2158: 372944183474588707707117294510467908715140736065,\r\n    2159: 383206253456204090418195791785818308423831594945,\r\n    2160: 393748265201029751587449904786884268416346918520,\r\n    2161: 404577789549846859589538794509144411672022826612,\r\n    2162: 415702600329676409598230534926593885982499170401,\r\n    2163: 427130679749354783768755297437892949499654467597,\r\n    2164: 438870223937296523272831771890659665602286473475,\r\n    2165: 450929648625159134260052749493609306300370136632,\r\n    2166: 463317594981220971649101966934064855005088490212,\r\n    2167: 476042935597381937471938911243959272191670950572,\r\n    2168: 489114780633797957215706040263930987465371910798,\r\n    2169: 502542484125264022730810437527574105649622691760,\r\n    2170: 516335650453567079927347553251246871212620557984,\r\n    2171: 530504140990139261462232960508189648909724886170,\r\n    2172: 545058080913453988432836606455557467047353067377,\r\n    2173: 560007866205722361999363584087410496745060913524,\r\n    2174: 575364170833565108914383039346175332072363129225,\r\n    2175: 591137954117456209042263051672264094963902965317,\r\n    2176: 607340468294858294890172396576637459876728673686,\r\n    2177: 623983266282097051667127111749751355541610352255,\r\n    2178: 641078209640152242143041148426227499209194350336,\r\n    2179: 658637476749676716333547258428298949880301221655,\r\n    2180: 676673571200691926609848235322274189175428592431,\r\n    2181: 695199330402549141183113024435698489390907024630,\r\n    2182: 714227934419889822186067591088150189762713935508,\r\n    2183: 733772915040486600160233205517764582904605949651,\r\n    2184: 753848165080998028345195047409661205734061410010,\r\n    2185: 774467947936825933802831039011913166290856798904,\r\n    2186: 795646907382423796556925927113569848920749045025,\r\n    2187: 817400077628568283525440629036885986580578161120,\r\n    2188: 839742893643273944545131128461036809985928936965,\r\n    2189: 862691201743203249313515607587263855592485446510,\r\n    2190: 886261270462600715344592984957682094231262687955,\r\n    2191: 910469801706960959527768615813845716032362752763,\r\n    2192: 935333942198826213870111109341848015258586306792,\r\n    2193: 960871295223299296636466125655717340185883228697,\r\n    2194: 987099932681053343467853379878084516482176109430,\r\n    2195: 1014038407456819902258601282188003020164821077713,\r\n    2196: 1041705766111542406799393149921058024912789843193,\r\n    2197: 1070121561906592696806185003711836723976318646033,\r\n    2198: 1099305868168664278558814578725663660095230751347,\r\n    2199: 1129279292004177556899411779284367814322107068750,\r\n    2200: 1160062988372259455129906418328374912794875140516,\r\n    2201: 1191678674525592817234330378465180518007035567938,\r\n    2202: 1224148644828669903250292851179037002332204681842,\r\n    2203: 1257495785963229293609758350537517985043490101070,\r\n    2204: 1291743592530906765707814604565428064732892610835,\r\n    2205: 1326916183063388353539586696826007823016666575690,\r\n    2206: 1363038316450618010620081932775702626766948267742,\r\n    2207: 1400135408797883233268006240578157606704308520406,\r\n    2208: 1438233550722879835539717164127729784341377881813,\r\n    2209: 1477359525104141972742451850876428128946776467300,\r\n    2210: 1517540825292515665993072463432902551892845533240,\r\n    2211: 1558805673797653668641491334803497135876242089678,\r\n    2212: 1601183041461816724044580259727354612842328867083,\r\n    2213: 1644702667133581285344348736857245137869671730074,\r\n    2214: 1689395077854376798567156661483099222514277324220,\r\n    2215: 1735291609571106892437555774714449031725527460139,\r\n    2216: 1782424428388448478757191595009703327418571383436,\r\n    2217: 1830826552374771058174587388568897962322872702465,\r\n    2218: 1880531873935975665104704330318867749822093808655,\r\n    2219: 1931575182771919095318938056959674511017686068185,\r\n    2220: 1983992189430464568754141912398798172706580941262,\r\n    2221: 2037819549474585022525115674537508812727151594151,\r\n    2222: 2093094888278340044956073813211683523416074682898,\r\n    2223: 2149856826467952296650447653773869417501164619869,\r\n    2224: 2208145006024624371311040214176565237134381870625,\r\n    2225: 2268000117066162685610486257867691977952149636083,\r\n    2226: 2329463925324911418747662088887963091854286975547,\r\n    2227: 2392579300339947019867081675868949317697298397221,\r\n    2228: 2457390244381942643492189138307718097264928854677,\r\n    2229: 2523941922129582344692758164350149756471869195790,\r\n    2230: 2592280691116887259141942758496845583141659899537,\r\n    2231: 2662454132971310608073787558386111506684369385813,\r\n    2232: 2734511085462965511444391934177140596906494183587,\r\n    2233: 2808501675385869578994261445169376899379754972068,\r\n    2234: 2884477352292623400907075579322579400861330771315,\r\n    2235: 2962490923104486707892612022451087039141493329190,\r\n    2236: 3042596587619376453548710860694923114675620792521,\r\n    2237: 3124849974940885736970186673957557524827120772983,\r\n    2238: 3209308180852011686602310843936272621314792055526,\r\n    2239: 3296029806157884531966398832249411659082252110525,\r\n    2240: 3385074996022409471869790373849802994298808805690,\r\n    2241: 3476505480324367989101580130555189921672623462046,\r\n    2242: 3570384615059176354982401320439389024740905215964,\r\n    2243: 3666777424813166614813801947045518673161561892966,\r\n    2244: 3765750646337939759592154130429553527537766985115,\r\n    2245: 3867372773253042492891322334008521298830352179629,\r\n    2246: 3971714101905938427653556222571377434088646307540,\r\n    2247: 4078846778418982139592272233327190495676444439866,\r\n    2248: 4188844846953860716858469962505733762730156946697,\r\n    2249: 4301784299224742745702713528067084946594634381000,\r\n    2250: 4417743125292169536796493320206228992803910550343,\r\n    2251: 4536801365670538316236136117174461033288094273661,\r\n    2252: 4659041164782862580763013973003868359053553220232,\r\n    2253: 4784546825797351362566231731168417844332785838733,\r\n    2254: 4913404866881227292111965728061869527659853830530,\r\n    2255: 5045704078908103627757617096847635981526636026359,\r\n    2256: 5181535584656163391837451036356625290841516214407,\r\n    2257: 5320992899535329981545125277691916180855473998805,\r\n    2258: 5464171993882588690437588095807084889323827738187,\r\n    2259: 5611171356865613078294130300389571289206397311350,\r\n    2260: 5762092062035869673687412904560243239930531635515,\r\n    2261: 5917037834573419710379575999541430738890622626340,\r\n    2262: 6076115120266708126452900640242923623341866228338,\r\n    2263: 6239433156271728550695355451490575993085942292134,\r\n    2264: 6407104043696079137218319509378718229702705761905,\r\n    2265: 6579242822054578576274630855578948789533455298734,\r\n    2266: 6755967545644295113522674510292835122483775946206,\r\n    2267: 6937399361888054675782970897485983723264323011797,\r\n    2268: 7123662591696737970806754341094737575112103730614,\r\n    2269: 7314884811901951462222340761939935289641834289395,\r\n    2270: 7511196939811964197947649707463044206175866380723,\r\n    2271: 7712733319945142389521924617582058172801542180874,\r\n    2272: 7919631812996487219317452100595913257543028088576,\r\n    2273: 8132033887094289430962576814720449927838393960827,\r\n    2274: 8350084711405357694774361105408889911972402015300,\r\n    2275: 8573933252148757415018198504928925593185861873742,\r\n    2276: 8803732371079513461579268567498022304249933730391,\r\n    2277: 9039638926505285189617314422998964084970595438542,\r\n    2278: 9281813876900616004271298745383250743059729594527,\r\n    2279: 9530422387184993604151073155371828079705355168950,\r\n    2280: 9785633937732631891816046069641124632254214557235,\r\n    2281: 10047622436183602390848394841406802515973193043806,\r\n    2282: 10316566332127702901769041143039403233989122380996,\r\n    2283: 10592648734734255132957468343310308444321456043571,\r\n    2284: 10876057533402872254341014560334244700946683620780,\r\n    2285: 11166985521512132864360358955503173717957792328653,\r\n    2286: 11465630523345040885726361109312137419668093929920,\r\n    2287: 11772195524272142592252579142228927699835475405262,\r\n    2288: 12086888804275213526126666074714236379441857513978,\r\n    2289: 12409924074896520730686758323108856061617655222490,\r\n    2290: 12741520619700810766902679602920740106349316265795,\r\n    2291: 13081903438339372702369995825105861818651826992639,\r\n    2292: 13431303394307778991751050067148151893379620506077,\r\n    2293: 13789957366491217272065156663906255405414311071587,\r\n    2294: 14158108404593693973445004415760318309772932242370,\r\n    2295: 14536005888549817728742960090051403934327801222156,\r\n    2296: 14923905692020358321733692442892587286459907678047,\r\n    2297: 15322070350075326847761463298913968554265401515217,\r\n    2298: 15730769231170936413643835624649288938501733002618,\r\n    2299: 16150278713529481654471379166675899361510665760775,\r\n    2300: 16580882366033921211442301450921091904365926280416,\r\n    2301: 17022871133751761754598643267756804218108498650480,\r\n    2302: 17476543528205726845562009156571175360531579106807,\r\n    2303: 17942205822511650658087298129211531345495818175057,\r\n    2304: 18420172251507067091174412069974707159021665744880,\r\n    2305: 18910765216997070947078996545777114475682919623589,\r\n    2306: 19414315498247211476154846356983916621521411447697,\r\n    2307: 19931162467856441629277246980513463599759674413041,\r\n    2308: 20461654313146490770914182133145338856645809727187,\r\n    2309: 21006148263207456404192932627622104852595304280970,\r\n    2310: 21565010821742923705373368869534441911701199887419,\r\n    2311: 22138618005861522471365237940368652982888104075000,\r\n    2312: 22727355590965521614482418924663783733921186781149,\r\n    2313: 23331619361890843810727406215610806254135308857160,\r\n    2314: 23951815370456759593096244705083096637451017834880,\r\n    2315: 24588360199587493406897494649744406335205727290057,\r\n    2316: 25241681234172046294108468111219387029991510514102,\r\n    2317: 25912216938832713390963025920891990759428674050912,\r\n    2318: 26600417142777051809706408361950504454660772072685,\r\n    2319: 27306743331912438295458811467722364839525869129400,\r\n    2320: 28031668948406848928849481174161195141360108410956,\r\n    2321: 28775679697884097775242882020060349688803476984805,\r\n    2322: 29539273864446490518541231137563989837057604952179,\r\n    2323: 30322962633722685585711432023667002655631855893969,\r\n    2324: 31127270424143511960418282768032077800615961592375,\r\n    2325: 31952735226653572764265207581869821725011637243487,\r\n    2326: 32799908953071669788426324706615644528794262188810,\r\n    2327: 33669357793318419597396187557448074241909961160527,\r\n    2328: 34561662581734899786701292837993789078148269659948,\r\n    2329: 35477419172721767722086620675579581559062365395875,\r\n    2330: 36417238825934036963035091771377814636876895938849,\r\n    2331: 37381748601272582004301821355152191840543933044480,\r\n    2332: 38371591763919473464910961559285225914454949449279,\r\n    2333: 39387428199670427009917909560877277324279071654230,\r\n    2334: 40429934840823983789090419362572880622618841036000,\r\n    2335: 41499806102893531791299424581039874366426784160676,\r\n    2336: 42597754332414930108684698464207986438238414531147,\r\n    2337: 43724510266129315639709919648795164529190983190550,\r\n    2338: 44880823501827658290753362113015735891775860228025,\r\n    2339: 46067462981150790416506320013365490407603364278280,\r\n    2340: 47285217484645973326080769865489605746387338228688,\r\n    2341: 48534896139388582534016509015707084448606794509814,\r\n    2342: 49817328939485198519236927086579980055136752412153,\r\n    2343: 51133367279782285645165745517535680609133370052296,\r\n    2344: 52483884503112733276871946748564813602003527319855,\r\n    2345: 53869776461420824806590383880147822175719204551469,\r\n    2346: 55291962091114697184508819760614991511857392669436,\r\n    2347: 56751384003004060684283391440819878903446789803099,\r\n    2348: 58249009087189871171927544609837628960380623034142,\r\n    2349: 59785829133281790377677305788784327434428364970750,\r\n    2350: 61362861466328639006942053695686748622617850877171,\r\n    2351: 62981149598856648513992946515066172932792511110884,\r\n    2352: 64641763899420155681002068750650481144652897951882,\r\n    2353: 66345802278079465613952539750862814246981008871159,\r\n    2354: 68094390889230939345801166300675543634997580023495,\r\n    2355: 69888684852224948030989898005576415781403878920995,\r\n    2356: 71729868990218182977254525351745038902483193889528,\r\n    2357: 73619158587717925895914811729724245783180985354842,\r\n    2358: 75557800167287273321320320811040130784252221919060,\r\n    2359: 77547072285891979874115998945868567670402747044445,\r\n    2360: 79588286351381543804941144999617740627898062871643,\r\n    2361: 81682787459609412105690788920445375282931841060492,\r\n    2362: 83831955252709738636327407566454519669269037443061,\r\n    2363: 86037204799060994583504133500298291142599767525961,\r\n    2364: 88299987495479913719532319572840702828357104994815,\r\n    2365: 90621791992202763126914659986946872015595738278003,\r\n    2366: 93004145141224771243446359569837640488487305606833,\r\n    2367: 95448612968582727407224954007027627693270062216153,\r\n    2368: 97956801671180298878693599735216669857785613237715,\r\n    2369: 100530358638770501129135789786132580428696541463525,\r\n    2370: 103170973501725013759939661850158896906366983382795,\r\n    2371: 105880379205235666714568162057607929186246674835477,\r\n    2372: 108660353110609438642727243903401536959027659486124,\r\n    2373: 111512718124334720773264584058717478384571245088082,\r\n    2374: 114439343855613415076071522953096149591716910973500,\r\n    2375: 117442147803070664704054798350668120890654926300513,\r\n    2376: 120523096571371667803183996442776155815729810091602,\r\n    2377: 123684207118493113105268436573489685721321552781151,\r\n    2378: 126927548034415307868377394917913546501247383867613,\r\n    2379: 130255240852020056553944404306572055559539047530145,\r\n    2380: 133669461390998803240347188535274022509125836065110,\r\n    2381: 137172441135595483551688849972013947996581871778170,\r\n    2382: 140766468647028954484433593096055372616292751308832,\r\n    2383: 144453891011460794882135190497537058556764977948995,\r\n    2384: 148237115324395707667015292482470242745754168289775,\r\n    2385: 152118610212423719809411357105042520067307779240520,\r\n    2386: 156100907393235880227548485941067592747534460439448,\r\n    2387: 160186603274868212495995174730244824826286924759060,\r\n    2388: 164378360595152301854136694694118079266206458932708,\r\n    2389: 168678910102375098323537690529566365095195830119715,\r\n    2390: 173091052278175313875346442702502205694341724313429,\r\n    2391: 177617659103729195986746184184236646145304254737028,\r\n    2392: 182261675870304487388520687355584130250935690880972,\r\n    2393: 187026123035288047490867195922886699634867141186408,\r\n    2394: 191914098124819930404162679326110679178204492902970,\r\n    2395: 196928777684194703542432119373410255613845416290627,\r\n    2396: 202073419277219465790162920942761564437025278844409,\r\n    2397: 207351363535747401800832745531222095970123079470866,\r\n    2398: 212766036260635806253027202800291886071043511130893,\r\n    2399: 218320950575408346303872686615815518603736687265550,\r\n    2400: 224019709133932919957689061390552862746031758458304,\r\n    2401: 229866006383458830949778967121025947053151071434926,\r\n    2402: 235863630884390155812442175854014517889393984836232,\r\n    2403: 242016467688206145276344061824939391497289921344319,\r\n    2404: 248328500774974299762177021852107412058234599633660,\r\n    2405: 254803815551937407606287486346848530864431251682411,\r\n    2406: 261446601414692355496335282873363983668020889836360,\r\n    2407: 268261154372515934523018586706764224652758295238166,\r\n    2408: 275251879739431193944393927980843975448015734231456,\r\n    2409: 282423294892647160394499527988292633580813431968720,\r\n    2410: 289780032100044965565638185282633831588088504297253,\r\n    2411: 297326841418424633617945474627449518623223932967198,\r\n    2412: 305068593664268994544312629723329236676843814611957,\r\n    2413: 313010283458824435839645487672681448751536128120719,\r\n    2414: 321157032349342507073515697424466804962980378707300,\r\n    2415: 329514092008371775927573078641257544141430283832310,\r\n    2416: 338086847513035826131406156272669425469096435441169,\r\n    2417: 346880820706280914339971199061511110032851886967137,\r\n    2418: 355901673642125591813707043622534952223283339280101,\r\n    2419: 365155212116994575920151188842851740380508864908970,\r\n    2420: 374647389289270354779812696943359199223073776527524,\r\n    2421: 384384309389248455327267290257609074709972871788879,\r\n    2422: 394372231521736030856900123129107963761511852907062,\r\n    2423: 404617573563588459702218138566029837845857058362469,\r\n    2424: 415126916158535023731030449746058156911457360217500,\r\n    2425: 425907006811702486258611691435747829051036619210903,\r\n    2426: 436964764086304546997571902667823798077679571339689,\r\n    2427: 448307281905025750783203518734071850525930124835870,\r\n    2428: 459941833958690501858441260833172834575927050017497,\r\n    2429: 471875878224871422129752689802003581309719671216145,\r\n    2430: 484117061599156426525236728117223720907832020184888,\r\n    2431: 496673224641860608784678055946833883950031191035725,\r\n    2432: 509552406443037374969583492229383313416835733059701,\r\n    2433: 522762849608713268897451362983651906277382721179854,\r\n    2434: 536313005371342643715460083111040042096768651944785,\r\n    2435: 550211538827551788032090316191702467148009553891765,\r\n    2436: 564467334306317355502338280181042531694130943361929,\r\n    2437: 579089500870801016601654991798984624538203584674550,\r\n    2438: 594087377957141194645081615027313378657219091976058,\r\n    2439: 609470541153583610086244251156702088407546864564250,\r\n    2440: 625248808123415184021445170239142357065496320226974,\r\n    2441: 641432244675250690988723453000798446534275367015717,\r\n    2442: 658031170984308451084537723836848917759126780943929,\r\n    2443: 675056167968400361774985057979390540476824195499264,\r\n    2444: 692518083822452741394297527894579793217444427279865,\r\n    2445: 710428040715467841255717203419691810125435835218542,\r\n    2446: 728797441653931534847387578562876222605215306007682,\r\n    2447: 747637977515770665320414243823232108546943571791584,\r\n    2448: 766961634259063882272862309538971496456501841189299,\r\n    2449: 786780700309812582901493233837104883069651992252500,\r\n    2450: 807107774133183849507621375104362485942528919417094,\r\n    2451: 827955771992745105077858611205558631300937454362243,\r\n    2452: 849337935902320652619232737317794449777545949179711,\r\n    2453: 871267841775213384980863950063063429886904651528812,\r\n    2454: 893759407775650814410526929963928966861696330836200,\r\n    2455: 916826902877433240978780331677009554236212353692084,\r\n    2456: 940484955634883423732306479679700600136395142799772,\r\n    2457: 964748563171321607096873785043308907920748393645865,\r\n    2458: 989633100390417258370972350733200785584553946028102,\r\n    2459: 1015154329415899462551538855668088513315200292902465,\r\n    2460: 1041328409265241672356796753836476758668568608962817,\r\n    2461: 1068171905763073500068056689718618672673472054705623,\r\n    2462: 1095701801700212541420510934836771894810436524644206,\r\n    2463: 1123935507244352919801698227500042488236652668362464,\r\n    2464: 1152890870608594412929146690100187865796230009117415,\r\n    2465: 1182586188984146757378861272237745685156851393567877,\r\n    2466: 1213040219743698104212153283094735988868458164856735,\r\n    2467: 1244272191922094708920237946746471334658921810675089,\r\n    2468: 1276301817981140870474529866246359687648227775992726,\r\n    2469: 1309149305865493979065272921268867078953610074980355,\r\n    2470: 1342835371356799383941072744632607586619060990003342,\r\n    2471: 1377381250733383747666895193431311551421473834674537,\r\n    2472: 1412808713743003709421434478836269410607157240633931,\r\n    2473: 1449140076896329138317020116671377802568526770518725,\r\n    2474: 1486398217089027121199419785627770438512228407175000,\r\n    2475: 1524606585560504203472825372845600976263733665501642,\r\n    2476: 1563789222197560394205351099996482830581156974888244,\r\n    2477: 1603970770191409168676519057930382172908445935119463,\r\n    2478: 1645176491056723265830534175841536314124424257900655,\r\n    2479: 1687432280021576600685684487181671811367617087501755,\r\n    2480: 1730764681797368211260238937556940484156749101230455,\r\n    2481: 1775200906738034957464112810216480762332001678674799,\r\n    2482: 1820768847398085810011063048337611865735620543349686,\r\n    2483: 1867497095499222138016227017428624557231848665351291,\r\n    2484: 1915414959315545554866069359053268627009894091487255,\r\n    2485: 1964552481487597746580633524928622127514294053468578,\r\n    2486: 2014940457275725421793253569605575859047900517862975,\r\n    2487: 2066610453263518227450300026070406061787487374956619,\r\n    2488: 2119594826522328312496888837397949369108992226003579,\r\n    2489: 2173926744248147339669532102906132397617461595649235,\r\n    2490: 2229640203882390293040946390903966696602633829194840,\r\n    2491: 2286770053728415559686499093247615980043870048333375,\r\n    2492: 2345352014075897634933772608434944801289607520822444,\r\n    2493: 2405422698845462573006497019894423614036351120521629,\r\n    2494: 2467019637766297143181469675691820929552138013921170,\r\n    2495: 2530181299099750724441152937967329319658147447405249,\r\n    2496: 2594947112922264451615392923126900249342712365881980,\r\n    2497: 2661357494981285189837685277991457183899724929972336,\r\n    2498: 2729453871138152742649660700418835108908145695065284,\r\n    2499: 2799278702412287477405614444445747930301938442180000,\r\n    2500: 2870875510641352469269629800993561138276373608937244,\r\n    2501: 2944288904772419516055596903431635682611440388817684,\r\n    2502: 3019564607799532159016586951616642980389816614848623,\r\n    2503: 3096749484363431362720513648966835225350796839944705,\r\n    2504: 3175891569029590968434327113853291229809825601961265,\r\n    2505: 3257040095261100652976951554528119114719453404725007,\r\n    2506: 3340245525103334116822171147466786507458445890183988,\r\n    2507: 3425559579597749814517587789768024144026745140376550,\r\n    2508: 3513035269942590955686749126214187667970579050845937,\r\n    2509: 3602726929418680979845445364711401806180203650663725,\r\n    2510: 3694690246098950482357992748748848483474524052004611,\r\n    2511: 3788982296360781887103496312666448565688651771156677,\r\n    2512: 3885661579220719274616818998490729558629719751838590,\r\n    2513: 3984788051511562939333648375836061468352863107532895,\r\n    2514: 4086423163922351728879727101483809741806177963555690,\r\n    2515: 4190629897922231281075551233411026977189480304097898,\r\n    2516: 4297472803589713195797719954967455347047259565521535,\r\n    2517: 4407018038369349240856665212333154882125704077589469,\r\n    2518: 4519333406778376182071537408268876717047377660539309,\r\n    2519: 4634488401086431042999613202320599056013666269808095,\r\n    2520: 4752554242991993841520963249414089899868727306156151\r\n}\r\n\r\n\r\ndef exp_sum(number):\r\n    if number < 0:\r\n        return 0\r\n    return ANSWERS[number]\r\n",
  "54ff3102c1bad923760001f3": "def getCount(inputStr):\r\n    return sum(1 for let in inputStr if let in \"aeiouAEIOU\")\r\n",
  "52b5247074ea613a09000164": "from math import *\n\n\ndef cooking_time(eggs):\n    return 5 * ceil(eggs / 8.0)\n",
  "577bd8d4ae2807c64b00045b": "def declare_winner(fighter1, fighter2, first_attacker):\r\n    cur, opp = (fighter1, fighter2) if first_attacker == fighter1 . name else (\r\n        fighter2, fighter1)\r\n    while cur . health > 0:\r\n    opp . health -= cur . damage_per_attack\r\n    cur, opp = opp, cur\r\n    return opp . name\r\n",
  "554b4ac871d6813a03000035": "def high_and_low(numbers):  # z.\n    nn = [int(s) for s in numbers . split(\" \")]\n    return \"%i %i\" % (max(nn), min(nn))\n",
  "525f50e3b73515a6db000b83": "def create_phone_number(n):\r\n    return \"({}{}{}) {}{}{}-{}{}{}{}\".format(*n)\r\n",
  "53dc54212259ed3d4f00071c": "def sum_array(a):\r\n    return sum(a)\r\n",
  "511f11d355fe575d2c000001": "def two_oldest_ages(ages):\r\n    return sorted(ages)[- 2:]\r\n",
  "57a083a57cb1f31db7000028": "def powers_of_two(n):\r\n    return [2 * * x for x in range(n + 1)]\r\n",
  "5ab6538b379d20ad880000ab": "def area_or_perimeter(l, w):\r\n    return l * w if l == w else (l + w) * 2\r\n",
  "5a420163b6cfd7cde5000077": "import re\n\n\ndef nba_cup(result_sheet, team):\n\n    if not team:\n        return \"\"\n    wins, draws, losses, points, conced = 0, 0, 0, 0, 0\n    for t1, p1, t2, p2 in re . findall(r'(.+?) (\\b[\\d.]+\\b) (.+?) (\\b[\\d.]+\\b)(?:,|$)', result_sheet):\n\n    if '.' in p1 or '.' in p2:\n        return \"Error(float number):{} {} {} {}\" . format(t1, p1, t2, p2)\n\n    if team == t1 or team == t2:\n    ptsTeam, ptsOther = map(int, (p1, p2) if t1 == team else (p2, p1))\n    points += ptsTeam\n    conced += ptsOther\n    if ptsTeam == ptsOther:\n        draws += 1\n    elif ptsTeam < ptsOther:\n        losses += 1\n    else:\n        wins += 1\n    overAllScore = 3 * wins + draws\n    return (\"{}:This team didn't play!\" if not points and not losses else\n            \"{}:W={};D={};L={};Scored={};Conceded={};Points={}\"). format(team, wins, draws, losses, points, conced, overAllScore)\n",
  "57eae65a4321032ce000002d": "def fake_bin(x):\r\n    return '' . join('0' if c < '5' else '1' for c in x)\r\n",
  "57a4d500e298a7952100035d": "def hex_to_dec(s):\r\n    return int(s, 16)\r\n",
  "5596f6e9529e9ab6fb000014": "def shifted_diff(first, second):\r\n    return (second + second). find(first) if len(first) == len(second) else - 1\r\n",
  "5a25ac6ac5e284cfbe000111": "COLORS = set(\"RGB\")\r\n\r\n\r\ndef triangle(row):\r\n    while len(row) > 1:\r\n    row = '' . join(a if a == b else (\r\n        COLORS - {a, b}). pop() for a, b in zip(row, row[1:]))\r\n    return row\r\n",
  "54c27a33fb7da0db0100040e": "import math\n\n\ndef is_square(n):\n    return n > - 1 and math . sqrt(n) % 1 == 0\n",
  "56bc28ad5bdaeb48760009b0": "def remove_char(s):\r\n    return s[1: - 1]\r\n",
  "57a4a3e653ba3346bc000810": "def describeList(lst):\r\n    return [\"empty\", \"singleton\", \"longer\"][min(len(lst), 2)]\r\n",
  "52685f7382004e774f0001f7": "def make_readable(seconds):\r\n    hours, seconds = divmod(seconds, 60 * * 2)\r\n    minutes, seconds = divmod(seconds, 60)\r\n    return '{:02}:{:02}:{:02}' . format(hours, minutes, seconds)\r\n",
  "5239f06d20eeab9deb00049b": "def fibonacci(n):\r\n    if n <= 0:\r\n    return []\r\n    a = 0\r\n    b = 1\r\n    l = [0]\r\n    for i in range(n):\r\n    a, b = b, a + b\r\n    l . append(a)\r\n    return l[0: n]\r\n",
  "5168bb5dfe9a00b126000018": "def solution(str):\r\n    return str[:: - 1]\r\n",
  "557cd6882bfa3c8a9f0000c1": "def get_age(age):\r\n    return int(age[0])\r\n",
  "57eb8fcdf670e99d9b000272": "def high(x):\r\n    return max(x . split(), key=lambda k: sum(ord(c) - 96 for c in k))\r\n",
  "551dd1f424b7a4cdae0001f0": "def whoIsNext(names, r):\r\n    while r > 5:\r\n    r = (r - 4) / 2\r\n    return names[r - 1]\r\n",
  "55edaba99da3a9c84000003b": "def divisible_by(numbers, divisor):\r\n    return [x for x in numbers if x % divisor == 0]\r\n",
  "56dec885c54a926dcd001095": "def opposite(number):\r\n    return - number\r\n",
  "534ea96ebb17181947000ada": "def breakChocolate(n, m):\r\n    return max(n * m - 1, 0)\r\n",
  "56b1f01c247c01db92000076": "def double_char(s):\r\n    return '' . join(c * 2 for c in s)\r\n",
  "55f8a9c06c018a0d6e000132": "def validate_pin(pin):\r\n    return len(pin) in (4, 6) and pin . isdigit()\r\n",
  "55c45be3b2079eccff00010f": "def order(words):\r\n    return ' ' . join(sorted(words . split(), key=lambda w: sorted(w)))\r\n",
  "55ecd718f46fba02e5000029": "def between(a, b):\r\n    return list(range(a, b + 1))\r\n",
  "606efc6a9409580033837dfb": "def plant(seed, water, fert, temp):\r\n    return ('-' * water + seed * fert) * water if temp >= 20 and temp <= 30 else ('-' * water) * water + seed\r\n",
  "5808e2006b65bff35500008f": "def position(alphabet):\r\n    return \"Position of alphabet: {}\" . format(ord(alphabet) - 96)\r\n",
  "54acc128329e634e9a000362": "STATE_TO_COMMANDS = {\r\n    'CLOSED': {\r\n        'APP_PASSIVE_OPEN': 'LISTEN',\r\n        'APP_ACTIVE_OPEN': 'SYN_SENT'\r\n    },\r\n    'LISTEN': {\r\n        'RCV_SYN': 'SYN_RCVD',\r\n        'APP_SEND': 'SYN_SENT',\r\n        'APP_CLOSE': 'CLOSED'\r\n    },\r\n    'SYN_RCVD': {\r\n        'APP_CLOSE': 'FIN_WAIT_1',\r\n        'RCV_ACK': 'ESTABLISHED'\r\n    },\r\n    'SYN_SENT': {\r\n        'RCV_SYN': 'SYN_RCVD',\r\n        'RCV_SYN_ACK': 'ESTABLISHED',\r\n        'APP_CLOSE': 'CLOSED'\r\n    },\r\n    'ESTABLISHED': {\r\n        'APP_CLOSE': 'FIN_WAIT_1',\r\n        'RCV_FIN': 'CLOSE_WAIT'\r\n    },\r\n    'FIN_WAIT_1': {\r\n        'RCV_FIN': 'CLOSING',\r\n        'RCV_FIN_ACK': 'TIME_WAIT',\r\n        'RCV_ACK': 'FIN_WAIT_2'\r\n    },\r\n    'CLOSING': {\r\n        'RCV_ACK': 'TIME_WAIT'\r\n    },\r\n    'FIN_WAIT_2': {\r\n        'RCV_FIN': 'TIME_WAIT'\r\n    },\r\n    'TIME_WAIT': {\r\n        'APP_TIMEOUT': 'CLOSED'\r\n    },\r\n    'CLOSE_WAIT': {\r\n        'APP_CLOSE': 'LAST_ACK'\r\n    },\r\n    'LAST_ACK': {\r\n        'RCV_ACK': 'CLOSED'\r\n    }\r\n}\r\n\r\n\r\ndef traverse_TCP_states(events):\r\n    state = \"CLOSED\"  # initial state, always\r\n    for event in events:\r\n    if event not in STATE_TO_COMMANDS[state]:\r\n    return 'ERROR'\r\n    state = STATE_TO_COMMANDS[state][event]\r\n    return state\r\n",
  "54b42f9314d9229fd6000d9c": "def duplicate_encode(word):\r\n    return \"\" . join([\"(\" if word . lower(). count(c) == 1 else \")\" for c in word . lower()])\r\n",
  "514b92a657cdc65150000006": "def solution(number):\r\n    return sum(x for x in range(number) if x % 3 == 0 or x % 5 == 0)\r\n",
  "526d84b98f428f14a60008da": "def hamming(n):\r\n    bases = [2, 3, 5]\r\n    expos = [0, 0, 0]\r\n    hamms = [1]\r\n    for _ in range(1, n):\r\n    next_hamms = [bases[i] * hamms[expos[i]] for i in range(3)]\r\n    next_hamm = min(next_hamms)\r\n    hamms . append(next_hamm)\r\n    for i in range(3):\r\n    expos[i] += int(next_hamms[i] == next_hamm)\r\n    return hamms[- 1]\r\n",
  "57a1fd2ce298a731b20006a4": "def is_palindrome(s):\r\n    s = s . lower()\r\n    return s == s[:: - 1]\r\n",
  "595519279be6c575b5000016": "def battle(x, y):\r\n\r\n    # Compute x score using Unicode\r\n    x_value = sum(ord(char) - 64 for char in x)\r\n\r\n    # Compute y score using Unicode\r\n    y_value = sum(ord(char) - 64 for char in y)\r\n\r\n    if x_value < y_value:\r\n    return y\r\n    if x_value > y_value:\r\n    return x\r\n    return \"Tie!\"\r\n",
  "55d24f55d7dd296eb9000030": "def summation(num):\r\n    return sum(range(1, num + 1))\r\n",
  "55ca77fa094a2af31f00002a": "la_liga_goals = 43\nchampions_league_goals = 10\ncopa_del_rey_goals = 5\ntotal_goals = la_liga_goals + champions_league_goals + copa_del_rey_goals\n",
  "56676e8fabd2d1ff3000000c": "def find_needle(haystack):\r\n    return f'found the needle at position { haystack . index ( \"needle\" )} '\r\n",
  "55c04b4cc56a697bb0000048": "def scramble(s1, s2):\r\n    for c in set(s2):\r\n    if s1 . count(c) < s2 . count(c):\r\n    return False\r\n    return True\r\n",
  "56f699cd9400f5b7d8000b55": "def fix_the_meerkat(arr):\r\n    return arr[:: - 1]\r\n",
  "5b39e3772ae7545f650000fc": "def remove_duplicate_words(s):\r\n    return ' ' . join(dict . fromkeys(s . split()))\r\n",
  "568d0dd208ee69389d000016": "def rental_car_cost(d):\r\n    result = d * 40\r\n    if d >= 7:\r\n    result -= 50\r\n    elif d >= 3:\r\n    result -= 20\r\n    return result\r\n",
  "515e188a311df01cba000003": "def get_planet_name(id):\r\n    return {\r\n        1: \"Mercury\",\r\n        2: \"Venus\",\r\n        3: \"Earth\",\r\n        4: \"Mars\",\r\n        5: \"Jupiter\",\r\n        6: \"Saturn\",\r\n        7: \"Uranus\",\r\n        8: \"Neptune\",\r\n    }. get(id, None)\r\n",
  "56fe97b3cc08ca00e4000dc9": "def sc(apple):\r\n    for i in apple:\r\n    for j in i:\r\n    if j == \"B\":\r\n    return [apple . index(i), i . index(j)]\r\n",
  "57e76bc428d6fbc2d500036d": "def string_to_array(string):\r\n    return string . split(\" \")\r\n",
  "5263a84ffcadb968b6000513": "from numpy import matrix\n\n\ndef matrix_mult(a, b):\n    return (matrix(a) * matrix(b)). tolist()\n",
  "5208f99aee097e6552000148": "def solution(s):\r\n    return '' . join(' ' + c if c . isupper() else c for c in s)\r\n",
  "55b75fcf67e558d3750000a3": "from operator import mul\r\n\r\n\r\nclass Block (object):\r\n    def __init__(self, dimensions):\r\n    self . dimensions = dimensions\r\n    def get_width(self):\r\n    return self . dimensions[0]\r\n\r\n    def get_length(self):\r\n    return self . dimensions[1]\r\n\r\n    def get_height(self):\r\n    return self . dimensions[2]\r\n\r\n    def get_volume(self):\r\n    return reduce(mul, self . dimensions)\r\n\r\n    def get_surface_area(self):\r\n    w, l, h = self . dimensions\r\n    return 2 * (w * l + l * h + w * h)\r\n",
  "54edbc7200b811e956000556": "def count_sheeps(arrayOfSheeps):\r\n    return arrayOfSheeps . count(True)\r\n",
  "52a89c2ea8ddc5547a000863": "def loop_size(node):\n    turtle, rabbit = node . next, node . next . next\n    # Find a point in the loop. Any point will do!\n    # Since the rabbit moves faster than the turtle\n    # and the kata guarantees a loop, the rabbit will\n    # eventually catch up with the turtle.\n    while turtle != rabbit:\n    turtle = turtle . next\n    rabbit = rabbit . next . next\n    # The turtle and rabbit are now on the same node,\n    # but we know that node is in a loop. So now we\n    # keep the turtle motionless and move the rabbit\n    # until it finds the turtle again, counting the\n    # nodes the rabbit visits in the mean time.\n    count = 1\n    rabbit = rabbit . next\n    while turtle != rabbit:\n    count += 1\n    rabbit = rabbit . next\n    # voila\n    return count\n",
  "5556282156230d0e5e000089": "def DNAtoRNA(dna):\r\n    return dna . replace('T', 'U')\r\n",
  "5899a4b1a6648906fe000113": "def find_routes(routes: list) - > str:\r\n    d = dict(routes)\r\n    res = list(d . keys() - d . values())\r\n    while res[- 1] in d:\r\n        res . append(d[res[- 1]])\r\n    return ', ' . join(res)\r\n",
  "528e95af53dcdb40b5000171": "import math\n\n\ndef factorial(n):\n    if n < 0:\n    return None\n    return math . factorial(n)\n",
  "5aee86c5783bb432cd000018": "def hydrate(drink_string):\r\n    c = sum(int(c) for c in drink_string if c . isdigit())\r\n    return \"{} {} of water\" . format(c, 'glass') if c == 1 else \"{} {} of water\" . format(c, 'glasses')\r\n",
  "5c8bfa44b9d1192e1ebd3d15": "def warn_the_sheep(queue):\r\n    n = len(queue) - queue . index('wolf') - 1\r\n    return f'Oi! Sheep number { n } ! You are about to be eaten by a wolf!' if n else 'Pls go away and stop eating my sheep'\r\n",
  "5769b3802ae6f8e4890009d2": "def remove_every_other(my_list):\r\n    return my_list[:: 2]\r\n",
  "563a631f7cbbc236cf0000c2": "def move(position, roll):\r\n    return position + 2 * roll\r\n",
  "554a44516729e4d80b000012": "def nbMonths(oldCarPrice, newCarPrice, saving, loss):\n    months = 0\n    budget = oldCarPrice\n    while budget < newCarPrice:\n    months += 1\n    if months % 2 == 0:\n    loss += 0.5\n    oldCarPrice *= (100 - loss) / 100\n    newCarPrice *= (100 - loss) / 100\n    budget = saving * months + oldCarPrice\n    return [months, round(budget - newCarPrice)]\n",
  "5839edaa6754d6fec10000a2": "def find_missing_letter(chars):\r\n    n = 0\r\n    while ord(chars[n]) == ord(chars[n + 1]) - 1:\r\n    n += 1\r\n    return chr(1 + ord(chars[n]))\r\n",
  "57eae20f5500ad98e50002c5": "def no_space(x):\r\n    return x . replace(' ', '')\r\n",
  "58261acb22be6e2ed800003a": "def get_volume_of_cuboid(length, width, height):\n    return length * width * height\n    # PEP8: kata function name should use snake_case not mixedCase\n    getVolumeOfCubiod = get_volume_of_cuboid\n",
  "5544c7a5cb454edb3c000047": "def bouncingBall(h, bounce, window):\n    if not 0 < bounce < 1:\n        return - 1\n    count = 0\n    while h > window:\n    count += 1\n    h *= bounce\n    if h > window:\n        count += 1\n    return count or - 1\n",
  "55983863da40caa2c900004e": "import itertools\r\n\r\n\r\ndef next_bigger(n):\r\n    s = list(str(n))\r\n    for i in range(len(s) - 2, - 1, - 1):\r\n    if s[i] < s[i + 1]:\r\n    t = s[i:]\r\n    m = min(filter(lambda x: x > t[0], t))\r\n    t . remove(m)\r\n    t . sort()\r\n    s[i:] = [m] + t\r\n    return int(\"\" . join(s))\r\n    return - 1\r\n",
  "53d40c1e2f13e331fc000c26": "def fib(n):\r\n    if n < 0:\r\n        return (- 1) * * (n % 2 + 1) * fib(- n)\r\n    a = b = x = 1\r\n    c = y = 0\r\n    while n:\r\n    if n % 2 == 0:\r\n    (a, b, c) = (a * a + b * b,\r\n                 a * b + b * c,\r\n                 b * b + c * c)\r\n    n /= 2\r\n    else:\r\n    (x, y) = (a * x + b * y,\r\n              b * x + c * y)\r\n    n -= 1\r\n    return y\r\n",
  "5f0ed36164f2bc00283aed07": "def over_the_road(address, n):\n    ''' \n    Input: address (int, your house number), n (int, length of road in houses) \n    Returns: int, number of the house across from your house. \n    '''\n    # this is as much a math problem as a coding one\n    # if your house is [even/odd], the opposite house will be [odd/even]\n    # highest number on street is 2n\n    # Left side houses are [1, 3, ... 2n-3, 2n-1]\n    # Right side houses are [2n, 2n-2, ... 4, 2]\n    # Sum of opposite house numbers will always be 2n+1\n    return (2 * n + 1 - address)\n",
  "585d7d5adb20cf33cb000235": "def find_uniq(arr):\r\n    a, b = set(arr)\r\n    return a if arr . count(a) == 1 else b\r\n",
  "5592e3bd57b64d00f3000047": "def find_nb(m):\n    n = 1\n    volume = 0\n    while volume < m:\n    volume += n * * 3\n    if volume == m:\n    return n\n    n += 1\n    return - 1\n",
  "55bf01e5a717a0d57e0000ec": "def persistence(n):\r\n    n = str(n)\r\n    count = 0\r\n    while len(n) > 1:\r\n    p = 1\r\n    for i in n:\r\n    p *= int(i)\r\n    n = str(p)\r\n    count += 1\r\n    return count\r\n    # your code\r\n",
  "55fab1ffda3e2e44f00000c6": "def cockroach_speed(s):\r\n    return s / / 0.036\r\n",
  "5813d19765d81c592200001a": "def dont_give_me_five(start, end):\r\n    return sum('5' not in str(i) for i in range(start, end + 1))\r\n",
  "56453a12fcee9a6c4700009c": "def close_compare(a, b, margin=0):\r\n    return 0 if abs(a - b) <= margin else - 1 if b > a else 1\r\n",
  "545afd0761aa4c3055001386": "def take(arr, n):\r\n    return arr[: n]\r\n",
  "598ab63c7367483c890000f4": "def string_task(s):\r\n    return '' . join(f'. { a } ' for a in s . lower() if a not in 'aoyeui')\r\n",
  "57cc975ed542d3148f00015b": "def check(seq, elem):\r\n    return elem in seq\r\n",
  "522551eee9abb932420004a0": "def nth_fib(n):\r\n    a, b = 0, 1\r\n    for i in range(n - 1):\r\n        a, b = b, a + b\r\n    return a\r\n",
  "55225023e1be1ec8bc000390": "def greet(name):\r\n    if name == \"Johnny\":\r\n    return \"Hello, my love!\"\r\n    return \"Hello, {name}!\" . format(name=name)\r\n",
  "577a98a6ae28071780000989": "def minimum(arr):\r\n    return min(arr)\r\n\r\n    def maximum(arr):\r\n    return max(arr)\r\n",
  "5388f0e00b24c5635e000fc6": "def swap_values(args):\r\n    args[0], args[1] = args[1], args[0]\r\n    return args\r\n",
  "5726f813c8dcebf5ed000a6b": "def count_Kprimes(k, start, end):\r\n    return [n for n in range(start, end + 1) if find_k(n) == k]\r\n\r\n    def puzzle(s):\r\n    a = count_Kprimes(1, 0, s)\r\n    b = count_Kprimes(3, 0, s)\r\n    c = count_Kprimes(7, 0, s)\r\n\r\n    return sum(1 for x in a for y in b for z in c if x + y + z == s)\r\n\r\n    def find_k(n):\r\n    res = 0\r\n    i = 2\r\n    while i * i <= n:\r\n    while n % i == 0:\r\n    n / /= i\r\n    res += 1\r\n    i += 1\r\n    if n > 1:\r\n        res += 1\r\n    return res\r\n",
  "55a70521798b14d4750000a4": "def greet(name):\r\n    return f'Hello, { name } how are you doing today?'\r\n",
  "57241e0f440cd279b5000829": "def sum_mul(n, m):\r\n    if m > 0 and n > 0:\r\n    return sum(range(n, m, n))\r\n    else:\r\n    return 'INVALID'\r\n",
  "56d3e702fc231fdf72001779": "def sxore(n):\r\n    return [n, 1, n + 1, 0][n % 4]\r\n",
  "54da5a58ea159efa38000836": "def find_it(seq):\r\n    for i in seq:\r\n    if seq . count(i) % 2 != 0:\r\n    return i\r\n",
  "52e88b39ffb6ac53a400022e": "from ipaddress import IPv4Address\n\n\ndef int32_to_ip(int32):\n    return str(IPv4Address(int32))\n",
  "58fa273ca6d84c158e000052": "def digits(n):\r\n    return len(str(n))\r\n",
  "52f78966747862fc9a0009ae": "import operator\r\n\r\n\r\ndef calc(expr):\r\n    OPERATORS = {'+': operator . add, '-': operator . sub,\r\n                 '*': operator . mul, '/': operator . truediv}\r\n    stack = [0]\r\n    for token in expr . split(\" \"):\r\n    if token in OPERATORS:\r\n    op2, op1 = stack . pop(), stack . pop()\r\n    stack . append(OPERATORS[token](op1, op2))\r\n    elif token:\r\n    stack . append(float(token))\r\n    return stack . pop()\r\n",
  "5861d28f124b35723e00005e": "def zeroFuel(distance_to_pump, mpg, fuel_left):\r\n    return distance_to_pump <= mpg * fuel_left\r\n",
  "5679aa472b8f57fb8c000047": "def find_even_index(arr):\r\n    for i in range(len(arr)):\r\n    if sum(arr[: i]) == sum(arr[i + 1:]):\r\n    return i\r\n    return - 1\r\n",
  "57eaeb9578748ff92a000009": "def sum_mix(arr):\r\n    return sum(map(int, arr))\r\n",
  "555bfd6f9f9f52680f0000c5": "def reverseNumber(n):\r\n    if n < 0:\r\n        return - reverseNumber(- n)\r\n    return int(str(n)[:: - 1])\r\n",
  "5933a1f8552bc2750a0000ed": "def nth_even(n):\r\n    return 2 * (n - 1)\r\n",
  "57a1d5ef7cb1f3db590002af": "def fibonacci(n: int) - > int:\n    \"\"\"Given a positive argument n, returns the nth term of the Fibonacci Sequence. \n    \"\"\"\n    x, y = 0, 1\n    for i in range(n):\n    x, y = y, y + x\n    return x\n",
  "569d488d61b812a0f7000015": "def data_reverse(data):\r\n    res = []\r\n\r\n    for i in range(len(data) - 8, - 1, - 8):\r\n    res . extend(data[i: i + 8])\r\n\r\n    return res\r\n",
  "578aa45ee9fd15ff4600090d": "def sort_array(arr):\r\n    odds = sorted((x for x in arr if x % 2 != 0), reverse=True)\r\n    return [x if x % 2 == 0 else odds . pop() for x in arr]\r\n",
  "55c6126177c9441a570000cc": "def order_weight(_str):\r\n    return ' ' . join(sorted(sorted(_str . split(' ')), key=lambda x: sum(int(c) for c in x)))\r\n",
  "5656b6906de340bd1b0000ac": "def longest(a1, a2):\r\n    return \"\" . join(sorted(set(a1 + a2)))\r\n",
  "551f23362ff852e2ab000037": "def longest_slide_down(p):\r\n    res = p . pop()\r\n    while p:\r\n    tmp = p . pop()\r\n    res = [tmp[i] + max(res[i], res[i + 1]) for i in range(len(tmp))]\r\n    return res . pop()\r\n",
  "59b844528bcb7735560000a0": "def is_nice(arr):\r\n    s = set(arr)\r\n    return bool(arr) and all(n + 1 in s or n - 1 in s for n in s)\r\n",
  "5667e8f4e3f572a8f2000039": "def accum(s):\r\n    return '-' . join(c . upper() + c . lower() * i for i, c in enumerate(s))\r\n",
  "56b7251b81290caf76000978": "def get_last_digit(index):\r\n    a, b = 0, 1\r\n    for _ in range(index):\r\n    a, b = b, (a + b) % 10\r\n    return a\r\n",
  "550554fd08b86f84fe000a58": "def in_array(array1, array2):\r\n    # your code\r\n    res = []\r\n    for a1 in array1:\r\n    for a2 in array2:\r\n    if a1 in a2 and not a1 in res:\r\n    res . append(a1)\r\n    res . sort()\r\n    return res\r\n",
  "55f2b110f61eb01779000053": "def get_sum(a, b):\r\n    return sum(range(min(a, b), max(a, b) + 1))\r\n",
  "52597aa56021e91c93000cb0": "def move_zeros(array):\r\n    for i in array:\r\n    if i == 0:\r\n    array . remove(i)  # Remove the element from the array\r\n    array . append(i)  # Append the element to the end\r\n    return array\r\n",
  "5a2fd38b55519ed98f0000ce": "def multi_table(number):\r\n    return '\\n' . join(f' { i } * { number } = { i * number } ' for i in range(1, 11))\r\n",
  "55688b4e725f41d1e9000065": "def even_fib(m):\n    x, y = 0, 1\n    counter = 0\n    while y < m:\n    if y % 2 == 0:\n    counter += y\n    x, y = y, x + y\n    return counter\n",
  "577bd026df78c19bca0002c0": "def correct(string):\r\n    return string . translate(str . maketrans(\"501\", \"SOI\"))\r\n",
  "576b93db1129fcf2200001e6": "def sum_array(arr):\r\n    if arr == None or len(arr) < 3:\r\n    return 0\r\n    return sum(arr) - max(arr) - min(arr)\r\n",
  "55f73be6e12baaa5900000d4": "def goals(* a):\r\n    return sum(a)\r\n",
  "55ad04714f0b468e8200001c": "def get_char(c):\r\n    return chr(c)\r\n",
  "570a6a46455d08ff8d001002": "def no_boring_zeros(n):\r\n    try:\r\n    return int(str(n). rstrip('0'))\r\n    except ValueError:\r\n    return 0\r\n",
  "5a6663e9fd56cb5ab800008b": "def human_years_cat_years_dog_years(human_years):\n    catYears = 0\n    dogYears = 0\n    if human_years == 1:\n    catYears += 15\n    dogYears += 15\n    return [human_years, catYears, dogYears]\n    elif human_years == 2:\n    catYears += 24\n    dogYears += 24\n    return [human_years, catYears, dogYears]\n    elif human_years > 2:\n    catYears += 24\n    dogYears += 24\n    years = human_years - 2\n    catYears += years * 4\n    dogYears += years * 5\n    return [human_years, catYears, dogYears]\n    return [0, 0, 0]\n",
  "5a07e5b7ffe75fd049000051": "def sorter(textbooks):\r\n    return sorted(textbooks, key=str . lower)\r\n",
  "525a566985a9a47bc8000670": "import numpy as np\r\nd = {\"clockwise\": 3, \"counter-clockwise\": 1}\r\n\r\n\r\ndef rotate(matrix, direction):\r\n    return np . rot90(matrix, d[direction]). tolist()\r\n",
  "57f222ce69e09c3630000212": "def well(x):\r\n    c = x . count('good')\r\n    return 'I smell a series!' if c > 2 else 'Publish!' if c else 'Fail!'\r\n",
  "546e2562b03326a88e000020": "def square_digits(num):\r\n    ret = \"\"\r\n    for x in str(num):\r\n    ret += str(int(x) * * 2)\r\n    return int(ret)\r\n",
  "573f5c61e7752709df0005d2": "def merge_arrays(a, b):\r\n    return sorted(set(a + b))\r\n",
  "596c6eb85b0f515834000049": "def replace_dots(string):\r\n    return string . replace('.', '-')\r\n",
  "55cbc3586671f6aa070000fb": "def check_for_factor(base, factor):\r\n    return base % factor == 0\r\n",
  "583710ccaa6717322c000105": "def simple_multiplication(number):\r\n    return number * 9 if number % 2 else number * 8\r\n",
  "5583090cbe83f4fd8c000051": "def digitize(n):\r\n    return [int(x) for x in str(n)[:: - 1]]\r\n",
  "593ff8b39e1cc4bae9000070": "from functools import lru_cache\r\n\r\n\r\n@ lru_cache(None)\r\ndef lcs(x, y):\r\n    if not (x and y):\r\n        return ''\r\n    if x[0] == y[0]:\r\n        return x[0] + lcs(x[1:], y[1:])\r\n    return max(lcs(x, y[1:]), lcs(x[1:], y), key=len)\r\n",
  "53934feec44762736c00044b": "a = str(123)\n",
  "545cedaa9943f7fe7b000048": "import string\r\n\r\n\r\ndef is_pangram(s):\r\n    s = s . lower()\r\n    for char in 'abcdefghijklmnopqrstuvwxyz':\r\n    if char not in s:\r\n    return False\r\n    return True\r\n",
  "5bb904724c47249b10000131": "def points(games):\r\n    count = 0\r\n    for score in games:\r\n    res = score . split(':')\r\n    if res[0] > res[1]:\r\n    count += 3\r\n    elif res[0] == res[1]:\r\n    count += 1\r\n    return count\r\n",
  "5531abe4855bcc8d1f00004c": "def bowling_score(frames):\r\n    rolls = list(frames . replace(' ', ''))\r\n    for i, hit in enumerate(rolls):\r\n    if hit == 'X':\r\n    rolls[i] = 10\r\n    elif hit == '/':\r\n    rolls[i] = 10 - rolls[i - 1]\r\n    else:\r\n    rolls[i] = int(hit)\r\n    score = 0\r\n    for i in range(10):\r\n    frame = rolls . pop(0)\r\n    if frame == 10:\r\n    score += frame + rolls[0] + rolls[1]  # Strike!\r\n    else:\r\n    frame += rolls . pop(0)\r\n    score += frame\r\n    if frame == 10:\r\n    score += rolls[0]  # Spare!\r\n    return score\r\n",
  "53dc23c68a0c93699800041d": "def smash(words):\r\n    return \" \" . join(words)\r\n",
  "550498447451fbbd7600041c": "def comp(array1, array2):\r\n    try:\r\n    return sorted([i * * 2 for i in array1]) == sorted(array2)\r\n    except:\r\n    return False\r\n",
  "51c8e37cee245da6b40000bd": "def solution(string, markers):\r\n    parts = string . split('\\n')\r\n    for s in markers:\r\n    parts = [v . split(s)[0]. rstrip() for v in parts]\r\n    return '\\n' . join(parts)\r\n",
  "5a34b80155519e1a00000009": "def multiple_of_index(arr):\r\n    return [j for i, j in enumerate(arr) if (j == 0 and i == 0) or (i != 0 and j % i == 0)]\r\n",
  "56b29582461215098d00000f": "def pipe_fix(nums):\r\n    return list(range(nums[0], nums[- 1] + 1))\r\n",
  "555086d53eac039a2a000083": "def lovefunc(flower1, flower2):\r\n    return (flower1 + flower2) % 2\r\n",
  "563b662a59afc2b5120000c6": "def nb_year(p0, percent, aug, p):\n    t = 0\n    while p0 < p:\n        # my mathematical brain hates that I need to round this\n    p0 = int(p0 * (1 + percent / 100)) + aug\n    t += 1\n    return t\n",
  "563e320cee5dddcf77000158": "def get_average(marks):\r\n    return sum(marks) / / len(marks)\r\n",
  "57a0885cbb9944e24c00008e": "def remove_exclamation_marks(s):\r\n    return s . replace('!', '')\r\n",
  "576bb71bbbcf0951d5000044": "def count_positives_sum_negatives(arr):\r\n    if not arr:\r\n        return []\r\n    pos = 0\r\n    neg = 0\r\n    for x in arr:\r\n    if x > 0:\r\n    pos += 1\r\n    if x < 0:\r\n    neg += x\r\n    return [pos, neg]\r\n",
  "58cb43f4256836ed95000f97": "from numpy import prod\n\n\ndef find_difference(a, b):\n    return abs(prod(a) - prod(b))\n",
  "57d814e4950d8489720008db": "def index(array, n):\r\n    try:\r\n    return array[n] * * n\r\n    except:\r\n    return - 1\r\n",
  "55695bc4f75bbaea5100016b": "def all_fibonacci_numbers(a=0, b=1):\r\n    while 1:\r\n    yield b\r\n    a, b = b, a + b\r\n",
  "517abf86da9663f1d2000003": "def to_camel_case(text):\r\n    removed = text . replace('-', ' '). replace('_', ' '). split()\r\n    if len(removed) == 0:\r\n    return ''\r\n    return removed[0] + '' . join([x . capitalize() for x in removed[1:]])\r\n",
  "57cc981a58da9e302a000214": "def small_enough(array, limit):\r\n    return max(array) <= limit\r\n",
  "59342039eb450e39970000a6": "def oddCount(n):\r\n    return n / / 2\r\n",
  "5704aea738428f4d30000914": "def triple_trouble(one, two, three):\r\n    return '' . join('' . join(a) for a in zip(one, two, three))\r\n",
  "5a331ea7ee1aae8f24000175": "def triangle(row):\r\n\r\n    def reduce(a, b):\r\n    return a if a == b else (set('RGB') - {a, b}). pop()\r\n\r\n    def walk(offset, root, depth):\r\n    return row[root] if not depth else curry(offset, root, * divmod(depth, 3))\r\n\r\n    def curry(offset, root, depth, degree):\r\n    return walk(3 * offset, root, depth) if not degree \\\r\n        else reduce(curry(offset, root, depth, degree - 1), curry(offset, root + offset, depth, degree - 1))\r\n\r\n    return walk(1, 0, len(row) - 1)\r\n",
  "53dbd5315a3c69eed20002dd": "def filter_list(l):\r\n    'return a new list with the strings filtered out'\r\n    return [i for i in l if not isinstance(i, str)]\r\n",
  "5808dcb8f0ed42ae34000031": "def switch_it_up(n):\r\n    return ['Zero', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'][n]\r\n",
  "5715eaedb436cf5606000381": "def positive_sum(arr):\r\n    return sum(x for x in arr if x > 0)\r\n",
  "5761a717780f8950ce001473": "def calculate_age(year_of_birth, current_year):\r\n    diff = abs(current_year - year_of_birth)\r\n    plural = '' if diff == 1 else 's'\r\n    if year_of_birth < current_year:\r\n    return 'You are {} year{} old.' . format(diff, plural)\r\n    elif year_of_birth > current_year:\r\n    return 'You will be born in {} year{}.' . format(diff, plural)\r\n    return 'You were born this very year!'\r\n",
  "56d49587df52101de70011e4": "def leo(oscar):\r\n    if oscar == 88:\r\n    return \"Leo finally won the oscar! Leo is happy\"\r\n    elif oscar == 86:\r\n    return \"Not even for Wolf of wallstreet?!\"\r\n    elif oscar < 88:\r\n    return \"When will you give Leo an Oscar?\"\r\n    elif oscar > 88:\r\n    return \"Leo got one already!\"\r\n",
  "525c7c5ab6aecef16e0001a5": "ONES = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine',\r\n        'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen',\r\n        'eighteen', 'nineteen']\r\nTENS = ['twenty', 'thirty', 'forty', 'fifty',\r\n        'sixty', 'seventy', 'eighty', 'ninety']\r\n\r\n\r\ndef parse_int(string):\r\n    print(string)\r\n    numbers = []\r\n    for token in string . replace('-', ' '). split(' '):\r\n    if token in ONES:\r\n    numbers . append(ONES . index(token))\r\n    elif token in TENS:\r\n    numbers . append((TENS . index(token) + 2) * 10)\r\n    elif token == 'hundred':\r\n    numbers[- 1] *= 100\r\n    elif token == 'thousand':\r\n    numbers = [x * 1000 for x in numbers]\r\n    elif token == 'million':\r\n    numbers = [x * 1000000 for x in numbers]\r\n    return sum(numbers)\r\n",
  "554ca54ffa7d91b236000023": "def delete_nth(order, max_e):\r\n    ans = []\r\n    for o in order:\r\n    if ans . count(o) < max_e:\r\n        ans . append(o)\r\n    return ans\r\n",
  "51b62bf6a9c58071c600001b": "def solution(n):\r\n    roman_numerals = {1000: 'M',\r\n                      900: 'CM',\r\n                      500: 'D',\r\n                      400: 'CD',\r\n                      100: 'C',\r\n                      90: 'XC',\r\n                      50: 'L',\r\n                      40: 'XL',\r\n                      10: 'X',\r\n                      9: 'IX',\r\n                      5: 'V',\r\n                      4: 'IV',\r\n                      1: 'I'\r\n                      }\r\n    roman_string = ''\r\n    for key in sorted(roman_numerals . keys(), reverse=True):\r\n    while n >= key:\r\n    roman_string += roman_numerals[key]\r\n    n -= key\r\n    return roman_string\r\n",
  "5259b20d6021e9e14c0010d4": "def reverse_words(str):\r\n    return ' ' . join(s[:: - 1] for s in str . split(' '))\r\n",
  "52ceafd1f235ce81aa00073a": "def plural(n):\r\n    return n != 1\r\n",
  "52efefcbcdf57161d4000091": "from collections import Counter\n\n\ndef count(string):\n    return Counter(string)\n",
  "55f4e56315a375c1ed000159": "series = [0]\r\nfor a in range(2, 99):\r\n    for b in range(2, 42):\r\n    c = a * * b\r\n    if a == sum(map(int, str(c))):\r\n    series . append(c)\r\n    power_sumDigTerm = sorted(series). __getitem__\r\n",
  "52f3149496de55aded000410": "def sumDigits(number):\r\n    return sum(int(d) for d in str(abs(number)))\r\n",
  "64ef24b0679cdc004d08169e": "def min_turns(current, target):\r\n\r\n    total = 0\r\n    for i, j in zip(current, target):\r\n    a, b = map(int, [i, j])\r\n    total += min(abs(a - b), 10 - abs(b - a))\r\n\r\n    return total\r\n",
  "52a0f488852a85c723000aca": "def palindromize(number):\r\n    new, n = number, 0\r\n    while str(new) != str(new)[:: - 1]:\r\n    new += int(str(new)[:: - 1])\r\n    n += 1\r\n    return f' { n } { new } '\r\n",
  "54b679eaac3d54e6ca0008c9": "def create_iterator(func, n):\r\n    def f(x):\r\n    for i in range(n):\r\n    x = func(x)\r\n    return x\r\n    return f\r\n",
  "530e15517bc88ac656000716": "import string\r\nfrom codecs import encode as _dont_use_this_\r\n\r\n\r\ndef rot13(message):\r\n    alpha = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\r\n    outputMessage = \"\"\r\n    for letter in message:\r\n    if letter in alpha . lower():\r\n    outputMessage += alpha[(alpha . lower(). index(letter) + 13) % 26]. lower()\r\n    elif letter in alpha:\r\n    outputMessage += alpha[(alpha . index(letter) + 13) % 26]\r\n    else:\r\n    outputMessage += letter\r\n    return outputMessage\r\n",
  "647d08a2c736e3777c9ae1db": "def get_number_of_ways(steps, mjl):\r\n    res = [2 * * k for k in range(mjl)]\r\n\r\n    for _ in range(steps - mjl):\r\n    res . append(sum(res[- mjl:]))\r\n\r\n    return res[steps - 1]\r\n",
  "5a2c084ab6cfd7f0840000e4": "def smallerDiv(n): return next((x for x in range(2, int(n * * .5) + 1) if not n % x), 0)\r\n\r\n\r\ndef prime_ant(turns):\r\n    p, lst = 0, [2, 3]\r\n    for _ in range(turns):\r\n    if p == len(lst):\r\n    lst . append(p + 2)\r\n    sDiv = smallerDiv(lst[p])\r\n    if sDiv:\r\n    lst[p - 1] += sDiv\r\n    lst[p] / /= sDiv\r\n    p -= 1\r\n    else:\r\n    p += 1\r\n    return p\r\n",
  "58845748bd5733f1b300001f": "def range_bit_count(a, b):\r\n    return sum(bin(i). count('1') for i in range(a, b + 1))\r\n",
  "5859c82bd41fc6207900007a": "def quotable(name, quote):\r\n    return '{} said: \"{}\"' . format(name, quote)\r\n",
  "595970246c9b8fa0a8000086": "def capitalizeWord(word):\r\n    return word . capitalize()\r\n",
  "54530f75699b53e558002076": "letters = {\r\n    \"A\": \"Alpha\", \"B\": \"Bravo\", \"C\": \"Charlie\",\r\n    \"D\": \"Delta\", \"E\": \"Echo\", \"F\": \"Foxtrot\",\r\n    \"G\": \"Golf\", \"H\": \"Hotel\", \"I\": \"India\",\r\n    \"J\": \"Juliett\", \"K\": \"Kilo\", \"L\": \"Lima\",\r\n    \"M\": \"Mike\", \"N\": \"November\", \"O\": \"Oscar\",\r\n    \"P\": \"Papa\", \"Q\": \"Quebec\", \"R\": \"Romeo\",\r\n    \"S\": \"Sierra\", \"T\": \"Tango\", \"U\": \"Uniform\",\r\n    \"V\": \"Victor\", \"W\": \"Whiskey\", \"X\": \"X-ray\",\r\n    \"Y\": \"Yankee\", \"Z\": \"Zulu\"\r\n}\r\n\r\n\r\ndef nato(word):\r\n    return ' ' . join(letters[c] for c in word . upper())\r\n",
  "55b1fd84a24ad00b32000075": "def am_I_afraid(day, num):\r\n    return {\r\n        'Monday': num == 12,\r\n        'Tuesday': num > 95,\r\n        'Wednesday': num == 34,\r\n        'Thursday': num == 0,\r\n        'Friday': num % 2 == 0,\r\n        'Saturday': num == 56,\r\n        'Sunday': num == 666 or num == - 666,\r\n    }[day]\r\n",
  "5902f1839b8e720287000028": "from math import gcd\r\n\r\n\r\ndef parameter(n):\r\n    s, p = 0, 1\r\n    for m in str(n):\r\n    s += int(m)\r\n    p *= int(m)\r\n    return (s * p / (gcd(s, p)))\r\n",
  "5a0d38c9697598b67a000041": "def eliminate_unset_bits(string):\r\n    return 2 * * (string . count('1')) - 1\r\n",
  "57089707fe2d01529f00024a": "def check_alive(health: int) - > bool:\r\n    \"\"\" Return `true` if the player's health is greater than 0 or `false` if it is 0 or below. \"\"\"\r\n    return health > 0\r\n",
  "5a5f9f80f5dc3f942b002309": "class Omnibool:\r\n    def __eq__(self, _):\r\n    return True\r\n    omnibool = Omnibool()\r\n",
  "55ee3ebff71e82a30000006a": "def title_to_number(title):\r\n    ret = 0\r\n    for i in title:\r\n    ret = ret * 26 + ord(i) - 64\r\n    return ret\r\n",
  "55968ab32cf633c3f8000008": "def initials(name):\r\n    names = name . split()\r\n    return '.' . join(x[0]. upper() for x in names) + names[- 1][1:]\r\n",
  "55e9529cbdc3b29d8c000016": "def char_to_ascii(string):\r\n    return {c: ord(c) for c in set(string) if c . isalpha()} if len(string) else None\r\n",
  "580755730b5a77650500010c": "def sort_my_string(s):\r\n    return '{} {}' . format(s[:: 2], s[1:: 2])\r\n",
  "55960bbb182094bc4800007b": "import re\n\n\ndef insert_dash(num):\n    # your code here\n    return re . sub(r'([13579])(?=[13579])', r'\\1-', str(num))\n",
  "555de49a04b7d1c13c00000e": "def add(* args):\r\n    return round(sum(x / i for i, x in enumerate(args, 1)))\r\n",
  "555b73a81a6285b6ce000047": "def add(* args):\r\n    return sum(n * i for i, n in enumerate(args, 1))\r\n",
  "575fa9afee048b293e000287": "def how_much_water(water, clothes, load):\r\n    if load > 2 * clothes:\r\n    return \"Too much clothes\"\r\n    if load < clothes:\r\n    return \"Not enough clothes\"\r\n    for i in range(load - clothes):\r\n    water *= 1.1\r\n    return round(water, 2)\r\n",
  "52fba66badcd10859f00097e": "def disemvowel(string):\r\n    return \"\" . join(c for c in string if c . lower() not in \"aeiou\")\r\n",
  "562926c855ca9fdc4800005b": "def number_to_pwr(number, p):\r\n    result = 1\r\n    for i in range(p):\r\n    result *= number\r\n    return result\r\n",
  "58d248c7012397a81800005c": "def cube_checker(volume, side):\r\n    return 0 < volume == side * * 3\r\n",
  "57d29ccda56edb4187000052": "ORDER = \"rock lizard spock scissors paper spock rock scissors lizard paper rock\"\n\n\ndef rpsls(p1, p2):\n    return (\"Player 1 Won!\" if f\" { p1 } { p2 } \" in ORDER\n            else \"Player 2 Won!\" if f\" { p2 } { p1 } \" in ORDER\n            else \"Draw!\")\n",
  "59dd3ccdded72fc78b000b25": "WEEKDAY = {\r\n    1: 'Sunday',\r\n    2: 'Monday',\r\n    3: 'Tuesday',\r\n    4: 'Wednesday',\r\n    5: 'Thursday',\r\n    6: 'Friday',\r\n    7: 'Saturday'}\r\nERROR = 'Wrong, please enter a number between 1 and 7'\r\n\r\n\r\ndef whatday(n):\r\n    return WEEKDAY . get(n, ERROR)\r\n",
  "582e0e592029ea10530009ce": "def duck_duck_goose(players, goose):\r\n    return players[(goose % len(players)) - 1]. name\r\n",
  "51f9d93b4095e0a7200001b8": "def how_many_light_sabers_do_you_own(name=\"\"):\r\n    return (18 if name == \"Zach\" else 0)\r\n",
  "55a5bfaa756cfede78000026": "def problem(a):\r\n    try:\r\n    return a * 50 + 6\r\n    except TypeError:\r\n    return \"Error\"\r\n",
  "56cd44e1aa4ac7879200010b": "def is_uppercase(inp):\r\n    return inp . upper() == inp\r\n",
  "636f26f52aae8fcf3fa35819": "import sys\n# return the total byte size of the object.\n\n\ndef total_bytes(object):\n    return sys . getsizeof(object)\n",
  "578c1e2edaa01a9a02000b7f": "def alias_gen(f_name, l_name):\r\n    try:\r\n        return FIRST_NAME[f_name . upper()[0]] + ' ' + SURNAME[l_name . upper()[0]]\r\n    except:\r\n        return 'Your name must start with a letter from A - Z.'\r\n",
  "55e8aba23d399a59500000ce": "class Hero (object):\n    def __init__(self, name='Hero'):\n    self . name = name\n    self . position = '00'\n    self . health = 100\n    self . damage = 5\n    self . experience = 0\n",
  "514a7ac1a33775cbb500001e": "def mystery():\r\n    return {'sanity': 'Hello'}\r\n",
  "559d2284b5bb6799e9000047": "def add_length(str_):\r\n    return [\"{} {}\" . format(i, len(i)) for i in str_ . split(' ')]\r\n",
  "53f0f358b9cb376eca001079": "class Ball (object):\r\n    def __init__(self, type=\"regular\"):\r\n    self . ball_type = type\r\n",
  "54147087d5c2ebe4f1000805": "def _if(bool, func1, func2):\r\n    func1() if bool else func2()\r\n",
  "534d2f5b5371ecf8d2000a08": "def multiplicationTable(size):\r\n    return [[j * i for j in range(1, size + 1)] for i in range(1, size + 1)]\r\n",
  "5976c5a5cd933a7bbd000029": "MOD = 998244353\n\n\ndef height(n, m):\n    m %= MOD\n    inv = [0] * (n + 1)\n    last = 1\n    ans = 0\n    for i in range(1, n + 1):\n    inv[i] = - (MOD / / i) * inv[MOD % i] % MOD if i > 1 else 1\n    last = last * (m - i + 1) * inv[i] % MOD\n    ans = (ans + last) % MOD\n    return ans\n",
  "563089b9b7be03472d00002b": "class List (object):\r\n    def remove_(self, integer_list, values_list):\r\n    return [i for i in integer_list if i not in values_list]\r\n",
  "5b077ebdaf15be5c7f000077": "def count_sheep(n):\r\n    return '' . join(f\" { i } sheep...\" for i in range(1, n + 1))\r\n",
  "58e09234ca6895c7b300008c": "def palindrome(num, s):\r\n    if not (type(num) == type(s) == int) or num < 0 or s < 0:\r\n    return \"Not valid\"\r\n    ans, num = [], max(num, 11)\r\n    while len(ans) != s:\r\n    if num == int(str(num)[:: - 1]):\r\n    ans . append(num)\r\n    num += 1\r\n    return ans\r\n",
  "58ba6fece3614ba7c200017f": "def palindrome(num):\r\n    if type(num) is not int or num < 1:\r\n    return \"Not valid\"\r\n    return num == int(str(num)[:: - 1])\r\n",
  "52774a314c2333f0a7000688": "def valid_parentheses(string):\n    cnt = 0\n    for char in string:\n    if char == '(':\n        cnt += 1\n    if char == ')':\n        cnt -= 1\n    if cnt < 0:\n        return False\n    return True if cnt == 0 else False\n",
  "586e1d458cb711f0a800033b": "def process_data(data):\r\n    r = 1\r\n    for d in data:\r\n    r *= d[0] - d[1]\r\n    return r\r\n",
  "55eca815d0d20962e1000106": "def generate_range(min, max, step):\r\n    return list(range(min, max + 1, step))\r\n",
  "50654ddff44f800200000007": "def solution(a, b):\r\n    return a + b + a if len(a) < len(b) else b + a + b\r\n",
  "572b77262bedd351e9000076": "def first(seq, n=1):\r\n    return seq[: n]\r\n",
  "55a5befdf16499bffb00007b": "def add(a, b):\r\n    return a + b\r\n    def multiply(a, b):\r\n    return a * b\r\n    def divide(a, b):\r\n    return a / b\r\n    def mod(a, b):\r\n    return a % b\r\n    def exponent(a, b):\r\n    return a * * b\r\n    def subt(a, b):\r\n    return a - b\r\n",
  "5866fc43395d9138a7000006": "def ensure_question(s):\r\n    return s if s . endswith('?') else s + '?'\r\n",
  "570e8ec4127ad143660001fd": "def billboard(name, price=30):\r\n    return sum(price for letter in name)\r\n",
  "57a5b0dfcf1fa526bb000118": "def distinct(seq):\r\n    return sorted(set(seq), key=seq . index)\r\n",
  "56a4addbfd4a55694100001f": "def validate_hello(greetings):\r\n    return any(x in greetings . lower() for x in ['hello', 'ciao', 'salut', 'hallo', 'hola', 'ahoj', 'czesc'])\r\n",
  "57ab3c09bb994429df000a4a": "def two_highest(arg1):\r\n    return sorted(set(arg1), reverse=True)[: 2]\r\n",
  "523b623152af8a30c6000027": "def square(n):\r\n    return n * * 2\r\n",
  "56dae9dc54c0acd29d00109a": "def main(verb, noun):\r\n    return verb + noun\r\n",
  "55cb854deb36f11f130000e1": "def weather_info(temp):\r\n    c = convertToCelsius(temp)\r\n    if (c <= 0):\r\n    return (str(c) + \" is freezing temperature\")\r\n    else:\r\n    return (str(c) + \" is above freezing temperature\")\r\n\r\n    def convertToCelsius(temperature):\r\n    celsius = (temperature - 32) * (5.0 / 9.0)\r\n    return celsius\r\n",
  "5612e743cab69fec6d000077": "a = \"dev\"\nb = \"Lab\"\nname = a + b\n",
  "5a2b703dc5e2845c0900005a": "def is_divide_by(number, a, b):\r\n    return number % a == 0 and number % b == 0\r\n",
  "574b3b1599d8f897470018f6": "def get_real_floor(n):\n    if n <= 0:\n        return n\n    if n < 13:\n        return n - 1\n    if n > 13:\n        return n - 2\n",
  "5834fec22fb0ba7d080000e8": "def six_toast(num):\r\n    return abs(num - 6)\r\n",
  "5ad0d8356165e63c140014d4": "def final_grade(exam, projects):\n    if exam > 90 or projects > 10:\n        return 100\n    if exam > 75 and projects >= 5:\n        return 90\n    if exam > 50 and projects >= 2:\n        return 75\n    return 0\n",
  "572b6b2772a38bc1e700007a": "def uni_total(string):\r\n    return sum(map(ord, string))\r\n",
  "5547929140907378f9000039": "def shortcut(s):\r\n    return '' . join(c for c in s if c not in 'aeiou')\r\n",
  "566dc05f855b36a031000048": "def AddExtra(listOfNumbers):\r\n    return listOfNumbers + [1]\r\n",
  "5dd462a573ee6d0014ce715b": "def same_case(a, b):\r\n    return a . isupper() == b . isupper() if a . isalpha() and b . isalpha() else - 1\r\n",
  "5ab52526379d20736b00000e": "from typing import Tuple\r\nfrom math import ceil\r\nweapons = {\r\n    \"PT92\": 17,\r\n    \"M4A1\": 30,\r\n    \"M16A2\": 30,\r\n    \"PSG1\": 5\r\n}\r\n\r\n\r\ndef mag_number(info: Tuple[str, int]) - > int:\r\n    return ceil(info[1] * 3 / weapons[info[0]])\r\n",
  "524f5125ad9c12894e00003f": "def remainder(a, b):\r\n    if min(a, b) == 0:\r\n    return None\r\n    elif a > b:\r\n    return a % b\r\n    else:\r\n    return b % a\r\n",
  "5748a883eb737cab000022a6": "def cannons_ready(gunners):\r\n    return 'Shiver me timbers!' if 'nay' in gunners . values() else 'Fire!'\r\n",
  "57e3f79c9cb119374600046b": "def hello(name=''):\r\n    return f\"Hello, { name . title () or 'World' } !\"\r\n",
  "5d49c93d089c6e000ff8428c": "def save(sizes, hd):\r\n    for i, s in enumerate(sizes):\r\n    if hd < s:\r\n        return i\r\n    hd -= s\r\n    return len(sizes)\r\n",
  "5a360620f28b82a711000047": "def define_suit(card):\r\n    d = {'C': 'clubs', 'S': 'spades', 'D': 'diamonds', 'H': 'hearts'}\r\n    return d[card[- 1]]\r\n",
  "57fae964d80daa229d000126": "def remove(s):\r\n    return s[: - 1] if s . endswith('!') else s\r\n",
  "5966e33c4e686b508700002d": "def sum_str(a, b):\r\n    return str(int(a or 0) + int(b or 0))\r\n",
  "53da6d8d112bd1a0dc00008b": "def reverse_list(l):\r\n    return l[:: - 1]\r\n",
  "5977618080ef220766000022": "def usdcny(usd):\r\n    return f\" {( usd * 6.75 ): .2 f } Chinese Yuan\"\r\n",
  "521cd52e790405a74800032c": "def wrap(value):\r\n    return {\"value\": value}\r\n",
  "5899642f6e1b25935d000161": "def merge_arrays(arr1, arr2):\r\n    return sorted(set(arr1 + arr2))\r\n",
  "57ee4a67108d3fd9eb0000e7": "geese = {\"African\", \"Roman Tufted\", \"Toulouse\", \"Pilgrim\", \"Steinbacher\"}\r\n\r\n\r\ndef goose_filter(birds):\r\n    return [bird for bird in birds if bird not in geese]\r\n",
  "5741df13077bdf57af00109c": "def find_sum(m):\r\n    p = [0] * (len(m) + 1)\r\n    for l in m:\r\n    for i, v in enumerate(l, 1):\r\n    p[i] = v + max(p[i - 1], p[i])\r\n    return p[- 1]\r\n",
  "534a0c100d03ad9772000539": "class PrimeFactorizer:\r\n\r\n    def __init__(self, num):\r\n    self . factor = {}\r\n    for i in xrange(2, num + 1):\r\n    if (num < i):\r\n    break\r\n    while (num % i == 0):\r\n    num /= i\r\n    self . factor[i] = self . factor . get(i, 0) + 1\r\n",
  "542f3d5fd002f86efc00081a": "def prime_factors(n):\r\n    primes = []\r\n    candidate = 2\r\n    while n > 1:\r\n    while n % candidate == 0:\r\n    primes . append(candidate)\r\n    n /= candidate\r\n    candidate += 1\r\n    return primes\r\n",
  "5500d54c2ebe0a8e8a0003fd": "# Try to make your own gcd method without importing stuff\ndef mygcd(x, y):\n    # GOOD LUCK\n    while y:\n    x, y = y, x % y\n    return x\n",
  "5262119038c0985a5b00029f": "# This is the Miller-Rabin test for primes, which works for super large n\nimport random\n\n\ndef even_odd(n):\n    s, d = 0, n\n    while d % 2 == 0:\n    s += 1\n    d >>= 1\n    return s, d\n    def Miller_Rabin(a, p):\n    s, d = even_odd(p - 1)\n    a = pow(a, d, p)\n    if a == 1:\n        return True\n    for i in range(s):\n    if a == p - 1:\n        return True\n    a = pow(a, 2, p)\n    return False\n    def is_prime(p):\n    if p == 2:\n        return True\n    if p <= 1 or p % 2 == 0:\n        return False\n    return all(Miller_Rabin(random . randint(2, p - 1), p) for _ in range(40))\n",
  "5259acb16021e9d8a60010af": "from math import lcm\n",
  "5f709c8fb0d88300292a7a9d": "def killer(info, dead):\r\n    for name, seen in info . items():\r\n    if set(dead) <= set(seen):\r\n    return name\r\n",
  "58985ffa8b43145ac900015a": "def world_quest():\r\n    world = World()\r\n    world . talk('npc', 'hello')\r\n    world . talk('npc', 'player')\r\n    world . talk('npc', 'yes')\r\n    kill = 0\r\n    while kill < 10:\r\n    world . pickup('rock')\r\n    hit = world . throw('rat')\r\n    if hit:\r\n        kill += 1\r\n    world . talk('npc')\r\n    return world\r\n",
  "55849d76acd73f6cc4000087": "def playerRankUp(pts):\r\n    msg = \"Well done! You have advanced to the qualifying stage. Win 2 out of your next 3 games to rank up.\"\r\n    return msg if pts >= 100 else False\r\n",
  "5b36137991c74600f200001b": "def kill_monsters(health, monsters, damage):\n    hits = (monsters - 1) / / 3\n    damage *= hits\n    health -= damage\n    return f'hits: { hits } , damage: { damage } , health: { health } ' if health > 0 else 'hero died'\n",
  "56170e844da7c6f647000063": "def people_with_age_drink(age):\n    if age > 20:\n        return 'drink whisky'\n    if age > 17:\n        return 'drink beer'\n    if age > 13:\n        return 'drink coke'\n    return 'drink toddy'\n",
  "5a5032f4fd56cb958e00007a": "KEYBOARD = \"abcde123fghij456klmno789pqrst.@0uvwxyz_/\"\r\nMAP = {c: (i / / 8, i % 8) for i, c in enumerate(KEYBOARD)}\r\n\r\n\r\ndef manhattan(* pts): return sum(abs(z2 - z1) for z1, z2 in zip(* pts))\r\n\r\n\r\ndef tv_remote(word):\r\n    return len(word) + sum(manhattan(MAP[was], MAP[curr]) for was, curr in zip('a' + word, word))\r\n",
  "52998bf8caa22d98b800003a": "def manhattan_distance(pointA, pointB):\r\n    return abs(pointA[0] - pointB[0]) + abs(pointA[1] - pointB[1])\r\n",
  "5697fb83f41965761f000052": "def filter_long_words(sentence, long):\r\n    return [word for word in sentence . split() if len(word) > long]\r\n",
  "52742f58faf5485cae000b9a": "times = [(\"year\", 365 * 24 * 60 * 60), \n         (\"day\", 24 * 60 * 60),\n         (\"hour\", 60 * 60),\n         (\"minute\", 60),\n         (\"second\", 1)]\n\ndef format_duration(seconds):\n\n    if not seconds:\n        return \"now\"\n\n    chunks = []\n    for name, secs in times:\n        qty = seconds // secs\n        if qty:\n            if qty > 1:\n                name += \"s\"\n            chunks.append(str(qty) + \" \" + name)\n\n        seconds = seconds % secs\n\n    return ', '.join(chunks[:-1]) + ' and ' + chunks[-1] if len(chunks) > 1 else chunks[0]",
  "53ee5429ba190077850011d4": "def doubleInteger(i):\r\n    return i * 2\r\n",
  "65112af7056ad6004b5672f8": "def possibly_perfect(key, answers):\n    a = [k==a for k, a in zip(key, answers) if k!='_']\n    return all(a) or not any(a)",
  "660595d3bd866805d00ec4af": "def longest_mountain_pass(mountains, E):\r\n    n = len(mountains)\r\n    if n < 2:\r\n    if n == 0:\r\n    return (0, 0)\r\n    else:\r\n        return (1, 0)\r\n\r\n    # Precompute energy costs\r\n    energy_cost = [0] * n\r\n    for i in range(1, n):\r\n    energy_cost[i] = max(0, mountains[i] - mountains[i - 1]\r\n                         ) + energy_cost[i - 1]\r\n\r\n    # Sliding window\r\n    max_length = 0\r\n    start_index = 0\r\n    left = 0\r\n    for right in range(n):\r\n    while energy_cost[right] - (energy_cost[left] if left > 0 else 0) > E:\r\n    left += 1\r\n    if right - left + 1 > max_length:\r\n    max_length = right - left + 1\r\n    start_index = left\r\n    return (max_length, start_index)\r\n",
  "65eb2c4c274bd91c27b38d32": "from gmpy2 import next_prime\r\nfrom bisect import bisect_left, bisect_right\r\nPS, L, P = [], 1e18, 2\r\nwhile True:\r\n    Q = P * * 4\r\n    PS . append(Q)\r\n    P = next_prime(P)\r\n    if Q > L:\r\n    break\r\n    def solution(n, m):\r\n    i = bisect_left(PS, n)\r\n    j = bisect_right(PS, m)\r\n    return PS[i: j]\r\n",
  "660e5631b673a8004b71d208": "def continued_fraction(nu: int, de: int) - > list[int]:\r\n    l = []\r\n    while nu and de:\r\n    l . append(nu / / de)\r\n    nu, de = de, nu % de\r\n    return l\r\n",
  "660d55d0ba01e5016c85cfeb": "slice = f = lambda a, b: a * (a == b) or f(a, chr(ord(b) - 1)) + b\n",
  "660323a44fe3e41cff41e4e9": "def findpos(n, t):\r\n    z = 0 in t\r\n    b = len(t)\r\n    m = {x: y for x, y in zip(sorted(t), range(1 - z, b + 1 - z))}\r\n    s, i = 0, 0\r\n    while n > 0:\r\n    n, d = divmod(n, 10)\r\n    s += b * * i * m[d]\r\n    i += 1\r\n    return s + z\r\n",
  "65fc93001bb13a2074cb4ee8": "from bisect import bisect_left as bl\r\nfrom bisect import bisect_right as br\r\n\r\n\r\ndef f(a, n):\r\n    p = [0 for e in a]\r\n    q = [len(e) for e in a]\r\n    for i, e in enumerate(a):\r\n    while p[i] < q[i]:\r\n    m = (p[i] + q[i]) >> 1\r\n    x = sum(bl(f, e[m]) for f in a)\r\n    y = sum(br(f, e[m]) for f in a)\r\n    if x <= n < y:\r\n        return e[m]\r\n    elif x > n:\r\n        q[i] = m\r\n    else:\r\n        p[i] = m + 1\r\n\r\n    def median_from_n_arrays(a):\r\n    n = sum(len(e) for e in a)\r\n    return (f(a, n >> 1) + f(a, (n - 1) >> 1)) / 2\r\n",
  "65f8279c265f42003ffbd931": "def plus_or_minus(vs, test):\r\n    d = (test([2 * * i for i, _ in enumerate(vs)]) + (2 * * len(vs) - 1)) / / 2\r\n    return '' . join('-+' [d >> i & 1] + c for i, c in enumerate(vs)). lstrip('+')\r\n",
  "65f1c009e44a0f0777c9fa06": "def operation_arguments(arr):\r\n    result = []\r\n\r\n    for val in arr:\r\n    if callable(val):\r\n    result . append(val(result . pop() if result else 0))\r\n    else:\r\n    result . append(val)\r\n    return result\r\n",
  "65ee024f99785f0906e65bee": "def bump_counter(ants):\r\n    res = []\r\n    n, c = ants . count(\"L\"), 0\r\n    for i, d in enumerate(ants):\r\n    t = (i < n) - (d == \"L\")\r\n    res . append(2 * c + t)\r\n    c += t\r\n    return \" \" . join(map(str, res))\r\n",
  "65ee35959c3c7a2b4f8d79c1": "def count_time_loops(menu, a, b):\r\n    # Initialize a dynamic programming table\r\n    dp = [0] * (b + 1)\r\n    dp[0] = 1  # Base case: 1 way to achieve cost 0 (empty meal)\r\n    # Iterate over each dish cost in the menu\r\n    for cost in menu:\r\n        # Update the dynamic programming table from right to left\r\n    for i in range(b, cost - 1, - 1):\r\n    dp[i] += dp[i - cost]\r\n\r\n    # Calculate the total combinations within the specified cost range\r\n    total_combinations = sum(dp[a: b + 1])\r\n\r\n    return total_combinations\r\n",
  "65e8b02a9e79a010e5210b6c": "# Just imagine a straight line on a lattice of infinite copies of the TV.\nfrom math import gcd\n\n\ndef will_hit_corner(w, h, x, y, dir):\n    if dir == \"NE\" or dir == \"SW\":\n    slope = 1\n    else:\n    slope = - 1\n    return (y - slope * x) % gcd(w, h) == 0\n",
  "65e594c5a93ef700294ced80": "def painted_faces(sides, n):\r\n    if sides == 0:\r\n    return 0\r\n    elif sides == 1:\r\n    if n == 6:\r\n    return 1\r\n    else:\r\n    return 0\r\n    else:\r\n    if n == 0:\r\n    return (sides - 2) * * 3  # inside cubes\r\n    elif n == 1:\r\n    return 6 * (sides - 2) * * 2  # face cubes\r\n    elif n == 2:\r\n    return 12 * (sides - 2)  # rib cubes\r\n    elif n == 3:\r\n    return 8  # corner cubes\r\n    else:\r\n    return 0\r\n",
  "65e2df8302b29a005831eace": "def hit(l):\r\n    return l % 5\r\n",
  "65e0fa45446dba00143d3744": "import math\n\n\ndef get_rectangle_ratio(n):\n    return (n + math . sqrt(n * n + 4)) / 2\n",
  "65de16794ccda6356de32bfa": "from collections import Counter\r\nfrom random import randrange\r\nfrom math import gcd, lcm, log, log2\r\n\r\n\r\ndef miller_rabin_test(n):\r\n    if n < 2 or not n % 2 or not n % 3:\r\n    return n in (2, 3)\r\n    k, r, d = 5, 0, n - 1\r\n    while d % 2 == 0:\r\n    d / /= 2\r\n    r += 1\r\n    while k >= 1:\r\n    k -= 1\r\n    a = randrange(2, n - 1)\r\n    x = pow(a, d, n)\r\n    if x == 1 or x == n - 1:\r\n    continue\r\n    m = r - 1\r\n    while m >= 1:\r\n    m -= 1\r\n    x = pow(x, 2, n)\r\n    if x == n - 1:\r\n    break\r\n    else:\r\n    return False\r\n    return True\r\n    def is_prime(n):\r\n    return miller_rabin_test(n)\r\n\r\n    def pollard_rho(n):\r\n    while True:\r\n    x, c = randrange(1, n), randrange(1, n)\r\n    def f(x): return (x * x + c) % n\r\n    y = f(x)\r\n    while (d := gcd(abs(x - y), n)) == 1:\r\n    x, y = f(x), f(f(y))\r\n    if d != n:\r\n    return d\r\n    def factor(n):\r\n    if is_prime(n):\r\n        return Counter([n])\r\n    return factor(r := pollard_rho(n)) + factor(n / / r)\r\n\r\n    def divisor(n, psm):\r\n    ps = []\r\n    for p, k in psm . items():\r\n    for i in range(k):\r\n    ps . append(p)\r\n    ds = set([1, n])\r\n    def go(i, d):\r\n    if i < len(ps):\r\n    ds . add(d * ps[i])\r\n    go(i + 1, d)\r\n    go(i + 1, d * ps[i])\r\n    go(0, 1)\r\n    return sorted(list(ds))\r\n\r\n    def binary_raise(n, p):\r\n    r = 1\r\n    while p > 0:\r\n    if (p & 1) == 1:\r\n    r *= n\r\n    p >>= 1\r\n    n *= n\r\n    return r\r\n    def ext_euclidean(a, b):\r\n    x, y, u, v = 0, 1, 1, 0\r\n    while a != 0:\r\n    q, r = b / / a, b % a\r\n    m, n = x - u * q, y - v * q\r\n    a, b, x, y, u, v = r, a, u, v, m, n\r\n    return b, x, y\r\n    def fast_mul(a, b, p):\r\n    q, r = a\r\n    s, t = b\r\n    x = q * s + 5 * r * t\r\n    y = q * t + r * s\r\n    return (x % p, y % p)\r\n\r\n    def fast_plus(a, n, p):\r\n    r = (1, 0)\r\n    while n > 0:\r\n    if (n & 1) == 1:\r\n    r = fast_mul(r, a, p)\r\n    n >>= 1\r\n    a = fast_mul(a, a, p)\r\n    return r\r\n    def fib_mod(n, p):\r\n    _, q, _ = ext_euclidean(pow(2, n, p), p)\r\n    q %= p\r\n    ns = fast_plus((1, 1), n, p)\r\n    return fast_mul(ns, (q, 0), p)\r\n\r\n    def prime_pisano(n):\r\n    if n == 2:\r\n        return 3\r\n    r = n % 5\r\n    q = 4 * n if not r else n - 1 if r in (1, 4) else 2 * (n + 1)\r\n    if not r:\r\n        return q\r\n    ps = factor(q)\r\n    ds = divisor(q, ps)\r\n    for d in ds:\r\n    if fib_mod(d, n) == (1, 0):\r\n    return d\r\n    def composite_pisano(n):\r\n    ps, m = factor(n), 1\r\n    for p, k in ps . items():\r\n    m = lcm(m, binary_raise(p, k - 1) * prime_pisano(p))\r\n    return m\r\n    def pisano_period(n):\r\n    if n == 1:\r\n        return 1\r\n    eps, p2, p5 = 1e-9, log2(n), log(n) / log(5)\r\n    if p2 % 1 < eps:\r\n        return 3 * (2 * * (round(p2) - 1))\r\n    if p5 % 1 < eps:\r\n        return 4 * (5 * * round(p5))\r\n    return composite_pisano(n)\r\n\r\n    # initial method name of the kata\r\n    PisanoPeriod = pisano_period\r\n",
  "65dd5b414ccda60a4be32c2a": "def gaslighting(s, y, f):\r\n    return any(a != b and (a in f or b in f) for a, b in zip(s, y))\r\n",
  "65dc66fc48727d28ac00db5c": "from preloaded import symbols, valency\r\nfrom math import gcd\r\n\r\n\r\ndef create_compound(name):\r\n    ind = {1: '', 2: '\u2082', 3: '\u2083', 4: '\u2084'}\r\n    cmps = name . split()\r\n    s1, s2 = map(symbols . get, cmps)\r\n    v1, v2 = map(valency . get, cmps)\r\n\r\n    g = gcd(v1, v2)\r\n    v1, v2 = v1 / / g, v2 / / g\r\n\r\n    def comp(s, v): return f' { s }{ v } ' if sum(x . isupper()\r\n                                                  for x in s) < 2 or v == '' else f'( { s } ) { v } '\r\n    return f' { comp ( s1 , ind [ v2 ])}{ comp ( s2 , ind [ v1 ])} '\r\n",
  "62f17be8356b63006a9899dc": "def trilingual_democracy(group: str) - > str:\r\n\r\n    _set = set(group)\r\n\r\n    if len(_set) == 1:\r\n        return group[0]\r\n    if len(_set) == 3:\r\n        return next(iter(set('DFIK') - _set))\r\n\r\n    return min(group, key=group . count)\r\n",
  "65d81be5ac0d2ade3a6c637b": "def or_sum(n: int) - > int:\r\n    return n * * 2 + sum(n >> i + 1 << 2 * i for i in range(n . bit_length()) if not 1 << i & n)\r\n",
  "65d5cf1eac0d2a6c4f6c60e6": "from preloaded import atomic_masses\r\n\r\n\r\ndef count_the_moles(mass_of_substance: float, chemical_formula: str):\r\n    mole_mass = 0\r\n    for i, x in enumerate(chemical_formula):\r\n    if x . isalpha():\r\n    if i + 1 <= len(chemical_formula) - 1 and chemical_formula[i + 1]. isdigit():\r\n    mole_mass += atomic_masses[x] * int(chemical_formula[i + 1])\r\n    else:\r\n    mole_mass += atomic_masses[x]\r\n    return mass_of_substance / mole_mass\r\n",
  "65d4d2c4e2b49c3d1f3c3aec": "def fibs(limit):\r\n    a, b, res = 2, 3, []\r\n    while a <= limit:\r\n    res . append(a)\r\n    a, b = b, a + b\r\n    return res\r\n    FIB = fibs(10 * * 36)\r\n\r\n    from functools import cache\r\n    @ cache\r\n    def fib_prod(n: int, m: int = 1) - > int:\r\n    return 1 if n == 1 else sum(fib_prod(n / / d, d) for d in FIB if d >= m and n % d == 0)\r\n",
  "65d2460f512ea70058594a3d": "from collections import Counter\r\n\r\n\r\ndef last_non_empty_string(s: str) - > str:\r\n    x = Counter(s)\r\n    l = max(x . values()) - 1\r\n    for w in x:\r\n    s = s . replace(w, '', l)\r\n    return s\r\n",
  "65cf8417e2b49c2ecd3c3aee": "def zeros(n: int) - > int:\r\n    a, b = 1, 1\r\n    for _ in range(n - 2):\r\n    a, b = a + b, a\r\n    return a + b\r\n",
  "65d06e5ae2b49c47ee3c3fec": "def comb(n, k): return (b: = 2 << n | 1) * * n >> n * k + k & b - 2\n",
  "65c9562f4e43b28c4c426c93": "def find_n(d, t, l):\r\n    if l == 1:\r\n    r = d . get(t)\r\n    return [r] if r else []\r\n\r\n    for k, v in d . items():\r\n    if k >= t:\r\n        continue\r\n    r = find_n(d, t - k, l - 1)\r\n    if r:\r\n        return r + [v]\r\n\r\n    return []\r\n\r\n    def make_cocktail(ingr: dict[int], flav: int, bittersw: int) - > list[str]:\r\n    if not isinstance(ingr, dict):\r\n        return []\r\n\r\n    pos = {}\r\n    min = {}\r\n\r\n    for k, v in ingr . items():\r\n    if v < 0:\r\n        min[- v] = k\r\n    else:\r\n        pos[v] = k\r\n    for i in range(6):\r\n    f = find_n(pos, bittersw + (flav >= 0 and flav), i) if i else []\r\n    m = find_n(min, bittersw - (flav < 0 and flav), 5 - i) if i else []\r\n\r\n    if len(f) == i and len(m) == 5 - i:\r\n        return f + m\r\n    return []\r\n",
  "65cdd06eac0d2ad8ee6c6067": "def nth_term_of_the_fibonacci_sequence(n): return pow(m: = 2 << n, n, m * m + ~ m) / / m\n",
  "65cb9ddfac0d2a5d6e6c6150": "A = {x + y for y in \"1 2 3 4 5 6 7 8 9 10 J Q K\" . split() for x in \"HSDC\"}\r\n\r\n\r\ndef pick_em_up(pile):\r\n    p = {y for x in pile for y in x}\r\n    return all(c in p for c in A)\r\n",
  "65cb0451ac0d2a381c6c617f": "def get_options_count(target, arr):\r\n    options = [1]\r\n    for n in range(1, len(target) + 1):\r\n    options . append(sum(options[- len(s)]\r\n                     for s in arr if target[- n:]. startswith(s)))\r\n    return options[- 1]\r\n",
  "65c8e72d63fd290058026075": "from itertools import cycle\n\n\ndef round_robin(* gens):\n    msg = None\n    for gen in cycle(gens):\n    msg = yield gen . send(msg)\n",
  "65c6fa8551327e0ac12a191d": "import datetime\r\n\r\n\r\ndef next_good_time(current_time):\r\n    d = datetime . datetime . strptime(current_time, \"%H:%M:%S\")\r\n    while True:\r\n    d += datetime . timedelta(seconds=1)\r\n    if any([\r\n        d . minute * 2 == d . hour +\r\n        d . second and d . minute - d . hour in [1, 2],\r\n        d . minute * 2 == d . hour + d . second and d . minute % 10 == d . hour % 10,\r\n        d . minute * 2 == d . hour + d . second and 2 * d . hour == d . minute,\r\n        d . time(). isoformat() == d . time(). isoformat()[\r\n            :: - 1] and len(set(d . time(). isoformat())) == 3,\r\n        d . time(). isoformat() == \"12:34:56\",\r\n    ]):\r\n    return d . time(). isoformat()\r\n",
  "65c6836293e1c2b881e67f33": "from itertools import accumulate\r\n\r\n\r\ndef ways_in_3d_matrix(x, y, z):\r\n    x, y, z = sorted((x, y, z))\r\n\r\n    layer = [[int(j == 0 or k == 0) for k in range(z)] for j in range(y)]\r\n    for j in range(1, y):\r\n    for k in range(1, z):\r\n    layer[j][k] = layer[j - 1][k] + layer[j][k - 1]\r\n\r\n    seq = [1] * (y + z - 1)\r\n    for _ in range(x - 1):\r\n    seq = [* accumulate(seq)]\r\n\r\n    return layer[- 1][- 1] * seq[- 1]\r\n",
  "65c06522275fa5b2169e9998": "def expected_speedrun_time(times, probs):\n    tot_prob, tot_time, expected = 1, 0, 0\n    for t, p in zip(times, probs):\n    expected += (tot_time + t / 2) * (tot_prob) * (1 - p)\n    tot_time += t\n    tot_prob *= p\n    expected /= tot_prob\n    expected += tot_time\n    return expected\n",
  "6590b70c3109bcf9c12624a5": "def f(x, y): return (y - x + 5) % 10 - 5\n",
  "65c0161a2380ae78052e5731": "def stone_pick(arr):\r\n    stick = arr . count('Sticks') + arr . count('Wood') * 4\r\n    cobble = arr . count('Cobblestone')\r\n    return (min(cobble / / 3, stick / / 2))\r\n",
  "65ba420888906c1f86e1e680": "def collinearity(x1, y1, x2, y2):\r\n    return x1 * y2 == x2 * y1\r\n",
  "65b745d697eea38e8bcfb470": "from collections import deque\r\n\r\n\r\ndef find_win(placements, total):\r\n    c, t, q = 0, ((1 << total) - 1) << 1, deque(maxlen=total)\r\n    for i, v in enumerate(placements):\r\n    c += 1 << v\r\n    if i >= total:\r\n        c -= 1 << q[0]\r\n    if c == t:\r\n        return i\r\n    q . append(v)\r\n",
  "65b3fdc2df771d0010b9c3d0": "def cube_matrix_sum(x): return sum(sum(sum(x, []), []))\n",
  "65ad9094c5a34200245f3a8f": "from gmpy2 import is_prime\nM, L = 1000000007, 3000000\nPRIMES = [n for n in range(L) if is_prime(n)]\n\n\ndef smallest_multiple(n):\n    t = 1\n    for p in PRIMES:\n    if p > n:\n        break\n    for q in range(1, n + 1):\n    if p * * q > n:\n    t = (t * pow(p, q - 1, M)) % M\n    break\n    return t\n",
  "65a1cc718041f7000f928457": "def balanced_base_nine(num):\r\n    base_nine = []\r\n    while num:\r\n    d = num % 9\r\n    base_nine . append('01234^%$\u00a3' [d])\r\n    num = num / / 9 + (d > 4)\r\n    return '' . join(reversed(base_nine)) or '0'\r\n",
  "65a024af6063fb0ac8c0f0b5": "def has_scored(s):\r\n    balls = sorted(s . find(b) for b in 'RWY')\r\n    return balls[1] >= 0 and sum(c in 'nesw' for c in s[: balls[2]]) >= 3\r\n",
  "659af96994b858db10e1675f": "def find(string):\r\n    num = int(string[0])\r\n    ans = num\r\n    i = 1\r\n    test = str(num)\r\n    while test != string:\r\n    if test == string[: len(test)]:\r\n    num += 1\r\n    test += str(num)\r\n    else:\r\n    i += 1\r\n    num = int(string[: i])\r\n    ans = num\r\n    test = str(num)\r\n\r\n    return ans\r\n",
  "658fb5effbfb3ad68ab0951d": "def score(numbers):\r\n    sn = sum(numbers)\r\n    return sum(x * (sn - x) for x in numbers) / / 2\r\n",
  "6582ce1afbfb3a604cb0b798": "def type_out(s):\r\n    res, pointer, i = [], 0, 0\r\n    while i < len(s):\r\n    if s[i] in '<>':\r\n    func = s[i]\r\n    i += 1\r\n    times = 1\r\n    if i < len(s) and s[i] == '*':\r\n    i += 1\r\n    times = 0\r\n    while i < len(s) and s[i]. isdigit():\r\n    times = times * 10 + int(s[i])\r\n    i += 1\r\n    if func == '<':\r\n    pointer = max(0, pointer - times)\r\n    else:\r\n    pointer = min(len(res), pointer + times)\r\n    else:\r\n    res . insert(pointer, s[i])\r\n    pointer += 1\r\n    i += 1\r\n    return '' . join(res)\r\n",
  "6585960dfbfb3afd22b0a1fe": "def converging_journeys(n):\r\n    j = {1: 1, 3: 3, 9: 9}\r\n    while n:\r\n    for k in j:\r\n    while j[k] < n:\r\n        j[k] += sum(map(int, str(j[k])))\r\n    if j[k] == n:\r\n        return (k, n)\r\n    n += sum(map(int, str(n)))\r\n",
  "6584b7cac29ca91dd9124009": "def convert_lojban(lojban):\r\n    return int(lojban . translate(str . maketrans('nprcvmxzbs', '0123456789', 'aeiou')))\r\n",
  "6582206efbfb3a604cb0a6fe": "def checksum(isbn):\r\n    # calculate checksum\r\n    return sum((10 - i) * (10 if d == \"X\" else int(d)) for i, d in enumerate(isbn))\r\n\r\n    def fix_code(isbn):\r\n        # try all possible digits\r\n    for digit in \"0123456789X\":\r\n    fixed_isbn = isbn . replace(\"?\", digit)\r\n    if checksum(fixed_isbn) % 11 == 0:\r\n    return digit\r\n",
  "657e2e36fbfb3ac3c3b0a1fb": "from datetime import datetime, timedelta\r\nREF = datetime(2000, 1, 1)\r\n\r\n\r\ndef convert_mayan(date):\r\n    baktun, katun, tun, uinal, kin = [int(x) for x in date . split()]\r\n    return (REF + timedelta(days=kin + 20 * (uinal + 18 * (tun + 20 * (katun + 20 * baktun))) - 2018843)). strftime('%-d %-m %Y')\r\n",
  "6574d1bde7484b5a56ec8f29": "def min_repeating_character_difference(text):\r\n    for i in range(1, len(text)):\r\n    for a, b in zip(text, text[i:]):\r\n    if a == b:\r\n    return i, a\r\n",
  "65781071e16df9dcbded1520": "def teknonymize(t) - > None:\r\n    if t['children']:\r\n    g, d = min([teknonymize(c) for c in t['children']],\r\n               key=lambda a: (- a[0], a[1]['date_of_birth']))\r\n    t['teknonym'] = 'great-' * (g - 2) + 'grand' * (g > 1) + \\\r\n        ['mother', 'father'][t['sex'] == 'm'] + ' of ' + d['name']\r\n    return g + 1, d\r\n    else:\r\n    return 1, t\r\n",
  "6573331997727a18c8f82030": "import re\n\n\ndef type_out(s):\n    clipboard = \"\"\n    def paste(m):\n    nonlocal clipboard\n    copy = m[1]\n    if not copy:\n        return clipboard\n    if copy . isdigit():\n        return int(copy) * clipboard\n    return (clipboard := copy)\n\n    return re . sub(r'\\[([^]]*)\\]', paste, s)\n",
  "656e4602ee72af0017e37e82": "def cuckoo_clock(t, n):\n    # around-the-clock optimization (=> O(1) runtime)\n    n = n % 114 if n > 114 + 15 else n\n    h, m = map(int, t . split(':'))\n    t = h % 12 * 60 + m\n    while True:\n    k = t / / 60 or 12 if t % 60 == 0 else t % 15 == 0\n    if n <= k:\n        return f\" { t / / 60 or 12 :0 2 d } : { t % 60 :0 2 d } \"\n    n, t = n - k, (t + 1) % (12 * 60)\n",
  "656f6f96db71be286d8f5c6b": "def divisors(n: int) - > list[int]:\n    solution: list[int] = [1]\n    currentDivisor: int = 2\n    while n > 1:\n    index: int = 0\n    while not n % currentDivisor:\n    n / /= currentDivisor\n    length: int = len(solution)\n    for i in range(index, length):\n    index = length\n    solution . append(currentDivisor * solution[i])\n\n    currentDivisor += 1\n    # the list is already close to sorted so this isnt very expensive\n    return sorted(solution)\n\n    # this second solution is very close to the first, and doest reliably speed up the kata tests\n    # def divisors(n: int) -> list[int]:\n    # solution: list[int] = [1]\n    # # doing multiples of two first allows skipping current divisor by 2 later\n    # i:int = 1\n    # while not n % 2:\n    # n //= 2\n    # solution.append(2**i)\n    # i+=1\n    # currentDivisor: int = 3\n    # while n > 1:\n    # index: int = 0\n    # while not n % currentDivisor:\n    # n //= currentDivisor\n    # length: int = len(solution)\n    # for i in range(index, length):\n    # index = length\n    # solution.append(currentDivisor * solution[i])\n    # currentDivisor += 2\n    # the advantage of skipping current divisor by 2 is offset by having slower sorting since it is further from the sorted solution\n    # return sorted(solution)\n",
  "6565070e98e6731c13882aa0": "from collections import Counter\r\nfrom itertools import pairwise\r\nfrom math import prod\r\n\r\n\r\ndef find_ways(initial_num, target_num, must_include=None, must_avoid=None):\r\n    numbers = [initial_num, * sorted(must_include or []), target_num]\r\n    must_avoid = {* must_avoid} if must_avoid else set()\r\n    return prod(ways(start, stop, must_avoid) for start, stop in pairwise(numbers))\r\n\r\n    def ways(start, stop, must_avoid):\r\n    numbers = Counter((start,))\r\n    while numbers:\r\n    n = min(numbers)\r\n    k = numbers . pop(n)\r\n    if n == stop:\r\n    return k\r\n    for m in n + 3, n + sum(map(int, str(abs(n)))), n + n % 4:\r\n    if n < m <= stop and m not in must_avoid:\r\n    numbers[m] += k\r\n    return 0\r\n",
  "6562d61a9b55884c720e2556": "def gauss_seidel(c):\r\n    x = y = z = i = 0\r\n    while i == 0 or any(abs(d) > 0.0001 for d in (x - ox, y - oy, z - oz)):\r\n    ox, oy, oz = x, y, z\r\n    x = (c[0][3] - c[0][1] * y - c[0][2] * z) / c[0][0]\r\n    y = (c[1][3] - c[1][0] * x - c[1][2] * z) / c[1][1]\r\n    z = (c[2][3] - c[2][0] * x - c[2][1] * y) / c[2][2]\r\n    i += 1\r\n    return [x, y, z], i\r\n",
  "653888111746620b77a3ccd5": "def choose_king_moves(king, knight, n):\r\n    c = king[0]. translate(str . maketrans('abcdefgh', 'babcdefg'))\r\n    r = (int(king[1]) - 1) & 6 | (ord(c) ^ ord(knight[0]) ^ ord(knight[1])) & 1\r\n    return [f' { c }{( r ^ ( k & 1 )) + 1 } ' for k in range(n)]\r\n",
  "65579292e361e60e202906f4": "from functools import reduce\r\nfrom collections import deque\r\nimport re\r\nOPS = {\r\n    'not': lambda x: 'T' if x == 'F' else 'F' if x == 'T' else 'U',\r\n    'xor': lambda a, b: 'U' if 'U' in (a, b) else 'F' if a == b else 'T',\r\n    'and': lambda a, b: 'T' if 'T' == a == b else 'F' if 'F' in (a, b) else 'U',\r\n    'or': lambda a, b: 'T' if 'T' in (a, b) else 'F' if 'F' == a == b else 'U',\r\n}\r\nVALUES = dict(zip('TUF', (1, 0, - 1)))\r\n\r\n\r\ndef bin_op(op, next_op):\r\n    def parser(q):\r\n    elt = next_op(q)\r\n    while q and q[0] == op:\r\n    q . popleft()\r\n    v = next_op(q)\r\n    elt = OPS[op](elt, v)\r\n    return elt\r\n    return parser\r\n    def parse_term(q):\r\n    elt = q . popleft()\r\n    match elt:\r\n    case '(':\r\n    elt = expression(q)\r\n    assert q . popleft() == ')'\r\n    return elt\r\n    case 'not':\r\n    v = parse_term(q)\r\n    out = OPS[elt](v)\r\n    return out\r\n    case _:\r\n    return elt\r\n    expression = reduce(lambda f, op: bin_op(\r\n        op, f), 'and xor or' . split(), parse_term)\r\n    tokenizer = re . compile(r'|' . join(OPS) + r'|\\S')\r\n\r\n    def threevl(s):\r\n    lst = tokenizer . findall(s)\r\n    q = deque(lst)\r\n    out = expression(q)\r\n    return VALUES[out]\r\n",
  "58aa8b0538cf2eced5000115": "def exchange_sort(sequence):\r\n    x = 0\r\n    y = 0\r\n    for f, g in zip(sequence, sorted(sequence)):\r\n    if f < g:\r\n    x += 1\r\n    elif f > g:\r\n    y += 1\r\n    return max(x, y)\r\n",
  "5d06938fcac0a5001307ce57": "def golomb(given, n):\r\n    res, idx, seq = [], 0, iter(given)\r\n    if (x := next(seq)) != 0:\r\n    res, idx = [x] * x, 1\r\n    elif (x := next(seq)) != 1:\r\n    res, idx = [x] * 2 + [0] * x + [x] * (x - 2), 2\r\n    else:\r\n    res, idx = [1, (x := next(seq)), 1, 0] + [1] * (x - 2), 3\r\n    while len(res) < n and (x := next(seq)):\r\n    if idx < len(res):\r\n    res += [x] * res[idx]\r\n    else:\r\n    res += [x] * x\r\n    idx += 1\r\n    return res[: n]\r\n",
  "65553172219a8c8e263b58ff": "from textwrap import fill\n\n\ndef hex_to_bitmap(h):\n    return fill(f' { int ( h , 16 ):0 128 b } ', 8)\n",
  "5bc6f9110ca59325c1000254": "from collections import defaultdict\r\n\r\n\r\ndef count(chessBoard):\r\n    # Initialize:\r\n    board = chessBoard . copy()\r\n    tally = defaultdict(int)\r\n\r\n    # Compute Longest square ending in bottom right corner of each element and tally up:\r\n    for i, row in enumerate(board):\r\n    for j, element in enumerate(row):\r\n        # Edge detection:\r\n    if i == 0 or j == 0:\r\n    continue\r\n    # Compute & Tally:\r\n    if element:\r\n    n = board[i][j] = min(board[i - 1][j], board[i]\r\n                          [j - 1], board[i - 1][j - 1]) + 1\r\n    for x in range(n, 1, - 1):\r\n    tally[x] += 1\r\n    return tally\r\n",
  "5f24315eff32c4002efcfc6a": "from collections import defaultdict\r\n\r\n\r\ndef setter(prep, k, v, supSetter):\r\n    if callable(v):\r\n    def wrap(* args):\r\n    f = prep . d[k][len(args)]\r\n    if isinstance(f, int):\r\n        raise AttributeError()\r\n    return f(* args)\r\n    prep . d[k][v . __code__ . co_argcount] = v\r\n    v = wrap\r\n    supSetter(k, v)\r\n\r\n    class Prep (dict):\r\n    def __init__(self): self . d = defaultdict(lambda: defaultdict(int))\r\n    def __setitem__(self, k, v): setter(self, k, v, super(). __setitem__)\r\n\r\n    class Meta (type):\r\n    @ classmethod\r\n    def __prepare__(cls, * args, * * kwds): return Prep()\r\n\r\n    def __new__(metacls, name, bases, prep, * * kwargs):\r\n    prep['_Meta__DCT'] = prep\r\n    return super(). __new__(metacls, name, bases, prep, * * kwargs)\r\n\r\n    def __setattr__(self, k, v): setter(\r\n        self . __DCT, k, v, super(). __setattr__)\r\n",
  "63cb1c38f1504e1deca0f282": "def dequeue_count(queues):\r\n    return sum(len(q) - next((j for j, v in enumerate(q) if v != i), len(q))\r\n               for i, q in enumerate(queues))\r\n",
  "5b3bec086be5d8893000002e": "''' \r\n WARNING: EXTREMELY BAD PRACTICE ALERT \r\n DO NOT DO THIS IF YOU ARE WORKING ON A PROJECT \r\n ALTHOUGH HARD CODING CAN SOMETIMES MAKE CODE RUN FASTER, IT MAKES IT MESSY AND UNREADABLE \r\n '''\r\nrotate_face_idx = [* zip(range(1, 10), [7, 4, 1, 8, 5, 2, 9, 6, 3])]\r\n\r\n\r\ndef increase_idx(idx, n): return [\r\n    (start + n, changed + n) for start, changed in idx]\r\n\r\n\r\nU_turn_idx = rotate_face_idx + [(10, 19), (11, 20), (12, 21), (19, 28), (20, 29),\r\n                                (21, 30), (28, 37), (29, 38), (30, 39), (37, 10), (38, 11), (39, 12)]\r\nL_turn_idx = increase_idx(rotate_face_idx, 9) + [(1, 45), (4, 42), (7, 39), (\r\n    19, 1), (22, 4), (25, 7), (39, 52), (42, 49), (45, 46), (46, 19), (49, 22), (52, 25)]\r\nF_turn_idx = increase_idx(rotate_face_idx, 18) + [(7, 18), (8, 15), (9, 12), (\r\n    12, 46), (15, 47), (18, 48), (28, 7), (31, 8), (34, 9), (46, 34), (47, 31), (48, 28)]\r\nR_turn_idx = increase_idx(rotate_face_idx, 27) + [(3, 21), (6, 24), (9, 27), (\r\n    21, 48), (24, 51), (27, 54), (37, 9), (40, 6), (43, 3), (48, 43), (51, 40), (54, 37)]\r\nB_turn_idx = increase_idx(rotate_face_idx, 36) + [(1, 30), (2, 33), (3, 36), (\r\n    10, 3), (13, 2), (16, 1), (30, 54), (33, 53), (36, 52), (52, 10), (53, 13), (54, 16)]\r\nD_turn_idx = increase_idx(rotate_face_idx, 45) + [(16, 43), (17, 44), (18, 45), (\r\n    25, 16), (26, 17), (27, 18), (34, 25), (35, 26), (36, 27), (43, 34), (44, 35), (45, 36)]\r\nM_turn_idx = [(2, 44), (5, 41), (8, 38), (20, 2), (23, 5), (26, 8),\r\n              (38, 53), (41, 50), (44, 47), (47, 20), (50, 23), (53, 26)]\r\nE_turn_idx = [(13, 40), (14, 41), (15, 42), (22, 13), (23, 14), (24, 15),\r\n              (31, 22), (32, 23), (33, 24), (40, 31), (41, 32), (42, 33)]\r\nS_turn_idx = [(4, 17), (5, 14), (6, 11), (11, 49), (14, 50), (17, 51),\r\n              (51, 29), (50, 32), (49, 35), (29, 4), (32, 5), (35, 6)]\r\n\r\n\r\ndef make_turn(pos, idx):\r\n    copied = pos . copy()\r\n    for start, changed in idx:\r\n    pos[start] = copied[changed]\r\n\r\n    def perform(seq):\r\n        # idea is you only need to use moves in the set {U, L, F, R, B, D, M, E, S} to get any position\r\n        # it is possible to do it with the moves {U, L, F, X, Y, Z} only, but it makes things a bit harder\r\n        # this method is quite inefficient, but it makes things easier and this isn't a performance-based kata anyway\r\n    for move in 'ULFRBDulfrbdMESXYZ':\r\n    for times, char in enumerate('2\\''):\r\n    seq = seq . replace(move + char, move * (times + 2))\r\n\r\n    for comb in [('XYZ', 'rLLL uDDD fBBB' . split()), ('ulfrbd', 'UEEE LM FS RMMM BSSS DE' . split())]:\r\n    for move in zip(* comb):\r\n    seq = seq . replace(* move)\r\n\r\n    seq = seq . replace(' ', '')\r\n    position = {idx + 1: colour for idx,\r\n                colour in enumerate('' . join(c * 9 for c in 'ybrgow'))}\r\n\r\n    for move in seq:\r\n    exec(f'make_turn(position, { move } _turn_idx)')\r\n    return '' . join(position . values())\r\n",
  "5ecef4a6640dbb0032bc176d": "happy = {1, 7, 10, 13, 19, 23, 28, 31, 32,\r\n         44, 49, 68, 70, 79, 82, 86, 91, 94, 97}\r\nsums = {0: [0]}\r\n\r\nfor _ in range(7):\r\n    new_sums = {}\r\n    for x, terms in sums . items():\r\n    for d in range(10):\r\n    new_sums . setdefault(x + d * d, []). extend(term *\r\n                                                 10 + d for term in terms)\r\n    sums = new_sums\r\n    for x, terms in sums . items():  # order matters\r\n    if x in happy:\r\n    happy . update(terms)\r\n\r\n    from bisect import bisect\r\n\r\n    def perf_happy(n, happy_list=sorted(happy)\r\n                   ): return happy_list[: bisect(happy_list, n)]\r\n",
  "571ec81d7e8954ce1400014f": "import numpy as np\r\nfrom itertools import combinations\r\n\r\n\r\ndef validate_battlefield(field):\r\n    return validate(np . array(field), [(1, 4), (2, 3), (3, 2)], 20)\r\n\r\n    def validate(field, ships, expected):\r\n    if field . sum() != expected:\r\n        return False\r\n    elif not ships:\r\n        return True  # single-unit ships can be anywhere, so we can shortcut\r\n    # We are looking for (n) ships of length (size).\r\n    (n, size), remaining = ships[0], ships[1:]\r\n\r\n    # Find horizontal/vertical slices of the appropriate length containing all ones ...\r\n    slices = filter(all, (f[i, j: j + size] for f in (field, field . T)\r\n                    for (i, j) in zip(* np . where(f))))\r\n\r\n    # ... and try zeroing-out (n) of them at a time to find a valid combination.\r\n    # If the recursive check fails, we backtrack by setting the slices back to one.\r\n    return any(\r\n        assign(s, 0) or validate(field, remaining,\r\n                                 expected - n * size) or assign(s, 1)\r\n        for s in combinations(slices, n)\r\n    )\r\n\r\n    def assign(slices, x):\r\n        # Set the value of all array slices in a collection\r\n    for arr in slices:\r\n        arr[:] = x\r\n",
  "5f134651bc9687000f8022c4": "idx, n, seq = 2, 6, [1, 2, 4, 6]\r\nwhile n < 2 * * 41:\r\n    idx += 1\r\n    seq . extend(range(n + idx, n + (seq[idx] - seq[idx - 1]) * idx + 1, idx))\r\n    n += (seq[idx] - seq[idx - 1]) * idx\r\n    from bisect import bisect\r\n    def find(n): return bisect(seq, n)\r\n",
  "6545283611df271da7f8418c": "def three_powers(n): return n > 2 and n . bit_count() <= 3\n",
  "5eee6c930514550026cefe9e": "from itertools import permutations\r\n\r\n\r\ndef packing_rectangles(* args):\r\n    result, inputs = float(\"inf\"), {\r\n        args[: 2], args[2: 4], args[4:], args[1:: - 1], args[3: 1: - 1], args[: 3: - 1]}\r\n    for a, b, c, d, e, f in permutations(args):\r\n    if (a, b) in inputs and (c, d) in inputs and (e, f) in inputs:\r\n    result = min(result, (a + c + e) * max(b, d, f),\r\n                 (a + max(c, e)) * max(b, d + f))\r\n    return result\r\n",
  "5e90f0544af7f400102675ca": "import numpy as np\r\n\r\n\r\nclass Basis:  # stores the active basis\r\n    def __init__(self, A, basis_list, Binv):\r\n    self . A = np . copy(A)\r\n    self . Binv = np . copy(Binv)\r\n    self . basis_list = np . copy(basis_list)\r\n\r\n    self . is_basis = np . array([False] * A . shape[1])\r\n    self . is_basis[basis_list] = True\r\n    self . not_basis_list = np . where(~ self . is_basis)[0]\r\n\r\n    self . indexes = np . array([0] * A . shape[1])\r\n    self . indexes[basis_list] = np . arange(len(basis_list))\r\n    self . indexes[self . not_basis_list] = np . arange(\r\n        len(self . not_basis_list))\r\n\r\n    def update(self, oldcol, newcol):  # updates efficiently the inverse of the basis at every step\r\n    Y = self . Binv @ self . A[:, newcol]\r\n    i = self . indexes[oldcol]\r\n    self . Binv[i, :] *= 1 / Y[i]\r\n    Y[i] = 0.0\r\n    self . Binv -= np . outer(Y, self . Binv[i, :])\r\n\r\n    oldindex, newindex = self . indexes[oldcol], self . indexes[newcol]\r\n    self . basis_list[oldindex], self . not_basis_list[newindex] = newcol, oldcol\r\n    self . indexes[oldcol], self . indexes[newcol] = newindex, oldindex\r\n    self . is_basis[oldcol] = False\r\n    self . is_basis[newcol] = True\r\n    class OTSimplexSolver:  # Optimal transport solver based on the simplex method\r\n    def __init__(self, src, dst, cost):\r\n    self . src, self . dst, self . cost = src, dst, cost\r\n    self . n_src, self . n_dst = len(src), len(dst)\r\n\r\n    self . rank = self . n_src + self . n_dst - 1\r\n    self . n_params = self . n_src * self . n_dst\r\n    # We create a corresponding linear programming problem\r\n    self . A = np . zeros((self . rank, self . n_params))\r\n    for i in range(self . n_src):\r\n    for j in range(self . n_dst):\r\n    self . A[i, self . n_dst * i + j] = 1.0\r\n    if j < self . n_dst - 1:\r\n    self . A[self . n_src + j, self . n_dst * i + j] = 1.0\r\n    self . b = np . concatenate((src, dst[: - 1]))\r\n    self . c = np . array(cost). flatten()\r\n    self . basis = None\r\n    def init_basis(self):  # creates the initial basis\r\n    basis_list = np . array(list(range(self . n_dst - 1)) + list(\r\n        range(self . n_dst - 1, self . n_dst * self . n_src, self . n_dst)))\r\n\r\n    Binv = np . zeros((self . rank, self . rank))\r\n    Binv[self . n_dst - 1:, : self . n_src] = np . identity(self . n_src)\r\n    Binv[: self . n_dst - 1, self . n_src:] = np . identity(self . n_dst - 1)\r\n    Binv[self . n_dst - 1, self . n_src:] = - 1.0\r\n    return Basis(self . A, basis_list, Binv)\r\n\r\n    # finds initial basic feasible solution using the least-cost method\r\n    def find_initial_solution_lcm(self):\r\n    x = np . zeros(self . n_params)\r\n    basis = self . init_basis()\r\n\r\n    src_remaining, dst_remaining = self . src[:], self . dst[:]\r\n    used = np . full(self . n_params, False)\r\n    allowed = np . full(self . n_params, False)\r\n    basis_size = 0\r\n    indexes = np . argsort(self . c)\r\n    for k in indexes:\r\n    i, j, loc_cost = k / / self . n_dst, k % self . n_dst, self . c[k]\r\n    transported = min(src_remaining[i], dst_remaining[j])\r\n    if (transported == 0):\r\n    continue\r\n    used[k] = True\r\n    basis_size += 1\r\n    x[k] += transported\r\n    src_remaining[i] -= transported\r\n    dst_remaining[j] -= transported\r\n    if not basis . is_basis[k]:\r\n    allowed[:] = False\r\n    allowed[basis . basis_list[np . abs(\r\n        basis . Binv @ self . A[:, k]) > 0.01]] = True\r\n    allowed[used] = False\r\n    basis . update(np . where(allowed)[0][0], k)\r\n    if basis_size == self . rank:\r\n    break\r\n    return x, basis\r\n    def simplex_step(self):\r\n    lambd = self . c[self . basis . basis_list] @ self . basis . Binv\r\n    lambd = np . concatenate((lambd, [0.0]))\r\n    # faster computation of s = c - A^T \\lambda\r\n    s = self . c - (lambd[None, self . n_src:] +\r\n                    lambd[: self . n_src, None]). flatten()\r\n    # nonbasic variables with s < 0\r\n    indexes_pivots = np . where((s < - 0.01) & ~ self . basis . is_basis)[0]\r\n    if len(indexes_pivots) == 0:  # if there is none, solution is optimal\r\n    return True\r\n    pivot = indexes_pivots[np . argmin(s[indexes_pivots])]\r\n    d = self . basis . Binv @ self . A[:, pivot]\r\n    # In OT, no need to worry about unboundedness\r\n    cond = d > 0.01\r\n    indexes = np . where(cond)[0]\r\n\r\n    xb = self . x[self . basis . basis_list]\r\n    j = indexes[np . argmin(xb[cond] / d[cond])]\r\n    oldcol = self . basis . basis_list[j]\r\n    xi = xb[j] / d[j]\r\n\r\n    self . x[self . basis . basis_list] -= d * xi\r\n    self . x[pivot] = xi\r\n    self . basis . update(oldcol, pivot)\r\n    return False\r\n    def solve(self):\r\n    self . x, self . basis = self . find_initial_solution_lcm()\r\n    res = False\r\n    while not res:\r\n    res = self . simplex_step()\r\n    return self . x @ self . c, self . x\r\n    def minimum_transportation_price(suppliers, consumers, costs):\r\n    solver = OTSimplexSolver(suppliers, consumers, costs)\r\n    return solver . solve()[0]\r\n",
  "65382cfc5396a5bc37d19395": "def vertical_sum(n, i):\n    idx = abs(i) + 1\n    top = idx * (idx + 1) / / 2\n    if i < 0:\n        top += i\n    hgt = (n - idx) / / 2\n    return hgt * (hgt + 1) * (n - 1 - (n + idx) % 2) - hgt * (hgt + 1) * (hgt - 1) * 4 / / 3 + (hgt + 1) * top\n",
  "5f5bef3534d5ad00232c0fa8": "from itertools import count\r\nfrom functools import reduce\r\n\r\n\r\ndef converge(g, * us):\r\n    floods = [frozenset({u}) for u in us]\r\n    vus = set()\r\n    for step in count(0):\r\n    if all(s in vus for s in floods):\r\n        break\r\n    vus . update(floods)\r\n    overlap = reduce(set . intersection, floods[1:], set(floods[0]))\r\n    if overlap:\r\n        return step\r\n    floods = [frozenset(neigh for u in f for neigh in g[u]) for f in floods]\r\n",
  "59b9a92a6236547247000110": "import math\r\nimport string\r\nfrom functools import cached_property\r\nfrom itertools import count\r\n\r\n\r\nclass Deck:\r\n    def __init__(self):\r\n    self . suits = tuple('CDHS')\r\n    self . ranks = tuple('A23456789TJQK')\r\n    self . cards = tuple(r + s for s in self . suits for r in self . ranks)\r\n\r\n    def __len__(self) - > int:\r\n    return len(self . cards)\r\n\r\n    def find_nth_permutation(self, n: int) - > list[str]:\r\n    cards, result = [* self . cards], []\r\n    for i in range(len(self) - 1, - 1, - 1):\r\n    index, n = divmod(n, math . factorial(i))\r\n    result . append(cards . pop(index))\r\n    return result\r\n    def find_ordinal_number_of_permutation(self, state: list[str]) - > int:\r\n    cards, num_of_perm = [* self . cards], 0\r\n    for i, card in zip(count(len(self) - 1, - 1), state):\r\n    index = cards . index(card)\r\n    num_of_perm += index * math . factorial(i)\r\n    _ = cards . pop(index)\r\n    return num_of_perm\r\n    class ValidAlphabet:\r\n    def __init__(self):\r\n    self . valid_symbols = tuple(' ' + string . ascii_uppercase)\r\n\r\n    def __len__(self) - > int:\r\n    return len(self . valid_symbols)\r\n\r\n    @ cached_property\r\n    def symbols_table(self) - > dict[str, int]:\r\n    return {s: i for i, s in enumerate(self . valid_symbols)}\r\n\r\n    @ cached_property\r\n    def indexes_table(self) - > dict[int, str]:\r\n    return {i: s for s, i in self . symbols_table . items()}\r\n\r\n    class PlayingCards:\r\n    ALPHA = ValidAlphabet()\r\n    DECK = Deck()\r\n\r\n    @ classmethod\r\n    def encode(cls, message: str) - > list[str]:\r\n    k, rm = len(cls . ALPHA), reversed(message)\r\n    perm_n = sum(\r\n        cls . ALPHA . symbols_table[s] * k * * i for i, s in enumerate(rm)\r\n    )\r\n    return cls . DECK . find_nth_permutation(perm_n)\r\n\r\n    @ classmethod\r\n    def decode(cls, deck: list[str]) - > str:\r\n    n = cls . DECK . find_ordinal_number_of_permutation(deck)\r\n    result = []\r\n    while n:\r\n    n, index = divmod(n, len(cls . ALPHA))\r\n    result . append(cls . ALPHA . indexes_table[index])\r\n    return '' . join(reversed(result))\r\n",
  "59c2ff946bddd2a2fd00009e": "from string import ascii_uppercase\r\n\r\n\r\nclass CardChameleon:\r\n\r\n    __slots__ = ('deck', 'is_valid', 'text')\r\n\r\n    ALPHABET = ascii_uppercase + ' '\r\n    BLACK_CARDS = [\r\n        rank + suit for suit in 'CS' for rank in 'A23456789TJQK'] + ['XB']\r\n    RED_CARDS = [\r\n        rank + suit for suit in 'DH' for rank in 'A23456789TJQK'] + ['XR']\r\n\r\n    TO_BLACK = dict(zip(ALPHABET, BLACK_CARDS))\r\n    FROM_BLACK = dict(zip(BLACK_CARDS, ALPHABET))\r\n    TO_RED = dict(zip(ALPHABET, RED_CARDS))\r\n    FROM_RED = dict(zip(RED_CARDS, ALPHABET))\r\n\r\n    def __init__(self, text: str, deck: list) - > None:\r\n    self . is_valid = set(deck) == self . FROM_BLACK . keys(\r\n    ) | self . FROM_RED . keys() and set(text) <= set(self . ALPHABET)\r\n    self . deck = self . prepare(deck) if self . is_valid else deck\r\n    self . text = text\r\n    def prepare(self, deck) - > list:\r\n    res = [''] * len(deck)\r\n    black, red = [], []\r\n    for card in deck:\r\n        (black if card in self . FROM_BLACK else red). append(card)\r\n    res[0:: 2] = red\r\n    res[1:: 2] = black\r\n    return res\r\n    def swap(self, i: int, j: int) - > None:\r\n    self . deck[i], self . deck[j] = self . deck[j], self . deck[i]\r\n\r\n    def shift(self, n: int) - > None:\r\n    self . deck = self . deck[n:] + self . deck[: n]\r\n\r\n    def encrypt(self) - > str or None:\r\n    return self . __cipher(self . TO_BLACK, self . FROM_RED, mode=0)\r\n\r\n    def decrypt(self) - > str or None:\r\n    return self . __cipher(self . TO_RED, self . FROM_BLACK, mode=1)\r\n\r\n    def __cipher(self, to_card: dict, from_card: dict, mode: int) - > str or None:\r\n    if not self . is_valid:\r\n        return None\r\n    res = []\r\n    for char in self . text:\r\n    swap_index = 0\r\n    for i in range(2):\r\n    card = to_card[char]\r\n    index = self . deck . index(card) + mode - 1\r\n    if i ^ mode:\r\n        swap_index = index\r\n    card = self . deck[index + mode]\r\n    char = from_card[card]\r\n    self . swap(0, swap_index), self . shift(2)\r\n    res . append(char)\r\n    return '' . join(res)\r\n",
  "653db02b1eca91b474817307": "def rake_and_burn(days):\r\n    rain = yard = pile = 0\r\n    for p, ws, wd in days:\r\n    if p == 'snow':\r\n    return yard / / 12\r\n    if p != 'rain' and not rain:\r\n    if pile == 2 and ws <= 10 and 'S' not in wd:\r\n    pile = 0\r\n    yard += 3\r\n    elif pile < 2 and ws <= 12:\r\n    pile += 1\r\n    yard += 4\r\n    rain = p == 'rain'\r\n",
  "6532414794f1d24774f190ae": "import copy\r\n# Modifica el poder de salto y el arreglo seg\u00fan la direcci\u00f3n de salto e \u00edndice dado\r\n\r\n\r\ndef Jump():\r\n    global jumpPower, array, index, direction, length\r\n    global indexSequense, jumpPowerSequense, arraySequense, directionSequense\r\n    global contador\r\n    jumpPower += array[index]\r\n    array[index] = 0\r\n    jumpPowerSequense . append(jumpPower)\r\n\r\n    directionSequense . append(direction)\r\n    if direction < 0:\r\n    array . reverse()\r\n    arraySequense . append(copy . deepcopy(array))\r\n    array . reverse()\r\n    indexSequense . append(length - index - 1)\r\n    else:\r\n    arraySequense . append(copy . deepcopy(array))\r\n    indexSequense . append(index)\r\n\r\n    # Calcula el pr\u00f3ximo \u00edndice y direcci\u00f3n (izq o der), seg\u00fan el poder de salto e \u00edndice actual\r\n\r\n    def NextIndex():\r\n    global jumpPower, array, index, direction, length, contador\r\n    index += jumpPower\r\n    q = index / / length\r\n    if q > 0:\r\n    direction *= (- 1) * * q\r\n    if q % 2 == 1:\r\n    array . reverse()\r\n    index = index % length\r\n    else:\r\n    index = index % length\r\n    contador += 1\r\n    # print(f\"\\nEstado # {contador}: {newState}\\n{arraySequense}\")\r\n    # Personaliza las condiciones iniciales\r\n    def InitialConditions(ARRAY, START):\r\n    global jumpPower, array, index, direction, length\r\n    global indexSequense, jumpPowerSequense, arraySequense, directionSequense\r\n    global states, newState, contador\r\n    array = ARRAY\r\n    length = len(array)\r\n    # indice inicial (cualquier \u00edndice positivo y menor que length)\r\n    index = START\r\n    jumpPower = 0  # poder de salto inicial (cualquier entero positivo)\r\n    # direcci\u00f3n inicial (1 si coienza hacia la derecha y -1 si comienza hacia la izquierda)\r\n    direction = 1\r\n    indexSequense = [index]\r\n    jumpPowerSequense = [jumpPower]\r\n    arraySequense = [copy . deepcopy(array)]\r\n    directionSequense = [direction]\r\n    states = set()\r\n\r\n    contador = 0\r\n    newState = (indexSequense[0], jumpPowerSequense[0], directionSequense[0])\r\n    # print(f\"\\nEstado # {contador}: {newState}\\n{arraySequense}\")\r\n    # Determina si el conejo termina o se queda estancado (funciona para arrays solo con naturales)\r\n    # el primer argumento es el campo o arreglo y el segundo ser\u00e1 la posici\u00f3n inicial del conejo\r\n    def crazy_rabbit(field, cr):\r\n    global jumpPower, array, index, direction, length\r\n    global indexSequense, jumpPowerSequense, arraySequense, directionSequense\r\n    global states, newState\r\n    InitialConditions(field, cr)\r\n\r\n    while newState not in states:\r\n    states . add(newState)\r\n    Jump()\r\n    newState = (indexSequense[- 1],\r\n                jumpPowerSequense[- 1], directionSequense[- 1])\r\n\r\n    NextIndex()\r\n\r\n    # Aplica solo para un arreglo de naturales\r\n    if sum(array) == 0:\r\n    return True\r\n    else:\r\n    return False\r\n",
  "59a07c8810963911ca000090": "steps_up = {\r\n    'Cb': ('Dbb', 'Db'),\r\n    'C': ('Db', 'D'),\r\n    'C#': ('D', 'D#'),\r\n    'Db': ('Ebb', 'Eb'),\r\n    'D': ('Eb', 'E'),\r\n    'D#': ('E', 'E#'),\r\n    'Eb': ('Fb', 'F'),\r\n    'E': ('F', 'F#'),\r\n    'E#': ('F#', 'FX'),\r\n    'Fb': ('Gbb', 'Gb'),\r\n    'F': ('Gb', 'G'),\r\n    'F#': ('G', 'G#'),\r\n    'Gb': ('Abb', 'Ab'),\r\n    'G': ('Ab', 'A'),\r\n    'G#': ('A', 'A#'),\r\n    'Ab': ('Bbb', 'Bb'),\r\n    'A': ('Bb', 'B'),\r\n    'A#': ('B', 'B#'),\r\n    'Bb': ('Cb', 'C'),\r\n    'B': ('C', 'C#'),\r\n    'B#': ('C#', 'CX')\r\n}\r\n\r\n\r\ndef get_scale(mode, note): return [\r\n    note] + [(note := steps_up[note][step == 'W']) for step in mode . split()[: - 1]]\r\n",
  "5e1ab1b9fe268c0033680e5f": "def solve(n):\r\n    def length(n):\r\n    s = 0\r\n    for i in range(20):\r\n    o = 10 * * i - 1\r\n    if o > n:\r\n        break\r\n    s += (n - o) * (n - o + 1) / / 2\r\n    return s\r\n    def binary_search(k):\r\n    n = 0\r\n    for p in range(63, - 1, - 1):\r\n    if length(n + 2 * * p) < k:\r\n        n += 2 * * p\r\n    return n\r\n    def sequence(n):\r\n    if n < 10:\r\n        return n\r\n    for i in range(1, 19):\r\n    segment = i * 9 * 10 * * (i - 1)\r\n    if n <= segment:\r\n    return str(10 * * (i - 1) + (n - 1) / / i)[(n - 1) % i]\r\n    else:\r\n    n -= segment\r\n    return int(sequence(n - length(binary_search(n))))\r\n",
  "652643925c042100247fffc6": "import re\r\n\r\n\r\ndef fruit_pack(orders):\r\n    arr = []\r\n    for order in orders:\r\n    shelf = ['', '', '']\r\n    for num, fruit in re . findall('(\\d+)(\\D)', order):\r\n    pallet, box, bag = int(num) / / 50, (int(num) % 50) / / 10, int(num) % 10\r\n    if pallet:\r\n        shelf[2] += ('[' + fruit + ']') * pallet\r\n    if box:\r\n        shelf[1] += ('{' + fruit + '}') * box\r\n    if bag:\r\n        shelf[0] += ('(' + fruit * bag + ')')\r\n    m = max(map(len, shelf))\r\n    arr . append([x . rjust(m, '-') for x in shelf])\r\n    return arr\r\n",
  "6525caefd77c582baf678ddf": "from math import ceil\n\n\ndef number_lappings(my_speed, ghost_speed, time, round_length):\n    if my_speed <= ghost_speed:\n    return 0\n    return ceil((my_speed - ghost_speed) * time / round_length) - 1\n",
  "6523a71df7666800170a1954": "from gmpy2 import digits\r\n\r\n\r\ndef esthetic(num, max_base=10):\r\n    return [base for base in range(2, max_base + 1) if (dig := digits(num, base))\r\n            and all(abs(int(a) - int(b)) == 1 for a, b in zip(dig, dig[1:]))]\r\n",
  "6521bbf23256e8e5801d64f1": "def next_palin(n):\r\n    s = str(n)\r\n    l = len(s)\r\n    h = l / / 2\r\n    r = l % 2\r\n    t = s[: h + r] + s[: h][:: - 1]\r\n\r\n    if t > s:\r\n    return int(t)\r\n    elif t == '9' * l:\r\n    return 10 * * l + 1\r\n    else:\r\n    m = str(int(s[: h + r]) + 1)\r\n    return int(m + m[: h][:: - 1])\r\n",
  "58febc23627d2f48de000060": "from heapq import heappush, heappop\r\n\r\n\r\ndef closure_gen(* s):\r\n    q = sorted(s)\r\n    m = set(s)\r\n    while q:\r\n    curr = heappop(q)\r\n    yield curr\r\n    for i in s:\r\n    t = curr * i\r\n    if t not in m:\r\n    heappush(q, t)\r\n    m . add(t)\r\n",
  "651bfcbd409ea1001ef2c3cb": "class Weapon:\r\n    def __init__(self, factors):\r\n    self . factors = factors\r\n    self . enhanced = False\r\n    def enhance(self, factors):\r\n    self . factors = [max(a, b) for a, b in zip(self . factors, factors)]\r\n    self . enhanced = True\r\n    def damage(self, characteristics):\r\n    return sum(c * f for c, f in zip(characteristics, self . factors)) + self . factors[3]\r\n\r\n    class Character:\r\n    def __init__(self, name='Hero', strength=10, dexterity=10, intelligence=10):\r\n    self . name = name\r\n    self . characteristics = [strength, dexterity, intelligence]\r\n    self . weapons = {'limbs': Weapon([1, 1, 1, 0])}\r\n    self . _best_weapon = None\r\n    self . log = []\r\n\r\n    def __getattr__(self, method):\r\n    def wrapper(* args):\r\n    name = method . replace('_', ' '). capitalize()\r\n    if len(args) == 4:\r\n    self . find_weapon(name, args)\r\n    else:\r\n    self . manage_event(name, args)\r\n\r\n    return wrapper\r\n    def character_info(self) - > str:\r\n    weapon = self . weapons[self . best_weapon]\r\n    return '\\n' . join([self . name, * [f' { c } { v } ' for c, v in zip(['str', 'dex', 'int'], self . characteristics)],\r\n                        f' { self . best_weapon }{[ \"\" , \"(enhanced)\" ][ weapon . enhanced ]} { weapon . damage ( self . characteristics )} dmg'])\r\n\r\n    def event_log(self) - > str:\r\n    return '\\n' . join(self . log)\r\n\r\n    def find_weapon(self, name, factors):\r\n    if name in self . weapons:\r\n    self . weapons[name]. enhance(factors)\r\n    else:\r\n    self . weapons[name] = Weapon(factors)\r\n    self . _best_weapon = None\r\n    self . log . append(f\" { self . name } finds ' { name } '\")\r\n\r\n    @ property\r\n    def best_weapon(self):\r\n    if self . _best_weapon is None:\r\n    self . _best_weapon = min(self . weapons . keys(\r\n    ), key=lambda n: (- self . weapons[n]. damage(self . characteristics), n))\r\n    return self . _best_weapon\r\n    def manage_event(self, name, modifiers):\r\n    self . characteristics = [c + m for c,\r\n                              m in zip(self . characteristics, modifiers)]\r\n    self . _best_weapon = None\r\n    self . log . append(f' { name } : ' + ', ' . join(f' { c } { m : + } ' for c,\r\n                        m in zip(['strength', 'dexterity', 'intelligence'], modifiers) if m))\r\n",
  "651bfcbcdb0e8b104175b97e": "def pop_blocks(lst):\r\n    stk, popping = [], None\r\n    for v in lst:\r\n    if v == popping:\r\n    continue\r\n    if stk and stk[- 1] == v:\r\n    popping = stk . pop()\r\n    else:\r\n    stk . append(v)\r\n    popping = None\r\n    return stk\r\n",
  "651ab89e80f7c46fc482ba12": "def asteroid_collision(asteroids):\r\n    i = 0\r\n    while i < len(asteroids):\r\n    if asteroids[i] > 0:\r\n    if i + 1 < len(asteroids) and asteroids[i + 1] < 0:\r\n    s = asteroids[i] + asteroids[i + 1]\r\n    if s > 0:\r\n    asteroids . pop(i + 1)\r\n    else:\r\n    asteroids . pop(i)\r\n    if s == 0:\r\n    asteroids . pop(i)\r\n    i -= 1\r\n    if i >= 0:\r\n        continue\r\n    i += 1\r\n    return asteroids\r\n",
  "651478c7ba373c338a173de6": "from preloaded import TreeNode\r\n\r\n\r\ndef build_tree(inorder, postorder):\r\n    if not inorder or not postorder:\r\n    return None\r\n    # Create a hashmap to store the indices of elements in the inorder list\r\n    idx_map = {val: idx for idx, val in enumerate(inorder)}\r\n\r\n    def helper(in_start, in_end, post_start, post_end):\r\n    if in_start > in_end or post_start > post_end:\r\n    return None\r\n    root_val = postorder[post_end]\r\n    root = TreeNode(root_val)\r\n\r\n    root_index = idx_map[root_val]\r\n    left_size = root_index - in_start\r\n    root . left = helper(in_start, root_index - 1,\r\n                         post_start, post_start + left_size - 1)\r\n    root . right = helper(root_index + 1, in_end,\r\n                          post_start + left_size, post_end - 1)\r\n\r\n    return root\r\n    return helper(0, len(inorder) - 1, 0, len(postorder) - 1)\r\n",
  "6515e6788f32503cd5b1ee51": "def f(a, b): return 0 - - a / / b\n",
  "6512b3775bf8500baea77663": "def gimme_the_letters(rng):\r\n    a, b = map(ord, rng . split('-'))\r\n    return '' . join(map(chr, range(a, b + 1)))\r\n",
  "65128d27a5de2b3539408d83": "def win_round(you, opp):\r\n    return sorted(you)[: 2: - 1] > sorted(opp)[: 2: - 1]\r\n",
  "65128732b5aff40032a3d8f0": "def neutralise(s1, s2):\r\n    return '' . join('0' if i != j else i for i, j in zip(s1, s2))\r\n",
  "65127302a5de2b11c940973d": "def swap_cards(a, b):\n    p, q = a / / 10, a % 10\n    r, s = b / / 10, b % 10\n    return p > q or (r, q) > (p, s)\n",
  "65127141a5de2b1dcb40927e": "def spin_around(lst):\r\n    return abs(2 * lst . count(\"left\") - len(lst)) / / 4\r\n",
  "65126d52a5de2b11c94096d2": "def closing_in_sum(n):\r\n    n_str = str(n)\r\n\r\n    left = 0\r\n    right = len(n_str) - 1\r\n    total = 0\r\n    while left <= right:\r\n    left_number = n_str[left]\r\n    right_number = n_str[right]\r\n\r\n    if left_number == right_number and left == right:\r\n    total += int(f\" { right_number } \")\r\n    else:\r\n    total += int(f\" { left_number }{ right_number } \")\r\n\r\n    left += 1\r\n    right -= 1\r\n    return total\r\n",
  "65126a26597b8597d809de48": "import re\n\n\ndef numbers_need_friends_too(n):\n    return int(re . sub(r'(.)\\1*+(?<!\\1.)', r'\\1' * 3, str(n)))\n",
  "622e4b5028bf330017cd772f": "def min_move(a, b):\n    count = 0\n    seen = set()\n    i = 0\n    j = 0\n    while j < len(b):\n    if a[i] == b[j]:\n    i += 1\n    j += 1\n    elif a[i] in seen:\n    i += 1\n    else:\n    seen . add(b[j])\n    j += 1\n    count += 1\n    return count\n",
  "65116501a5de2bc51f409c1a": "import re\n\n\ndef is_ladder_safe(ldr):\n    s = ldr[0]\n    base = f'# { \" \" * ( len ( s ) - 2 ) } #'\n    full = \"#\" * len(s)\n    O, C = '{}'\n    reg = rf\" { base } o { full } o((?: { base } o) { O } ,2 { C }{ full } o)\\1* { base } \"\n    return len(s) > 4 and bool(re . fullmatch(reg, 'o' . join(ldr)))\n",
  "6510238b4840140017234427": "from itertools import pairwise\n\n\ndef matryoshka(ls): return all(a[0] < b[0] and a[- 1] > b[- 1]\n                               for a, b in pairwise(sorted(map(sorted, ls), key=lambda l: (l[0], - l[- 1]))))\n",
  "650c7503a5de2be5b74094bf": "def weird(n):\r\n    return weird(n / / 2) if n % 2 else (n / / 2 + 1)\r\n",
  "650a86e8404241005fc744ca": "from re import compile\nREGEX = compile(r\"(1*)(0*)\"). findall\n\n\ndef same_length(txt):\n    return all(len(x) == len(y) for x, y in REGEX(txt))\n",
  "650850aa0b700930130c7981": "PRIMES = {n for n in range(2, 10 * * 4 + 1) if all(n % p for p in range(2, int(n * * .5) + 1))}\r\n\r\n\r\ndef rev(n, b):\r\n    r = 0\r\n    while n:\r\n        r, n = r * b + n % b, n / / b\r\n    return r\r\n\r\n    def prime_reflections(mp, mb): return {b: sum(rev(p, b) < p <= mp and rev(\r\n        p, b) in PRIMES for p in PRIMES) for b in range(2, mb + 1)}\r\n",
  "5b9ecec33c5b95e2b00000ba": "import csv\r\nimport shutil\r\nimport urllib . request\r\nfrom collections import defaultdict\r\nfrom enum import Enum\r\nfrom zipfile import ZipFile\r\n# constants and helper functions\r\nFILES = 'abcdefgh'\r\nRANKS = '12345678'\r\nALPHA_NUMS = 'zero one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen draw'\r\nTEXT_TO_DIGIT = {w: i for i, w in enumerate(ALPHA_NUMS . split())}\r\n\r\n# tablebase fetching and processing logic\r\n\r\n\r\ndef prepare_tablebase(url):\r\n    fn = \"endgame.zip\"\r\n    tablebase = {}\r\n    with urllib . request . urlopen(url) as response, open(fn, 'wb') as out_file:\r\n    shutil . copyfileobj(response, out_file)\r\n    with ZipFile(fn) as zf:\r\n    file = zf . extract('krkopt.data')\r\n    with open(file) as file:\r\n    reader = csv . reader(file)\r\n    for row in reader:\r\n    keys = row[: 6]  # First 6 elements are the positions\r\n    dtm = TEXT_TO_DIGIT . get(row[6], None)\r\n    if dtm is not None:\r\n    tablebase[tuple(keys)] = dtm\r\n    return tablebase\r\n    KRK_TABLEBASE = prepare_tablebase(\r\n        \"https://archive.ics.uci.edu/static/public/23/chess+king+rook+vs+king.zip\")\r\n\r\n    # board symmetry and translation logic\r\n\r\n    class Scenario (Enum):\r\n    BASE = 1\r\n    ROT90 = 2\r\n    ROT180 = 3\r\n    ROT270 = 4\r\n    REFLECT1 = 5\r\n    REFLECT2 = 6\r\n    REFLECT3 = 7\r\n    REFLECT4 = 8\r\n    def rotate90(pos):\r\n    f, r = pos\r\n    return FILES[RANKS . index(r)] + RANKS[7 - FILES . index(f)]\r\n\r\n    def rotate180(pos):\r\n    f, r = pos\r\n    return FILES[7 - FILES . index(f)] + RANKS[7 - RANKS . index(r)]\r\n\r\n    def rotate270(pos):\r\n    f, r = pos\r\n    return FILES[7 - RANKS . index(r)] + RANKS[FILES . index(f)]\r\n\r\n    def reflect1(pos):\r\n    f, r = pos\r\n    return FILES[7 - RANKS . index(r)] + RANKS[7 - FILES . index(f)]\r\n\r\n    def reflect2(pos):\r\n    f, r = pos\r\n    return f + RANKS[7 - RANKS . index(r)]\r\n\r\n    def reflect3(pos):\r\n    f, r = pos\r\n    return FILES[RANKS . index(r)] + RANKS[FILES . index(f)]\r\n\r\n    def reflect4(pos):\r\n    f, r = pos\r\n    return FILES[7 - FILES . index(f)] + r\r\n    # Maps for each scenario\r\n    scenario_maps_actual_to_base = {\r\n        Scenario . BASE: {f' { f }{ r } ': f' { f }{ r } ' for f in FILES for r in RANKS},\r\n        Scenario . ROT90: {f' { f }{ r } ': rotate90(f' { f }{ r } ') for f in FILES for r in RANKS},\r\n        Scenario . ROT180: {f' { f }{ r } ': rotate180(f' { f }{ r } ') for f in FILES for r in RANKS},\r\n        Scenario . ROT270: {f' { f }{ r } ': rotate270(f' { f }{ r } ') for f in FILES for r in RANKS},\r\n        Scenario . REFLECT1: {f' { f }{ r } ': reflect1(f' { f }{ r } ') for f in FILES for r in RANKS},\r\n        Scenario . REFLECT2: {f' { f }{ r } ': reflect2(f' { f }{ r } ') for f in FILES for r in RANKS},\r\n        Scenario . REFLECT3: {f' { f }{ r } ': reflect3(f' { f }{ r } ') for f in FILES for r in RANKS},\r\n        Scenario . REFLECT4: {f' { f }{ r } ': reflect4(f' { f }{ r } ') for f in FILES for r in RANKS},\r\n    }\r\n\r\n    scenario_maps_actual_to_base\r\n    scenario_maps_base_to_actual = {\r\n        s: {v: k for k, v in scenario_maps_actual_to_base[s]. items()} for s in scenario_maps_actual_to_base\r\n    }\r\n\r\n    king_to_scenario_iter = [\r\n        (('a1', 'b1', 'b2', 'c1', 'c2',\r\n          'c3', 'd1', 'd2', 'd3', 'd4'), Scenario . BASE),\r\n        (('a8', 'a7', 'b7', 'a6', 'b6',\r\n          'c6', 'a5', 'b5', 'c5', 'd5'), Scenario . ROT90),\r\n        (('h8', 'g8', 'g7', 'f8', 'f7',\r\n          'f6', 'e8', 'e7', 'e6', 'e5'), Scenario . ROT180),\r\n        (('h1', 'h2', 'g2', 'h3', 'g3',\r\n          'f3', 'h4', 'g4', 'f4', 'e4'), Scenario . ROT270),\r\n        (('h8', 'h7', 'g7', 'h6', 'g6',\r\n          'f6', 'h5', 'g5', 'f5', 'e5'), Scenario . REFLECT1),\r\n        (('a8', 'b8', 'b7', 'c8', 'c7',\r\n          'c6', 'd8', 'd7', 'd6', 'd5'), Scenario . REFLECT2),\r\n        (('a1', 'a2', 'b2', 'a3', 'b3',\r\n          'c3', 'a4', 'b4', 'c4', 'd4'), Scenario . REFLECT3),\r\n        (('h1', 'g1', 'g2', 'f1', 'f2',\r\n          'f3', 'e1', 'e2', 'e3', 'e4'), Scenario . REFLECT4),\r\n    ]\r\n\r\n    king_to_scenarios_map = defaultdict(set)\r\n\r\n    for kps, s in king_to_scenario_iter:\r\n    for kp in kps:\r\n    king_to_scenarios_map[kp]. add(s)\r\n\r\n    class Position:\r\n    def __init__(self, file, rank):\r\n    self . file = file\r\n    self . rank = rank\r\n    @ classmethod\r\n    def from_algebraic(cls, pos_str):\r\n    return cls(pos_str[0], pos_str[1])\r\n\r\n    @ classmethod\r\n    def from_indices(cls, fi, ri):\r\n    return cls(FILES[fi], RANKS[ri])\r\n\r\n    def to_algebraic(self):\r\n    return f' { self . file }{ self . rank } '\r\n    def to_tuple(self):\r\n    return self . file, self . rank\r\n    def is_immediately_adjacent(self, other):\r\n    fi, ri = FILES . index(self . file), RANKS . index(self . rank)\r\n    foi, roi = FILES . index(other . file), RANKS . index(other . rank)\r\n    return max(abs(fi - foi), abs(ri - roi)) <= 1\r\n    def __repr__(self):\r\n    return self . to_algebraic()\r\n\r\n    def __hash__(self):\r\n    return hash(str(self))\r\n\r\n    def __eq__(self, other):\r\n    return hash(self) == hash(other)\r\n\r\n    def translate_to_base_position(self, scenario):\r\n    return scenario_maps_base_to_actual[scenario][self]\r\n\r\n    class PieceType (Enum):\r\n    K = 1\r\n    R = 2\r\n    k = 3\r\n    class ChessPosition:\r\n    def __init__(self, king_pos, rook_pos, opponent_king_pos):\r\n    self . king_pos = Position . from_algebraic(king_pos)\r\n    self . rook_pos = Position . from_algebraic(rook_pos)\r\n    self . opponent_king_pos = Position . from_algebraic(opponent_king_pos)\r\n\r\n    self . scenario = None\r\n    self . base_king_pos = None\r\n    self . base_rook_pos = None\r\n    self . base_opponent_king_pos = None\r\n    self . dtm = None\r\n    self . set_scenario()\r\n\r\n    if self . dtm is None:\r\n    raise ValueError('Chess position created with no DTM.',\r\n                     king_pos, rook_pos, opponent_king_pos)\r\n\r\n    def __repr__(self):\r\n    return f'K { self . king_pos } , R { self . rook_pos } , k { self . opponent_king_pos } '\r\n    def __hash__(self):\r\n    return hash(str(self))\r\n\r\n    @ classmethod\r\n    def from_existing(cls, chess_position, piece_type=None, new_position=None):\r\n    king_pos = chess_position . king_pos . to_algebraic()\r\n    rook_pos = chess_position . rook_pos . to_algebraic()\r\n    opponent_king_pos = chess_position . opponent_king_pos . to_algebraic()\r\n    if piece_type is not None:\r\n    if isinstance(new_position, Position):\r\n    pos = new_position . to_algebraic()\r\n    else:\r\n    pos = new_position\r\n    if piece_type . value == 1:\r\n    king_pos = pos\r\n    elif piece_type . value == 2:\r\n    rook_pos = pos\r\n    elif piece_type . value == 3:\r\n    opponent_king_pos = pos\r\n    else:\r\n    raise ValueError(\r\n        'Invalid piece type for new chess position from existing.')\r\n    return cls(king_pos, rook_pos, opponent_king_pos)\r\n\r\n    def set_scenario(self):\r\n    for scenario in king_to_scenarios_map[self . king_pos . to_algebraic()]:\r\n    nKf, nKr = self . king_pos . translate_to_base_position(scenario)\r\n    nRf, nRr = self . rook_pos . translate_to_base_position(scenario)\r\n    nkf, nkr = self . opponent_king_pos . translate_to_base_position(scenario)\r\n    dtm = KRK_TABLEBASE . get((nKf, nKr, nRf, nRr, nkf, nkr), None)\r\n    if dtm is not None:\r\n    self . scenario = scenario\r\n    self . base_king_pos = Position(nKf, nKr)\r\n    self . base_rook_pos = Position(nRf, nRr)\r\n    self . base_opponent_king_pos = Position(nkf, nkr)\r\n    self . dtm = dtm\r\n    break\r\n    def translate_position(self):\r\n    if self . scenario:\r\n    return ChessPosition(\r\n        self . base_king_pos . to_algebraic(),\r\n        self . base_rook_pos . to_algebraic(),\r\n        self . base_opponent_king_pos . to_algebraic()\r\n    )\r\n    else:\r\n    raise ValueError('Position does not have an assigned scenario')\r\n\r\n    def get_king_moves(self):\r\n    f, r = self . king_pos . to_tuple()\r\n    fi, ri = FILES . index(f), RANKS . index(r)\r\n    Rf, Rr = self . rook_pos . to_tuple()\r\n    Rfi, Rri = FILES . index(Rf), RANKS . index(Rr)\r\n    kf, kr = self . opponent_king_pos . to_tuple()\r\n    kfi, kri = FILES . index(kf), RANKS . index(kr)\r\n    for df in (- 1, 0, 1):\r\n    for dr in (- 1, 0, 1):\r\n    if df or dr:\r\n    fn = fi + df\r\n    rn = ri + dr\r\n    if (\r\n        0 <= fn < 8 and 0 <= rn < 8 and\r\n        (fn, rn) not in ((Rfi, Rri), (kfi, kri)) and\r\n        not Position . from_indices(\r\n            fn, rn). is_immediately_adjacent(self . opponent_king_pos)\r\n    ):\r\n    yield Position . from_indices(fn, rn)\r\n\r\n    def get_rook_moves(self):\r\n    f, r = self . rook_pos . to_tuple()\r\n    fi, ri = FILES . index(f), RANKS . index(r)\r\n    Kf, Kr = self . king_pos . to_tuple()\r\n    Kfi, Kri = FILES . index(Kf), RANKS . index(Kr)\r\n    kf, kr = self . opponent_king_pos . to_tuple()\r\n    kfi, kri = FILES . index(kf), RANKS . index(kr)\r\n    for i in range(1, 8):\r\n    if (fi - i, ri) in ((Kfi, Kri), (kfi, kri)) or (fi - i < 0):\r\n    break\r\n    yield Position . from_indices(fi - i, ri)\r\n    for i in range(1, 8):\r\n    if (fi + i, ri) in ((Kfi, Kri), (kfi, kri)) or (fi + i > 7):\r\n    break\r\n    yield Position . from_indices(fi + i, ri)\r\n    for i in range(1, 8):\r\n    if (fi, ri - i) in ((Kfi, Kri), (kfi, kri)) or (ri - i < 0):\r\n    break\r\n    yield Position . from_indices(fi, ri - i)\r\n    for i in range(1, 8):\r\n    if (fi, ri + i) in ((Kfi, Kri), (kfi, kri)) or (ri + i > 7):\r\n    break\r\n    yield Position . from_indices(fi, ri + i)\r\n\r\n    def get_all_possible_moves(self):\r\n    for move in self . get_king_moves():\r\n    yield PieceType(1), move\r\n    for move in self . get_rook_moves():\r\n    yield PieceType(2), move\r\n    def _generate_valid_moves(self, strict=True):\r\n    res = []\r\n    for piece_type, pos in self . get_all_possible_moves():\r\n    new_chess_position = ChessPosition . from_existing(self, piece_type, pos)\r\n    if new_chess_position . dtm is not None and self . dtm is not None and (\r\n            ((new_chess_position . dtm < self . dtm + 1) and strict) or new_chess_position . dtm <= self . dtm + 1):\r\n    res . append(new_chess_position)\r\n    return sorted(res, key=lambda pn: pn . dtm)\r\n\r\n    def generate_valid_moves(self):\r\n    return vm if (vm := self . _generate_valid_moves()) else self . _generate_valid_moves(False)\r\n\r\n    class WhitePlayer:\r\n\r\n    def __init__(self, position):\r\n    self . chess_position = None\r\n    self . position_history = []\r\n    self . set_position(ChessPosition(\r\n        * self . parse_initial_position(position)))\r\n\r\n    def parse_initial_position(self, position):\r\n    pieces = position . split('-')\r\n    wk_pos, wr_pos = pieces[0]. split(',')\r\n    bk_pos = pieces[1]. strip()\r\n    return wk_pos[1:]. strip(), wr_pos[1:]. strip(), bk_pos[1:]. strip()\r\n\r\n    def set_position(self, chess_position):\r\n    self . position_history . append(chess_position)\r\n    self . chess_position = chess_position\r\n    @ property\r\n    def dtm(self):\r\n    return self . chess_position . dtm\r\n    def play(self, black_move):\r\n    new_black_pos_str = black_move[1:]\r\n    self . set_position(ChessPosition . from_existing(\r\n        self . chess_position, PieceType(3), new_black_pos_str))\r\n    for new_position in self . chess_position . generate_valid_moves():\r\n    if new_position . dtm is not None and new_position not in self . position_history[\r\n            max(0, len(self . position_history) - 2):]:\r\n    str_to_return = (\r\n        f'K { new_position . king_pos . to_algebraic ()} ' if new_position . king_pos != self . chess_position . king_pos\r\n        else f'R { new_position . rook_pos . to_algebraic ()} '\r\n    )\r\n    self . set_position(new_position)\r\n    return str_to_return\r\n",
  "65080590b6b5ee01db990ca1": "from bisect import bisect_left, bisect_right\n# Only 96 total\nmemo = [t for t in range(24 * 3600) if (s := f\" { t / / 3600 :0 2 d } : { t / / 60 % 60 :0 2 d } : { t % 60 :0 2 d } \") == s[:: - 1]]\n\n\ndef palindrome_time(lst):\n    h1, m1, s1, h2, m2, s2 = lst\n    t1, t2 = 3600 * h1 + 60 * m1 + s1, 3600 * h2 + 60 * m2 + s2\n    return bisect_right(memo, t2) - bisect_left(memo, t1)\n",
  "6507e3170b7009117e0c7865": "def freed_prisoners(prison):\r\n    unlocked, freed = prison[0], 0\r\n    if unlocked:\r\n    for cell in prison:\r\n    if cell is unlocked:\r\n    freed += 1\r\n    unlocked = not unlocked\r\n    return freed\r\n",
  "6502ea6bd504f305f3badbe3": "def twins(age, distance, velocity):\n    \u03b1 = (1 - velocity * * 2) * * 0.5\n    t = 2 * distance / velocity\n    return age + \u03b1 * t, age + t\n",
  "6501aa820038a6b0bd098afb": "def safecracker(start, incs):\n    a = (start - incs[0]) % 100\n    b = (a + incs[1]) % 100\n    c = (b - incs[2]) % 100\n    return (a, b, c)\n",
  "65013fc50038a68939098dcf": "def party_people(lst):\r\n    lst = sorted(lst)\r\n    while lst and lst[- 1] > len(lst):\r\n        lst . pop()\r\n    return len(lst)\r\n",
  "65006177f534f65b2594df05": "def rank(lst):\r\n    p = {}\r\n    for i, v in enumerate(sorted(lst)):\r\n        p . setdefault(v, []). append(i)\r\n    return [sum(p[v]) / len(p[v]) for v in lst]\r\n",
  "650017e142964e000f19cac3": "def empty_values(lst):\r\n    return [type(x)() for x in lst]\r\n",
  "65001dd40038a647480989c8": "def sort_it(array):\r\n    return sorted(array, key=lambda x: x[0] if isinstance(x, list) else x)\r\n",
  "64ffefcb3ee338415ec426c1": "from math import comb\n# https://oeis.org/A174061\n\n\ndef lucky_ticket(n):\n    return sum((- 1) * * k * comb(n, k) * comb(n / / 2 * 11 - 10 * k - 1, n - 1) for k in range(n >> 1))\n",
  "64fd5072fa88ae669bf15342": "from math import inf\n\n\ndef tree_photography(lst):\n    a, b = count(lst), count(reversed(lst))\n    return 'left' if a > b else 'right'\n    def count(it):\n    n, m = 0, - inf\n    for v in it:\n    if v > m:\n        n, m = n + 1, v\n    return n\n",
  "64fb5c7a18692c0876ebbac8": "from math import prod\nPRIMES = [n for n in range(2, 10 * * 5 + 1) if all(n % p for p in range(2, int(n * * .5) + 1))]\n\n\ndef play(query):\n    z = {}\n    for p in PRIMES:\n    if not query(p, 1):\n        continue\n    l, r = 1, 10 * * 9 + 1\n    while r - l > 1:\n    m = (r + l) / / 2\n    if query(p, m):\n        l = m\n    else:\n        r = m\n    if l:\n        z[p] = l\n    return prod(v + 1 for v in z . values()) - 2 * * len(z)\n",
  "64fbfa3518692c2ed0ebbaa2": "def diving_minigame(lst):\r\n    breath_meter = 10\r\n    for x in lst:\r\n    if x < 0:\r\n    breath_meter -= 2\r\n    else:\r\n    breath_meter = min(10, breath_meter + 4)\r\n\r\n    if breath_meter <= 0:\r\n    return False\r\n    return True\r\n",
  "64fc00392b610b1901ff0f17": "def get_coin_balances(lst1, lst2):\r\n    x, y = lst1 . count(\"share\"), lst2 . count(\"share\")\r\n    return 3 - x + 3 * y, 3 - y + 3 * x\r\n",
  "64fc03a318692c1333ebc04c": "def best_friend(t, a, b):\r\n    return t . count(a) == t . count(a + b)\r\n",
  "64fbfe2618692c2018ebbddb": "def flick_switch(lst):\r\n\t res, state = [], True\r\n for i in lst :\r\n\t\t if i == 'flick' :\r\n\t\t\t state = not state \r\n res . append ( state )\r\n\t return res",
  "64fbf7eb2b610b1a6eff0e44": "import re\r\n\r\n\r\ndef nonstop_hotspot(area):\r\n    ans = re . search(r'[* ]*P[* ]*', area)\r\n    return ans . group(). count('*')\r\n",
  "64f4ef596f222e004b877272": "def rain_tacos(landscape, word='TACO'):\r\n    n = len(grid := landscape . splitlines())\r\n    grid = [('' . join(row). rstrip() + word[i % len(word)]). ljust(n, ' ')[: n]\r\n            for i, row in enumerate(zip(* grid[:: - 1]))]\r\n    return '\\n' . join(map('' . join, list(zip(* grid))[:: - 1]))\r\n",
  "64f41ad92b610b64c1067590": "def full_cycle(lst):\r\n    return all((x := lst[i and x]) for i in range(len(lst) - 1))\r\n",
  "64ebbfc4f1294ff0504352be": "def convert_number(height, num):\n    pre = 1\n    inoreder = 2 * * (height - 1)\n    post = (2 * * height) - 1\n    depth = 1\n    while 2 * * depth <= num:\n    depth += 1\n    while depth > 1:\n    height -= 1\n    depth -= 1\n    if 2 * * (depth - 1) & num != 0:\n    pre += 2 * * height\n    inoreder += 2 * * (height - 1)\n    post -= 1\n    else:\n    pre += 1\n    inoreder -= 2 * * (height - 1)\n    post -= 2 * * height\n    return pre, inoreder, post\n",
  "64f04307c6307f003106ac2c": "from gmpy2 import next_prime\n\n\ndef min_ops(n):\n    k, p = 0, 2\n    while n > 1:\n    while n % p:\n    p = next_prime(p)\n    n / /= p\n    k += p\n    return k\n",
  "64edf7ab2b610b16c2067579": "def largest_radial_sum(arr, d):\r\n    return max(sum(arr[i:: len(arr) / / d]) for i in range(len(arr) / / d))\r\n",
  "64eca9a7bc3127082b0bc7dc": "from preloaded import DECK\r\n\r\n\r\ndef deal(n):\r\n    deck = list(DECK)\r\n    state = n\r\n    dealt_cards = []\r\n\r\n    while (len(deck) != 0):\r\n    state = (state * 214013 + 2531011) % (2 * * 31)\r\n    next_value = int(state / (2 * * 16))\r\n\r\n    card_index = next_value % len(deck)\r\n    if card_index != len(deck) - 1:\r\n    last_card = deck[- 1]\r\n    current_card = deck[card_index]\r\n    deck[- 1] = current_card\r\n    deck[card_index] = last_card\r\n    dealt_cards . append(deck . pop())\r\n\r\n    return dealt_cards\r\n",
  "56d6d927c9ae3f115b0008dd": "from decimal import Decimal as dec, getcontext\r\nimport re\r\ngetcontext(). prec = 28\r\n\r\n\r\ndef reduced(arr, comparator):\r\n    def check_divider(arr, compare):\r\n    for i, (x, y) in enumerate(zip(arr, compare)):\r\n    try:\r\n    if i == 0:\r\n        test = x / y\r\n    elif x / y != test:\r\n        return False\r\n    except:\r\n        return False\r\n    return True\r\n    return any(check_divider(arr, compare) for compare in comparator)\r\n\r\n    def collumn_extract(lst, col_index): return list(zip(* lst))[col_index]\r\n\r\n    def GaussJordan(x: list[list], y: list):\r\n    a = x . copy()\r\n    b = y . copy()\r\n    dim = len(a[0])\r\n\r\n    for col in range(dim - 1):\r\n    for row in range(1 + col, dim):\r\n    if a[row][col] != 0:\r\n    if a[col][col] == 0:\r\n    a[row], a[col] = a[col], a[row]\r\n    b[row], b[col] = b[col], b[row]\r\n    else:\r\n    divider = a[row][col] / a[col][col]\r\n    a[row] = [a[row][collar] - divider * a[col][collar]\r\n              for collar in range(dim)]\r\n    b[row] = b[row] - divider * b[col]\r\n\r\n    for row in range(dim):\r\n    if [round(elem, 10) for elem in a[row]] == [0] * len(a[row]):\r\n        return None\r\n    for col in range(dim - 1, - 1, - 1):\r\n    for row in range(col - 1, - 1, - 1):\r\n    if a[row][col] != 0:\r\n    if a[col][col] == 0:\r\n    a[row], a[col] = a[col], a[row]\r\n    b[row], b[col] = b[col], b[row]\r\n    else:\r\n    divider = a[row][col] / a[col][col]\r\n    a[row] = [a[row][collar] - divider * a[col][collar]\r\n              for collar in range(dim)]\r\n    b[row] = b[row] - divider * b[col]\r\n\r\n    try:\r\n    return [round(b[i] / a[i][i], 15) for i in range(dim)]\r\n    except:\r\n        return None\r\n\r\n    def solve(* equation):\r\n    print(equation)\r\n    vars = list(sorted(set(re . findall(r'[a-zA-Z]+', \" \" . join(equation)))))\r\n    if len(vars) > len(equation):\r\n        return None\r\n    comparator = [0] * len(equation)\r\n    coeffs = []\r\n    for iteration, lines in enumerate(equation):\r\n    isolate = re . findall(r'([+\\-]?)([0-9]*)([a-zA-Z]*)|(=)', lines)\r\n    found = False\r\n    coeff = [0] * len(vars)\r\n\r\n    for sign, coef, var, prob_equal in isolate:\r\n    if (sign, coef, var, prob_equal) != (\"\", \"\", \"\", \"\"):\r\n    if (sign, coef, var, prob_equal) == (\"\", \"\", \"\", \"=\"):\r\n        found = True\r\n    else:\r\n    if coef == '':\r\n        coef = '1'\r\n    if var:\r\n    numb = dec(int(sign + coef) if not found else - int(sign + coef))\r\n    coeff[vars . index(var)] += dec(numb)\r\n    else:\r\n    numb = dec(- int(sign + coef) if not found else int(sign + coef))\r\n    comparator[iteration] += dec(numb)\r\n    coeffs += [coeff]\r\n\r\n    if len(vars) < len(equation):\r\n    reduction = len(equation) - len(vars)\r\n    iteration = 0\r\n    while reduction != 0:\r\n    try:\r\n    if reduced(coeffs[iteration], coeffs[: iteration] + coeffs[iteration + 1:]):\r\n    coeffs . pop(iteration)\r\n    comparator . pop(iteration)\r\n    reduction -= 1\r\n    else:\r\n        iteration += 1\r\n    except:\r\n        return None\r\n    final = {}\r\n    res = GaussJordan(coeffs, comparator)\r\n    try:\r\n    for i in range(len(res)):\r\n    final . update({vars[i]: float(res[i])})\r\n    except:\r\n        return None\r\n    return final\r\n",
  "64e5e192f1294f96fd60a5ae": "import re\r\n\r\n\r\ndef block_pushing(l, n):\r\n    s = '' . join(l)\r\n    for _ in range(n):\r\n        s = re . sub('(>[>#]*)-', lambda g: '-' + g . group(1), s)\r\n    return list(s)\r\n",
  "64e5b47cc065e56fb115a5bf": "def dice_game(scores):\r\n    players = ['p1', 'p2', 'p3', 'p4']\r\n\r\n    while len(players) > 1:\r\n    results = list(zip(players, scores))\r\n    scores = scores[len(players):]\r\n    results . sort(key=lambda x: (sum(x[1]), x[1][0]))\r\n    if results[0][1] != results[1][1]:\r\n    players . remove(results[0][0])\r\n    return players[0]\r\n",
  "64e5bb63c065e575db15a3f1": "def solve(game):\r\n    if game[0] == str(len(game)):\r\n        return [(int(game[0]),)]\r\n    solutions = []\r\n    for i in range(1, int(game[0]) + 1):\r\n    if i >= len(game):\r\n        break\r\n    move_made = game[i:]\r\n    if int(move_made[0]) <= i:\r\n        continue\r\n    move_made = str(int(move_made[0]) - i) + move_made[1:]\r\n    other_solutions = solve(move_made)\r\n    solutions += [(i,) + os for os in other_solutions]\r\n    if not solutions:\r\n        return []\r\n    min_length = min(map(len, solutions))\r\n    return [s for s in solutions if len(s) == min_length]\r\n",
  "64b7bcfb0ca7392eca9f8e47": "def fair_swap(a, b):\r\n    r = set()\r\n    swap_size, odd_diff = divmod(sum(a) - sum(b), 2)\r\n    if odd_diff:\r\n        return r\r\n    b = set(b)\r\n    for n1 in set(a):\r\n    if (n2 := n1 - swap_size) in b:\r\n    r . add((n1, n2))\r\n    return r\r\n",
  "64e4cdd7f2bfcd142a880011": "from decimal import Context, Decimal, ROUND_DOWN\r\nfrom re import sub\r\n\r\n\r\ndef format_number(x):\r\n    dec = (\r\n        (Context(prec=3, rounding=ROUND_DOWN)\r\n         . create_decimal_from_float(x * 100)\r\n         . to_integral_exact(rounding=ROUND_DOWN) / 100)\r\n        . normalize()\r\n        . to_eng_string()\r\n    )\r\n    return '0' if dec == '-0' else sub(\r\n        'E\\+(\\d+)',\r\n        lambda m: ('KMBT' [n - 1] if (n := int(m[1]) / / 3) < 5 else\r\n                   '' . join(chr(x + 97) for x in divmod(n - 5, 26))),\r\n        dec,\r\n    )\r\n",
  "64dbfcbcf9ab18004d15d17e": "CARS = {\r\n    enterprise: {model: ignition . split('-')\r\n                 for model, ignition in models . items()}\r\n    for enterprise, models in CARS . items()\r\n}\r\n\r\n\r\ndef find_misfire(fire_in_the_holes):\r\n    enterprise, model, fire = fire_in_the_holes . split()\r\n    return '-' . join(a for a, b in zip(CARS[enterprise][model], fire . split('-')) if a != b)\r\n",
  "64e06b8f55bbb752ac2e66f5": "from collections import defaultdict\r\n\r\n\r\ndef score31(c1, c2, c3):\r\n    d = defaultdict(int)\r\n    values = set()\r\n    for c in c1, c2, c3:\r\n    v = c[1:]\r\n    values . add(v)\r\n    d[c[0]] += int(v) if v . isdigit() else 10 + (v == \"A\")\r\n    return max(d . values()) if len(values) > 1 else 30.5 + 1.5 * (v == \"A\")\r\n",
  "648b579a731d7526828173cc": "from preloaded import PRIMES\r\nfrom itertools import chain, takewhile\r\n\r\n\r\ndef prime_grasshopper(arr):\r\n    dp = arr[:]\r\n    for i, x in enumerate(dp):\r\n    dp[i] = max(\r\n        chain([x], [dp[i - p] + x for p in takewhile(i . __ge__, PRIMES)]))\r\n    return max(chain([0], dp))\r\n",
  "64d1d067e58c0e0025860f4b": "def play_a_round(alex_cards, bob_cards, chris_cards, dave_cards):\r\n    return_list = []\r\n    if '2C' in bob_cards:\r\n    leader = 'bob'\r\n    elif '2C' in chris_cards:\r\n    leader = 'chris'\r\n    elif '2C' in dave_cards:\r\n    leader = 'dave'\r\n    else:\r\n    leader = 'alex'\r\n    # Play until players have no more cards\r\n    while len(alex_cards) > 0:\r\n\r\n        # Build this hand\r\n    this_hand = []\r\n    if leader == 'alex':\r\n    this_hand . append(get_card(alex_cards, this_hand))\r\n    this_hand . append(get_card(bob_cards, this_hand))\r\n    this_hand . append(get_card(chris_cards, this_hand))\r\n    this_hand . append(get_card(dave_cards, this_hand))\r\n    elif leader == 'bob':\r\n    this_hand . append(get_card(bob_cards, this_hand))\r\n    this_hand . append(get_card(alex_cards, this_hand))\r\n    this_hand . append(get_card(chris_cards, this_hand))\r\n    this_hand . append(get_card(dave_cards, this_hand))\r\n    elif leader == 'chris':\r\n    this_hand . append(get_card(chris_cards, this_hand))\r\n    this_hand . append(get_card(alex_cards, this_hand))\r\n    this_hand . append(get_card(bob_cards, this_hand))\r\n    this_hand . append(get_card(dave_cards, this_hand))\r\n    elif leader == 'dave':\r\n    this_hand . append(get_card(dave_cards, this_hand))\r\n    this_hand . append(get_card(alex_cards, this_hand))\r\n    this_hand . append(get_card(bob_cards, this_hand))\r\n    this_hand . append(get_card(chris_cards, this_hand))\r\n\r\n    # Determine winner and add it to list to be returned\r\n    winning_card = play_a_hand(this_hand)\r\n    return_list . append(winning_card)\r\n\r\n    # Determine who leads next hand\r\n    if winning_card in alex_cards:\r\n    leader = 'alex'\r\n    elif winning_card in bob_cards:\r\n    leader = 'bob'\r\n    elif winning_card in chris_cards:\r\n    leader = 'chris'\r\n    elif winning_card in dave_cards:\r\n    leader = 'dave'\r\n    # Remove cards just played from players' hands\r\n    for card in this_hand:\r\n    if card in alex_cards:\r\n    alex_cards . remove(card)\r\n    elif card in bob_cards:\r\n    bob_cards . remove(card)\r\n    elif card in chris_cards:\r\n    chris_cards . remove(card)\r\n    elif card in dave_cards:\r\n    dave_cards . remove(card)\r\n\r\n    return return_list\r\n    # Use the strategy from the instructions to determine which card this player plays\r\n\r\n    def get_card(player_cards, this_hand):\r\n        # First check\r\n    if '2C' in player_cards:\r\n    return '2C'\r\n    # Second check\r\n    if len(this_hand) == 0:\r\n    return player_cards[0]\r\n    else:\r\n    led_suit = this_hand[0][- 1]\r\n    for card in player_cards:\r\n    if card[- 1] == led_suit:\r\n    return card\r\n    # Third check\r\n    for card in player_cards:\r\n    suit = card[- 1]\r\n    if card == 'QS' or suit == 'H':\r\n    return card\r\n    # Final check\r\n    return player_cards[0]\r\n\r\n    # Which card wins this hand? Return it.\r\n    def play_a_hand(cards):\r\n    ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']\r\n    suit = cards[0][- 1]\r\n    top_rank = cards[0][0: - 1]\r\n    for i in range(1, 4):\r\n    this_card = cards[i]\r\n    this_suit = this_card[- 1]\r\n    if this_suit == suit:\r\n    this_rank = this_card[0: - 1]\r\n    if ranks . index(this_rank) > ranks . index(top_rank):\r\n    top_rank = this_rank\r\n    return top_rank + suit\r\n",
  "64dbb4ab529cad81578c61e7": "import ast\n\n\nclass YourFirstNodeTransformer (ast . NodeTransformer):\n    ...  # you can do this !\n    def visit_Constant(self, node):\n    return ast . Constant(node . value + 0.5)\n",
  "64db008b529cad38938c6e28": "import re\r\n\r\n\r\ndef longest_substring(digits):\r\n    regex = r'({e}?({o}{e})*{o}?)|({o}?({e}{o})*{e}?)' . format(\r\n        e='[02468]', o='[13579]')\r\n    return max((x[0] for x in re . findall(regex, digits)), key=len)\r\n",
  "64915dc9d40f96004319379a": "def type_of_function(d, c, r): return 'It is not a function' if len(k: = dict(r)) != len(r) else ('Bijective' if len(k) == len(d) == len(c) else 'Surjective') if set(k . values()) == set(c) else 'Injective' if len(set(k . values())) == len(k . values()) else 'General function'\n",
  "64d4cd29ff58f0002301d5db": "from itertools import combinations\n\n\ndef pair_em_up(n):\n    return sorted((list(x) for k in range(2, n + 1, 2) for x in combinations(range(n), k)), key=lambda x: x + [n] * (n - len(x)))\n",
  "64d482b76fad180017ecef0a": "from collections import Counter\n\n\ndef consecutive_nums(lst, size):\n    if len(lst) % size:\n        return False\n    cnt = Counter(lst)\n    for v in sorted(cnt)[: - size + 1 or None]:\n    if not cnt[v]:\n        continue\n    n = cnt[v]\n    for x in range(v, v + size):\n    if cnt[x] < n:\n        return False\n    cnt[x] -= n\n    return not sum(cnt . values())\n",
  "64cd52397a14d81a9f78ad3e": "def compute_final_position(b, m):\n\n    def pos(a, b): return (8 - int(b), 'abcdefgh' . index(a))\n\n    for t, e in enumerate(m):\n\n    if e[2] in '-x':\n        i, j = pos(* e[0: 2])\n        p, q = pos(* e[3: 5])\n        b[p][q] = b[i][j]\n        b[i][j] = '.'  # regular move\n    if e[- 2:] == 'ep':\n        b[i][q] = '.'  # en passant\n    if len(e) == 6:\n        b[p][q] = e[5]  # pawn promotion\n    if e == 'O-O' and t % 2 < 1:\n        b[7][4] = b[7][7] = '.'\n        b[7][5] = 'R'\n        b[7][6] = 'K'  # castling king size white\n    if e == 'O-O' and t % 2 > 0:\n        b[0][4] = b[0][7] = '.'\n        b[0][5] = 'r'\n        b[0][6] = 'k'  # castling king size black\n    if e == 'O-O-O' and t % 2 < 1:\n        b[7][0] = b[7][4] = '.'\n        b[7][2] = 'K'\n        b[7][3] = 'R'  # castling queen size white\n    if e == 'O-O-O' and t % 2 > 0:\n        b[0][0] = b[0][4] = '.'\n        b[0][2] = 'k'\n        b[0][3] = 'r'  # castling queen size black\n    return b\n",
  "64d16a4d8a9c272bb4f3316c": "VALUES = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']\r\n\r\n\r\ndef score_a_hand(cards):\r\n    suit = cards[0][- 1]\r\n    in_suit = filter(lambda card: card . endswith(suit), cards)\r\n    return max(in_suit, key=lambda card: VALUES . index(card[: - 1]))\r\n",
  "64d0f8fc8a9c270041f33a3c": "from math import gcd\r\nfrom itertools import count\r\n\r\n\r\ndef gcd_neq_one(a, b, k):\r\n    for n in count(0):\r\n    for i in range(0, n * k + 1, k):\r\n    for ai in (a + i, a - i):\r\n    if ai > 1:\r\n    j = n * k - i\r\n    for bj in (b + j, b - j):\r\n    if bj > 1 and gcd(ai, bj) > 1:\r\n    return n\r\n",
  "64cf5ba625e2160051ad8b71": "from collections import defaultdict, deque\r\n\r\n\r\ndef finish_all(edges):\r\n    n_entrants = defaultdict(int)\r\n    succs = defaultdict(list)\r\n    for b, a in edges:\r\n    n_entrants[b] += 1\r\n    n_entrants[a] += 0\r\n    succs[a]. append(b)\r\n\r\n    q = deque(k for k, n in n_entrants . items() if not n)\r\n    while q:\r\n    a = q . popleft()\r\n    del n_entrants[a]\r\n    for b in succs[a]:\r\n    n_entrants[b] -= 1\r\n    if not n_entrants[b]:\r\n        q . append(b)\r\n    return not n_entrants\r\n",
  "64cfc5f033adb608e2aaedef": "memo = [0] * (10 * * 7)\r\n\r\n\r\ndef solve_using_prev(n):\r\n    memo[n] = memo[n - sum(int(x) for x in str(n))] + 1\r\n    for n in range(1, 8):\r\n        solve_using_prev(n)\r\n    for n in range(9, 10 * * 7, 9):\r\n        solve_using_prev(n)\r\n\r\n    def jump_to_zero(a): return [memo[x - sum(int(x)\r\n                                              for x in str(x))] + 1 for x in a]\r\n",
  "64cf34314e8a905162e32ff5": "def smallest_transform(num):\r\n    lst = [int(i) for i in str(num)]\r\n    number = []\r\n    for i in range(min(lst), max(lst) + 1):\r\n    total = 0\r\n    for k in lst:\r\n    total += abs(k - i)\r\n    number . append(total)\r\n    return min(number)\r\n",
  "64cbc840129300011fa78108": "from gmpy2 import iroot\n\n\ndef root_sum(n):\n    return sum(r[0] for k in range(1, n . bit_length() + 1) if (r := iroot(n, k))[1])\n",
  "64cac86333ab6a14f70c6fb6": "def check_logs(log): return sum(\n    a >= b for a, b in zip(log, log[1:])) + bool(log)\n",
  "64c64be38f9e4603e472b53a": "from math import ceil\n\n\ndef legal_backlog(cases, mds):\n    return max(ceil(sum(cases . values()) / mds), max(cases . values()))\n",
  "64c7bbad0a2a00198657013d": "from itertools import groupby\r\n\r\n\r\ndef rev_sub(arr):\r\n    r = []\r\n    for i in [list(g) for n, g in groupby(arr, key=lambda x: x % 2)]:\r\n    if i[0] % 2:\r\n    r += i\r\n    else:\r\n    r += i[:: - 1]\r\n    return r\r\n",
  "64c766dd16982000173d5ba1": "class Menu:\r\n    def __init__(self, menu: list) - > None:\r\n    self . menu = menu\r\n    self . index = 0\r\n    self . length = len(menu)\r\n\r\n    def to_the_right(self) - > None:\r\n    self . index = (self . index + 1) % self . length\r\n    def to_the_left(self) - > None:\r\n    self . index = (self . index - 1) % self . length\r\n    def display(self) - > str:\r\n    temp = self . menu . copy()\r\n    temp[self . index] = [self . menu[self . index]]\r\n    return str(temp)\r\n",
  "64c743cb0a2a00002856ff73": "def switch_gravity(lst):\r\n    return list(map(list, zip(* map(sorted, zip(* lst)))))[:: - 1]\r\n",
  "64c5886e24409ea62aa0773a": "class C:\r\n    def __init__(self, fn): self . fn = fn\r\n    def __call__(self, * args, * * kwargs): return self . fn(* args, * * kwargs)\r\n\r\n    IncrementMe = C(lambda v: v + 1)\r\n    DoubleMe = C(lambda v: v * 2)\r\n    AmIEven = C(lambda v: v % 2 == 0)\r\n\r\n    def Map(fn): return C(lambda l: list(map(fn, l)))\r\n    def Filter(fn): return C(lambda l: list(filter(fn, l)))\r\n\r\n    def do_the_magic(kls):\r\n    for k, p in kls . __annotations__ . items():\r\n    if isinstance(p, C):\r\n        setattr(kls, k, p(getattr(kls, k)))\r\n",
  "64c45287edf1bc69fa8286a3": "def solution(s):\r\n    res, cur = [], [s[0]]\r\n    for x in s[1:]:\r\n    if ord(x) - ord(cur[- 1]) == 1:\r\n    cur . append(x)\r\n    else:\r\n    res . extend(cur[:: - 1])\r\n    cur = [x]\r\n\r\n    return '' . join(res + cur[:: - 1])\r\n",
  "64bd5ff1bb8f1006708e545e": "def secret_number(n):\r\n    return bin(n). count(str(n % 2)) * * 2\r\n",
  "64be81b50abf66c0147de761": "def find_missing_number(m):\r\n    L, s = 0, 0\r\n    while m . read():\r\n    L += 1\r\n    s ^= L\r\n    m . nand(m . R1, m . R0, m . R3)\r\n    m . nand(m . R2, m . R0, m . R1)\r\n    m . nand(m . R1, m . R1, m . R3)\r\n    m . nand(m . R3, m . R2, m . R1)\r\n    m . nand(m . R0, m . R3, 65535)\r\n    s ^= (~ m . output()) & 65535\r\n    return s\r\n",
  "64be6f070381860017dba5ab": "def hex_distance(grid):\r\n    flat = \"\" . join(grid)\r\n    size = len(grid[0])\r\n\r\n    # find start + end coordinates\r\n    start = flat . find(\"x\")\r\n    end = flat[start + 1:]. find(\"x\") + start + 1\r\n    x1, y1 = divmod(start, size)\r\n    x2, y2 = divmod(end, size)\r\n\r\n    # calculate distance\r\n    dx = x2 - x1\r\n    dy = abs(y2 - y1)\r\n    dy = max(dy - dx, 0) / / 2\r\n    return dx + dy\r\n",
  "64be5c99c9613c0329bc7536": "def is_polygonal(n):\r\n    a = 1\r\n    th = \"4567890\"\r\n    poly = []\r\n    while (a * (a + 1) / 2) < n - 1:\r\n    num_check = (n - 1) / (a * (a + 1) / 2)\r\n    if num_check . is_integer() and num_check > 2:\r\n    if 10 <= a % 100 <= 20 or str(a)[len(str(a)) - 1:] in th:\r\n    poly . append(f\" { int ( a )} th { int ( num_check )} -gonal number\")\r\n    elif str(a)[len(str(a)) - 1:] == \"1\":\r\n    poly . append(f\" { int ( a )} st { int ( num_check )} -gonal number\")\r\n    elif str(a)[len(str(a)) - 1:] == \"2\":\r\n    poly . append(f\" { int ( a )} nd { int ( num_check )} -gonal number\")\r\n    elif str(a)[len(str(a)) - 1:] == \"3\":\r\n    poly . append(f\" { int ( a )} rd { int ( num_check )} -gonal number\")\r\n    a += 1\r\n    return poly[:: - 1]\r\n",
  "64b84ed4b46f91004b493d87": "TREE = {'guess': '1+2=3', 'feedback': {'GGGGG': {'val': '1+2=3'}, 'GGBGR': {'val': '1+3=4'}, 'GGBGB': {'guess': '1+2=3', 'feedback': {'GGBGB': {'guess': '1+3=4', 'feedback': {'GGBGR': {'val': '1+4=5'}, 'GGBGB': {'guess': '2+6=8', 'feedback': {'BGRGB': {'val': '1+5=6'}, 'BGGGB': {'val': '1+6=7'}, 'BGBGG': {'val': '1+7=8'}, 'BGBGR': {'val': '1+8=9'}, 'BGBGB': {'val': '1+0=1'}}}}}}}, 'BBRGR': {'guess': '1+2=3', 'feedback': {'BBRGR': {'guess': '1+2=3', 'feedback': {'BBRGR': {'guess': '1+5=6', 'feedback': {'BBBGG': {'val': '2*3=6'}, 'BBRGB': {'val': '5-3=2'}, 'BBBGR': {'val': '6/3=2'}}}}}}}, 'BBRGB': {'guess': '1+2=3', 'feedback': {'BBRGB': {'guess': '1+3=4', 'feedback': {'BBBGR': {'guess': '1+7=8', 'feedback': {'BBBGG': {'val': '2*4=8'}, 'BBBGB': {'val': '6-4=2'}, 'BBBGR': {'val': '8/4=2'}}}, 'BBBGB': {'guess': '7-1=6', 'feedback': {'GGBGB': {'val': '7-5=2'}, 'BGBGR': {'val': '8-6=2'}, 'RGBGB': {'val': '9-7=2'}, 'BBBGB': {'val': '2*0=0'}, 'BGBGB': {'val': '2-0=2'}}}}}}}, 'RGRGG': {'val': '2+1=3'}, 'BGRGR': {'val': '2+3=5'}, 'BGRGB': {'guess': '1+2=3', 'feedback': {'BGRGB': {'guess': '1+2=3', 'feedback': {'BGRGB': {'guess': '1+6=7', 'feedback': {'BGRGB': {'val': '2+4=6'}, 'BGBGG': {'val': '2+5=7'}, 'BGGGB': {'val': '2+6=8'}, 'BGBGR': {'val': '2+7=9'}, 'BGBGB': {'val': '2+0=2'}}}}}}}, 'BBGGR': {'val': '3*2=6'}, 'RGBGR': {'val': '3+1=4'}, 'BGGGR': {'val': '3+2=5'}, 'BGBGR': {'guess': '1+2=3', 'feedback': {'BGBGR': {'guess': '1+3=4', 'feedback': {'BGRGR': {'val': '3+4=7'}, 'BGRGB': {'guess': '1+4=5', 'feedback': {'BGBGR': {'val': '3+5=8'}, 'BGBGB': {'val': '3+6=9'}}}, 'BGGGR': {'val': '4+3=7'}, 'BGGGB': {'guess': '1+5=6', 'feedback': {'BGRGB': {'val': '5+3=8'}, 'BGBGR': {'val': '6+3=9'}, 'BGBGG': {'val': '3+3=6'}}}}}}}, 'RBRGR': {'val': '3-1=2'}, 'RBGGR': {'val': '3-2=1'}, 'BBGGB': {'guess': '1+2=3', 'feedback': {'BBGGB': {'guess': '1+3=4', 'feedback': {'BBBGR': {'guess': '3-1=2', 'feedback': {'BBBGR': {'val': '4*2=8'}, 'BGBGG': {'val': '4-2=2'}, 'BBBGG': {'val': '4/2=2'}}}, 'BBBGG': {'guess': '2*3=6', 'feedback': {'RBBGR': {'val': '6-2=4'}, 'RBBGB': {'val': '8/2=4'}, 'GGBGB': {'val': '2*2=4'}}}, 'BBBGB': {'guess': '7*0=0', 'feedback': {'GBBGB': {'val': '7-2=5'}, 'BBBGB': {'val': '8-2=6'}, 'RBBGB': {'val': '9-2=7'}, 'BGRGG': {'val': '0*2=0'}, 'BBRGG': {'val': '0/2=0'}, 'BBBGG': {'val': '2-2=0'}}}}}}}, 'RGBGB': {'guess': '1+2=3', 'feedback': {'RGBGB': {'guess': '1+3=4', 'feedback': {'RGBGR': {'val': '4+1=5'}, 'RGBGB': {'guess': '6+2=8', 'feedback': {'RGBGB': {'val': '5+1=6'}, 'GGBGB': {'val': '6+1=7'}, 'BGBGG': {'val': '7+1=8'}, 'BGBGR': {'val': '8+1=9'}, 'BGBGB': {'val': '0+1=1'}}}}}}}, 'BGGGB': {'guess': '1+2=3', 'feedback': {'BGGGB': {'guess': '1+3=4', 'feedback': {'BGBGR': {'val': '4+2=6'}, 'BGBGB': {'guess': '1+6=7', 'feedback': {'BGBGG': {'val': '5+2=7'}, 'BGRGB': {'val': '6+2=8'}, 'BGBGR': {'val': '7+2=9'}, 'BGBGB': {'val': '0+2=2'}}}, 'BGBGG': {'val': '2+2=4'}}}}}, 'BGBGB': {'guess': '1+4=5', 'feedback': {'BGRGR': {'val': '4+5=9'}, 'BGGGR': {'val': '5+4=9'}, 'BGGGB': {'guess': '1+2=3', 'feedback': {'BGBGB': {'guess': '1+3=4', 'feedback': {'BGBGG': {'val': '0+4=4'}, 'BGBGR': {'val': '4+4=8'}}}}}, 'BGBGG': {'guess': '1+2=3', 'feedback': {'BGBGB': {'guess': '1+5=6', 'feedback': {'BGGGB': {'val': '0+5=5'}, 'BGRGB': {'val': '5+0=5'}}}}}, 'BGBGB': {'guess': '1+6=7', 'feedback': {'BGGGB': {'val': '0+6=6'}, 'BGBGG': {'guess': '1+7=8', 'feedback': {'BGGGB': {'val': '0+7=7'}, 'BGRGB': {'val': '7+0=7'}}}, 'BGBGB': {'guess': '9-8=1', 'feedback': {'BBGGB': {'val': '0+8=8'}, 'RBBGB': {'val': '0+9=9'}, 'BBRGB': {'val': '8+0=8'}, 'GBBGB': {'val': '9+0=9'}, 'BBBGB': {'val': '0+0=0'}}}, 'BGRGB': {'val': '6+0=6'}}}, 'BGRGB': {'val': '4+0=4'}}}, 'RBBGG': {'guess': '1+2=3', 'feedback': {'RBBGG': {'guess': '1+2=3', 'feedback': {'RBBGG': {'guess': '2*4=8', 'feedback': {'BBRGB': {'val': '4-1=3'}, 'BGBGB': {'val': '3*1=3'}, 'BBBGB': {'val': '3/1=3'}}}}}}}, 'RBBGR': {'guess': '1+2=3', 'feedback': {'RBBGR': {'guess': '1+2=3', 'feedback': {'RBBGR': {'guess': '1+3=4', 'feedback': {'RBGGR': {'val': '4-3=1'}, 'RBGGB': {'val': '3/3=1'}}}}}}}, 'RBBGB': {'guess': '1+4=5', 'feedback': {'RBRGR': {'val': '5-1=4'}, 'RBGGR': {'val': '5-4=1'}, 'RBBGG': {'guess': '1+2=3', 'feedback': {'RBBGB': {'guess': '2*3=6', 'feedback': {'BBBGR': {'val': '6-1=5'}, 'BGBGB': {'val': '5*1=5'}, 'BBBGB': {'val': '5/1=5'}}}}}, 'RBBGR': {'guess': '1+2=3', 'feedback': {'RBBGB': {\r\n    'guess': '1+5=6', 'feedback': {'RBGGR': {'val': '6-5=1'}, 'RBGGB': {'val': '5/5=1'}}}}}, 'RBBGB': {'guess': '6+1=7', 'feedback': {'RBGGR': {'val': '7-1=6'}, 'RBRGR': {'val': '7-6=1'}, 'BBGGG': {'guess': '2*4=8', 'feedback': {'BBBGR': {'val': '8-1=7'}, 'BGBGB': {'val': '7*1=7'}, 'BBBGB': {'val': '7/1=7'}}}, 'BBRGR': {'guess': '1+7=8', 'feedback': {'RBGGR': {'val': '8-7=1'}, 'RBGGB': {'val': '7/7=1'}}}, 'BBGGB': {'guess': '8*0=0', 'feedback': {'RBBGB': {'val': '9-1=8'}, 'BGRGG': {'val': '0*1=0'}, 'BBRGG': {'val': '0/1=0'}, 'GGBGB': {'val': '8*1=8'}, 'GBBGB': {'val': '8/1=8'}, 'BGBGB': {'val': '9*1=9'}, 'BBBGB': {'val': '9/1=9'}}}, 'BBRGB': {'guess': '1+8=9', 'feedback': {'RBGGR': {'val': '9-8=1'}, 'RBGGB': {'val': '8/8=1'}, 'RBBGR': {'val': '9/9=1'}}}, 'GBGGB': {'guess': '2*3=6', 'feedback': {'BGBGG': {'val': '6*1=6'}, 'BBBGG': {'val': '6/1=6'}}}, 'GBRGB': {'val': '6/6=1'}}}, 'RBRGB': {'guess': '1+2=3', 'feedback': {'RBBGB': {'guess': '2*3=6', 'feedback': {'BGBGB': {'val': '4*1=4'}, 'BBBGB': {'val': '4/1=4'}}}}}, 'RBGGB': {'val': '4/4=1'}}}, 'BBGGG': {'guess': '1+2=3', 'feedback': {'BBGGG': {'guess': '1+2=3', 'feedback': {'BBGGG': {'guess': '1+4=5', 'feedback': {'BBBGR': {'val': '5-2=3'}, 'BBBGB': {'val': '6/2=3'}}}}}}}, 'BBBGR': {'guess': '1+2=3', 'feedback': {'BBBGR': {'guess': '1+3=4', 'feedback': {'BBGGG': {'val': '7-3=4'}, 'BBGGB': {'guess': '0*5=0', 'feedback': {'BBRGB': {'val': '8-3=5'}, 'BBBGB': {'val': '9-3=6'}, 'GGBGG': {'val': '0*3=0'}, 'GBBGG': {'val': '0/3=0'}, 'BGBGB': {'val': '3*3=9'}, 'BBBGG': {'val': '3-3=0'}}}, 'BBRGB': {'val': '3*0=0'}}}}}, 'BBBGG': {'guess': '1+2=3', 'feedback': {'BBBGG': {'guess': '1+3=4', 'feedback': {'BBRGR': {'val': '7-4=3'}, 'BBRGB': {'guess': '1+5=6', 'feedback': {'BBGGB': {'val': '8-5=3'}, 'BBBGR': {'val': '9-6=3'}, 'BBBGB': {'val': '3-0=3'}}}, 'BBGGB': {'guess': '1+5=6', 'feedback': {'BBBGR': {'val': '6-3=3'}, 'BBBGB': {'val': '9/3=3'}}}}}}}, 'BBBGB': {'guess': '1+5=6', 'feedback': {'BBRGB': {'guess': '1+2=3', 'feedback': {'BBBGB': {'guess': '1+4=5', 'feedback': {'BBGGG': {'val': '9-4=5'}, 'BBBGR': {'val': '5*0=0'}, 'BBBGG': {'val': '5-0=5'}}}}}, 'BBGGB': {'guess': '1+2=3', 'feedback': {'BBBGB': {'guess': '0*1=0', 'feedback': {'BBBGB': {'val': '9-5=4'}, 'GGBGG': {'val': '0*5=0'}, 'GBBGG': {'val': '0/5=0'}, 'BBBGG': {'val': '5-5=0'}}}}}, 'BBBGB': {'guess': '2*4=8', 'feedback': {'BGGGB': {'val': '0*4=0'}, 'BGBGB': {'guess': '9-7=2', 'feedback': {'BBGGB': {'val': '0*7=0'}, 'RBBGB': {'val': '0*9=0'}, 'BBRGB': {'val': '7*0=0'}, 'GBBGB': {'val': '9*0=0'}, 'BBBGB': {'val': '0*0=0'}}}, 'BGBGR': {'guess': '1+8=9', 'feedback': {'BBGGB': {'val': '0*8=0'}, 'BBRGB': {'val': '8*0=0'}}}, 'BBGGB': {'guess': '3-1=2', 'feedback': {'BBBGB': {'val': '0/4=0'}, 'BGBGB': {'val': '4-4=0'}}}, 'BBBGB': {'guess': '0/7=0', 'feedback': {'GGGGG': {'val': '0/7=0'}, 'GGBGG': {'val': '0/9=0'}, 'RBRGB': {'val': '7-0=7'}, 'BBGGG': {'val': '7-7=0'}, 'RBBGB': {'val': '9-0=9'}, 'BBBGG': {'val': '9-9=0'}, 'GBBGG': {'val': '0-0=0'}}}, 'BBBGR': {'guess': '3-1=2', 'feedback': {'BBBGB': {'val': '0/8=0'}, 'BGBGB': {'val': '8-8=0'}}}, 'BGRGB': {'val': '4*0=0'}, 'BBRGB': {'val': '4-0=4'}, 'BBBGG': {'val': '8-0=8'}, 'BBGGR': {'val': '8-4=4'}}}, 'BBBGR': {'guess': '1+2=3', 'feedback': {'BBBGB': {'guess': '0*1=0', 'feedback': {'GGBGG': {'val': '0*6=0'}, 'GBBGG': {'val': '0/6=0'}, 'RGBGG': {'val': '6*0=0'}, 'BBBGG': {'val': '6-6=0'}}}}}, 'BBBGG': {'val': '6-0=6'}}}, 'BGBGG': {'guess': '1+2=3', 'feedback': {'BGBGG': {'guess': '1+2=3', 'feedback': {'BGBGG': {'guess': '1+3=4', 'feedback': {'BGGGB': {'val': '0+3=3'}, 'BGRGB': {'val': '3+0=3'}}}}}}}, 'GBBGB': {'guess': '1+4=5', 'feedback': {'GBBGB': {'guess': '6+1=7', 'feedback': {'BBRGB': {'guess': '9-1=8', 'feedback': {'BBRGB': {'val': '1*0=0'}, 'BBRGG': {'val': '1*8=8'}, 'RBRGB': {'val': '1*9=9'}, 'BGRGB': {'val': '1-0=1'}}}, 'RBRGB': {'val': '1*6=6'}, 'BBRGG': {'val': '1*7=7'}, 'BBGGB': {'guess': '0*1=0', 'feedback': {'BBGGG': {'val': '1-1=0'}, 'BGGGB': {'val': '1*1=1'}, 'BBGGB': {'val': '1/1=1'}}}}}, 'GBGGB': {'val': '1*4=4'}, 'GBBGG': {'val': '1*5=5'}}}, 'GBGGB': {'val': '1*2=2'}, 'GBBGG': {'val': '1*3=3'}, 'GGRGB': {'val': '1+1=2'}, 'RBRGB': {'guess': '1+2=3', 'feedback': {'RBRGB': {'guess': '1+2=3', 'feedback': {'RBRGB': {'guess': '6/3=2', 'feedback': {'BBBGG': {'val': '2*1=2'}, 'BBBGR': {'val': '2-1=1'}, 'BGBGG': {'val': '2/1=2'}}}}}}}, 'RBGGB': {'val': '2/2=1'}}}\r\n\r\n\r\ndef solve_micro_nerdle(history):\r\n    tree = TREE\r\n    for p, v in history:\r\n        tree = tree['feedback'][v]\r\n    return tree.get('val', tree.get('guess', None))\r\n",
  "64bc4a428e1e9570fd90ed0d": "import numpy as np\r\nMOD = 1000000007\r\n\r\n\r\ndef matrix_exp(Q, n):\r\n    if n == 0:\r\n    return np . array([[1, 0], [0, 1]], dtype=object)\r\n    return (Q @ matrix_exp(Q, n - 1) if n & 1 else matrix_exp((Q @ Q) % MOD, n >> 1)) % MOD\r\n    def ways(n, k):\r\n    return (matrix_exp(np . array([[k - 1, k - 1],\r\n                                   [1, 0]], dtype=object), n - 1) @ np . array([k * k, k], dtype=object))[1] % MOD\r\n",
  "64b8c6c09416795eb9fbdcbf": "def rep_set(n):\r\n    return [rep_set(k) for k in range(n)]\r\n",
  "64b1727867b45c41a262c072": "from itertools import chain\r\n\r\n\r\ndef team_dinner(available: list[list[int]]) - > int | None:\r\n    res = list(chain . from_iterable(available))\r\n    res = {i: res . count(i) for i in res}\r\n    result = []\r\n    for k, v in res . items():\r\n    if v >= len(available) / 2 and v == max(res . values()):\r\n    result . append(k)\r\n    if not result:\r\n    return None\r\n    elif len(result) == 1:\r\n    return result[0]\r\n    else:\r\n    res = dict . fromkeys(result, 0)\r\n    for day in result:\r\n    for person in available:\r\n    if day in person:\r\n    res[day] += len(person)\r\n    result = []\r\n    for k, v in res . items():\r\n    if v == max(res . values()):\r\n    result . append(k)\r\n\r\n    return sorted(result)[0]\r\n",
  "64b7c3e6e0abed000f6cad6c": "def block_player(a, b):\r\n    y1, x1 = divmod(a, 3)\r\n    y2, x2 = divmod(b, 3)\r\n    y3 = (y2 + (y2 - y1)) % 3\r\n    x3 = (x2 + (x2 - x1)) % 3\r\n    return y3 * 3 + x3\r\n",
  "64b7c03910f916000f493f5d": "def climbing_stairs(cost):\r\n    a = b = 0\r\n    for c in cost:\r\n    a, b = b, min(a, b) + c\r\n    return min(a, b)\r\n",
  "64b76b580ca7392eca9f886b": "def moving_particles(lst):\r\n    cur, ls = 0, lst[:]\r\n\r\n    while cur < len(ls) - 1:\r\n    if ls[cur] > 0 and ls[cur + 1] < 0:\r\n    ls[cur: cur + 2] = [(ls[cur] - ls[cur + 1]) *\r\n                        (- 1 if ls[cur] < - ls[cur + 1] else 1)]\r\n    cur = max(cur - 1, 0)\r\n    else:\r\n    cur += 1\r\n    return ls\r\n",
  "64b779a194167920ebfbdd2e": "from operator import itemgetter\r\n\r\n\r\ndef len_longest_chain(pairs):\r\n    res, x = 0, float('-inf')\r\n    for a, b in sorted(pairs, key=itemgetter(1)):\r\n    if x < a:\r\n    res, x = res + 1, b\r\n    return res\r\n",
  "64b771989416793927fbd2bf": "def closed_brackets(s):\n    a, b = 0, 0\n    for c in s:\n    if c == \")\" and b == 0:\n    return False\n    a = a + 1 if c == \"(\" else a and a - 1\n    b = b - 1 if c == \")\" else b + 1\n    return not a\n",
  "64b63c024979c9001f9307e4": "import re\r\n\r\n\r\ndef type_out(src):\r\n    dst = src . split('[', 1)[0]\r\n    for mo in re . finditer(r'\\[(\\w+)\\]([^\\[]+)', src):\r\n    match mo[1]:\r\n    case 'shift':\r\n    dst += mo[2][0]. upper() + mo[2][1:]\r\n    case 'holdshift':\r\n    dst += mo[2]. upper()\r\n    case 'unshift':\r\n    dst += mo[2]\r\n    return dst\r\n",
  "64b686e74979c90017930d57": "from functools import partial\r\nfrom re import compile\r\n\r\n\r\ndef helper(x):\r\n    r, i, l = x . groups()\r\n    if not (l or r):\r\n        return i\r\n    v = len(i)\r\n    if not l:\r\n        return \"R\" * (v + 1)\r\n    if not r:\r\n        return \"L\" * (v + 1)\r\n    q, r = divmod(v, 2)\r\n    return \"R\" * (q + 1) + \"I\" * r + \"L\" * (q + 1)\r\n\r\n    dominoes_fall = partial(compile(r\"(R?)(I+)(L?)\"). sub, helper)\r\n",
  "64b6722493f1050058dc3f98": "def eval_parentheses(s):\r\n    st = [0]\r\n    for c in s:\r\n    if c == '(':\r\n    st . append(0)\r\n    else:\r\n    x = st . pop()\r\n    st[- 1] += 2 * x or 1\r\n    return st . pop()\r\n",
  "64b6698c94167906c3fbd6c4": "from scipy . signal import correlate2d\n\n\ndef max_overlap(img1, img2):\n    return correlate2d(img1, img2). max()\n",
  "64b41e7c1cefd82a951a303e": "from itertools import combinations as combs\r\n\r\n\r\ndef configure_bar(goal, gym):\r\n    d = {plate: 2 * int(plate[1: - 3]) - len(str(plate)) for plate in gym}\r\n    w = sorted([d[plate] for plate in gym])\r\n    s = {v: k for k, v in d . items()}\r\n\r\n    for n in [2, 4, 6]:\r\n    for load in combs(w, n):\r\n    if 40 + sum(load) != goal * 2:\r\n    continue\r\n    right, left = load[1:: 2], load[- 2:: - 2]\r\n    r, l = [sum(len(s[p]) for p in side) for side in (right, left)]\r\n\r\n    if l >= 18 or r >= 18:\r\n    return ':('\r\n    return f\"-- { '' . join ([ s [ p ] for p in left ])}{ '-' * ( 36 - r - l )}{ '' . join ([ s [ p ] for p in right ])} --\"\r\n    return ':('\r\n",
  "64b2b04e22ad520058ce22bd": "from collections import defaultdict\r\nfrom functools import reduce\r\nfrom itertools import pairwise\r\nfrom operator import or_\r\nfrom gmpy2 import is_prime, next_prime\r\n\r\n\r\ndef get_neighbours():\r\n    primes = {p for p in range(1000, 9999) if is_prime(p)}\r\n    table = defaultdict(list)\r\n    for n in primes:\r\n    for a, b in pairwise((10_000, 1_000, 100, 10, 1)):\r\n    stop = n + a - n % a\r\n    for m in range(n + b, stop, b):\r\n    if m in primes:\r\n    table[n]. append(m)\r\n    table[m]. append(n)\r\n    return table\r\n    neighbours = get_neighbours()\r\n\r\n    def find_shortest_path(start, end):\r\n    paths = {start: [start]}\r\n    seen = {start}\r\n    while end not in paths:\r\n    seen . update(paths)\r\n    paths = reduce(or_, ({q: path + [q] for q in neighbours[p]\r\n                   if q not in seen} for p, path in paths . items()))\r\n    return paths[end]\r\n",
  "64a6e4dbb2bc0500171d451b": "segments = {\r\n    ' ': 0b0000000,\r\n    '0': 0b1111110,\r\n    '1': 0b0110000,\r\n    '2': 0b1101101,\r\n    '3': 0b1111001,\r\n    '4': 0b0110011,\r\n    '5': 0b1011011,\r\n    '6': 0b1011111,\r\n    '7': 0b1110000,\r\n    '8': 0b1111111,\r\n    '9': 0b1111011\r\n}\r\n\r\n\r\ndef count_segment_switches(display_size, sequence):\r\n    old = ' ' * display_size\r\n    switches = 0\r\n    for i in sequence:\r\n    new = str(i). rjust(display_size)\r\n    for old_dig, new_dig in zip(old, new):\r\n    switches += (segments[old_dig] ^ segments[new_dig]). bit_count()\r\n    old = new\r\n    return switches\r\n",
  "64ad571aa33413003e712168": "f = magic_show = lambda a: len(a) and (\n    a[0] == 'Y') - ~ (a[0] in 'YN') * f(a[1:])\n",
  "64a815e3e96dec077e305750": "import math\r\nimport heapq\r\n\r\n\r\nclass DisjointSetUnion:\r\n    def __init__(self, n):\r\n    self . parent = list(range(n))\r\n    self . size = [1] * n\r\n    def find(self, x):\r\n    if self . parent[x] != x:\r\n    self . parent[x] = self . find(self . parent[x])\r\n    return self . parent[x]\r\n\r\n    def union(self, x, y):\r\n    px, py = self . find(x), self . find(y)\r\n    if px == py:\r\n        return False\r\n    if self . size[px] > self . size[py]:\r\n    px, py = py, px\r\n    self . size[py] += self . size[px]\r\n    self . parent[px] = py\r\n    return True\r\n    # Kruskal\u2019s Minimum Spanning Tree\r\n    def bridge(islands):\r\n    heap = [(d, i, j) for i, p in enumerate(islands) for j, q in enumerate(\r\n        islands[i + 1:], i + 1) if (d := math . dist(p, q)) < 5000]\r\n    heapq . heapify(heap)\r\n    cost, edges_left = 0, len(islands) - 1\r\n    dsu = DisjointSetUnion(len(islands))\r\n    while heap:\r\n    dist, i, j = heapq . heappop(heap)\r\n    if dsu . union(i, j):\r\n    cost += dist\r\n    edges_left -= 1\r\n    if edges_left == 0:\r\n        break\r\n    return cost\r\n",
  "6474b8964386b6795c143fd8": "import re\r\nREQUIRED_ELEMENTS = {'H', 'C', 'N', 'O', 'P', 'Ca'}\r\n\r\n\r\ndef best_planet(solar_system, max_size):\r\n    candidates = []\r\n\r\n    for planet in solar_system:\r\n        # Parse the planet\r\n    elements, area = planet . split('_', 1)\r\n\r\n    area = int(area)\r\n    if area > max_size:\r\n    continue\r\n    elements = set(re . findall('[A-Z][a-z]?', elements))\r\n\r\n    if REQUIRED_ELEMENTS <= elements:\r\n    candidates . append((area, planet))\r\n\r\n    if not candidates:\r\n    return ''\r\n    candidates . sort()\r\n    return candidates[- 1][1]\r\n",
  "6495a5ad802ef5000eb70b91": "from preloaded import WORDS\r\nfrom itertools import product\r\nDIRS = set(product(range(- 1, 2), repeat=2)) - {(0, 0)}\r\n\r\n\r\nclass Trie:\r\n\r\n    def __init__(self):\r\n    self . root = {}\r\n\r\n    def insert(self, word):\r\n    cur = self . root\r\n    for char in word:\r\n    if char not in cur:\r\n    cur[char] = {}\r\n    cur = cur[char]\r\n    cur['#'] = ''\r\n    trie = Trie()\r\n    for word in WORDS:\r\n    trie . insert(word)\r\n\r\n    def squaredle(puzzle):\r\n\r\n    def dfs(x, y, snake, t):\r\n    if len(snake) > 3 and '#' in t:\r\n    res . add(snake)\r\n    for dx, dy in DIRS:\r\n    i, j = x + dx, y + dy\r\n    if N > i >= 0 <= j < M and grid[i][j] != ' ' and not seen[i][j]:\r\n    seen[i][j] = 1\r\n    char = grid[i][j]\r\n    if char in t:\r\n    dfs(i, j, snake + char, t[char])\r\n    seen[i][j] = 0\r\n    res = set()\r\n    grid = puzzle . split('-')\r\n    N, M = len(grid), len(grid[0])\r\n    for i, j in product(range(N), range(M)):\r\n    char = grid[i][j]\r\n    if char != ' ':\r\n    seen = [[0] * M for _ in range(N)]\r\n    seen[i][j] = 1\r\n    if char in trie . root:\r\n    dfs(i, j, char, trie . root[char])\r\n\r\n    return sorted(res, key=lambda w: (len(w), w))\r\n",
  "649c4012aaad69003f1299c1": "def rgb_to_grayscale(color):\r\n    \"\"\" #Assumes format: #RRGGBB \r\n    Multiply and accumulate converted(str_hex->int) RR/GG/BB with corresponding luminance values. \r\n    Convert the rounded result back to str_hex and remove the '0x' in front \r\n    Add a '#' and use the str_hex result three times. \r\n    \"\"\"\r\n    return '#' + 3 * format(round(0.299 * int(color[1: 3], 16)\r\n                                  + 0.587 * int(color[3: 5], 16)\r\n                                  + 0.114 * int(color[5: 7], 16)\r\n                                  ),\r\n                            '02X')\r\n",
  "6498aa0daff4420024ce2c88": "from itertools import count\r\nNO_SWAP = (1, 3)\r\n\r\n\r\ndef get_in_line(arr: list[int]) - > int:\r\n    arr = [v for v in reversed(arr) if not v or v > 2] + \\\r\n        [2] * arr . count(2) + [1] * arr . count(1)\r\n\r\n    for time in count(1):\r\n    match arr . pop():\r\n    case 1:\r\n    for i in range(len(arr) >> 1):\r\n    if arr[i] not in NO_SWAP and arr[- i - 1] not in NO_SWAP:\r\n    arr[i], arr[- 1 - i] = arr[- i - 1], arr[i]\r\n    case 0:\r\n    return time\r\n    case _:\r\n    return time + len(arr) - arr . index(0)\r\n",
  "6493682fbefb70000fc0bdff": "def no_adjacent_subsequences(lst):\r\n    xs, ys = [[]], [[]]\r\n    for v in lst:\r\n    xs, ys = ys, ys + [x + [v] for x in xs]\r\n    return ys\r\n",
  "648f2033d52f51608e06c458": "def count_skills(tree, required):\r\n    skils = set()\r\n    for r in required:\r\n    while r not in skils:\r\n    skils . add(r)\r\n    r = tree[r]\r\n    return len(skils)\r\n",
  "6484e0e4fdf80be241d85878": "def average_to_binary(n):\r\n    res, ln = {'x' + f' { n : b } ' [1:]\r\n               } if n > 1 else {f' { n } '}, len(f' { n : b } ')\r\n\r\n    for k in range(ln - 2):\r\n    cand = f' { n - 2 * * k : b } '\r\n    if cand[- k - 2] == '0':\r\n    res . add(cand[: - k - 2] + 'x' + cand[- k - 1:])\r\n\r\n    return res\r\n",
  "6440554ac7a094000f0a4837": "from functools import cache\r\nfrom itertools import chain\r\n\r\n\r\n@ cache\r\ndef f(n):\r\n    match n:\r\n    case 0.5: return []\r\n    case 0: return ['']\r\n    case 1: return ['1', 'x']\r\n    match n % 1:\r\n    case 0.5: return [s + 'x' for s in f((n - 0.5) / 2)]\r\n    case 0: return [* chain([s + 'x' for s in f((n - 0.5) / 2)],\r\n                            [s + '0' for s in f(n / 2)],\r\n                            [s + '1' for s in f((n - 1) / 2)])]\r\n    case _: return []\r\n\r\n    def average_to_binary(n):\r\n    match n:\r\n    case 0: return ['0']\r\n    case 0.5: return ['x']\r\n    case 1: return ['1']\r\n    return [s for s in f(n) if 'x' in s]\r\n",
  "647518391e258e80eedf6e06": "def create_two_sets_of_equal_sum(n):\r\n    if n % 4 in {1, 2}:\r\n        return []\r\n    return [[* range(1, n / / 4 + 1), * range(n * 3 / / 4 + 1, n + 1)], [* range(n / / 4 + 1, n * 3 / / 4 + 1)]]\r\n",
  "60983b03bdfe880040c531d6": "def solve(arr, k):\r\n    max_mean = 0\r\n    tapir = ()\r\n    for i in range(len(arr) - k + 1):\r\n    sum_slice = 0\r\n    for j in range(len(arr)):\r\n    sum_slice += arr[j]\r\n    if j + 1 >= k + i:\r\n    if sum_slice / (k + i) >= max_mean:\r\n    max_mean = sum_slice / (k + i)\r\n    tapir = (j - (k + i - 1), k + i)\r\n    sum_slice -= arr[j - (k + i - 1)]\r\n    return tapir\r\n",
  "6473603854720900496e1c82": "def step(x, y):\r\n    return int((4 * (y - x) - (y > x)) * * .5)\r\n",
  "6472390e0d0bb1001d963536": "def flip_pancakes(stack):\r\n    tp, st, res = len(stack) - 1, stack[:], []\r\n\r\n    while tp > 0:\r\n    if st[tp] != max(st[: tp + 1]):\r\n    ind = max(range(tp + 1), key=lambda k: st[k])\r\n    st = st[ind + 1: tp + 1][:: - 1] + st[: ind + 1] + st[tp + 1:]\r\n    res . extend([ind] * (ind > 0) + [tp])\r\n    tp -= 1\r\n    return res\r\n",
  "6470e15f4f0b26052c6151cd": "def create_euler_square(n):  # Assume n is odd.\n    return [[(i + j) % n + 1 for j in range(n)] for i in range(n)], \\\n        [[(2 * i + j) % n + 1 for j in range(n)] for i in range(n)]\n",
  "6469e4c905eaefffd44b6504": "def reverse_number(n, b):\r\n    if b == 1:\r\n        return n\r\n    m = 0\r\n    while n:\r\n    n, r = divmod(n, b)\r\n    m = m * b + r\r\n    return m\r\n",
  "646254375cee7a000ffaa404": "def verify_latin_square(array, m):\r\n    def validate():\r\n    if not is_square(array):\r\n    return \"Array not square\"\r\n    if not is_correct_size(array, m):\r\n    return \"Array is wrong size\"\r\n    value_error = fail_not_correct_values()\r\n    if value_error:\r\n    return value_error\r\n    return f\"Valid latin square of size { m } \"\r\n    def fail_not_correct_values():\r\n    for i, row in enumerate(array):\r\n    for j, value in enumerate(row):\r\n    if not is_within_range(value, m):\r\n    return f\" { value } at { i + 1 } , { j + 1 } is not between 1 and { m } \"\r\n    if value_occurs_more_than_once(value, row):\r\n    return f\" { value } occurs more than once in row { i + 1 } \"\r\n    for j in range(m):\r\n    column = [row[j] for row in array]\r\n    if len(set(column)) != m:\r\n    repeating_value = find_repeating_value(column)\r\n    return f\" { repeating_value } occurs more than once in column { j + 1 } \"\r\n    def is_square(array):\r\n    return all(len(row) == len(array) for row in array)\r\n\r\n    def is_correct_size(array, m):\r\n    return len(array) == m\r\n    def is_within_range(value, m):\r\n    return 1 <= value <= m\r\n    def value_occurs_more_than_once(value, row):\r\n    return row . count(value) > 1\r\n    def find_repeating_value(lst):\r\n    seen = set()\r\n    for value in lst:\r\n    if value in seen:\r\n    return value\r\n    seen . add(value)\r\n\r\n    def value_occurs_more_than_once_in_column(column, m):\r\n    for value in range(1, m + 1):\r\n    if column . count(value) > 1:\r\n    return value\r\n    return validate()\r\n",
  "64623e0ad3560e0decaeac26": "def nth_num_containing_ones(n, digit=1, base=10):\r\n    assert 0 < digit < base\r\n    n, a, nth = n - 1, [0], 0\r\n    while n >= a[- 1]:\r\n    a . append((base - 1) * a[- 1] + base * * (len(a) - 1))\r\n    a . pop()\r\n\r\n    while a:\r\n    x = a . pop()\r\n    l = base * * len(a)\r\n    if 0 <= n - digit * x < l:\r\n    nth = (base * nth + digit) * l + n - digit * x\r\n    return nth\r\n    if n >= l + digit * x:\r\n        n -= l - x\r\n    d, n = divmod(n, x)\r\n    nth = base * nth + d\r\n    return nth\r\n",
  "645fb55ecf8c290031b779ef": "def make_latin_square(n):\r\n    return [[(i + j) % n + 1 for i in range(n)] for j in range(n)]\r\n",
  "645e541f3e6c2c0038a01216": "def is_valid_train_arrangement(before, after):\n    if len(before) != len(after):\n        return False\n    l, r = 0, 0\n    for b, a in zip(before, after):\n    if b == '>':\n    if l != 0:\n        return False\n    r += 1\n    if a == '<':\n    if r != 0:\n        return False\n    l -= 1\n    if b == '<':\n    if r != 0 or l == 0:\n        return False\n    l += 1\n    if a == '>':\n    if l != 0 or r == 0:\n        return False\n    r -= 1\n    return l == 0 and r == 0\n",
  "64607242d3560e0043c3de25": "from math import floor, ceil\r\n\r\n\r\ndef less_than(s):\r\n    if s[0] == '-':\r\n    return 0\r\n    n = int(s[0:(len(s) + 1) / / 2]) + 10 * * (len(s) / / 2)\r\n    if s[- (len(s) / / 2):] < s[len(s) / / 2 - 1:: - 1]:\r\n    return n - 1\r\n    return n\r\n    def count_palindromes(a, b):\r\n    a, b = ceil(a), floor(b)\r\n    if a > b:\r\n    return 0\r\n    return less_than(str(b)) - less_than(str(a - 1))\r\n",
  "64600b4bbc880643faa343d1": "from itertools import product\nfrom operator import pow\nfrom math import prod\n\n\ndef get_dividers(values, powers):\n    return sorted(prod(map(pow, values, x)) for x in product(* (range(p + 1) for p in powers)))\n",
  "640f312ababb19a6c5d64927": "import random\r\nimport numpy\r\n\r\n\r\ndef simulate(disease_rate, false_positive_rate, n):\r\n    ntp = numpy . random . binomial(n, disease_rate)\r\n    nfp = numpy . random . binomial(n - ntp, false_positive_rate)\r\n\r\n    return [* random . sample(range(n), ntp)], ntp + nfp\r\n",
  "64553d6b1a720c030d9e5285": "class Worker ():\r\n    def __init__(self, position, direction, base):\r\n    self . position = position\r\n    self . direction = direction\r\n    self . base = base\r\n    def move(self):\r\n    if self . position == 0:\r\n    self . direction = 1\r\n    if self . position == self . base:\r\n    self . direction = - 1\r\n    self . position += self . direction\r\n    return self . position\r\n    class Coordinator:\r\n    def __init__(self, path):\r\n    self . workers = []\r\n    self . path_template = [\"M\"] + [\".\"] * (len(path) - 2) + [\"B\"]\r\n    self . parse(path)\r\n\r\n    def parse(self, path):\r\n    for i in range(len(path)):\r\n    if path[i] == \"<\":\r\n    self . workers . append(Worker(i, - 1, len(path) - 1))\r\n    elif path[i] == \">\":\r\n    self . workers . append(Worker(i, 1, len(path) - 1))\r\n\r\n    def move(self):\r\n    for worker in self . workers:\r\n    worker . move()\r\n\r\n    def get_path(self):\r\n    path = self . path_template . copy()\r\n    for worker in self . workers:\r\n    match path[worker . position]:\r\n    case \".\":\r\n    path[worker . position] = \"<\" if worker . direction < 0 else '>'\r\n    case \"M\":\r\n    path[worker . position] = \"*\"\r\n    case \"B\":\r\n    path[worker . position] = \"*\"\r\n    case \"<\":\r\n    path[worker . position] = \"#\"\r\n    case \">\":\r\n    path[worker . position] = \"#\"\r\n    return \"\" . join(path)\r\n\r\n    def simulate_mining(path, time):\r\n    result = []\r\n    map = Coordinator(path)\r\n    for i in range(time):\r\n    result . append(map . get_path())\r\n    map . move()\r\n    return result\r\n",
  "645797bd67ad1d92efea25a1": "def lfsr(size, pos, seed):\r\n    mask = sum(1 << i for i in pos)\r\n    while True:\r\n    yield seed\r\n    seed = seed >> 1 | ((seed & mask). bit_count() & 1) << size - 1\r\n",
  "5f1360c4bc96870019803ae2": "def pisano(n):\n    a, b, k = 1, 1, 1\n    while (a, b) != (0, 1):\n    a, b = b, (a + b) % n\n    k += 1\n    return k\n",
  "644ff2d6080a4001ff59a3b9": "def starting_number(n):\r\n    a, b = str(n), ''\r\n    while a != b and len(a) % 2 == 0 and '0' not in a[:: 2] and all(x != y for x, y in zip(a[1:: 2], a[3:: 2])):\r\n    a, b = '' . join(a[k + 1] * int(a[k]) for k in range(0, len(a), 2)), a\r\n    if a[0] == '0' and len(a) > 1:\r\n    return int(b)\r\n    if '00' in a or (len(a) == 2 and a[- 1] == '0' and a[0] != '1'):\r\n    return int(a)\r\n\r\n    return int(a)\r\n",
  "643a47fadad36407bf3e97ea": "def encode_cd(n):\n    if n > 255:\n    return - 1\n    forma = format(n, '08b')\n    form = forma[:: - 1]\n    res = \"P\"\n    p = 'P'\n    l = 'L'\n    for f in form:\n    if f == '1':  # 1 it is always change letter to another letter\n    p, l = l, p\n    res += p\n    return res\n",
  "644b17b56ed5527b09057987": "STRANGE_STRING = '\u00df'\n",
  "6446c0fe4e259c006511b75e": "def extract_bits(o, _, O): return o >> _ & ~ - (1 << O)\n",
  "644661194e259c035311ada7": "def mul_by_n(lst, n):\r\n    print(\"Inputs: \", lst, n)  # Check our inputs\r\n    result = [x * n for x in lst]\r\n    print(\"Result: \", result)  # Check our result\r\n    return result\r\n",
  "64416600772f2775f1de03f9": "def count_attacking_rooks(rooks):\r\n    s1 = set(item[0] for item in rooks)\r\n    s2 = set(item[1] for item in rooks)\r\n    return len(rooks) * 2 - len(s1) - len(s2)\r\n",
  "6444f6b558ed4813e8b70d43": "def graph(arr):\r\n    graph = []\r\n    top = max(arr, default=- 1)\r\n    for y in range(top, - 1, - 1):\r\n    row = []\r\n    for value in arr:\r\n    if value == y:\r\n        row . append(' ____ ')\r\n    elif value < y:\r\n        row . append('......')\r\n    else:\r\n        row . append('| |')\r\n    row . append(f' { \"^|\" [ y < top ]} { y } ')\r\n    graph . append('' . join(row))\r\n    return '\\n' . join(graph)\r\n",
  "643ea1adef815316e5389d17": "def quadrant_segment(A, B):\n    A = A[0] < 0, A[1] < 0\n    B = B[0] < 0, B[1] < 0\n    return A != B\n",
  "643af0fa9fa6c406b47c5399": "def quadrant(x, y): return ((1, 2), (4, 3))[y < 0][x < 0]\n",
  "643869cb0e7a563b722d50ad": "import requests\r\n\r\n\r\ndef wikidata_scraper(url):\r\n    res = requests . get(url). json()\r\n    entry = list(res['entities']. values())[0]\r\n\r\n    return {\r\n        \"ID\": entry['id'],\r\n        \"LABEL\": entry['labels']. get('en', {'value': 'No Label'})['value'],\r\n        \"DESCRIPTION\": entry['descriptions']. get('en', {'value': 'No Description'})['value'],\r\n    }\r\n",
  "64348795d4d3ea00196f5e76": "def binary_average(binary):\r\n    if len(binary) > 1 and binary[0] == 'x':\r\n    binary = '1' + binary[1:]\r\n    a = int(binary . replace('x', '1'), 2)\r\n    b = int(binary . replace('x', '0'), 2)\r\n    return (a + b) / 2\r\n",
  "642eba25b8c5c20031058225": "from gmpy2 import RoundDown, RoundUp, context\r\nfrom sys import float_info\r\n\r\n\r\ndef ifloor(n: int) - > float:\r\n    return float(context(round=RoundDown, emax=float_info . max_exp). rint(n))\r\n\r\n    def iceil(n: int) - > float:\r\n    return float(context(round=RoundUp, emax=float_info . max_exp). rint(n))\r\n",
  "6426b201e00c7166d61f2028": "def logical_immediate(imm64):\r\n    b = f' { imm64 :0 64 b } '\r\n    for i in range(1, 7):\r\n    l = 2 * * i\r\n    for w in range(1, l):\r\n    for immr in range(l):\r\n    z = '0' * (l - w) + '1' * w\r\n    y = (z[- immr:] + z[: - immr]) * (64 / / l)\r\n    if y == b:\r\n    r = f' { 2 * * ( 7 - i ) - 2 : 0 b }{ w - 1 : 0 { i } b } '\r\n    i, imms = '01' ['10' . index(r[0])], r[1:]\r\n    return int(f' { i }{ immr :0 6 b }{ imms } ', 2)\r\n",
  "642b375dca15841d3aaf1ede": "def f(a, b): return (b - a). bit_length()\n",
  "63e5119516648934be4c98bd": "def validate_sudoku(b, R=range): return all({* r} == {* R(1, 10)} for r in [* zip(* b)] + b + [[b[i / / 3 * 3 + j / / 3][i % 3 * 3 + j % 3] for j in R(9)] for i in R(9)])\n",
  "64294e2be00c71422d1f59c2": "from math import log\r\n# 6kyu????????????????\r\n\r\n\r\ndef f(n):\r\n    if not n:\r\n    return 0\r\n    k = 3 * * int(log(n) / log(3))\r\n    z = 2 * max(0, n - 2 * k)\r\n    return n + z + k\r\n",
  "6425a1463b7dd0001c95fad4": "from math import log2, ceil\r\n\r\n\r\ndef calculate(rectangles):\r\n    if not rectangles:\r\n    return 0\r\n    events = []\r\n    ys = set()\r\n    for x0, y0, x1, y1 in rectangles:\r\n    events . append((x0, y0, y1, 1))\r\n    events . append((x1, y0, y1, - 1))\r\n    ys . add(y0)\r\n    ys . add(y1)\r\n\r\n    events . sort()\r\n    ys = sorted(ys)\r\n    indices = {y: i for i, y in enumerate(ys)}\r\n    length = 2 * * ceil(log2(len(ys)))\r\n    counts = [0] * (2 * length)\r\n    covers = [0] * (2 * length)\r\n\r\n    def update(i, tl, tr, l, r, t):\r\n    if r <= tl or tr <= l:\r\n    return\r\n    c = counts[i]\r\n    if l <= tl and tr <= r:\r\n    c += t\r\n    counts[i] = c\r\n    covers[i] = ys[tr] - ys[tl]\r\n    else:\r\n    tm = (tl + tr) / / 2\r\n    update(2 * i, tl, tm, l, r, t)\r\n    update(2 * i + 1, tm, tr, l, r, t)\r\n    if c == 0:\r\n    covers[i] = i < length and covers[2 * i] + covers[2 * i + 1]\r\n\r\n    prev_x = 0\r\n    result = 0\r\n    for x, y0, y1, t in events:\r\n    result += covers[1] * (x - prev_x)\r\n    update(1, 0, length, indices[y0], indices[y1], t)\r\n    prev_x = x\r\n    return result\r\n",
  "6421c6b71e5beb000fc58a3e": "def generate(n):\r\n    return [0] if n <= 0 else [\r\n        * reversed(range(2, n, 2)),\r\n        n, 0,\r\n        * range(2, n, 2),\r\n        * reversed(range(1, n, 2)),\r\n        n,\r\n        * range(1, n, 2),\r\n    ]\r\n",
  "641c4d0e88ce6d0065531b88": "from inspect import ismethod\r\n\r\n\r\nclass Setting:\r\n    def __getattribute__(self, name):\r\n    attr = super(). __getattribute__(name)\r\n    return attr() if callable(attr) and not ismethod(attr) else attr\r\n",
  "641d08d7a544092654a8b29c": "def curve(g): return g * * .5 / / .0999\n",
  "6417797d022e4c003ebbd575": "import asyncio\r\n\r\n\r\nasync def send_request_politely(s: asyncio . Semaphore) - > str:\r\n    async with s:\r\n    return await send_request()\r\n\r\n    async def request_manager(n: int) - > str:\r\n    s = asyncio . Semaphore(150)\r\n    return \"\" . join(await asyncio . gather(* (send_request_politely(s) for _ in range(n))))\r\n",
  "6411b91a5e71b915d237332d": "def valid_parentheses(x):\r\n    while \"()\" in x:\r\n    x = x . replace(\"()\", \"\")\r\n    return x == \"\"\r\n",
  "64127b25114de109258fb6fe": "def reflect(point, line):\n    x, y = point\n    a, c = line\n    return x - 2 * a * (a * x - y + c) / (a * * 2 + 1), y + 2 * (a * x - y + c) / (a * * 2 + 1)\n",
  "64087fd72daf09000f60dc26": "import re\n\n\ndef cute_pattern(tiles):\n    return not re . search(r\"BB...BB|WW...WW\", tiles, re . DOTALL)\n",
  "640aa37b431f2da51c7f27ae": "def create_pythagorean_triples(diff, low, high):\r\n    return [(a, a * a / / diff - diff >> 1, a * a / / diff + diff >> 1) for a in range(low, high + 1)\r\n            if not a * a % diff and a * a / / diff % 2 == diff % 2 and 2 * a + diff < a * a / / diff]\r\n",
  "581e09652228a337c20001ac": "def cube_volume(h, r):\r\n    return min(h, r * 2 * * .5) * * 3\r\n",
  "640dee7cbad3aa002e7c7de4": "from math import ceil\nimport math\n\n\ndef buses(kids, adults, places):\n    if places == 0:\n        return 0\n    buses_by_people = math . ceil((kids + adults) / places)\n    if adults < (buses_by_people * 2) and kids > 0:\n    return 0\n    else:\n    return buses_by_people\n",
  "6409aa6df4a0b773ce29cc3d": "def real_numbers(n):\r\n    return n - n / / 2 - n / / 3 - n / / 5 + n / / 6 + n / / 10 + n / / 15 - n / / 30\r\n",
  "6408ba54babb196a61d66a65": "def the_bee(n):\r\n    cells = [0] * (2 * n + 1)\r\n    cells[n] = 1\r\n    for i in range(1, 4 * n - 2):\r\n    for j in range(i % 2 + 1, 2 * n, 2):\r\n    cells[j - 1] += cells[j]\r\n    cells[j + 1] += cells[j]\r\n\r\n    return cells[n]\r\n",
  "64060d8ab2dd990058b7f8ee": "def queens(n):\r\n    return (n - 2) * (n - 1) if n >= 3 else 0\r\n",
  "6405f2bb2894f600599172fd": "def dots_on_domino_bones(n):\r\n    if n < 0:\r\n    return - 1\r\n    return (n + 2) * (n + 1) * n / / 2\r\n",
  "6402d27bf4a0b7d31c299043": "from functools import reduce\n\n\ndef number_of_coins(tips):\n    # Let's do some math magic to get our total coin count\n    M = reduce(lambda x, y: x * y[1], tips, 1)\n    # Time to collect all these shiny coins!\n    s = sum([coin * (M / / tip) * pow((M / / tip), - 1, tip) for coin, tip in tips])\n    return s % M  # We gotta make sure we don't break the bank, unless we're playing Monopoly!\n",
  "6402205dca1e64004b22b8de": "def find_caterer(budget, people):\r\n    if people != 0:\r\n    pp = budget / people\r\n    if pp < 15:\r\n    return - 1\r\n    elif pp < 20:\r\n    return 1\r\n    elif pp < 24 or (pp < 30 and people <= 60):\r\n    return 2\r\n    else:\r\n    return 3\r\n    return - 1\r\n",
  "6400caeababb193c64d664d1": "disc_weight = {\"R\": 25, \"B\": 20, \"Y\": 15, \"G\": 10, \"W\": 5,\r\n               \"r\": 2.5, \"b\": 2, \"y\": 1.5, \"g\": 1, \"w\": .5, \"c\": 2.5, \"-\": 0}\r\n\r\n\r\ndef adjust_barbell(weight_start, weight_end):\r\n    discs, discs_stb = get_discs(weight_start - 25), get_discs(weight_end - 25)\r\n    while discs and discs_stb and discs[- 1] == discs_stb[- 1]:\r\n    discs, discs_stb = discs[: - 1], discs_stb[: - 1]\r\n    steps = [f\"strip { disc } \" for disc in discs]\r\n    steps += [f\"load { disc } \" for disc in discs_stb[:: - 1]]\r\n    return \", \" . join(steps)\r\n\r\n    def get_discs(weight):\r\n    discs = []\r\n    while weight > 0:\r\n    for disc in disc_weight:\r\n    if weight >= disc_weight[disc] * 2:\r\n    if disc_weight[disc] < 2.5 and \"c\" not in discs:\r\n    discs . append(\"c\")\r\n    discs . append(disc)\r\n    weight -= disc_weight[disc] * 2\r\n    break\r\n    discs = discs + [\"c\"] if \"c\" not in discs else discs\r\n    discs = \"\" . join(discs[:: - 1])\r\n    return discs\r\n",
  "6400c3ebf4a0b796602988a6": "ELEMENTS = [('R', 25), ('B', 20), ('Y', 15), ('G', 10), ('W', 5),\r\n            ('r', 2.5), ('c', 0), ('b', 2), ('y', 1.5), ('g', 1), ('w', 0.5)]\r\nSIDE, CENTER = 10, 20\r\nBAR, COLLAR = 20, 2.5\r\n\r\n\r\ndef load_barbell(W):\r\n    W -= BAR + 2 * COLLAR\r\n    side = []\r\n    for c, w in ELEMENTS:\r\n    n, W = divmod(W, 2 * w) if w else (1, W)\r\n    side . append(c * int(n))\r\n    side = \"\" . join(side). ljust(SIDE, '-')\r\n    return side[:: - 1] + '-' * CENTER + side\r\n",
  "6400aa17431f2d89c07eea75": "ELEMENTS = {'-': 0, 'c': 2.5, 'R': 25, 'B': 20, 'Y': 15, 'G': 10,\r\n            'W': 5, 'r': 2.5, 'b': 2, 'y': 1.5, 'g': 1, 'w': 0.5, }\r\nBAR = 20\r\n\r\n\r\ndef barbell_weight(barbell):\r\n    return BAR + sum(map(ELEMENTS . __getitem__, barbell))\r\n",
  "63f96036b15a210058300ca9": "def second_symbol(s, c):\r\n    return s . find(c, s . find(c) + 1)\r\n",
  "63f844fee6be1f0017816ff1": "from math import gcd\r\n\r\n\r\ndef get_jumps(cycle_list, k):\r\n    l = len(cycle_list)\r\n    return l / / gcd(l, k)\r\n",
  "63fa8aafe6be1f57ad81729a": "def get_interval(* notes):\r\n    n1, n2 = ('CDEFGAB' . index(n[0]) + 7 * int(n[1]) for n in notes)\r\n    return 1 + abs(n1 - n2)\r\n",
  "63f9ec524362170065e5c85b": "g = 9.81\n\n\ndef bounce_count(h, w, v):\n    t = (2 * h / g) * * 0.5  # time it takes to reach the floor\n    return (v * t) / / w  # number of bounces between walls\n",
  "54b26b130786c9f7ed000555": "import datetime\r\nimport re\r\n\r\n\r\nclass ValidationError (Exception):\r\n    pass\r\n    class Field:\r\n    def __init__(self, default=None, blank=False):\r\n    self . name = ''\r\n    self . _default = default\r\n    self . blank = blank\r\n    @ property\r\n    def default(self):\r\n    if callable(self . _default):\r\n    return self . _default()\r\n    return self . _default\r\n    def validate(self, value):\r\n    if not self . blank and value is None:\r\n    raise ValidationError(self . name, 'missing value')\r\n\r\n    if value is not None and not self . is_type_ok(value):\r\n    raise ValidationError(self . name, 'wrong type')\r\n\r\n    def is_type_ok(self, value):\r\n    return True\r\n    class CharField (Field):\r\n    def __init__(self, min_length=0, max_length=None, * * kwds):\r\n    super(CharField, self). __init__(* * kwds)\r\n    self . min_length = min_length\r\n    self . max_length = max_length\r\n    def validate(self, value):\r\n    super(CharField, self). validate(value)\r\n\r\n    if value is not None and self . min_length and len(value) < self . min_length:\r\n    raise ValidationError(self . name, 'too short')\r\n\r\n    if value is not None and self . max_length and len(value) > self . max_length:\r\n    raise ValidationError(self . name, 'too long')\r\n\r\n    def is_type_ok(self, value):\r\n    return isinstance(value, str)\r\n\r\n    class EmailField (CharField):\r\n    def validate(self, value):\r\n    super(EmailField, self). validate(value)\r\n\r\n    if value is not None and not re . match(r'[.a-z]+@[a-z]+\\.[a-z]{2,6}', value):\r\n    raise ValidationError(self . name, 'not valid e-mail')\r\n\r\n    class BooleanField (Field):\r\n    def is_type_ok(self, value):\r\n    return type(value) == bool\r\n    class DateTimeField (Field):\r\n    def __init__(self, auto_now=False, * * kwds):\r\n    if auto_now and kwds . get('default') is None:\r\n    kwds['default'] = datetime . datetime . now\r\n    super(DateTimeField, self). __init__(* * kwds)\r\n    self . auto_now = auto_now\r\n    def is_type_ok(self, value):\r\n    return isinstance(value, datetime . datetime)\r\n\r\n    class IntegerField (Field):\r\n    def __init__(self, min_value=None, max_value=None, * * kwds):\r\n    super(IntegerField, self). __init__(* * kwds)\r\n    self . min_value = min_value\r\n    self . max_value = max_value\r\n    def validate(self, value):\r\n    super(IntegerField, self). validate(value)\r\n\r\n    if value is not None and self . min_value and value < self . min_value:\r\n    raise ValidationError(self . name, 'too small')\r\n\r\n    if value is not None and self . max_value and value > self . max_value:\r\n    raise ValidationError(self . name, 'too big')\r\n\r\n    def is_type_ok(self, value):\r\n    return type(value) == int\r\n    class ModelMeta (type):\r\n    def __new__(meta, class_name, bases, class_dict):\r\n    new_class_dict = {}\r\n\r\n    for attribute_name, attribute in class_dict . items():\r\n    if not isinstance(attribute, Field):\r\n    new_class_dict[attribute_name] = attribute\r\n    continue\r\n    attribute . name = attribute_name\r\n    new_class_dict . setdefault('_attributes_', {}). setdefault(\r\n        attribute_name, attribute)\r\n\r\n    return super(ModelMeta, meta). __new__(meta, class_name, bases, new_class_dict)\r\n\r\n    class Model (metaclass=ModelMeta):\r\n    _attributes_ = {}\r\n\r\n    def __init__(self, * * kwds):\r\n    for attr in self . _attributes_ . values():\r\n    setattr(self, attr . name, kwds . get(attr . name, attr . default))\r\n\r\n    def validate(self):\r\n    for attr in self . _attributes_ . values():\r\n    attr . validate(getattr(self, attr . name))\r\n",
  "63f13a354a828b0041979359": "def find_incorrect_value(T):\r\n    troubles, end = [], len(T) / / 2\r\n    for i, v in enumerate(T[: end]):\r\n    l = 2 * i + 1\r\n    if T[l] + T[l + 1] != v:\r\n    troubles . append((i, l + 1))\r\n\r\n    match troubles:\r\n    case[(0, r)]: return 0, T[1] + T[2]  # wrong root\r\n    case[(i, r)]: return r, T[i] - T[r - 1]  # wrong \"right\" leaf\r\n    case[_, (i, r)]: return i, T[r - 1] + T[r]  # non leaf & non root\r\n",
  "63f3c61dd27f3c07cc7978de": "def compare(a, b):\r\n    fir = sorted(str(a))\r\n    sec = sorted(str(b))\r\n    return '100%' if fir == sec else '50%' if fir[0] in sec or fir[1] in sec else '0%'\r\n",
  "63ee1d8892cff420d2c869af": "def distribute_seats(num_seats, votes):\r\n    res = [0 for _ in votes]\r\n    for z in range(num_seats):\r\n    mi, _ = max(enumerate(votes), key=lambda p: p[1] / (res[p[0]] + 1))\r\n    res[mi] += 1\r\n    return res\r\n",
  "63e9a2ef7774010017975438": "def get_reward(banks: list[tuple[int, int]]):\r\n    fees = 0\r\n    G = dict(banks)\r\n    while G:\r\n    n, (i, j) = 1, G . popitem()\r\n    while j != i:\r\n    n, j = n + 1, G . pop(j)\r\n    fees += n * 2 * * n\r\n    return fees\r\n",
  "63ecc21e12797b06519ad94f": "def area(a, b, c):\r\n    return (d := b * * 2 - 4 * a * c) > 0 and d * * 1.5 / (6 * a * a)\r\n",
  "63ebadc7879f2500315fa07e": "from itertools import accumulate\n\n\ndef cleaned_counts(data):\n    return [* accumulate(data, max)]\n",
  "63deb6b0acb668000f87f01b": "def make_atomic_move(position, move):\r\n    j, i, x, l, k = move\r\n    i, j, k, l = 8 - int(i), ord(j) - 97, 8 - int(k), ord(l) - 97\r\n    position[i][j], position[k][l] = '.', position[i][j]\r\n    if x == 'x':\r\n    for u in range(max(0, k - 1), min(8, k + 2)):\r\n    for v in range(max(0, l - 1), min(8, l + 2)):\r\n    if k == u and l == v or position[u][v] not in \"pP\":\r\n    position[u][v] = '.'\r\n    return position\r\n",
  "63d4b700bce90f0024a9ca19": "exec(bytes((0b1101010, 0b1101111, 0b1111001, 0b111101, 0b1101100, 0b1100001, 0b1101101, 0b1100010, 0b1100100, 0b1100001, 0b100000, 0b1000011, 0b111010, 0b100111, 0b1100101, 0b1111000, 0b1100101, 0b1100011, 0b101000, 0b1100010, 0b1111001, 0b1110100, 0b1100101, 0b1110011, 0b101000, 0b101000, 0b100111, 0b101011, 0b100111, 0b101100, 0b100111, 0b101110, 0b1101010, 0b1101111, 0b1101001,\n     0b1101110, 0b101000, 0b1101101, 0b1100001, 0b1110000, 0b101000, 0b1100010, 0b1101001, 0b1101110, 0b101100, 0b1000011, 0b101110, 0b1100101, 0b1101110, 0b1100011, 0b1101111, 0b1100100, 0b1100101, 0b101000, 0b101001, 0b101011, 0b1100010, 0b100111, 0b100000, 0b100000, 0b100111, 0b101001, 0b101001, 0b101011, 0b100111, 0b101001, 0b101001, 0b101001, 0b100111, 0b100000, 0b100000)))\n",
  "63b9e30e29ba4400317a9ede": "def dead_segment(d): return (h: = [None] + [e[0] for e in zip(' a \\nfgb\\nedc', * d) if len({* e}) == 2])[len(h) < 3]\n",
  "63dab5bfde926c00245b5810": "ritual = r = lambda n, p = 1: n < 2 or n * * p * r(n - 1, p + 1) % (10 * * 9 + 7)\n",
  "63d53ca9cce9531953e38b6e": "def count_rooms(Ps):\r\n    for i in range(2):\r\n    if len(Ps[i][0]) == 1:\r\n    return sum(map(sum, Ps[i ^ 1]))\r\n\r\n    return sum(sum(sum(i and v for i, v in enumerate(row))\r\n                   for row in face)\r\n               for face in Ps)\r\n",
  "63ca4b3af1504e005da0f25c": "def draw_wigwam(n):\r\n\r\n    def colons(x): return f':-: { \":\" * x } ' [: x]\r\n    def zigs(x): return ':_' * (x + 1 >> 1)\r\n    def fold(left): return f'/ { left } : { left [:: - 1 ] } \\\\'\r\n    def on_side(i): return n > 4 and i > 2\r\n    def above_door(i): return i < n\r\n    def dots(i, j, di, dj, go):\r\n    while go(i):\r\n        bd[i][j] = '\u00b0'\r\n        i += di\r\n        j += dj\r\n    S, body = 2 * n + 1, (fold(colons(i) if i & 1 else zigs(i))\r\n                          for i in range(n))\r\n    bd = [[* row . center(S)] for row in (\"\\\\ /\", \"\u00a5\", * body)]\r\n\r\n    bd[n][n - 1: n + 2] = '/\u203e\\\\'\r\n    bd[n + 1][n - 2: n + 3] = '/ \\\\'\r\n    dots(n, 3, - 4, 4, on_side)\r\n    dots(2, n, 3, 0, above_door)\r\n    dots(n, S - 4, - 4, - 4, on_side)\r\n\r\n    return '\\n' . join(map('' . join, bd))\r\n",
  "60bcabf6b3a07c00195f774c": "from math import inf\r\n\r\n\r\ndef expand(lst):\r\n    intervals = [(- inf, inf, 0.0, 0.0)]\r\n    for a, c in lst:\r\n    x0, a, c = (inf, 0.0, abs(c)) if a == 0 else (- c /\r\n                                                  a, - a, - c) if a > 0 else (- c / a, a, c)\r\n    i, o = next((i, o) for i, o in enumerate(intervals) if o[0] <= x0 <= o[1])\r\n    intervals = [(u, v, x + a, y + c) for u, v, x, y in intervals[: i]] + \\\r\n        [(o[0], x0, o[2] + a, o[3] + c)] * (x0 > o[0]) + \\\r\n        [(x0, o[1], o[2] - a, o[3] - c)] * (x0 < o[1]) + \\\r\n        [(u, v, x - a, y - c) for u, v, x, y in intervals[i + 1:]]\r\n    return intervals\r\n",
  "63d1bac72de941033dbf87ae": "def validate_sudoku(board):\r\n\r\n    elements = set(range(1, 10))\r\n\r\n    # row\r\n    for b in board:\r\n    if set(b) != elements:\r\n    return False\r\n    # column\r\n    for b in zip(* board):\r\n    if set(b) != elements:\r\n    return False\r\n    # magic squares\r\n    for i in range(3, 10, 3):\r\n    for j in range(3, 10, 3):\r\n    if elements != {(board[q][w]) for w in range(j - 3, j) for q in range(i - 3, i)}:\r\n    return False\r\n    return True\r\n",
  "63cbe409959401003e09978b": "from itertools import groupby\r\n\r\n\r\ndef set_reducer(inp):\r\n    while len(inp) > 1:\r\n    inp = [len(list(b)) for a, b in groupby(inp)]\r\n    return inp[0]\r\n",
  "63d54b5d05992e0046752389": "def count_pixels(k): return 8 * k + 2 + (k < 2)\n",
  "63d1ba782de94107abbf85c3": "def false(a): return lambda b: a\n\n\ndef true(a): return lambda b: b\ndef iff(x): return lambda a: lambda b: x(b)(a)\n",
  "63d6dba199b0cc0ff46b5d8a": "ritual = 1 . __eq__\n",
  "63bd8cc3a78e0578b608ac80": "# I hate formatting equations\ndef quadratic_formula(y1, y2, _):\n    b = y2 - y1 - 3\n    c = y1 - b - 1\n    s = f\"x^2 { '' if b == 0 else '+x' if b == 1 else '-x' if b == - 1 else f' { b : + d } x' }{ '' if c == 0 else f' { c : + d } ' } \"\n    return s, 16 + 4 * b + c, 25 + 5 * b + c\n",
  "63c1d93acdd8ca0065e35963": "BORDERS = {'A': 2, 'B': 6, 'C': 10, 'D': 14}\r\n\r\n\r\ndef play(nums):\r\n    nums = nums[:]\r\n    center = nums . pop()\r\n    scores = {k: 0 for k in BORDERS}\r\n\r\n    while all(v < 100 for v in scores . values()) and (any(nums) or center):\r\n    scored = 0\r\n    for c, i in BORDERS . items():\r\n    b = nums[i]\r\n    if bool(center) ^ bool(b):\r\n    scores[c] += center + b\r\n    scored = 1\r\n    if center:\r\n    for c, i in BORDERS . items():\r\n    if not nums[i]:\r\n        nums[i] = center - 1\r\n    if scored:\r\n        center = 0\r\n    else:\r\n    for c, i in BORDERS . items():\r\n    if nums[i]:\r\n    center += nums[i] - 1\r\n    nums[i] = 0\r\n    nums = nums[- 1:] + nums[: - 1]\r\n\r\n    return scores\r\n",
  "63c05c1aeffe877458a15994": "from collections import defaultdict\r\n\r\n\r\ndef extract(c: str, section: str) - > tuple[int, int]:\r\n    try:\r\n    return (0, int(section))\r\n    except ValueError:\r\n    pass\r\n    if section . startswith('-'):\r\n    mul = - 1\r\n    section = section . replace('-', '+')\r\n    else:\r\n    mul = 1\r\n    section = section . replace('+', \"\")\r\n    if c not in section:\r\n    pow = 0\r\n    else:\r\n    if '^' in section:\r\n    (section, b) = section . split('^')\r\n    pow = int(b)\r\n    else:\r\n    pow = 1\r\n    section = section . replace(c, \"\")\r\n    mul = mul * (int(section) if section else 1)\r\n    return (pow, mul)\r\n\r\n    class Polynomial:\r\n    def __init__(self, c: str, d: dict[int, int]):\r\n    self . d = d . copy()\r\n    self . c = c\r\n    def __mul__(self, other):\r\n    c = self . c or other . c\r\n    res = defaultdict(int)\r\n    for (p1, m1) in self . d . items():\r\n    for (p2, m2) in other . d . items():\r\n    res[p1 + p2] += m1 * m2\r\n    return Polynomial(c, dict(res))\r\n\r\n    def unparse(self):\r\n    sections = sorted(self . d . items(), reverse=True)\r\n    parts = [unparse_section(* k) for k in sections]\r\n    parts = [i . replace('x', self . c) for i in parts if i]\r\n    return \"+\" . join(parts). replace(\"+-\", \"-\") or \"0\"\r\n    def unparse_section(pow, mul) - > str | None:\r\n    if mul == 0:\r\n    return None\r\n    p = str(mul) + 'x' if mul != 1 else 'x'\r\n    p = p . replace(\"-1x\", \"-x\")\r\n    if pow == 0:\r\n    p = str(mul)\r\n    if pow > 1:\r\n    p += f\"^ { pow } \"\r\n    return p\r\n    def parse(pol):\r\n    c = next((i for i in pol if i not in \"1234567890+- \"), \"\")\r\n    parts = pol . replace(\" \", \"\"). replace(\r\n        \"+\", \" +\"). replace(\"-\", \" -\"). split()\r\n    parts2 = [extract(c, i) for i in parts]\r\n    print(parts2)\r\n\r\n    return Polynomial(c, dict(parts2))\r\n\r\n    def polynomial_product(polynomial_1: str, polynomial_2: str) - > str:\r\n    return (parse(polynomial_1) * parse(polynomial_2)). unparse()\r\n",
  "63be67b37060ec0a8b2fdcf7": "def encode(d: list[int], p: list[int]) - > int:\r\n    e = 0\r\n    for i in range(len(p)):\r\n    e = e * d[i] + p[i]\r\n    return e\r\n    def decode(d: list[int], e: int) - > list[int]:\r\n    p = [0] * len(d)\r\n    for i in range(len(d) - 1, - 1, - 1):\r\n    p[i] = e % d[i]\r\n    e / /= d[i]\r\n    return p\r\n",
  "63bd62e60634a6006a1b53c0": "from itertools import accumulate\r\nTILES = \"_-\u203e\"\r\n\r\n\r\ndef draw_trail(trail):\r\n    hs = [* accumulate(trail)]\r\n    min_h = min(hs)\r\n    base = min_h - min_h % 3\r\n    but = min_h / / 3\r\n    up = max(hs) / / 3\r\n    H = up - but + 3\r\n    blank = ' ' * (len(trail) + 1)\r\n    board = [list(blank) for _ in range(H)]\r\n\r\n    for j, h in enumerate(hs):\r\n    i = H - 1 - (h - base) / / 3\r\n    board[i][j] = board[i - 2][j + 1] = TILES[h % 3]\r\n\r\n    return '\\n' . join(map('' . join, board))\r\n",
  "63b325618450087bfb48ff95": "def is_num(s):\r\n    try:\r\n        return str(int(s)) == s\r\n    except:\r\n        return not s\r\n\r\n    def dead_segment(displays):\r\n    A = (1, 5, 8, 7, 6, 3, 4)\r\n    B = {0: ' ', 64: '-', 63: 0, 6: 1, 91: 2, 79: 3,\r\n         102: 4, 109: 5, 125: 6, 7: 7, 127: 8, 111: 9}\r\n    def P(d): return is_num('' . join(str(B . get(e, '?'))\r\n                                      for e in d). lstrip())\r\n\r\n    def Q(d): return [sum((d[e / / 3][j + e % 3] > ' ') << i for i, e in enumerate(A)) for j in range(0, len(d[0]), 4)]\r\n    def R(d, s): return all(P(f) or P((e ^ (d == i) * (1 << s)\r\n                                       for i, e in enumerate(f))) for f in U)\r\n\r\n    def S(d, s): return all((e[d] ^ U[0][d]) >> s & 1 < 1 for e in U)\r\n    U = [Q(d . split('\\n')) for d in displays]\r\n    V = [chr(s + 97) + str(d + 1) for d in range(len(U[0]))\r\n         for s in range(7) if R(d, s) and S(d, s)]\r\n    if len(V) == 1:\r\n        return V[0]\r\n",
  "63bcd25eaeeb6a3b48a72dca": "from bisect import bisect_left\r\n\r\n\r\ndef sort_by_exclusion(words):\r\n    # last[i] represents the last element of\r\n    # the smallest subsequence of size i\r\n    last = ['']\r\n    for word in words:\r\n    idx = bisect_left(last, word)\r\n    if idx == len(last):\r\n        last . append(word)\r\n    else:\r\n        last[idx] = word\r\n    return len(words) - len(last) + 1\r\n",
  "63b9aa69114b4316d0974d2c": "def center(edges):\r\n    a, b = edges[0]\r\n    return a if a in edges[1] else b\r\n",
  "63b84f54693cb10065687ae5": "def create_box(m, n):  # m and n positive integers\n    return [[min([x + 1, y + 1, m - x, n - y]) for x in range(m)] for y in range(n)]\n",
  "6250122a983b3500358fb671": "from collections import defaultdict\r\n\r\n\r\nclass MegaConnect4:\r\n    def __init__(self, board_size, win_condition):\r\n    self . height = [0] * board_size\r\n    self . lines = {k: defaultdict(lambda: defaultdict(dict)) for k in [\r\n        (1, 0), (0, 1), (1, 1), (- 1, 1)]}\r\n    self . get_coords = {\r\n        (1, 0): lambda x, y: (y, x),\r\n        (0, 1): lambda x, y: (x, y),\r\n        (1, 1): lambda x, y: (y - x, (y + x) / / 2),\r\n        (- 1, 1): lambda x, y: (y + x, (y - x) / / 2),\r\n    }\r\n    self . win = win_condition\r\n    def add_move(self, player, col):\r\n    x, y = col, self . height[col]\r\n    self . height[col] += 1\r\n    won = False\r\n    for k in [(1, 0), (0, 1), (1, 1), (- 1, 1)]:\r\n    p, q = self . get_coords[k](x, y)\r\n    l, r = q, q + 1\r\n    d = self . lines[k][player][p]\r\n    if l in d:\r\n    l = d[l]\r\n    del d[d[l]]\r\n    del d[l]\r\n    if r in d:\r\n    r = d[r]\r\n    del d[d[r]]\r\n    del d[r]\r\n    d[l], d[r] = r, l\r\n    won |= r - l >= self . win\r\n    return won\r\n",
  "63b5ce67e226b309f87cdefe": "SEGMENTS = {0b1111110, 0b0110000, 0b1101101, 0b1111001, 0b0110011,\r\n            0b1011011, 0b1011111, 0b1110000, 0b1111111, 0b1111011}\r\n\r\n\r\ndef segment_to_number(s): return int(\r\n    '' . join('01' [s[i] != ' '] for i in (1, 6, 10, 9, 8, 4, 5)), 2)\r\n\r\n\r\ndef number_to_letters(n): return '' . join(\r\n    c for c, b in zip('abcdefg', f' { n :0 7 b } ') if b == '1')\r\n\r\n\r\ndef reversed_segments(display: list[str]) - > str | None:\r\n    encoded = set(map(segment_to_number, display))\r\n    it = (i for i in range(2 * * 7) if {s ^ i for s in encoded} <= SEGMENTS)\r\n    res = next(it)\r\n    return None if next(it, False) else number_to_letters(res)\r\n",
  "63b06ea0c9e1ce000f1e2407": "def alphabet(ns):\r\n    a, b, c1, c2, _, _, _, cd = sorted(ns)\r\n    return cd / c2 if a * b == c1 else cd / c1\r\n",
  "63b5951092477b0b918ff24f": "def lattice(a, b):\r\n    res = {}\r\n    for i, x in enumerate(map(int, str(b))):\r\n    for j, y in enumerate(map(int, str(a))):\r\n    res[i + j] = res . get(i + j, []) + [x * y / / 10]\r\n    for j, y in enumerate(map(int, str(a))):\r\n    res[i + j + 1] = res . get(i + j + 1, []) + [x * y % 10]\r\n\r\n    return [res[k] for k in sorted(res, reverse=True)]\r\n",
  "63b4758f27f8e5000fc1e427": "def yahtzee_upper(dice: list) - > int:\r\n    return max([dice . count(x) * x for x in set(dice)])\r\n",
  "63b3cebaeb152e12268bdc02": "def what_branch(time):\r\n    \u5929\u5e72\u5730\u652f = \"\u5b50\u4e11\u4e11\u5bc5\u5bc5\u536f\u536f\u8fb0\u8fb0\u5df3\u5df3\u5348\u5348\u672a\u672a\u7533\u7533\u9149\u9149\u620c\u620c\u4ea5\u4ea5\u5b50\"\r\n    m, s = map(int, time . split(\":\"))\r\n    t = m * 60 + s\r\n    return \u5929\u5e72\u5730\u652f[t / / 60]\r\n",
  "63ada5a5779bac0066143fa0": "from itertools import count\r\nfrom dataclasses import dataclass\r\nROCK_TO_SOLIDITY = dict(zip(\".*xX@\", range(5)))\r\n\r\n\r\n@ dataclass\r\nclass Drill:\r\n\r\n    row: list[int]\r\n    damage: int\r\n    i: int = 0\r\n    _movable: bool = False\r\n    @ classmethod\r\n    def build(cls, s: str):\r\n    speed = s . count('>')\r\n    power = '-' in s or 2 * ('=' in s)\r\n    row = [ROCK_TO_SOLIDITY[c]\r\n           for c in s[s . index('>') + speed:]. rstrip('.')]\r\n    return cls(row, power * speed)\r\n\r\n    @ classmethod\r\n    def pool_worker(cls, land: str):\r\n    drills = [* map(Drill . build, land . splitlines())]\r\n    return lambda action: [action(d) for d in drills]\r\n\r\n    def work(self):\r\n    if self . i < len(self . row) and self . row[self . i]:\r\n    self . row[self . i] = max(0, self . row[self . i] - self . damage)\r\n    self . _movable = self . i >= len(self . row) or not self . row[self . i]\r\n\r\n    def move(self): self . i += 1\r\n    def done(self): return self . i >= len(self . row)\r\n    def movable(self): return self . _movable\r\n    def drill(canvas):\r\n    pool = Drill . pool_worker(canvas)\r\n    for rnd in count():\r\n    pool(Drill . work)\r\n    if all(pool(Drill . done)):\r\n        return rnd\r\n    if all(pool(Drill . movable)):\r\n        pool(Drill . move)\r\n",
  "63adf4596ef0071b42544b9a": "from math import isqrt\n\n\ndef max_df(a_n: int) - > int:\n    return (isqrt(8 * a_n) - 1) / / 2\n",
  "63ab271e96a48e000e577442": "def can_escape(walls):\r\n    return all(a > i < b for i, (a, b) in enumerate(walls, 1))\r\n",
  "5fa49cfb19923f00299eae22": "STRINGS = 'EBGDAE'\r\nNOTES = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\r\n\r\n\r\ndef get_frets(note, exact, * string_position):\r\n    if exact:\r\n    s0, p = string_position\r\n    f0 = (NOTES . index(note) -\r\n          NOTES . index(STRINGS[s0 - 1])) % 12 + (p - 1) * 12\r\n    return [(s, f) for s in range(1, 7) if 0 <= (f := f0 + (s - s0) * 5 + (s0 > 2 and s < 3) - (s > 2 and s0 < 3)) <= 22]\r\n    return [(s, f) for s, n in enumerate(STRINGS, 1) for f in range(23) if NOTES[(NOTES . index(n) + f) % 12] == note]\r\n",
  "63aa7b499c53c5af68e86a86": "from collections import Counter\nfrom math import ceil\n\n\ndef calculate_cost_per_person(array: list[int], rental: int) - > dict[int, int]:\n    res, days, rest, last = {}, Counter(array), len(array), 0\n    for k in sorted(days):\n    res[k] = res . get(last, 0) + ceil(rental / rest * (k - last))\n    rest, last = rest - days[k], k\n    return res\n",
  "632c4222a1e24b480d9aae0d": "def matches_brackets(s):\r\n    c = 0\r\n    for v in s:\r\n    if v == \"(\":\r\n        c += 1\r\n    if v == \")\":\r\n        c -= 1\r\n    if c < 0:\r\n        return False\r\n    return c == 0\r\n    def take_until_close(itr):\r\n    res, c = \"\", 0\r\n    for v in itr:\r\n    if v == \")\" and not c:\r\n        return res\r\n    if v == \")\":\r\n        c -= 1\r\n    if v == \"(\":\r\n        c += 1\r\n    res += v\r\n    def underload(code):\r\n    if not matches_brackets(code):\r\n    raise Exception(\"Parenthesis don't match\")\r\n    stack, output = [], \"\"\r\n    def iter_code(code):\r\n    code = iter(code)\r\n    for v in code:\r\n    if v == \"(\":\r\n    stack . append(take_until_close(code))\r\n    continue\r\n    yield v\r\n    if v == \"^\":\r\n    yield from iter_code(stack . pop())\r\n\r\n    for command in iter_code(code):\r\n    if command == \":\":\r\n        stack . append(stack[- 1])\r\n    if command == \"!\":\r\n        stack . pop()\r\n    if command == \"~\":\r\n        stack . append(stack . pop(- 2))\r\n    if command == \"*\":\r\n    v = stack . pop()\r\n    stack[- 1] += v\r\n    if command == \"a\":\r\n        stack[- 1] = f\"( { stack [ - 1 ]} )\"\r\n    if command == \"S\":\r\n        output += stack . pop()\r\n    return output\r\n",
  "63a5b74a9803f2105fa838f1": "def find_the_crossing(a, b, c, d):\r\n    a11, a12, b1 = b[1] - a[1], a[0] - b[0], a[0] * \\\r\n        (b[1] - a[1]) + a[1] * (a[0] - b[0])\r\n    a21, a22, b2 = d[1] - c[1], c[0] - d[0], c[0] * \\\r\n        (d[1] - c[1]) + c[1] * (c[0] - d[0])\r\n\r\n    det = a11 * a22 - a12 * a21\r\n    return ((b1 * a22 - a12 * b2) / det, (a11 * b2 - b1 * a21) / det) if det != 0 else None\r\n",
  "63a489ce96a48e000e56dda0": "def draw(formation):\r\n\r\n    def A(u, n):\r\n    u -= 1\r\n    if u == 1:\r\n    ls = \"..\" + \".\u00b4\\\\.\" * n\r\n    d = n * \".\u00a8\\\\.\" + \"..\"\r\n    else:\r\n    ls = n * ('.' + \"\u00b4\\\\\" * u + '.')\r\n    d = n * (\"\u00a8\\\\\" . center(u - 1 << 1, '.') + \"....\")\r\n    return (g := '.' * len(d)), ls, g, d, g\r\n    def M(u, n):\r\n    def line(i, is_g, is_d):\r\n    if is_g:\r\n        return '.' * s\r\n    kind = \"\u00b4\u00a8\" [is_d] + \"\\\\\u00b4\\\\/\"\r\n    return kind . ljust(i + 5, '.'). rjust(s, '.')\r\n    l = u / / 2 + 1\r\n    s = 5 + n * l\r\n    return (line(i, i % l == 0, (i + 1) % l == 0) for i in range(n * l + 1))\r\n\r\n    k, * un = formation . split('-')\r\n    return \"\\n\" . join(locals()[k](* map(int, un)))\r\n",
  "63a2cf5bd11b1e0016c84b5a": "def draw(n):\r\n    if n == 1:\r\n    return '\\n' . join([\" _ \", \"|_|\"])\r\n    inside = draw(n - 1). splitlines()\r\n    return \"\\n\" . join(\r\n        \"| \" [i < 1] + \"_ \" [0 < i < 2 * len(inside) - 2] + \"| \" [i < len(inside)] +\r\n        row[1:] for i, row in enumerate(inside + inside[1:])\r\n    )\r\n",
  "63a31f7d66ad15f77d5358b9": "def draw_pyramid(n):\r\n    mid = ['', '__', '__:_'] + [['', '|_', '_'][i % 3] + '_|_' * (i * 2 / / 3) for i in range(3, n * 2)]\r\n    return '\\n' . join(\r\n        [' ' * (n * 3 - i * 3 - 2) + '.' + ('\u00b4\\\\ \\\\' + '\u00b4\\\\' * (i - 2) if i > 2 and i % 2 else '\u00b4\\\\' * i) + '/' + mid[i] + '\\\\' + ' ' * (n * 2 - i - 1) for i in range(n)] +\r\n        [' ' * (i - n) + ('\\\\ ' + '\\\\\u00b4' * (n * 2 - i - 2) if i > 1 and i == n and i % 2 else '\\\\\u00b4' *\r\n                          (n * 2 - i - 1)) + '\\\\/' + mid[i] + '\\\\' + ' ' * (n * 2 - i - 1) for i in range(n, n * 2)]\r\n    )\r\n",
  "639f4307531bc600236012a2": "from functools import reduce\n# Kinda ironic isn't it?\n\n\ndef fn_shorthand(functions):\n    return ',' . join(reduce(\"{1}({0})\" . format, map(str . strip, reversed(functions . split(\">\")))). split())\n",
  "63a249a9e37cea004a72dee9": "# see: https://oeis.org/A006338\nfrom itertools import count\n\n\ndef special_sequence(sqrt2=2 * * 0.5):\n    for n in count(1):\n    yield round((n + 1) * sqrt2) - round(n * sqrt2)\n",
  "639d78b09547e900647a80c7": "from collections import Counter\r\ntmp = \"\"\"\\ \r\n test.assert_equals(sum_words('i am fine thank you'), [24, 32, 73, 61, 32]) \r\n test.assert_equals(sum_words('do you have a clue yet'), [14, 32, 70, 13, 57, 52]) \r\n test.assert_equals(sum_words('i bet some of you guys still got no idea'), [24, 38, 78, 35, 32, 54, 106, 28, 11, 64]) \r\n test.assert_equals(sum_words('gta san andreas'), [31, 40, 101]) \r\n test.assert_equals(sum_words('sensei believes in you'), [123, 158, 25, 32]) \r\n test.assert_equals(sum_words('if you want to give up look at test cases'), [49, 32, 42, 22, 67, 23, 57, 25, 73, 95]) \r\n test.assert_equals(sum_words('oddb cat doti getff ahhn'), [21, 32, 50, 91, 54]) \r\n test.assert_equals(sum_words('jhhib jkjkac anttle emcmd'), [69, 54, 83, 72]) \r\n test.assert_equals(sum_words('pigu que ner'), [53, 39, 45]) \r\n test.assert_equals(sum_words('stand uqe var llw lex aay zot'), [56, 39, 48, 60, 54, 43, 30]) \r\n \"\"\"\r\nto_solve, solved = {}, {}\r\n\r\nfor line in tmp . splitlines():\r\n    words, values = line[30: - 1]. split(\"'), \")\r\n    for w, v in zip(words . split(), eval(values)):\r\n    to_solve[frozenset(w)] = (v, Counter(w))\r\n\r\n    while to_solve:\r\n    for k, (v, c) in [* to_solve . items()]:\r\n    if len(k) == 1:\r\n    x = next(iter(k))\r\n    solved[x] = v / / c[x]\r\n    del to_solve[k]\r\n\r\n    for k, (v, c) in [* to_solve . items()]:\r\n    if (u := k & solved . keys()):\r\n    if len(u) < len(k):\r\n    to_solve[frozenset(k - solved . keys())] = (v -\r\n                                                sum(solved[x] * c[x] for x in u), c)\r\n    del to_solve[k]\r\n\r\n    def sum_words(s):\r\n    return [sum(solved[c] for c in w) for w in s . split()]\r\n",
  "639dd2efd424cc0016e7a611": "def zero_count(sum):\r\n    most = 0\r\n    res = []\r\n    for x in range(sum / / 3 + 1):\r\n    for y in range(x, (sum - x) / / 2 + 1):\r\n    z = sum - x - y\r\n    count = len(p := str(x * y * z)) - len(p . rstrip(\"0\"))\r\n    if count == most:\r\n        res . append([x, y, z])\r\n    elif count > most:\r\n    most = count\r\n    res = [[x, y, z]]\r\n    return res\r\n",
  "639ac3ded3fb14000ed38f31": "def find_coords(plane):\r\n    arr = plane . split('\\n')\r\n    d = {}\r\n\r\n    for y, row in enumerate(arr[:: - 1]):\r\n    for x, char in enumerate(row, - y):\r\n    if char . isdigit():\r\n    d[int(char)] = ((y, (x - 1) / / 2))\r\n\r\n    return [d[i] for i in range(len(d))]\r\n",
  "633b8be2b5203f003011d79e": "from collections import Counter\r\n\r\n\r\ndef freq_stack(pops, balloons):\r\n    lst = []\r\n    cntr = Counter()\r\n    for i, b in enumerate(balloons):\r\n    cntr[b] += 1\r\n    lst . append((- cntr[b], - i, b))\r\n    return [b for _, _, b in sorted(lst)[: pops]]\r\n",
  "6397b0d461067e0030d1315e": "def to_industrial(time):\r\n    if isinstance(time, str):\r\n    h, m = map(int, time . split(':'))\r\n    return h + round(m / 60, 2)\r\n    return round(time / 60, 2)\r\n\r\n    def to_normal(time):\r\n    return f' { int ( time )} : { str ( round ( time % 1 * 60 )). zfill ( 2 )} '\r\n",
  "6394d7573c47cb003d3253ec": "def swimming_pool(indices, length):\r\n    def draw_lane(index):\r\n    k, r = divmod(index + 5 * (index < 0), length)\r\n    i, s = special_args[index] if - 5 < index < 8 else normal_args[r]\r\n    t, s = k & 1, [s, s . translate(str . maketrans(\"<>\", \"><\"))][k & 1]\r\n\r\n    prefix = [\"p.p\" [t and 0 < r < 5:][: 2], \"..\"][- length <= index <= 0]\r\n    middle = replace(template[::(- 1) * * t], i + 2 * t, s)[::(- 1) * * t]\r\n    suffix = index and \"q.q\" [\r\n        t or index in {- 5, - 2, - 1, 1} or not r or r > 4:][: 2] or \"..\"\r\n    return f\" { prefix } / { middle . replace ( 'x' , 'xX' [ index == - 3 and clear_win ])}{ suffix } \"\r\n    normal_args = ((- 6, \"-x\"), (- 5, \"-x\"), (- 4, \">x\"),\r\n                   (- 5, \"<<o\"), (- 4, \"x<\"))\r\n    normal_args += tuple((- 5 - i, \"x-\") for i in range(length - 5))\r\n    special_args = ((- 3, \"~\"), (- 1, \"x\"), (- 2, \"x\"),\r\n                    (- 5, \"<<o\"), (- 3, \"<\"), (- 4, \"--\"))\r\n    special_args += ((- 5, \"--\"), (- 8, \"<x-\"), (- 5, \"-x=\"),\r\n                     (- 4, \">x\"), (- 3, \"ox\"), (- 3, \"</x\"))\r\n\r\n    template = f\" { '~' * length } //\"\r\n    def replace(t, i, s): return t[: i] + s + t[i + len(t) + len(s):]\r\n    clear_win = sum(- 4 < index < 0 for index in indices) == 1\r\n    return \"\\n\" . join(\r\n        f\" { ' ' * ( len ( indices ) - 1 - i )}{ draw_lane ( index )} / { i + 1 }{ ' ' * i } \"\r\n        for i, index in enumerate(indices)\r\n    )\r\n",
  "639382e66d45a7004aaf67fe": "def evaluate_jump(setting):\r\n\r\n    res, setting = [], setting . split(\"\\n\")\r\n    h, w = len(setting), len(setting[0])\r\n    y0 = next(i for i, r in enumerate(setting) if 'Y' in r)\r\n    x0 = setting[y0]. index('Y')\r\n\r\n    if y0 + 1 == h:\r\n        return res\r\n\r\n    def invalid(y, x): return y < 0 or x < 0 or y >= h or x >= w\r\n    def at(y, x): return '.' if invalid(y, x) else setting[y][x]\r\n\r\n    def go(dx):\r\n    if abs(dx) > 2:\r\n        return\r\n    x1, dy = x0 + dx, 0\r\n    if x1 < 0 or x1 >= w:\r\n        return\r\n    if at(y0, x1) != '.':\r\n        return\r\n    go(dx + (- 1 if dx < 0 else 1))\r\n    while at(y0 + dy + 1, x1) == '.' and dy < 9:\r\n        dy += 1\r\n    if dy == 0 or dy > 8:\r\n        return\r\n    if dy > 2 and at(y0 + dy + 1, x1) in \"#x\":\r\n        return\r\n    if dy > 4 and at(y0 + dy + 1, x1) == \"~\" and at(y0 + dy + 2, x1) != \"~\":\r\n        return\r\n    if dy > 4 and at(y0 + dy + 1, x1) == \"~\" and at(y0 + dy + 2, x1) == \"~\":\r\n        dy += 1\r\n    if at(y0 + dy + 1, x1) == \"~\":\r\n        dy += 1\r\n    res . append((dy, dx))\r\n\r\n    for dx in [- 1, 1]:\r\n    go(dx)\r\n\r\n    return res\r\n",
  "6394c1995e54bd00307cf768": "endings = {\r\n    'Je': 'ais',\r\n    'Tu': 'ais',\r\n    'Il': 'ait',\r\n    'Elle': 'ait',\r\n    'On': 'ait',\r\n    'Nous': 'ions',\r\n    'Vous': 'iez',\r\n    'Ils': 'aient',\r\n    'Elles': 'aient'\r\n}\r\n\r\n\r\ndef to_imparfait(verb_phrase):\r\n    return verb_phrase[: - 2] + endings[verb_phrase . split()[0]]\r\n",
  "639242518e28a700283f68ee": "from concurrent . futures import *\r\n\r\n\r\ndef task_master(a):\r\n    with ThreadPoolExecutor(max_workers=len(a)) as executor:\r\n    return sum(executor . map(lambda f: f(), a))\r\n",
  "6390ea74913c7f000d2e95cd": "from socket import create_server\r\n\r\n\r\ndef socket_server():\r\n    with create_server(('127.0.0.1', 80), reuse_port=True) as s:\r\n    with s . accept()[0] as t:\r\n    while True:\r\n    bs = t . recv(0xDEAD)\r\n    if bs == b'exit':\r\n    break\r\n    t . send(bs)\r\n",
  "639107e0df52b9cb82720575": "from socket import create_connection\r\n\r\n\r\ndef socket_client():\r\n    with create_connection(('127.0.0.1', 1111)) as s:\r\n    s . send(b'ab')\r\n    return s . recv(2) == b'ab'\r\n",
  "6391fe3f322221003db3bad6": "def perpendicular(n):\r\n    return n * n / / 4\r\n",
  "638e399a2d712300309cf11c": "from collections import defaultdict, Counter\r\nfrom operator import itemgetter\r\n\r\n\r\ndef render_champions(submissions, n_min):\r\n    if len(submissions) < n_min:\r\n        return ''\r\n    best = min(map(itemgetter(1), submissions[: n_min]))\r\n    record = defaultdict(list)\r\n    order = defaultdict(list)\r\n    for name, n in submissions:\r\n    if n <= best:\r\n    best = n\r\n    order[n]. append(name)\r\n    record[name]. append(n)\r\n\r\n    def best_submission_then_best_order(name):\r\n    top = record[name][- 1]\r\n    return top, order[top]. index(name)\r\n\r\n    def format_people(name):\r\n    grp = Counter(reversed(record[name]))\r\n    perfs = ', ' . join(\r\n        str(size) if n == 1 else f' { size } ( { n } )' for size, n in grp . items())\r\n    return f' { name } - { perfs } '\r\n    ordered = sorted(record, key=best_submission_then_best_order)\r\n    return '; ' . join(map(format_people, ordered))\r\n",
  "638f6152d03d8b0023fa58e3": "from itertools import count\nfrom random import randint\nfrom gmpy2 import is_prime\n\n\ndef represent(n: int) - > int:\n    \"\"\" \n with some algebra I found that: \n (i+1)C2 + (j+1)C2 + (k+1)C2 = N is equivalent to (2i+1)^2 + (2j+1)^2 + (2k+1)^2 = 8N+3 \n so the new goal is to find 3 odd squares (A^2 + B^2 + C^2) that sum of 8N + 3 \n i do this by choosing an odd value of A (starting from 1) and computing it x := 8*N+3 - A^2 \n x will be congruent to 2 mod 8 because A^2 (an odd square) is always congruent to 1 mod 8 \n this means that x // 2 is congruent to 1 mod 4 \n i proceed if x // 2 is also a prime because this guarantees that a valid B and C can be found \n otherwise i go back and choose the next odd value A can take \n \n this assumes that for any natural number of the form 8*n+3, \n there exists a prime less than or equal to 4*n+1 congruent to 1 mod 4 \n fortunately this holds \n \n sources on representing a number as a sum of three squares (most useful sources first): \n https://math.stackexchange.com/questions/483101/rabin-and-shallit-algorithm \n https://crypto.stackexchange.com/questions/61961/sum-of-two-squares-problem \n https://mathoverflow.net/questions/110239/is-there-an-algorithm-for-writing-a-number-as-a-sum-of-three-squares \n \"\"\"\n    def gcd_complex(a, b, c, d):\n    while not (c == d == 0):\n    k = c * c + d * d\n    e = round((a * c + b * d) / k)\n    f = round((b * c - a * d) / k)\n    g = a - c * e + d * f\n    h = b - c * f - d * e\n    a, b, c, d = c, d, g, h\n    return a, b\n    def two_odd_squares(x):\n    x / /= 2\n    if not is_prime(x):\n        return None, None\n    t = (x - 1) / / 4\n    while True:\n    s = pow(randint(1, x - 1), t, x)\n    if s * s % x == x - 1:\n        break\n    a, b = sorted(map(abs, gcd_complex(x, 0, s, 1)))\n    a, b = b - a, a + b\n    return a, b\n    target = 8 * n + 3 - 1 * * 2\n    for A in count(1, 2):\n    B, C = two_odd_squares(target)\n    if (B, C) != (None, None):\n    i, j, k = map(lambda t: (t - 1) / / 2, (A, B, C))\n    f_i, f_j, f_k = map(lambda t: t * (t + 1) / / 2, (i, j, k))\n    return [f_i, f_j, f_k]\n    target -= 4 * A + 4\n",
  "638edc41458b1b00165b138b": "# Most clutched solution I found: (p[-1] - 1) // (p[0] - 1) = 4 / 3\nprimes = [24284400 * k + 1 for k in (24, 30, 33, 36, 38, 39, 40)]\n",
  "638c92b10e43cc000e615a07": "# https://en.wikipedia.org/wiki/Prime-counting_function\r\nfrom math import isqrt\r\nfrom functools import cache\r\nfrom bisect import bisect\r\nimport sys\r\nsys . setrecursionlimit(10 * * 5)\r\n\r\n# https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\r\n\r\n\r\ndef rwh_primes(n):\r\n    \"\"\" Returns a list of primes < n \"\"\"\r\n    sieve = [True] * n\r\n    for i in range(3, int(n * * 0.5) + 1, 2):\r\n    if sieve[i]:\r\n    sieve[i * i:: 2 * i] = [False] * ((n - i * i - 1) / / (2 * i) + 1)\r\n    return [2] + [i for i in range(3, n, 2) if sieve[i]]\r\n\r\n    PRIMES = rwh_primes(10 * * 7)\r\n\r\n    @ cache\r\n    def phi(m, n):\r\n    if n == 1 or m < 1:\r\n        return (m + 1) / / 2\r\n    p = PRIMES[n - 1]\r\n    # https://ideone.com/SnhEQA\r\n    if p * p >= m and m < PRIMES[- 1]:\r\n    return bisect(PRIMES, m) - n + 1\r\n    return phi(m, n - 1) - phi(m / / p, n - 1)\r\n\r\n    def pi(m):\r\n    if m <= PRIMES[- 1]:\r\n    return bisect(PRIMES, m)\r\n    n = pi(int((m + 0.5) * * (1 / 3)))\r\n    mu = pi(isqrt(m)) - n\r\n    return phi(m, n) + n * (mu + 1) + mu * (mu - 1) / / 2 - 1 - sum(pi(m / / PRIMES[n + k]) for k in range(mu))\r\n\r\n    count_primes_less_than = pi\r\n",
  "638b042bf418c453377f28ad": "import itertools\r\n\r\n\r\ndef guess(n):\r\n    if n == - 1:\r\n        # Start by guessing the first code in the list\r\n    guess . remaining_codes = list(itertools . permutations(range(10), 4))\r\n    guess . prev_guess = guess . remaining_codes[0]\r\n    else:\r\n        # Remove any code from the list that would not produce the same number of matches\r\n    guess . remaining_codes = [code for code in guess . remaining_codes\r\n                               if sum(a == b for a, b in zip(code, guess . prev_guess)) == n]\r\n    # Choose the next code in the list and guess it\r\n    guess . prev_guess = guess . remaining_codes[0]\r\n    return list(guess . prev_guess)\r\n\r\n    guess . remaining_codes = None\r\n    guess . prev_guess = None\r\n",
  "638b4205f418c4ab857f2692": "from collections import Counter\r\nfrom math import ceil, gcd, log, prod\r\nfrom random import randrange\r\nfrom gmpy2 import is_prime\r\n\r\n\r\ndef pollard_rho(n):\r\n    while True:\r\n    x, c = randrange(1, n), randrange(1, n)\r\n    def f(x): return (x * x + c) % n\r\n    y = f(x)\r\n    while (d := gcd(abs(x - y), n)) == 1:\r\n    x, y = f(x), f(f(y))\r\n    if d != n:\r\n    return d\r\n    def factor(n):\r\n    if is_prime(n):\r\n        return Counter([n])\r\n    return factor(r := pollard_rho(n)) + factor(n / / r)\r\n\r\n    def f(m):\r\n    if m == 1:\r\n        return 1\r\n    factors = factor(m)\r\n    product, max_order = prod(factors), max(factors . values())\r\n    return min((m := product * * k) * ceil(max_order / k / m)\r\n               for k in range(1, int(log(max_order, product)) + 2))\r\n",
  "638bc5d372d41880c7a99edc": "M = 10 * * 9 + 7\n\n\ndef f(n: int) - > int:\n    # g(x) = sum(x^k, k = 0..n)\n    # Then sum(k^2 * x^2, k = 0..n) = x^2 g''(x) + x(g'(x) - 1) + x\n    # g'(2) = (n - 1) * 2^n + 1\n    # g''(2) = ...\n    def g2(n): return (n * n * pow(2, n, M) - 3 * n *\n                       pow(2, n, M) + pow(2, n + 2, M) - 4) * pow(2, M - 2, M)\n\n    def g1(n): return pow(2, n, M) * (n - 1) + 1\n    return (4 * g2(n) + 2 * (g1(n) - 1) + 2) % M\n    # Wolfram Alpha:\n    return 2 * (pow(2, n, M) * (n * n - 2 * n + 3) - 3) % M\n",
  "638af78312eae9a23c9ec5d6": "from math import isqrt\r\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\r\n          41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\r\n\r\n\r\ndef g(n, i):\r\n    p = primes[i]\r\n    m = p * * (n - 1)\r\n    for d in range(2, isqrt(n) + 1):\r\n    if n % d == 0:\r\n        m = min(m, p * * (d - 1) * g(n / / d, i + 1), p * * (n / / d - 1) * g(d, i + 1))\r\n    return m\r\n    def f(n): return g(n, 0)\r\n",
  "637874b78ee59349c87b018d": "def fractalize(seed, i):\r\n    if i <= 1:\r\n        return seed\r\n    star = fractalize(seed, i - 1)\r\n    dot = [row . replace('*', '.') for row in star]\r\n    return [\r\n        '' . join(rowrow)\r\n        for row in seed\r\n        for rowrow in zip(* (star if c == '*' else dot for c in row))\r\n    ]\r\n",
  "63890d2ef418c49d4c7f50cc": "def trapped_cell(n: int, m: int) - > int:\r\n    def spiral(x, y):\r\n    u, v = (x, y) if abs(x) <= abs(y) else (y, x)\r\n    return v * (4 * v - [1, 3][y < x]) + [- u, u][y < x]\r\n    x, y = 0, 0\r\n    visited = set([(x, y)])\r\n    while True:\r\n    ps = [(x + dx, y + dy) for dx, dy in ((- n, - m), (n, - m), (- n, m), (n, m),\r\n                                          (- m, - n), (m, - n), (- m, n), (m, n)) if (x + dx, y + dy) not in visited]\r\n    if not ps:\r\n    return spiral(x, y)\r\n    x, y = min(ps, key=lambda p: spiral(p[0], p[1]))\r\n    visited . add((x, y))\r\n",
  "6387ea2cf418c41d277f3ffa": "def cube(n):\r\n    top = \"\\n\" . join(' ' * (n - i - 1) + '/\\\\' *\r\n                      (i + 1) + '_\\\\' * n for i in range(n))\r\n    bottom = \"\\n\" . join(' ' * i + '\\\\/' * (n - i) +\r\n                         '_/' * n for i in range(n))\r\n    return top + '\\n' + bottom\r\n",
  "638244fb08da6c61361d2c40": "from collections import defaultdict\r\n\r\n\r\ndef find_waldo(crowd):\r\n    d = defaultdict(list)\r\n    for y, row in enumerate(crowd):\r\n    for x, c in enumerate(row):\r\n    if c . isalpha():\r\n    d[c]. append([y, x])\r\n    return next(v[0] for k, v in d . items() if len(v) == 1)\r\n",
  "637d1d6303109e000e0a3116": "def find_matched_by_pattern(pattern):\r\n    def f(s, p=pattern):\r\n    for c in s:\r\n    if c == p[0]:\r\n        p = p[1:]\r\n    elif c in p:\r\n        break\r\n    if not p:\r\n        return True\r\n    return False\r\n    return f\r\n",
  "63838c67bffec2000e951130": "def safe_mine_field(mine_field):\r\n    if mine_field:\r\n    h, w = len(mine_field), len(mine_field[0])\r\n    for i, row in enumerate(mine_field):\r\n    for j, x in enumerate(row):\r\n    if x == 'M':\r\n    for a, b in ((- 1, 0), (1, 0), (0, - 1), (0, 1)):\r\n    k, l = i + a, j + b\r\n    while 0 <= k < h and 0 <= l < w and 'M' != mine_field[k][l] != 'T':\r\n    mine_field[k][l], k, l = 'C', k + a, l + b\r\n    return [(i, j) for i, row in enumerate(mine_field) for j, x in enumerate(row) if x == '.']\r\n",
  "637d054dca318e60ef4a3830": "import numpy\nfunny = numpy . matrix  # Sorry\nfunny . __class_getitem__ = numpy . matrix\narr = funny[[[1, 1], [1, 0]]]\nfunny . __class_getitem__ = arr . astype\narr = funny[object]\nfunny . __class_getitem__ = lambda v: v[0, 1]\ndef fibo(n): return funny[arr * * n]\n",
  "6375587af84854823ccd0e90": "LETTERS = '''\\ \n AAA BBBB CCC DDDD EEEEE FFFFF GGG H H IIIII JJJJJ K K L M M N N OOO PPPP QQQ RRRR SSS TTTTT U U V V W W X X Y Y ZZZZZ \n A A B B C C D D E F G G H H I J K K L MM MM NN N O O P P Q Q R R S S T U U V V W W X X Y Y Z \n A A B B C D D E F G H H I J K K L M M M N N O O P P Q Q R R S T U U V V W W X X Y Y Z \n AAAAA BBBB C D D EEEEE FFFFF G GGG HHHHH I J KK L M M N N N O O PPPP Q Q RRRR SSS T U U V V W W W X Y Z \n A A B B C D D E F G G H H I J K K L M M N N O O P Q Q Q R R S T U U V V W W W X X Y Z \n A A B B C C D D E F G G H H I J K K L M M N NN O O P Q QQ R R S S T U U V V W W W X X Y Z \n A A BBBB CCC DDDD EEEEE F GGG H H IIIII JJJJ K K LLLLL M M N N OOO P QQQQ R R SSS T UUU V W W X X Y ZZZZZ\\ \n ''' . split('\\n')\n\n\ndef block_print(s):\n    return s . strip() and '\\n' . join(\" \" . join(LETTERS[i][(c - 65) * 6:(c - 64) * 6 - 1] if c > 32 else \" \" * 5 for c in map(ord, s . strip(). upper())). rstrip() for i in range(7))\n",
  "6375e9030ac764004a036840": "from dateutil . parser import parse\r\nfrom dateutil . relativedelta import relativedelta\r\n\r\n\r\ndef most_weekend_birthdays(friends, conversation_date):\r\n    def func(args):\r\n    count, year, birthday = 0, 1, parse(args[1])\r\n    while (current := birthday + relativedelta(years=year)) <= today:\r\n    count += (current . weekday() >= 5)\r\n    year += 1\r\n    return count, birthday\r\n    today = parse(conversation_date)\r\n    return max(friends, key=func)[0]\r\n",
  "6376bbc66f2ae900343b7010": "def movie_times(open, close, length):\n    if close <= 6 or close < open:\n        close += 24\n    r, t, u = [], open * 60, close * 60\n    while t + length <= u:\n        r . append((t / / 60 % 24, t % 60))\n        t += length + 15\n    return r\n",
  "63753f7f64c31060a564e790": "def sleep(bits: str) - > str:\r\n    i = min(range(12), key=lambda i: (bits[i:] + bits[: i])[:: - 1])\r\n    return '0' * i + '1' + '0' * (11 - i)\r\n",
  "63744cbed39ec3376c84ff4a": "import re  # regex is good, let's use it\n\n\ndef arrow_search(string: str) - > int:\n    return sum(  # calculate sum of scores for each arrow\n        # using the below method:\n        len(arrow)  # size of the arrow\n        # multiplied by +1/-1 based on direction\n        * ((\">\" in arrow) - (\"<\" in arrow))\n        * (2 if \"=\" in arrow else 1)  # multiplied by 2 if it has a tail of \"=\"\n        for arrow in re . findall(  # for each arrow found\n            \"\"\" # using the below regex: \n <?-+>? # arrow with \"-\" tail \n | # or \n <?=*>? # arrow with \"=\" tail \n \"\"\", string, re . VERBOSE)  # in the input string\n    )\n",
  "636bebc1d446bf71b3f65fa4": "from itertools import count\r\n\r\n\r\ndef hofs():\r\n    yield 1\r\n    xs, ys, n, y = count(1), hofs(), 1, None\r\n    while True:\r\n    x, y = next(xs), y or next(ys)\r\n    if x == y:\r\n    yield (n := n + next(xs))\r\n    y = None\r\n    else:\r\n    yield (n := n + x)\r\n\r\n    hofs_gen, hofs_cache = hofs(), []\r\n\r\n    def hof(n):\r\n    while len(hofs_cache) <= n:\r\n    hofs_cache . append(next(hofs_gen))\r\n    return hofs_cache[n]\r\n",
  "636b03830ae6cd00388cd228": "def operations(x):\r\n    return x . bit_count() + x . bit_length() - 1\r\n",
  "6368426ec94f16a1e7e137fc": "import re\r\n\r\n\r\ndef contact(hallway):\r\n    pairs = re . findall('>-*<', hallway)\r\n    return min(map(len, pairs)) / / 2 if pairs else - 1\r\n",
  "6363b0c4a93345115c7219cc": "from itertools import count, islice\r\n\r\n\r\ndef sequence():\r\n    cnt, seq = count(1), sequence()\r\n    while 1:\r\n    yield next(cnt)\r\n    n = next(seq)\r\n    yield from islice(cnt, n - 1)\r\n    yield n\r\n    a112382 = list(islice(sequence(), 1_000_000)). __getitem__\r\n",
  "63624a696137b6000ed726a6": "def minimum_amount(lst):\r\n    f = s = r1 = r2 = 0\r\n    for i, x in enumerate(lst):\r\n    if i % 2:\r\n    f, s = f + x, s - x\r\n    r2 = max(r2, - s)\r\n    else:\r\n    f, s = f - x, s + x\r\n    r1 = max(r1, - f)\r\n    return r1, r2\r\n",
  "635d9b5c8f20017aa1cf2cf6": "tbl = {\r\n    'r': [\r\n        [1, 1, 1, 1, 1],\r\n        [1, 0, 1, 0, 1],\r\n        [1, 1, 1, 1, 1],\r\n        [1, 0, 1, 0, 1],\r\n        [1, 1, 1, 1, 1],\r\n    ],\r\n    'b': [\r\n        [1, 0, - 1, 0, 1],\r\n        [0, 1, 0, 1, 0],\r\n        [- 1, 0, 1, 0, - 1],\r\n        [0, 1, 0, 1, 0],\r\n        [1, 0, - 1, 0, 1],\r\n    ],\r\n    'q': [\r\n        [1, 1, 1, 1, 1],\r\n        [1, 1, 0, 1, 1],\r\n        [1, 0, 1, 0, 1],\r\n        [1, 1, 0, 1, 1],\r\n        [1, 1, 1, 1, 1],\r\n    ]\r\n}\r\n\r\n# starting_piece: a string, either 'r', 'b', 'q'\r\n# starting_row: an integer from 0 to 4 inclusive\r\n# starting_column: an integer from 0 to 4 inclusive\r\n\r\n\r\ndef transforming_chess(starting_piece, starting_row, starting_column):\r\n    # you must return one of three strings:\r\n    # 'win' if Player 1 has a guaranteed win\r\n    # 'lose' if Player 1 is guaranteed to lose\r\n    # 'draw' if the game is a never-ending infinite draw\r\n    return ['draw', 'win', 'lose'][tbl[starting_piece][starting_row][starting_column]]\r\n",
  "6361bdb5d41160000ee6db86": "search = \".+(?= (dog|cat))\"\nsubstitute = \"blue\"\n",
  "636173d79cf0de003d6834e4": "from itertools import groupby\r\nDIRS = {'^': 'up', 'v': 'down', '<': 'left', '>': 'right'}\r\n\r\n\r\ndef walk(path):\r\n    if not path:\r\n    return 'Paused'\r\n    steps = []\r\n    for k, g in groupby(path):\r\n    l = len(list(g))\r\n    steps . append(f\"Take { l } step { 's' * ( l > 1 )} { DIRS [ k ]} \")\r\n    return '\\n' . join(steps)\r\n",
  "579f54c672292dc1a20001bd": "from typing import Tuple\r\n\"\"\"Gets the chord, given the root and color. \r\n    returns \r\n    ---------- \r\n    chord : tuple \r\n    the chord consisting of its notes -> (C, Eb, G), (F#, A, C#), .. \r\n    arguments \r\n    ---------- \r\n    root : str \r\n    the root note of the chord -> C, D, F#, Ab, .. \r\n    color : str \r\n    the color or type of chord -> m, M, dim, aug \r\n    \"\"\"\r\n\r\n\r\ndef chord_triad(root: str, color: str) - > Tuple:\r\n    notes = ('C', 'D', 'E', 'F', 'G', 'A', 'B')\r\n    shifts = ('bb', 'b', '', '#', 'x')\r\n\r\n    def is_major(note):\r\n       # checks if the third from the note is major\r\n       # that's true for C, F, and G only\r\n    return note in (0, 3, 4)\r\n\r\n    def third_note(note):\r\n    return notes[(note + 2) % len(notes)]\r\n\r\n    def minor(note, shift):\r\n    shift -= is_major(note)\r\n    return third_note(note) + shifts[shift]\r\n\r\n    def major(note, shift):\r\n    shift += not is_major(note)\r\n    return third_note(note) + shifts[shift]\r\n\r\n    triads = {\r\n        'm': (minor, major),\r\n        'M': (major, minor),\r\n        'dim': (minor, minor),\r\n        'aug': (major, major),\r\n    }\r\n\r\n    def get_note(root=root):\r\n    note, shift = root[0], root[1:]\r\n    return notes . index(note), shifts . index(shift)\r\n\r\n    def get_interval(i, root=root):\r\n    return triads[color][i](* get_note(root))\r\n\r\n    third = get_interval(0)\r\n    return (root, third, get_interval(1, third))\r\n",
  "635f67667dadea064acb2c4a": "CREW = {\"F\": \"Frank\", \"S\": \"Sam\", \"T\": \"Tom\"}\r\nNON_WATER_PROOF = [* CREW, ' ', 'x']\r\n\r\n\r\nclass Flotsam:\r\n    def __init__(self, pic):\r\n    self . pic = pic\r\n    self . sea_level = next(i for i, x in enumerate(pic) if '~' in x)\r\n    self . bottom = len(self . pic)\r\n    self . width = len(self . pic[0])\r\n    self . survivors = dict(* * CREW)\r\n\r\n    def show(self):\r\n    print(\"\\n\" . join([\"\" . join(row) for row in self . pic]))\r\n\r\n    def drown(self, person):\r\n    name = self . survivors . pop(person)\r\n    print(f\" { name } drowned!\")\r\n\r\n    def leak(self, i1, j1, i2, j2) - > bool:\r\n    a, b = self . pic[i1][j1], self . pic[i2][j2]\r\n    if a == '~' and b in NON_WATER_PROOF:\r\n    if b in self . survivors:\r\n    self . drown(b)\r\n    self . pic[i2][j2] = '~'\r\n    return True\r\n    else:\r\n    return False\r\n    def sink(self):\r\n    leaked = False\r\n    for i in range(self . sea_level, self . bottom):\r\n    for direction in (1, - 1):\r\n    for j in [* range(self . width)][:: direction]:\r\n    if j < self . width - 1:\r\n    leaked |= self . leak(i, j, i, j + 1)\r\n    leaked |= self . leak(i, j + 1, i, j)\r\n    if i > self . sea_level:\r\n    leaked |= self . leak(i, j, i - 1, j)\r\n    if self . sea_level <= i < self . bottom - 1:\r\n    leaked |= self . leak(i, j, i + 1, j)\r\n    self . show()\r\n    if leaked and self . survivors:\r\n    print(self . survivors)\r\n    self . sink()\r\n\r\n    def flotsam(pic):\r\n    o = Flotsam(pic)\r\n    o . show()\r\n    o . sink()\r\n    result = \" \" . join(o . survivors . values())\r\n    return (result)\r\n",
  "635e70f47dadea004acb5663": "from itertools import pairwise\n\n\ndef triangle(row):\n    return len(row) == 1 and row or triangle('' . join(chr((x + y + 15) % 26 + 97) for x, y in pairwise(map(ord, row))))\n",
  "635d6302fdfe69004a3eba84": "from math import sin, cos, pi, radians\n\n\ndef laser_coord(h, a, l):\n    x, y = (l * cos(radians(a))) % 2, (h + l * sin(radians(a))) % 2\n    return (2 - x if x > 1 else x), (2 - y if y > 1 else y)\n",
  "635d422dfdfe6900283eb892": "\"\"\" \n (1 + P(n+2)) = (1 + P(n+1)) * (1 + P(n)) \n (1 + P(n+3)) = (1 + P(n+2)) * (1 + P(n+1)) = (1 + P(n+1))**2 + (1 + P(n)) \n (1 + P(n+4)) = (1 + P(n+3)) * (1 + P(n+2)) = (1 + P(n+1))**3 + (1 + P(n))**2 \n (1 + P(n+5)) = (1 + P(n+1))**5 + (1 + P(n))**3 \n the exponents follow a fibonacci pattern, \n so we can calculate them by raising the matrix ((0, 1), (1, 1)) to the nth power \n to keep the variables small, we can use mod 6 because all 10 digit-powers mod 9 repeat every 6 \n \"\"\"\n\n\ndef G(n):\n    if n <= 1:\n        return [7, 4][n]\n\n    def mod_6(x): return x if x <= 6 else 6 + x % 6\n    a, b, c, d, pow1, pow2, n = 0, 1, 1, 1, 1, 1, n - 2\n    while n:\n    if n % 2 == 1:\n    pow1, pow2 = map(mod_6, (a * pow1 + b * pow2, c * pow1 + d * pow2))\n    n -= 1\n    else:\n    a, b, c, d = map(mod_6, (a * a + b * c, a * b + b *\n                     d, a * c + c * d, d * d + b * c))\n    n / /= 2\n    return (pow(1 + 7, pow1, 9) * pow(1 + 31, pow2, 9) - 1) % 9\n",
  "6355b3975abf4f0e5fb61670": "from math import comb as nCk, factorial as fac\r\nfrom itertools import combinations, chain, product\r\n\r\n\r\ndef totally_good(alphabet, bads):\r\n\r\n    # starting conditions\r\n    bads = [b for b in bads if not any(o != b and o in b for o in bads)]\r\n    n, t = len(alphabet), fac(len(alphabet))\r\n\r\n    # simple edge cases\r\n    if not bads:\r\n        return t\r\n    if any(1 for b in bads if len(b) == 1):\r\n        return 0\r\n    # combinatorics & string patterns\r\n    def count(group, n):\r\n    m, seen, start_cluster = 0, set(), product(\r\n        * [list(range(n - len(b) + 1)) for b in group])\r\n    for start_group in start_cluster:\r\n    word, c = [\"*\"] * n, False\r\n    for source_idx, target_idx in enumerate(start_group):\r\n    if c:\r\n        break\r\n    b = group[source_idx]\r\n    for i in range(len(b)):\r\n    if word[target_idx + i] != \"*\" and word[target_idx + i] != b[i]:\r\n    c = True\r\n    break\r\n    word[target_idx + i] = b[i]\r\n    word = '' . join(word)\r\n    if word not in seen and all(e in word for e in group) and len(set([c for c in word if c != '*'])) == len([c for c in word if c != '*']):\r\n    open = word . count(\"*\")\r\n    m += fac(open)\r\n    seen . add(word)\r\n    return m\r\n    # set theory: inclusion/exclusion principle\r\n    history, cluster = {tuple(): t}, list(\r\n        chain(* [combinations(bads, i) for i in range(1, n)]))\r\n    for group in cluster:\r\n    if all(history[subgroup] for subgroup in combinations(group, len(group) - 1)):\r\n    history[group] = count(group, n)\r\n    t += history[group] * (- 1) * * len(group)\r\n    else:\r\n    history[group] = 0\r\n    return t\r\n",
  "6359f0158f20011969cf0ebe": "# The speeding car: \"O='`o\"\n# The other cars: \"X\"\ndef car_crash(road):\n    return \"O='`oX\" in road . replace(' ', '')\n",
  "635b8fa500fba2bef9189473": "import re\r\n\r\n\r\ndef phone_words(str):\r\n    ansd = {'0': ' ', '2': 'a', '22': 'b', '222': 'c', '3': 'd', '33': 'e', '333': 'f',\r\n            '4': 'g', '44': 'h', '444': 'i', '5': 'j', '55': 'k', '555': 'l', '6': 'm',\r\n            '66': 'n', '666': 'o', '7': 'p', '77': 'q', '777': 'r', '7777': 's', '8': 't', '88': 'u',\r\n            '888': 'v', '9': 'w', '99': 'x', '999': 'y', '9999': 'z'}\r\n    ans = ''\r\n    for i in re . findall('0|2{1,3}|3{1,3}|4{1,3}|5{1,3}|6{1,3}|7{1,4}|8{1,3}|9{1,4}', str):\r\n    ans += ansd[i]\r\n    return ans\r\n",
  "635a7827bafe03708e3e1db6": "def speed_limit(\u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c, \u0441\u0438\u0433\u043d\u0430\u043b\u044b):\r\n    \u0448\u0442\u0440\u0430\u0444 = 0\r\n    for \u0438 in \u0441\u0438\u0433\u043d\u0430\u043b\u044b:\r\n    if 10 <= \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c - \u0438 <= 19:\r\n    \u0448\u0442\u0440\u0430\u0444 += 100\r\n    if 20 <= \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c - \u0438 <= 29:\r\n    \u0448\u0442\u0440\u0430\u0444 += 250\r\n    if 30 <= \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c - \u0438:\r\n    \u0448\u0442\u0440\u0430\u0444 += 500\r\n    return \u0448\u0442\u0440\u0430\u0444\r\n",
  "6359b10f8f2001f29ccf0db4": "def squares_to_odd(a, b):\r\n    return f' { a } ^2 - { b } ^2 = { \" + \" . join ( map ( str , range ( 2 * b + 1 , 2 * a , 2 )))} = { a * a - b * b } '\r\n",
  "63586460bafe0300643e2caa": "def get_sum(n):\r\n    n, m = divmod(n, 2)\r\n    return - (n + 2 * m - 1) * (n + m + 1) * * 2\r\n",
  "63579823d25aad000ecfad9f": "# see: https://oeis.org/A035608\ndef get_sum(n):\n    return (- 1) * * n * ((n := n + 1) * n + n - 1 - (n - 1) / / 2)\n",
  "634f18946a80b8003d80e728": "def make_strategies(hats):\n    ''' \n    We can ensure that one team member always wins, by \n    making sure that there is no overlap between the guesses \n    of each of our contestants. We do this by giving each \n    team member a unique number (from 0 to n-1). They are then \n    to assume that the total \"sum\" of hats modulo n (assigning \n    each hat an arbitrary value) will be equal to their number. \n    They can therefore determine what hat theirs must be by \n    seeing all the other hats, and make their guess. This means \n    that no matter what modulo a particular game produces, one \n    team member will be accounting for it. \n    This kata was inspired by this video, which also explains \n    the solution incredibly well: \n    https://www.youtube.com/watch?v=6hVPNONm7xw \n    '''\n    def sum_ind(i): return lambda seen: hats[(\n        i - sum(map(hats . index, seen))) % len(hats)]\n    return [sum_ind(i) for i in range(len(hats))]\n",
  "6357825a00fba284e0189798": "def get_sum(n):\r\n    return (n + 1) * (n + 2) * (4 * n + 3) / / 6\r\n",
  "6357205000fba205ed189a52": "# for a proper solution: ...://bellard.org/pi/pi1.c\ndef pi_gen(limit):\n    q, r, t, k, n, l, cn, d = 1, 0, 1, 1, 3, 3, 0, limit\n    while cn != d + 1:\n    if 4 * q + r - t < n * t:\n    yield n\n    if d == cn:\n        break\n    cn, nr, n, q = cn + 1, 10 * (r - n * t), ((10 * (3 * q + r)) / / t) - 10 * n, q * 10\n    r = nr\n    else:\n    nr, nn, q, t, l, k = (2 * q + r) * l, (q * (7 * k) + 2 + (r * l)) / / (t * l), q * k, t * l, l + 2, k + 1\n    n, r = nn, nr\n    PI = pi_gen(10000)\n    PI = '' . join(map(str, PI))\n\n    def pi(n):\n    return int(PI[n])\n",
  "635640ee633fad004afb0465": "from collections import defaultdict\r\nfrom itertools import chain\r\n\r\n\r\ndef letter(msg):\r\n    D = defaultdict(list)\r\n    for w in map(str . lower, msg . split()):\r\n    for i in range(len(w)):\r\n    D[w[: i + 1]]. append(w)\r\n    return sorted(chain . from_iterable(v for k, v in D . items() if len(k) == len(v)))\r\n",
  "6352feb15abf4f44f9b5cbda": "from fractions import Fraction\r\n\r\n\r\ndef get_probability(n, nbs, nrs):\r\n    pr = Fraction(0)\r\n    for i, (nb, nr) in enumerate(zip(nbs, nrs)):\r\n    pr = (nr + pr) / (nb + nr + (i != 0))\r\n    return float(pr)\r\n",
  "634d0f7c562caa0016debac5": "def is_defended(attackers, defenders):\n    survivors = [0, 0]\n    for k in range(max(len(attackers), len(defenders))):\n    if len(attackers) <= k:  # Empty attacker\n    survivors[1] += 1\n    elif len(defenders) <= k:  # Empty defender\n    survivors[0] += 1\n    elif attackers[k] < defenders[k]:\n    survivors[1] += 1\n    elif attackers[k] > defenders[k]:\n    survivors[0] += 1\n    return survivors[0] < survivors[1] if survivors[0] != survivors[1] else sum(attackers) <= sum(defenders)\n",
  "634d0723075de3f97a9eb604": "def encode(s):\r\n    return \"\" . join(s[((i + 1) / / 2) * (- 1) * * i] for i in range(len(s)))\r\n\r\n    def decode(s):\r\n    return s[:: 2] + s[1:: 2][:: - 1]\r\n",
  "6347f9715467f0001b434936": "def root(M):\r\n    return sum(sum(r) * * .5 for r in M)\r\n\r\n    def thin_or_fat(M):\r\n    w, h = root(M), root(zip(* M))\r\n    if not any(isinstance(v, complex) for v in (w, h)):\r\n    return \"perfect\" if abs(w - h) < 1e-10 else \"fat\" if w > h else \"thin\"\r\n",
  "6324c4282341c9001ca9fe03": "def tree_to_prufer(tree):\r\n    res = []\r\n    for _ in range(len(tree) - 2):\r\n    mn = min(k for k, v in tree . items() if len(v) == 1)\r\n    res . append([* tree[mn]][0])\r\n    tree . pop(mn)\r\n    for k, v in tree . items():\r\n    if mn in v:\r\n        v . remove(mn)\r\n\r\n    return res\r\n    def prufer_to_tree(prufer_sequence):\r\n    ln, pf = len(prufer_sequence), prufer_sequence[:]\r\n    s = {* range(1, ln + 3)}\r\n    res = {k: set() for k in s}\r\n\r\n    for _ in range(ln):\r\n    cur = min(s - set(pf))\r\n    s . remove(cur)\r\n    res[cur]. add(pf[0])\r\n    res[pf . pop(0)]. add(cur)\r\n\r\n    a, b = s\r\n    res[a]. add(b)\r\n    res[b]. add(a)\r\n\r\n    return res\r\n",
  "634ac4e77611b9f57dff456d": "from keyword import kwlist\nkeywords = set(kwlist)\n",
  "634913db7611b9003dff49ad": "import re\n\n\ndef purify(s: str) - > str:\n    return ' ' . join(re . sub(r\"[\\S]?[iI][^\\siI]?\", \"\", s). split())\n",
  "6344701cd748a12b99c0dbc4": "from itertools import pairwise, permutations\r\n\r\n\r\ndef solution(arr):\r\n    for perm in permutations(arr, len(arr)):\r\n    if all(a[- 1] == b[0] for a, b in pairwise(perm)):\r\n    return True\r\n    return False\r\n",
  "63454405099dba0057ef4aa0": "def draw_street(dimensions):\r\n    maxHeight = max(map(lambda x: x[0], dimensions))\r\n    def building(dimensions):\r\n    h, w = dimensions\r\n    return [' ' * w] * (maxHeight - h) + [\r\n        '\u25a0' * w] + [\r\n        '\u25a0' + ' ' * (w - 2) + '\u25a0'] * (h - 4) + [\r\n        '\u25a0' + '___' . center(w - 2, ' ') + '\u25a0',\r\n        '\u25a0' + '| |' . center(w - 2, ' ') + '\u25a0',\r\n        '\u25a0' + '| |' . center(w - 2, ' ') + '\u25a0']\r\n    view = list(map(' ' . join, zip(* map(building, dimensions))))\r\n    view . append('/' * len(view[0]))\r\n    for i in range(9, len(view[0]), 10):\r\n    for n in range(1, 5):\r\n    view[- n] = view[- n][: i] + ['#', '|'][n < 4] + view[- n][i + 1:]\r\n    return '\\n' . join(view)\r\n",
  "63431f9b9943dd4cee787da5": "def series(x): return x\r\n\r\n\r\ndef parall(x): return 1 / x if x else float('inf')\r\n\r\n\r\ndef rec(circuit):\r\n    if not isinstance(circuit, list):\r\n    return circuit\r\n    test, * circuit = circuit\r\n    if not circuit:\r\n    return not test and float('inf')\r\n    func = test and series or parall\r\n    return func(sum(func(rec(x)) for x in circuit))\r\n\r\n    def calculate_resistance(circuit):\r\n    result = rec(circuit)\r\n    if result == 0:\r\n    raise Exception(\"Short Circuit!\")\r\n    if result == float('inf'):\r\n    raise Exception(\"Broken Circuit!\")\r\n    return result\r\n",
  "634420abae4b81004afefca7": "def is_evil(number):\r\n    count = 0\r\n    while number:\r\n    number &= number - 1\r\n    count += 1\r\n    return count % 2 == 0\r\n    def get_evil(n):\r\n    t = 2 * (n - 1)\r\n    return t if is_evil(t) else t + 1\r\n",
  "6339de328a3b8f0016cc5b8d": "def magic_plant(p_feild, split, n):\r\n    t = p_feild . split('\\n')\r\n    return '\\n' . join(c * (split * * n) for c in t[: len(t) - n])\r\n",
  "63348506df3ef80052edf587": "from typing import Generator\nfrom fractions import Fraction\nimport math\nimport itertools\n\n\ndef generate_continued_fraction(b) - > Generator[int, None, None]:\n    a, c = 0, 1\n    while True:\n    if not c:\n        yield from itertools . repeat(0)\n    i = (math . isqrt(b) + a) / / c\n    yield i\n    a, c = c * i - a, (b - a * a) / / c + i * (2 * a - c * i)\n\n    def generate_modular_roots(n) - > Generator[int, None, None]:\n    p, q = 1, 0\n    z = math . isqrt(n - 1)\n    for a in generate_continued_fraction(n):\n    p, q = (a * p + q) % n, p\n    if p * p % n < 2 * z and z < p < n - z:\n        yield p % n\n",
  "633bbba75882f6004f9dae4c": "def count_loop_iterations(arr):\r\n    res = []\r\n    acc = 1\r\n    for n, b in arr:\r\n    n = n + 2 if b else n + 1\r\n    res . append(acc * n)\r\n    acc *= n - 1\r\n    return res\r\n",
  "632abe6080604200319b7818": "def primes(n):\r\n    sieve = n / / 2 * [True]\r\n    for i in range(3, int(n * * 0.5) + 1, 2):\r\n    if sieve[i / / 2]:\r\n    sieve[i * i / / 2:: i] = [False] * ((n - i * i - 1) / / (2 * i) + 1)\r\n    return [2] + [2 * i + 1 for i in range(1, n / / 2) if sieve[i]]\r\n\r\n    from string import ascii_uppercase as u, ascii_lowercase as l\r\n    def to_base(n, b, w=u + l):\r\n    return w[n] if n < b else to_base(n / / b, b). lstrip(w[0]) + w[n % b]\r\n\r\n    def transform(nums, exponents):\r\n    from math import prod\r\n    return prod(p * * i for p, i in zip(nums, exponents))\r\n\r\n    def solver(k, n, base, seq=primes(10 * * 4)):\r\n    assert k + n - 1 <= len(seq)\r\n    chain, exp = seq[k - 1: k + n - 1], range(1, n + 1)\r\n    return tuple(to_base(transform(chain, es), base) for es in (exp, exp[:: - 1]))\r\n",
  "633874ed198a4c00286aa39d": "def solution(frank, sam, tom):\r\n    count = 0\r\n    for i in range(4):\r\n    for j in range(4):\r\n    if frank[j] > sam[i] and frank[j] > tom[i]:\r\n    count += 1\r\n    frank[j] = 0\r\n    break\r\n    return count >= 2\r\n",
  "63306fdffa185d004a987b8e": "def light_switch(n, lights):\r\n    result = {0}\r\n    for s in lights:\r\n    result |= {x ^ sum(1 << x for x in s) for x in result}\r\n    return (1 << n) - 1 in result\r\n",
  "63304cd2c68f640016b5d162": "from gmpy2 import gcdext\r\n\r\n\r\ndef gcd_coeff(a, b):\r\n    _, x, y = gcdext(a, b)\r\n    return int(x), int(y)\r\n",
  "6329d94bf18e5d0e56bfca77": "def lru(n, reference_list):\r\n    cache, time = [- 1] * n, [- 1] * n\r\n    for i, x in enumerate(reference_list):\r\n    idx = cache . index(x) if x in cache else time . index(min(time))\r\n    cache[idx] = x\r\n    time[idx] = i\r\n    return cache\r\n",
  "62f7ca8a3afaff005669625a": "def pyramid(h): return (8 * h * h - 4 * h + 1, 8 * h * * 3 - 2 * h)\n",
  "6326533f8b7445002e856ca3": "def triangulate(A, dA, B, dB, C, dC):\r\n    a11, a21 = 2 * (B[0] - A[0]), 2 * (C[0] - A[0])\r\n    a12, a22 = 2 * (B[1] - A[1]), 2 * (C[1] - A[1])\r\n    b1, b2 = dA - dB - A[0] * * 2 - A[1] * * 2 + B[0] * * 2 + B[1] * * 2, dA - dC - A[0] * * 2 - A[1] * * 2 + C[0] * * 2 + C[1] * * 2\r\n    dt = a11 * a22 - a12 * a21\r\n    x, y = (b1 * a22 - a12 * b2) / / dt, (a11 * b2 - b1 * a21) / / dt\r\n    return (x, y)\r\n",
  "62cc5882ea688d00428ad2b0": "def bunch(n):\r\n    s, w = n . bit_length(), n . bit_count()\r\n    base = (1 << w) - 1\r\n    chunks = (base << i for i in range(s - w + 1))\r\n    return min(chunks, key=lambda v: ((n ^ v). bit_count(), v))\r\n",
  "6324786fcc1a9700260a2147": "from itertools import accumulate\r\nH = [0, * accumulate(range(1, 301), lambda a, n: a * n * * n % 1000000007)]\r\n\r\nhyperfact = H . __getitem__\r\n",
  "632408defa1507004aa4f2b5": "class Class:\n    value = 1\n    def get_number():\n    result = Class . value\n    Class . value *= 2\n    return result\n",
  "631f0c3a0b9cb0de6ded0529": "from functools import reduce\r\n\r\n\r\ndef evaluate(equation):\r\n    try:\r\n    return reduce(lambda a, b: a * (b + 2) + a / / b, map(int, equation . split(' @ ')))\r\n    except ZeroDivisionError:\r\n    pass\r\n",
  "6319f8370b9cb0ffc2ecd58d": "# Just having some fun with the new match/case :D\ndef level_recovery(solution):\n    D, boxes, i, j = {}, set(), 0, 0\n    for c in solution:\n    D[(i, j)] = ' '\n    match c:\n    case 'l' | 'L': k, l = 0, - 1\n    case 'r' | 'R': k, l = 0, 1\n    case 'u' | 'U': k, l = - 1, 0\n    case 'd' | 'D': k, l = 1, 0\n    if c . isupper():\n    if (i + k, j + l) not in D:\n    boxes . add((i + k, j + l))\n    D[(i + k, j + l)] = ' '\n    D[(i + 2 * k, j + 2 * l)] = '.'\n    i, j = i + k, j + l\n    for i, j in boxes:\n    match D[(i, j)]:\n    case '.': D[(i, j)] = '*'\n    case ' ': D[(i, j)] = '$'\n    match D[(0, 0)]:\n    case '.': D[(0, 0)] = '+'\n    case ' ': D[(0, 0)] = '@'\n    Y, X = zip(* D)\n    x, y = min(X) - 1, min(Y) - 1\n    H, W = max(Y) - y + 2, max(X) - x + 2\n    res = [[' '] * W for _ in range(H)]\n    for i in range(H):\n    for j in range(W):\n    if (i + y, j + x) in D:\n    res[i][j] = D[(i + y, j + x)]\n    elif any((k + y, l + x) in D for k in range(i - 1, i + 2) for l in range(j - 1, j + 2)):\n    res[i][j] = '#'\n    return '\\n' . join(map(str . rstrip, map('' . join, res)))\n",
  "631373e489d71c005d880f18": "def area_value(n):\n    res, i, j = 0, 1, 2\n    while j * j <= n:\n    if n % j == 0:\n    res += n / / i * j - n / / j * i\n    i = j\n    j += 1\n    return 0 if n < 2 else res + ((n / / i) * * 2 - i * i) / / 2\n",
  "6319dba6d6e2160015a842ed": "def count_photos(road):\n    photos = 0\n    left = 0\n    dot_founds = 0\n    for item in road:\n    if item == \">\":\n    left += 1\n    elif item == \".\":\n    photos += left\n    dot_founds += 1\n    elif item == \"<\":\n    photos += dot_founds\n    return photos\n",
  "57f2b753e3b78621da0020e8": "import re\r\ntoken = re . compile(r'([+-]?)\\s*(\\d*)\\s*([a-zA-Z\\(\\)])')\r\n\r\n\r\ndef substitute(formula, substitutes):\r\n    res = formula\r\n    for var, sub in substitutes:\r\n    res = res . replace(var, '({})' . format(sub))\r\n    return res if res == formula else substitute(res, substitutes)\r\n\r\n    def reduce(tokens):\r\n    res = dict()\r\n    for sign, num, var in tokens:\r\n    if var == ')':\r\n    return res\r\n    coef = int(sign + (num or '1'))\r\n    if var == '(':\r\n    for k, v in reduce(tokens). items():\r\n    res[k] = res . get(k, 0) + coef * v\r\n    else:\r\n    res[var] = res . get(var, 0) + coef\r\n    return res\r\n    def simplify(examples, formula):\r\n    substitutes = [(k . strip(), v)\r\n                   for v, k in map(lambda x: x . split('='), examples)]\r\n    subbed = substitute(formula, substitutes)\r\n    reduced = reduce(iter(token . findall(subbed)))\r\n    return '' . join(map('{0[1]}{0[0]}' . format, reduced . items()))\r\n",
  "63178f6f358563cdbe128886": "from typing import Generator\nfrom math import isqrt\n\n\ndef generate_continued_fraction(n) - > Generator[int, None, None]:\n    a0 = isqrt(n)\n    a, b, c = a0, 0, 1\n    yield a0\n    while True:\n    b = c * a - b\n    c = (n - b * b) / / c\n    if not c:\n        break\n    a = (a0 + b) / / c\n    yield a\n    while True:\n    yield 0\n",
  "6311b2ce73f648002577f04a": "from collections import deque\r\n\r\n\r\ndef prepare_deck(drawn_cards):\r\n    deck = deque()\r\n    for c in reversed(drawn_cards):\r\n    deck . rotate(1)\r\n    deck . appendleft(c)\r\n    return list(deck)\r\n",
  "630647be37f67000363dff04": "def draw(deck):\r\n    order = []\r\n    while deck:\r\n    order . append(deck . pop(0))\r\n    if deck:\r\n    deck . append(deck . pop(0))\r\n    return order\r\n",
  "62b76a4f211432636c05d0a9": "DECK = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\r\n        12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\r\n\r\n\r\ndef guess_the_card(audience):\r\n    deck = DECK\r\n    for _ in range(3):\r\n    deal = [deck[:: 3], deck[1:: 3], deck[2:: 3]]\r\n    deal . insert(1, deal . pop(audience . get_input(deal)))\r\n    deck = sum(deal, [])\r\n    return deck[10]\r\n",
  "631082840289bf000e95a334": "def max_int_chain(n):\r\n    return - 1 if n < 5 else (n / / 2) * (n - n / / 2) if n % 2 else (n / / 2 - 1) * (n / / 2 + 1)\r\n",
  "630e55d6c8e178000e1badfc": "def degrees_of_lock(initial, first, second, third):\r\n    return 1080 + ((initial - first) % 40 + (second - first) % 40 + (second - third) % 40) * 9\r\n",
  "630649f46a30e8004b01b3a3": "def construct_graph(points):\r\n    if not points:\r\n    return [['+']]\r\n    min_x = min(0, min(point['x'] for point in points))\r\n    min_y = min(0, min(point['y'] for point in points))\r\n    max_x = max(0, max(point['x'] for point in points))\r\n    max_y = max(0, max(point['y'] for point in points))\r\n    graph = [[' '] * (max_x - min_x + 1) for _ in range(min_y, max_y + 1)]\r\n    def set(x, y, c): graph[max_y - y][x - min_x] = c\r\n    for x in range(min_x, max_x + 1):\r\n        set(x, 0, '-')\r\n    for y in range(min_y, max_y + 1):\r\n        set(0, y, '|')\r\n    set(0, 0, '+')\r\n    for point in points:\r\n        set(point['x'], point['y'], '*')\r\n    return graph\r\n",
  "589816a7d07028ac5c000016": "def new_year_celebrations(take_off_time, minutes):\r\n    h, m = map(int, take_off_time . split(':'))\r\n    res, m = 0, 60 * h + m or 1440\r\n    for x in map(int . __sub__, minutes, [0] + minutes):\r\n    res += m <= 1440 and m + x >= 1440\r\n    m += x - 60\r\n    return res + (m <= 1440)\r\n",
  "63022799acfb8d00285b4ea0": "from typing import Tuple\r\nfrom math import gcd\r\nfrom gmpy2 import is_prime\r\n\r\n\r\ndef four_squares(n: int) - > Tuple[int, int, int, int]:\r\n    print(n)\r\n    if n == 0:\r\n        return 0, 0, 0, 0\r\n    twos = 1\r\n    while n % 4 == 0:\r\n        n / /= 4\r\n        twos *= 2\r\n    nums = []\r\n    if n % 8 == 7:\r\n    sqrtn = isqrt(n)\r\n    while (n - sqrtn * * 2) % 8 in [0, 4, 7]:\r\n        sqrtn -= 1\r\n    nums . append(sqrtn)\r\n    n -= sqrtn * * 2\r\n    else:\r\n    nums . append(0)\r\n    x = isqrt(n)\r\n    while 1:\r\n    k = n - x * * 2\r\n    k2 = k / / 2 if k % 2 == 0 else k\r\n    if k2 == 1 or (k2 % 4 == 1 and is_prime(k2)):\r\n        break\r\n    # print(x, k, k2)\r\n    x -= 1\r\n    k = n - x * * 2\r\n    nums . append(x)\r\n    k2 = k / / 2 if k % 2 == 0 else k\r\n    decomp = compose_2sq(prime_2sq(k2), [1, 1] if k % 2 == 0 else [1, 0])\r\n    nums += decomp\r\n    return tuple(num * twos for num in nums)\r\n\r\n    def prime_2sq(p):\r\n    if p == 1:\r\n        return (1, 0)\r\n    if p == 2:\r\n        return (1, 1)\r\n    for q in range(2, p):\r\n    if pow(q, (p - 1) / / 2, p) == p - 1:\r\n        break\r\n    x = pow(q, (p - 1) / / 4, p)\r\n    v = p, x\r\n    rems = []\r\n    sqrtp = isqrt(p)\r\n    while len(rems) < 2:\r\n    if v[1] <= sqrtp:\r\n        rems . append(v[1])\r\n    v = v[1], v[0] % v[1]\r\n    return rems[: 2]\r\n    def compose_2sq(x, y):\r\n    a, b = x\r\n    c, d = y\r\n    return [a * c + b * d, abs(a * d - b * c)]\r\n\r\n    def isqrt(n):\r\n    x0 = n / / 2\r\n    if x0:\r\n    x1 = (x0 + n / / x0) / / 2\r\n    while x1 < x0:\r\n    x0 = x1\r\n    x1 = (x0 + n / / x0) / / 2\r\n    return x0\r\n    return n\r\n",
  "630006e1b4e54c7a7e943679": "def sierpinski_carpet_string(n):\r\n    m = [\"\u2588\u2588\"]\r\n    for i in range(n):\r\n    m = [x + x + x for x in m] + \\\r\n        [x + x . replace(\"\u2588\", \" \") + x for x in m] + [x + x + x for x in m]\r\n    return \"\\n\" . join(m)\r\n",
  "62fd5b557d267aa2d746bc19": "def matching(arg):\r\n    match arg:\r\n    case[]: return 0\r\n    case[x]: return int(x)\r\n    case[a, * _, 0 | '0']: return None\r\n    case[a, * _, b]: return int(a) / int(b)\r\n",
  "62f23d84eb2533004be50c0d": "def clock(n, xs):\r\n    ks, vs, ptr = [- 1] * n, [0] * n, 0\r\n    def inc():\r\n    nonlocal ptr\r\n    ptr = (ptr + 1) % n\r\n    for x in xs:\r\n    if x in ks:\r\n    vs[ks . index(x)] = 1\r\n    else:\r\n    while vs[ptr]:\r\n    vs[ptr] -= 1\r\n    inc()\r\n    ks[ptr] = x\r\n    inc()\r\n    return ks\r\n",
  "62fa7b95eb6d08fa9468b384": "def mandelbrot_string(x, y, width, height, stepsize, max_iter):\r\n    def mandelbrot_pixel(c):\r\n    z = 0\r\n    for n in range(max_iter + 1):\r\n    z = z * z + c\r\n    if not abs(z) < 2:\r\n        break\r\n    return n\r\n    return '\\n' . join(\r\n        '' . join(\r\n            ' \u2591\u2592\u2593\u2588' [4 * mandelbrot_pixel(\r\n                complex(x + dx * stepsize, y - 2 * dy * stepsize)\r\n            ) / / max_iter]\r\n            for dx in range(- width, width + 1)\r\n        ) for dy in range(- height, height + 1))\r\n",
  "62f8d0ac2b7cd50029dd834c": "def f(s): return s[- 1] > \"Z\" and - ~ f(s[: - 1])\n",
  "62f96f01d67d0a0014f365cf": "def ball_test(s, r):\r\n    if len(r) <= s:\r\n    return True\r\n    elif s <= 0 and r:\r\n    return False\r\n    cracks = r[: s]. count('x')\r\n    return ball_test(s - 1 - cracks, r[s:])\r\n",
  "5e320fe3358578001e04ad55": "is_check = lambda g, n = '(.{7}|.{11}|.{18}(|..))', r = '((.{9} )*.{9}| *)', b = '((.{8} )*.{8}|(.{10} )*.{10})': bool(__import__(\n    're'). search(f\"\u2654 { n } \u265e|\u265e { n } \u2654|\u2654 { r } [\u265b\u265c]|[\u265b\u265c] { r } \u2654|[\u265b\u265d] { b } \u2654|\u2654 { b } [\u265b\u265d]|\u265f.{{ 8}} (|..)\u2654\", '||' . join(map('' . join, g))))\n",
  "5c1d796370fee68b1e000611": "def loopover(mixed, solved):\r\n    t = {c: (i, j) for (i, row) in enumerate(solved)\r\n         for (j, c) in enumerate(row)}\r\n    b = {(i, j): t[c] for (i, row) in enumerate(mixed)\r\n         for j, c in enumerate(row)}\r\n    unsolved = {k for k, v in b . items() if k not in (\r\n        (0, 0), (0, 1)) and k != v}\r\n    sol = []\r\n\r\n    while unsolved:\r\n    i, j = next(iter(unsolved)) if b[0, 0] in ((0, 0), (0, 1)) else b[0, 0]\r\n    if i == 0:\r\n    sol += [f\"D { j } \", * j * [\"L1\"], \"L0\", \"U0\",\r\n            \"R0\", \"D0\", * j * [\"R1\"], f\"U { j } \"]\r\n    else:\r\n    sol += [* j * [f\"L { i } \"], \"L0\", * i * [\"U0\"],\r\n            \"R0\", * i * [\"D0\"], * j * [f\"R { i } \"]]\r\n    b[0, 0], b[0, 1], b[i, j] = b[0, 1], b[i, j], b[0, 0]\r\n\r\n    if b[i, j] == (i, j):\r\n    unsolved . remove((i, j))\r\n\r\n    if b[0, 0] != (0, 0) and len(mixed) % 2 == 0:\r\n    sol += [* len(mixed) / / 2 * [\"D0\", \"L0\", \"D0\", \"R0\"], \"D0\"]\r\n    elif b[0, 0] != (0, 0) and len(mixed[0]) % 2 == 0:\r\n    sol += [* len(mixed[0]) / / 2 * [\"R0\", \"U0\", \"R0\", \"D0\"], \"U0\", \"R0\", \"D0\"]\r\n    elif b[0, 0] != (0, 0):\r\n    return None\r\n    return sol\r\n",
  "57ff9d3b8f7dda23130015fa": "from itertools import combinations\r\n\r\n\r\ndef solve_mine(mapStr, n): return MineSweeper(mapStr, n). solve()\r\n\r\n\r\nclass MineSweeper (object):\r\n\r\n    IS_DEBUG = False\r\n    around = [(dx, dy) for dx in range(- 1, 2)\r\n              for dy in range(- 1, 2) if (dx, dy) != (0, 0)]\r\n\r\n    def __init__(self, mapStr, nMines):\r\n    lines = mapStr . split('\\n')\r\n    mapDct, unknowns, posToWorkOn = {}, set(), set()\r\n    for x, line in enumerate(lines):\r\n    for y, c in enumerate(line . split(' ')):\r\n    mapDct[(x, y)] = c\r\n    if c == '?':\r\n        unknowns . add((x, y))\r\n    else:\r\n        posToWorkOn . add((x, y))\r\n\r\n    self . map = mapDct\r\n    self . unknowns = unknowns\r\n    self . posToWorkOn = posToWorkOn\r\n    self . flagged = set()\r\n    self . nMines = nMines\r\n    self . lX = len(lines)\r\n    self . lY = len(lines[0]. split(' '))\r\n\r\n    def __str__(self): return '\\n' . join(' ' . join(\r\n        self . map[(x, y)] for y in range(self . lY)) for x in range(self . lX))\r\n\r\n    def getValAt(self, pos): return int(self . map[pos])\r\n\r\n    def getneighbors(self, pos): return {\r\n        (pos[0] + dx, pos[1] + dy) for dx, dy in self . around}\r\n\r\n    def printDebug(self): print(\" \\n------------\\n{}\\nRemaining mines: {}\" . format(\r\n        self, self . nMines - len(self . flagged))) if self . IS_DEBUG else None\r\n\r\n    def lookaroundThisPos(self, pos):\r\n    neighbors = self . getneighbors(pos)\r\n    return {'?': neighbors & self . unknowns,\r\n            'x': neighbors & self . flagged}\r\n\r\n    \"\"\" MAIN FUNCTION \"\"\"\r\n\r\n    def solve(self):\r\n\r\n    self . printDebug()\r\n    while True:\r\n    while True:\r\n        # Archive to check against modifications\r\n    archivePosToWorkOn = self . posToWorkOn . copy()\r\n    self . openAndFlag_OnTheFly()\r\n    self . printDebug()  # Open and flag in the map while simple matches can be found\r\n    self . complexSearch_OpenAndFlag()\r\n    # Use more complex algorithm to find mines or unknown positions that are surely openable\r\n    self . printDebug()\r\n    if archivePosToWorkOn == self . posToWorkOn:\r\n        break  # Repeat these two \"simple\" steps until its not possible to go further in the resolution\r\n    # Use witted combinatory approach to go further (if possible)\r\n    self . complexSearch_CombineApproach()\r\n    if archivePosToWorkOn == self . posToWorkOn:\r\n    break\r\n    # Repeat these to \"simple\" steps until its not possible to go further in the resolution\r\n    self . printDebug()\r\n    # If no more mines remaining but some unknown cases still there\r\n    if len(self . flagged) == self . nMines:\r\n    self . openThosePos(self . unknowns . copy())\r\n\r\n    # If all the remaining \"?\" are mines, flag them\r\n    elif len(self . flagged) + len(self . unknowns) == self . nMines:\r\n    self . flagThosePos(self . unknowns . copy())\r\n\r\n    self . printDebug()\r\n\r\n    return '?' if self . unknowns else str(self)\r\n\r\n    def openAndFlag_OnTheFly(self):\r\n    while True:\r\n    openables, workDonePos = set(), set()\r\n    for pos in self . posToWorkOn:  # Run through all the positions that might neighbors to open\r\n    openables, workDonePos = [baseSet | newPart for baseSet, newPart in zip(\r\n        (openables, workDonePos), self . openablePosaround_FlagOnTheFly(pos))]\r\n\r\n    # After the exit of the loop, modification of self.posToWorkOn is possible, so:\r\n    self . openThosePos(openables)\r\n    # remove the pos with full number of mines from the working set (to fasten the executions)\r\n    self . posToWorkOn -= workDonePos\r\n    if not openables and not workDonePos:\r\n        break\r\n\r\n    def openablePosaround_FlagOnTheFly(self, pos):\r\n    around = self . lookaroundThisPos(pos)\r\n\r\n    # If all the unknomn cases can be flagged (or if they are already!)...\r\n    if self . getValAt(pos) == len(around['?']) + len(around['x']):\r\n    self . flagThosePos(around['?'])  # flag them (if not already done)\r\n    # return the current position to remove it from self.posToWorkOn (\"We're done with you...\" / This behaviour will identify the \"done\" positions generated by the \"witted approach\")\r\n    return (set(), {pos})\r\n    return (around['?'], {pos}) if self . getValAt(pos) == len(around['x']) else (set(), set())\r\n\r\n    def openThosePos(self, posToOpen):\r\n    for pos in posToOpen:\r\n    self . map[pos] = str(open(* pos))  # Open squares and update the map\r\n    if self . map[pos] != '0':\r\n        self . posToWorkOn . add(pos)  # Update slef.posToWorkOn if needed\r\n    self . unknowns -= posToOpen  # Remove opened squares from the unknown positions\r\n    def flagThosePos(self, posToFlag):\r\n    for pos in posToFlag:\r\n        self . map[pos] = 'x'  # Flag mines\r\n    self . unknowns -= posToFlag  # Remove flagged squares from the unknown positions\r\n    self . flagged |= posToFlag  # update the set of flagged positions\r\n    def complexSearch_OpenAndFlag(self):\r\n    markables, openables = set(), set()\r\n    for pos in self . posToWorkOn:\r\n    newMark, newOpen = self . intelligencia_OpenAndFlag(pos)\r\n    markables |= newMark\r\n    openables |= newOpen\r\n    self . flagThosePos(markables)\r\n    self . openThosePos(openables)\r\n\r\n    def intelligencia_OpenAndFlag(self, pos):\r\n    around = self . lookaroundThisPos(pos)  # Cases around the current position\r\n    # Prepare an array with the number of remaining mines to find for the current position and the neighbor that will be worked on later\r\n    rMines = [self . getValAt(pos) - len(around['x']), 0]\r\n    # Search for neighbors (only usefull ones, meaning: self.getValAt(posneighbor) is a number and this neighbor still miss some mines)\r\n    neighToWorkOn = self . getneighbors(pos) & self . posToWorkOn\r\n    # markables: position that will be flagged / openables: positions that will be open... of course... / fullUnion: stroe all the squares\r\n    markables, openables = set(), set()\r\n    knownParts = []  # knownParts: list of the intersections of the '?' cases of all the neighbors of the current pos and the current neighbor\r\n    for pos2 in neighToWorkOn:\r\n        # Cases around the neighbor that is worked on right now\r\n    around2 = self . lookaroundThisPos(pos2)\r\n    # Update the number of mines still to find for the current neighbor\r\n    rMines[1] = self . getValAt(pos2) - len(around2['x'])\r\n    # Define the '?' that are owned only by the current \"pos\", and only by the current neighbor (\"pos2\")\r\n    onlys = [around['?'] - around2['?'], around2['?'] - around['?']]\r\n    # Define the minimum (yes \"minimum\", even if \"max\" is used!) number of mines that have to be in the '?' that are commun to \"pos\" and it's current neighbor pos2\"\r\n    mInter = max(n - len(only) for n, only in zip(rMines, onlys))\r\n    if mInter <= 0 or 1 not in rMines:\r\n        continue  # If these conditions are met, there is nothing \"extrapolable\" at the current position, so continue the iteration\r\n    currentIntersect = around['?'] & around2['?']\r\n    if currentIntersect:\r\n        # Store (if it exists) the current intersection of '?' cases for further checks\r\n        knownParts . append(currentIntersect)\r\n    for i in range(2):  # Work on the two current LOCATIONS (pos, pos2)\r\n    if len(onlys[i]) == rMines[i] - mInter:\r\n        # The number of '?' cases that are only around the treated LOCATION matches the number mines of this LOCATION that are out of the interesction \"pos & pos2\". So, those cases will be flagged\r\n        markables |= onlys[i]\r\n    elif mInter == rMines[i]:\r\n        openables |= onlys[i]  # If the number of mines surely present in the intersection \"pos & pos2\" matches the number of mines still to found arorund the treated LOCATION, all the cases out of the intersection for the current LOCATION can be opened\r\n    # Final check on the different intersections parts:\r\n    # Union of all the intersections for the current position and its differente neighbors\r\n    fullIntersection = {\r\n        posInter for posSet in knownParts for posInter in posSet}\r\n    if len(knownParts) == rMines[0] and sum(len(s) for s in knownParts) == len(fullIntersection):\r\n        # If some '?' cases are still unchecked while we can be sure that all the remaining mines are elsewhere (even without knowing their exact location), the leftovers can be opened\r\n    openables |= around['?'] - fullIntersection\r\n    return markables, openables\r\n\r\n    def complexSearch_CombineApproach(self):\r\n        # number of remaining mines to find\r\n    rMines = self . nMines - len(self . flagged)\r\n    matchPos = []\r\n\r\n    if rMines != 0:\r\n\r\n     # '?' that are joined to the current posToWorkOn...\r\n    borderUnknowns = {\r\n        pos2 for pos in self . posToWorkOn for pos2 in self . lookaroundThisPos(pos)['?']}\r\n    # ...then add the \"next layer\" of \"?\", ot be able to make more guesses on the remaining farther squares\r\n    borderUnknowns |= {\r\n        pos2 for pos in borderUnknowns for pos2 in self . lookaroundThisPos(pos)['?']}\r\n    for n in range(rMines if not (self . unknowns - borderUnknowns) else 1, min(rMines, len(borderUnknowns) - 1) + 1):\r\n    for posMines in combinations(borderUnknowns, n):\r\n    setPosMines = set(posMines)\r\n    for pos in self . posToWorkOn:\r\n    around = self . lookaroundThisPos(pos)\r\n    if self . getValAt(pos) != len(around['x']) + len(around['?'] & setPosMines):\r\n        break\r\n    else:\r\n        # if the for loop execute until its end, the current position is valid. Archive it.\r\n    matchPos . append(setPosMines)\r\n    # search for '?' that are never marked in any of the valid combinations\r\n    untouched = borderUnknowns - {flagPos for s in matchPos for flagPos in s}\r\n    if len(matchPos) == 1:\r\n        # Flag the found mines if only 1 match\r\n        self . flagThosePos(matchPos[0])\r\n    self . openThosePos(untouched)  # open the untouched '?' (free of mines!!)\r\n",
  "52dc4688eca89d0f820004c6": "def whitespace(code, inp=''):\r\n    code = '' . join(['STN' [' \\t\\n' . index(c)]\r\n                     for c in code if c in ' \\t\\n'])\r\n    output, stack, heap, calls, pos, run, search, inp = [\r\n    ], [], {}, [], [0], [True], [None], list(inp)\r\n\r\n    def set_(t, i, val):\r\n    t[i] = val\r\n    # Stack operations\r\n    def pop(n=0): return (assert_(n < len(stack)),\r\n                          stack[n], set_(stack, slice(n, n + 1), ()))[1]\r\n\r\n    def get(n): return (assert_(n >= 0 and n < len(stack)), stack[n])[1]\r\n    def push(n): return stack . insert(0, n)\r\n\r\n    # Parsing utilities\r\n    def accept(tokens, action=None):\r\n    for token in tokens . split(','):\r\n    if code[pos[0]: pos[0] + len(token)] == token:\r\n    pos[0] += len(token)\r\n    if action:\r\n    p = 0\r\n    if token in ('SS', 'STS', 'STN'):\r\n    p = number()\r\n    elif token in ('NST', 'NSN', 'NTS', 'NTT', 'NSS'):\r\n    p = label()\r\n    ((not search[0]) or token == 'NSS') and action(p)\r\n    return token\r\n    def assert_(* args):\r\n    if len(args) and args[0]:\r\n        return args[0]\r\n    raise Exception('error')\r\n\r\n    def number():\r\n    if accept('N'):\r\n        raise Exception('No digits for number')\r\n    n = '+0' if accept('S,T') == 'S' else '-0'\r\n    while not accept('N'):\r\n    n += str(int(accept('S,T') != 'S'))\r\n    return int(n, 2)\r\n\r\n    def label(l=''):\r\n    while not accept('N'):\r\n    l += accept('S,T') or ''\r\n    return l + '1'\r\n    instructions = {'SS': lambda n: push(n),\r\n                    'STS': lambda n: push(get(n)),\r\n                    'STN': lambda n: set_(stack, slice(1, len(stack) if n < 0 else 1 + n), ()),\r\n                    'SNS': lambda _: push(get(0)),\r\n                    'SNT': lambda _: set_(stack, slice(1, 1), [pop()]),\r\n                    'SNN': lambda _: pop(),\r\n                    'TSSS': lambda _: push(pop(1) + pop()),\r\n                    'TSST': lambda _: push(pop(1) - pop()),\r\n                    'TSSN': lambda _: push(pop(1) * pop()),\r\n                    'TSTS': lambda _: push(pop(1) / assert_(pop())),\r\n                    'TSTT': lambda _: (lambda d: push((pop() % d + d) % d))(assert_(pop())),\r\n                    'TTS': lambda _: set_(heap, pop(1), pop()),\r\n                    'TTT': lambda _: (assert_(stack[0] in heap), push(heap[pop()])),\r\n                    'TNSS': lambda _: output . append(chr(pop())),\r\n                    'TNST': lambda _: output . append(str(pop())),\r\n                    'TNTS': lambda _: (set_(heap, pop(), ord(assert_(inp)[0])), inp . pop(0)),\r\n                    'TNTT': lambda _: (lambda n: (set_(heap, pop(), int(assert_('' . join(inp[: n])))), set_(inp, slice(0, n + 1), ())))(inp . index('\\n') if '\\n' in inp else len(inp)),\r\n                    'NST': lambda l: (calls . append(pos[0]), set_(pos, 0, heap[l]) if heap . get(l) else set_(search, 0, l)),\r\n                    'NSN': lambda l: set_(pos, 0, heap[l]) if heap . get(l) else set_(search, 0, l),\r\n                    'NTS': lambda l: (not pop()) and (set_(pos, 0, heap[l]) if heap . get(l) else set_(search, 0, l)),\r\n                    'NTT': lambda l: pop() < 0 and (set_(pos, 0, heap[l]) if heap . get(l) else set_(search, 0, l)),\r\n                    'NTN': lambda _: set_(pos, 0, assert_(calls). pop()),\r\n                    'NNN': lambda _: set_(run, 0, False),\r\n                    'NSS': lambda l: (assert_((not heap . get(l)) or heap[l] == pos[0]), set_(heap, l, pos[0]), search[0] == l and set_(search, 0, 0)),\r\n                    }\r\n\r\n    while run[0]:\r\n    assert_(pos[0] < len(code))\r\n    any(accept(* instruction)\r\n        for instruction in instructions . items()) or assert_()\r\n\r\n    return '' . join(output)\r\n",
  "62eedcfc729041000ea082c1": "def left_right(n): return 'CLR' [int((8 * n - 4) * * .5 % 2 / / - 1)]\n",
  "62d34faad32b8c002a17d6d9": "def fifo(n, reference_list):\n    memory = [- 1] * n\n    c = 0\n    for ref in reference_list:\n    if ref in memory:\n    continue\n    memory[c] = ref\n    c = (c + 1) % n\n    return memory\n",
  "62e068c14129156a2e0df46a": "from functools import reduce\r\nfrom itertools import combinations\r\n\r\n\r\ndef _add(v0, v1):\r\n    return v0[0] + v1[0], v0[1] + v1[1]\r\n\r\n    def _mul(v, k):\r\n    return v[0] * k, v[1] * k\r\n    def _blindfold_chess(moves):\r\n    mcs = {k: [reduce(_add, c) for c in combinations(moves, k)]\r\n           for k in range(1, len(moves) + 1)}\r\n    i = 0\r\n    while mcs:\r\n    i += 1\r\n    for j, ms in reversed(mcs . items()):\r\n    if i % j == 0:\r\n    yield _mul(ms . pop(), i / / j)\r\n    if not ms:\r\n    del mcs[j]\r\n    break\r\n    else:\r\n    yield (0, 0)\r\n\r\n    def blindfold_chess(moves):\r\n    return list(_blindfold_chess(moves))\r\n",
  "62eb800ba29959001c07dfee": "# String comparison is enough, no need to convert\ndef brightest(colors):\n    return max(colors, key=lambda c: max(c[1: 3], c[3: 5], c[5:]))\n",
  "62ea53ae888e170058f00ddc": "def fibonacci_squared_sum(n): return int(\n    \"012650434056210098450676054890\" [n % 30])\n",
  "6112917ef983f2000ecbd506": "def places_around(dance_floor, row, col, empty=False):\r\n    places = []\r\n\r\n    for i in ((- 1, 0), (0, - 1), (0, 1), (1, 0)):\r\n    rel_row, rel_col = row + i[0], col + i[1]\r\n\r\n    if 0 <= rel_row < rows and 0 <= rel_col < cols and (not empty or dance_floor[rel_row][rel_col] == ' '):\r\n    places . append((rel_row, rel_col))\r\n\r\n    return places\r\n    def best_place(dance_floor):\r\n    global rows, cols\r\n    rows, cols = len(dance_floor), len(dance_floor[0])\r\n    empty_places = []\r\n\r\n    for row in enumerate(dance_floor):  # list all empty places\r\n    for col in enumerate(row[1]):\r\n    if col[1] == ' ':\r\n    empty_places . append((row[0], col[0]))\r\n\r\n    moshpit_places = set()\r\n\r\n    for row, col in empty_places:  # find 2x2 moshpits\r\n    if row < rows - 1 and col < cols - 1 and dance_floor[row][col + 1] == dance_floor[row + 1][col] == dance_floor[row + 1][col + 1] == ' ':\r\n    moshpit_places = moshpit_places . union(\r\n        {(row, col), (row, col + 1), (row + 1, col), (row + 1, col + 1)})\r\n\r\n    moshpit_checked = set()  # places that were already checked for branches\r\n    while True:  # branches of 2x2 moshpits\r\n    length = len(moshpit_places)\r\n    moshpit_unchecked = moshpit_places . difference(moshpit_checked)\r\n    moshpit_checked = moshpit_checked . union(moshpit_places)\r\n\r\n    for row, col in moshpit_unchecked:\r\n    moshpit_places = moshpit_places . union(\r\n        set(places_around(dance_floor, row, col, True)))\r\n\r\n    if length - len(moshpit_places) == 0:  # stop if no new branches were found\r\n    break\r\n    best_score = float('-inf')\r\n\r\n    for row, col in empty_places:\r\n    score = rows - row  # distance from stage\r\n    if row > 0:  # height of person in front\r\n    score *= .99 * * int(bin(ord(dance_floor[row - 1][col]))[- 5:], 2)\r\n\r\n    for rel_row, rel_col in places_around(dance_floor, row, col):  # beer\r\n    score *= 1 - dance_floor[rel_row][rel_col]. isupper() * .2\r\n    score -= 999 * ((row, col) in moshpit_places)  # moshpits\r\n    if score > best_score:  # keep track of best spot\r\n    best_score = score\r\n    best_place = (row, col)\r\n\r\n    return best_place\r\n",
  "62e41d4816d2d600367aee79": "from functools import cache\r\n\r\n\r\ndef solve(board):\r\n    moves, board = [], board . splitlines()\r\n    poss = {p: i for i, p in enumerate(\r\n        ((x, y) for x, r in enumerate(board) for y, v in enumerate(r) if v != '_'), 1)}\r\n\r\n    @ cache\r\n    def dfs(pegs):\r\n    if len(pegs) == 1:\r\n        return True\r\n    for (x, y), m in poss . items():\r\n    if (x, y) not in pegs:\r\n    for dx, dy in ((- 1, 0), (0, - 1), (1, 0), (0, 1)):\r\n    if ((x1 := x + dx), (y1 := y + dy)) in pegs and ((x2 := x + 2 * dx), (y2 := y + 2 * dy)) in pegs:\r\n    moves . append((poss[x2, y2], m))\r\n    if dfs(pegs - frozenset([(x1, y1), (x2, y2)]) | frozenset([(x, y)])):\r\n        return True\r\n    moves . pop()\r\n    return False\r\n    if dfs(frozenset((x, y) for x, y in poss if board[x][y] == 'O')):\r\n        return moves\r\n",
  "62e66bea9db63bab88f4098c": "from itertools import combinations\nfrom functools import reduce\nfrom operator import mul\n\n\ndef find_them(number_limit, primes):\n    res = 0\n    for ln in range(1, len(primes) + 1):\n    for cmb in combinations(primes, ln):\n    mlt, sgn = reduce(mul, cmb), (- 1) * * (ln + 1)\n    pw = (number_limit - 1) / / mlt\n    res += pw * (pw + 1) / / 2 * mlt * sgn\n    return res\n",
  "62e4df54323f44005c54424c": "def dist(arr):\r\n    for i in range(1, len(arr)):\r\n    if arr[- 1 - i] == arr[- 1]:\r\n    return i\r\n    return 0\r\n    def seq(n):\r\n    s = [0, 0]\r\n    for _ in range(n):\r\n    s . append(dist(s))\r\n    return s[n - 1]\r\n",
  "62975e268073fd002780cb0d": "import re\r\n\r\n\r\ndef parse_type(s):\r\n    tokens = re . findall(r'->|[()]|[A-Z][a-zA-Z0-9]*', s)\r\n    def next_token(): return tokens and tokens . pop(0) or None\r\n    def peek_token(): return tokens and tokens[0] or None\r\n    def parse_func():\r\n    ty = parse_atom()\r\n    if peek_token() == \"->\":\r\n    next_token()\r\n    ty = (ty, parse_func())\r\n    return ty\r\n    def parse_atom():\r\n    match next_token():\r\n    case \"(\":\r\n    ty = parse_func()\r\n    assert next_token() == \")\"\r\n    return ty\r\n    case ty:\r\n    return ty\r\n    return parse_func()\r\n\r\n    def parse_context(context):\r\n    res = {}\r\n    for r in context . split('\\n'):\r\n    if ':' in r:\r\n    val, s = map(str . strip, r . split(':'))\r\n    res[val] = parse_type(s)\r\n    return res\r\n    def parse_expr(expr):\r\n    tokens = re . findall(r'[()]|[a-z][a-zA-Z0-9]*', expr)\r\n    def next_token(): return tokens and tokens . pop(0) or None\r\n    def peek_token(): return tokens and tokens[0] or None\r\n    def parse_app():\r\n    e = parse_atom()\r\n    while peek_token() and peek_token() != ')':\r\n    e = (e, parse_atom())\r\n    return e\r\n    def parse_atom():\r\n    match next_token():\r\n    case '(':\r\n    e = parse_app()\r\n    assert next_token() == ')'\r\n    return e\r\n    case e:\r\n    return e\r\n    return parse_app()\r\n\r\n    def infer_type(context, expression):\r\n    ctx = parse_context(context)\r\n\r\n    def infer(expr):\r\n    match expr:\r\n    case(a, b):\r\n    ta, tb = map(infer, expr)\r\n    match ta:\r\n    case(t_arg, t_ret) if t_arg == tb:\r\n    return t_ret\r\n    case _:\r\n    raise \"Type error\"\r\n    case v:\r\n    return ctx[v]\r\n\r\n    def to_string(ty):\r\n    match ty:\r\n    case((a, b), c):\r\n    return f'( { to_string (( a , b ))} ) -> { to_string ( c )} '\r\n    case(a, b):\r\n    return f' { to_string ( a )} -> { to_string ( b )} '\r\n    case _:\r\n    return ty\r\n    return to_string(infer(parse_expr(expression)))\r\n",
  "62dcbe87f4ac96005f052962": "ALPHABET = str(). join(chr(i)\n                       for i in range(sum(range(len(str(complex))))) if chr(i). islower())\n",
  "6051151d86bab8001c83cc52": "from collections import Counter\r\n\r\n\r\ndef closest_string(list_str):\r\n    counters = [Counter(s[i] for s in list_str)\r\n                for i in range(len(list_str[0]))]\r\n    minweight = len(list_str[0]) + 1\r\n    mins = None\r\n    # backtracking with prunning:\r\n    def rec(s, weights):\r\n    nonlocal minweight, mins\r\n    if max(weights) >= minweight:\r\n    return\r\n    if len(s) == len(list_str[0]):\r\n    mins = s\r\n    minweight = max(weights)\r\n    return\r\n    for c in counters[len(s)]. keys():\r\n    rec(s + c, [\r\n        prevw + (c != list_str[i][len(s)])\r\n        for i, prevw in enumerate(weights)\r\n    ])\r\n\r\n    rec('', [0] * len(list_str))\r\n    return mins\r\n",
  "62dc0c5df4ac96003d05152c": "def score(ball: Ball) - > int:\n    res, left, right = ball . point, ball . previous, ball . next\n    while left:\n    res += left . point\n    left = left . previous\n    while right:\n    res += right . point\n    right = right . next\n    return res\n",
  "62dabb2225ea8e00293da513": "from itertools import combinations\r\n\r\n\r\ndef pass_or_fail(harmony):\r\n    for c1, c2 in zip(harmony, harmony[1:]):\r\n    for (n1, n2), (n3, n4) in combinations(zip(c1 . split(), c2 . split()), 2):\r\n    if n1 == n3 != n2 == n4:\r\n    return \"Fail\"\r\n    return \"Pass\"\r\n",
  "62d6b4990ba2a64cf62ef0c0": "def last(n): return (2 * - ~ n / / 3) * * 2 + 1 >> 1\n",
  "62d81c6361677d57d8ff86c9": "dmg = dict(zip(\"DBHW\", (0, 0.5, 0.8, 1)))\r\n\r\n\r\ndef jumping(arr):\r\n    hp = 20\r\n    for i, (p1, p2) in enumerate(zip(arr, arr[1:]), 1):\r\n    (h1, _), (h2, b) = p1 . split(), p2 . split()\r\n    hp -= max(0, int((int(h1) - int(h2) - 3.5) * (1 - dmg[b])))\r\n    if hp <= 0:\r\n    return f\"died on { i } \"\r\n    return f\"jumped to the end with { hp } remaining HP\"\r\n",
  "62d6d9e90ba2a6b6942ee6e5": "# d e f c h a n g e _ l i s t ( x ) :\n# f o r i , v i n e n u m e r a t e ( x [ : : - 1 ] ) :\n# i f i s i n s t a n c e ( v , b o o l ) :\n# x [ i ] = n o t v\n# e l i f i s i n s t a n c e ( v , s t r ) :\n# x [ i ] = v + v [ : : - 1 ]\n# e l s e :\n# x [ i ] = v * * 2\n# ' ' '\ndef change_list(x):\n    for i, v in enumerate(x[:: - 1]):\n    if isinstance(v, bool):\n    x[i] = not v\n    elif isinstance(v, str):\n    x[i] = v + v[:: - 1]\n    else:\n    x[i] = v * * 2\n    # ' ' '\n",
  "62d1d6389e2b3904b3825309": "def location(c, r=1):\r\n    while c > r:\r\n        c -= r\r\n        r += 1\r\n    return r, c\r\n",
  "62d1eb93e5994c003156b2ae": "tap_code = \"ABC,DEF,GHI|JKL,MNO,PQR|STU,VWX,YZ \"\r\ntable = {\r\n    char: ' ' . join(['.' * k, '.' * j, '.' * i])\r\n    for i, face in enumerate(tap_code . split('|'), 1)\r\n    for j, line in enumerate(face . split(','), 1)\r\n    for k, char in enumerate(line, 1)\r\n}\r\nreverse = {v: k for k, v in table . items()}\r\n\r\n\r\ndef encode(s):\r\n    return ' ' . join(map(table . get, s))\r\n\r\n    def decode(s):\r\n    return '' . join(map(reverse . get, map(' ' . join, zip(* [iter(s . split())] * 3))))\r\n",
  "5c2fd9188e358f301f5f7a7b": "def dry_ground(terrain, nDays=4):\r\n\r\n    if not terrain:\r\n    return 0, 0, 0, 0\r\n    def peak_height(mountain):\r\n    lst = [[0] * Y for _ in range(X)]\r\n\r\n    for x, row in enumerate(mountain):\r\n    for y, v in enumerate(row):\r\n    here = v == '^'\r\n    isBorderOrNoPeak = not (0 < x < X - 1 and 0 < y < Y - 1 and here)\r\n    lst[x][y] = here if isBorderOrNoPeak else here + \\\r\n        min(lst[x - 1][y], lst[x][y - 1])\r\n\r\n    for x in reversed(range(1, X - 1)):\r\n    for y in reversed(range(1, Y - 1)):\r\n    lst[x][y] = min(lst[x][y], lst[x + 1][y] + 1, lst[x][y + 1] + 1)\r\n\r\n    return lst\r\n    def flood(h):\r\n    bag = set(river)\r\n    while h and bag:\r\n    bag = {(a, b) for x, y in bag for a, b in ((x + 1, y), (x - 1, y), (x, y + 1), (x, y - 1))\r\n           if (a, b) not in river and 0 <= a < X and 0 <= b < Y and flooded[a][b] < h}\r\n    river . update(bag)\r\n    return X * Y - len(river)\r\n\r\n    X, Y = len(terrain), len(terrain[0])\r\n    flooded = peak_height(terrain)\r\n    river = {(x, y) for x, r in enumerate(terrain)\r\n             for y, c in enumerate(r) if c == '-'}\r\n\r\n    return tuple(map(flood, range(nDays)))\r\n",
  "5e452a0a5111c7001faa2a71": "# Approach: A breadth first search (BSF) is applied to the image, where a desired cell is '*'\r\n# The BFS is itterative\r\nimport queue\r\n\r\n\r\nclass ConnectedChecker (object):\r\n\r\n    __WHITE_CELL__ = '*'\r\n    # part of the logic to find all connected shapes\r\n    @ staticmethod\r\n    def __inImage__(i, j, nR, nC):\r\n    if 0 <= i and i < nR and 0 <= j and j < nC:\r\n    return True\r\n    else:\r\n    return False\r\n    # -----end function\r\n    # part of the logic to find all connected shapes\r\n    # A desired cell is one that is a ship symbol and has not been visited yet\r\n    @ staticmethod\r\n    def __isDesiredCell__(img, hasVisited, i, j):\r\n    if img[i][j] == ConnectedChecker . __WHITE_CELL__ and not hasVisited[i][j]:\r\n    return True\r\n    else:\r\n    return False\r\n    # ---end function\r\n    # part of the logic to find all connected shapes\r\n    @ staticmethod\r\n    def __markCellAsVisited__(hasVisited, i, j):\r\n    hasVisited[i][j] = True\r\n    # end function\r\n    # Returns a list of coordinates of the shape connected at iRoot, jRoot\r\n\r\n    @ staticmethod\r\n    def __getConnectedShape__(img, hasVisited, nR, nC, iRoot, jRoot):\r\n        # di and dj specify the directions we are going to search dx=0 dy=1 means\r\n        # search north (one cell above), di=1 dj=-1 is one to right and one down\r\n    di = [0, 0, 1, - 1]\r\n    dj = [1, - 1, 0, 0]\r\n    numSearchDirs = len(di)\r\n\r\n    # i,j are lists that are going to hold the nodes conneced to the provided root (i,j)\r\n    iConnected, jConnected = [], []\r\n    q = queue . Queue()\r\n\r\n    # if provided root is desired, save it\r\n    if ConnectedChecker . __isDesiredCell__(img, hasVisited, iRoot, jRoot):\r\n    q . put((iRoot, jRoot))\r\n\r\n    ConnectedChecker . __markCellAsVisited__(hasVisited, iRoot, jRoot)\r\n\r\n    # Now we search for all connections along the allowed (four) directions\r\n    while q . empty() == False:\r\n    u, v = q . get()\r\n    iConnected . append(u)\r\n    jConnected . append(v)\r\n\r\n    # from the current position (u,v), search in the four cardinal directions\r\n    for s in range(numSearchDirs):\r\n    iNew = u + di[s]\r\n    jNew = v + dj[s]\r\n\r\n    # if we're in the image and found a desired cell, add it to the queue\r\n    if ConnectedChecker . __inImage__(iNew, jNew, nR, nC) and \\\r\n            ConnectedChecker . __isDesiredCell__(img, hasVisited, iNew, jNew):\r\n    ConnectedChecker . __markCellAsVisited__(hasVisited, iNew, jNew)\r\n    q . put((iNew, jNew))\r\n\r\n    # Should we get to this point, there does not exist a way to an exit of the maze\r\n    # from the starting location (path to exit: list(zip(xConnected, yConnected)))\r\n    return list(zip(iConnected, jConnected))\r\n    # ---end function\r\n    @ staticmethod\r\n    def countShapes(image):\r\n    img = image . split('\\n')\r\n    img = [row for row in img if row]\r\n    nC = len(img[0][:])\r\n    nR = len(img)\r\n\r\n    hasVisited = [[False for _ in range(nC)] for _ in range(nR)]\r\n    totalShapes = 0\r\n    for i in range(nR):\r\n    for j in range(nC):\r\n    if not hasVisited[i][j]:\r\n    startRow, startCol = i, j\r\n    shape = ConnectedChecker . __getConnectedShape__(\r\n        img, hasVisited, nR, nC, startRow, startCol)\r\n    if shape:\r\n    totalShapes += 1\r\n    return totalShapes\r\n    # ---end function\r\n    # end class\r\n    # driver for Kata\r\n    def connected_components(img):\r\n    c = ConnectedChecker()\r\n    return c . countShapes(img)\r\n    # end driver\r\n",
  "5c09ccc9b48e912946000157": "def peak_height(mountain):\r\n    M = {(r, c) for r, l in enumerate(mountain)\r\n         for c in range(len(l)) if l[c] == '^'}\r\n    h = 0\r\n    while M:\r\n    M -= {(r, c)\r\n          for r, c in M if {(r, c + 1), (r, c - 1), (r + 1, c), (r - 1, c)} - M}\r\n    h += 1\r\n    return h\r\n",
  "62cf27c0bf218d8f23bd1ca1": "def center(n): return ((n + 2) * n + 5) / 8 * (n % 4 == 1)\n",
  "58e6d83e19af2cb8840000b5": "from heapq import *\r\nfrom collections import defaultdict\r\nfrom itertools import product\r\nINF, STEP = float('inf'), (2 * 2 + 1) * * .5\r\nK_MOVES = tuple((a, b) for a, b in product(\r\n    range(- 2, 3), repeat=2) if abs(a) + abs(b) == 3)\r\n\r\n\r\ndef attack(start, end, obst):\r\n\r\n    def h(a, b, xF, yF):\r\n    a, b = a - xF, b - yF\r\n    return (a * a + b * b) * * .5 / STEP\r\n    soFar = INF\r\n    qS, qE = [(0, 0, start)], [(0, 0, end)]\r\n    sS, sE = defaultdict(lambda: INF), defaultdict(lambda: INF)\r\n    steps = ((qS, sS, sE, * end), (qE, sE, sS, * start))\r\n    for t in obst:\r\n        sS[t] = sE[t] = 0\r\n    sS[start] = sE[end] = 0\r\n    while qS and qE:\r\n    for q, s, sO, xF, yF in steps:\r\n\r\n    ch, c, pos = heappop(q)\r\n    x, y = pos\r\n    if ch > soFar:\r\n        return soFar\r\n    if pos in sO:\r\n    lenPath = s[pos] + sO[pos]\r\n    if lenPath > soFar:\r\n        return soFar\r\n    soFar = lenPath\r\n    else:\r\n    c += 1\r\n    for dx, dy in K_MOVES:\r\n    a, b = p = x + dx, y + dy\r\n    prev = s[p]\r\n    if c < prev:\r\n    heappush(q, (c + h(a, b, xF, yF), c, p))\r\n    s[p] = c\r\n    return soFar if soFar != INF else None\r\n",
  "62287e1766b26a0024b9e806": "from itertools import product\nfrom math import atan2, pi\nMOVES = [(2, 1), (1, 2), (- 1, 2), (- 2, 1),\n         (- 2, - 1), (- 1, - 2), (1, - 2), (2, - 1)]\nKNGIHT = 5 * * .5\nCLOCK = 2 * pi\n\n\ndef knight_path(* pnts):\n    (a, b), (i, j) = pnts\n    ang = atan2(j - b, i - a)\n    da, db = min(MOVES, key=smallestAngleWith(ang))\n\n    isSameSide = sameSideOfPredFactory(i - a, j - b, da, db)\n    movesOnSameSide = ((di, dj) for di, dj in MOVES if isSameSide(di, dj))\n\n    opp = ang + pi if ang < 0 else ang - pi\n    di, dj = min(movesOnSameSide, key=smallestAngleWith(opp))\n\n    x, y = crossingPoint(a, b, da, db, i, j, di, dj)\n    n1, n2 = getSteps(x, y, a, b), getSteps(x, y, i, j)\n\n    path1 = nStepsWithDirFrom(n1, da, db, a, b)\n    path2 = nStepsWithDirFrom(n2, di, dj, i, j)\n    link = pathsLinker(path1[- 2:], path2[- 2:])\n    path = behead(path1, link[0])\n    path . extend(link)\n    path . extend(reversed(behead(path2, link[- 1])))\n\n    return path\n    def smallestAngleWith(ang):\n    def mapper(dxy):\n    other = atan2(dxy[1], dxy[0])\n    v = (other - ang) % CLOCK\n    return min(abs(v), abs(CLOCK - v))\n    return mapper\n    def sameSideOfPredFactory(a, b, x, y):\n    ref = a * y - b * x\n    cmp = (ref > 0) - (ref < 0)\n    def predicate(i, j):\n    v = a * j - b * i\n    return cmp == (v > 0) - (v < 0)\n    return predicate\n    def crossingPoint(a, b, da, db, i, j, di, dj):\n    if (da, db) == (- di, - dj):\n    return i, j  # straight line => build one shot to the end...\n    v1 = b - a * db / da\n    v2 = j - i * dj / di\n    x = (v2 - v1) * da * di / (db * di - dj * da)\n    y = x * db / da + v1\n    return x, y\n    def getSteps(x, y, a, b):\n    return int(((a - x) * * 2 + (b - y) * * 2) * * .5 / KNGIHT)\n\n    def nStepsWithDirFrom(n, di, dj, i, j):\n    return [(i + di * z, j + dj * z) for z in range(n + 1)]\n\n    def behead(path, p):\n    while path[- 1] != p:\n        path . pop()\n    path . pop()\n    return path\n\n    def cachedLinks():\n        # all shortest paths from (0,0) to any position in a \"range(-8,9)\" around (x and y)\n    shortestTo = {(0, 0): [(0, 0)]}\n    bag = {(0, 0)}\n    while bag:\n    tmp = set()\n    for pos in bag:\n    for dx, dy in MOVES:\n    neigh = a, b = pos[0] + dx, pos[1] + dy\n    if - 9 < a < 9 and - 9 < b < 9 and neigh not in shortestTo:\n    shortestTo[neigh] = shortestTo[pos] + [neigh]\n    tmp . add(neigh)\n    bag = tmp\n    def getLinkFor(pair):\n    return shortestTo[tuple(x - a for a, x in zip(* pair))]\n\n    def pathHeadsLinker(head1, head2):\n    (a, b), _ = bestPair = min(product(head1, head2),\n                               key=lambda pair: len(getLinkFor(pair)))\n    return [(a + x, b + y) for x, y in getLinkFor(bestPair)]\n    return pathHeadsLinker\n    pathsLinker = cachedLinks()\n\n    \"\"\" \n Two to three times faster than the usual approaches. \n Here is why: \n When linking A to B, most soluitons try to stay as close as possible from the straight \n line between the two points. But once you got a shortest path, any permutation of its \n moves is also a shortest path. \n So, this shortest path (on the left) with shenanigans around B to get the shortest path, \n can be rearranged this way (on the right): \n A A \n \\ / \n / / \n / */ \n / */* \n \\ *\\ \n / \\ \n \\* \\ \n *B* B \n * \n \n So, here you go: \n 1) Identify the two optimal directions to use \n 2) Find the crossing point of the two lines and build straight paths up to that point \n 3) Take the last 2 points on each straight path and find what combination of 2 of them \n giving you the shortest path. \n Those \"links\" are computed once and cached, so that step is O(1) as well. \n 4) Assemble all the parts, \"beheading\" the redundant/useless points of the two straight lines \n Impact on performances: \n - 99% of the path is built with 2 list comprehensions (which are by assence faster than \n appending in a loop) \n - There is no decision to be done at each step (turning right or left), here. The only \n decisions to make are right at the start, to determine the 2 optimal directions to use. \n This aspect is critical about the performances because it makes the step by step approach \n O(N*x), with x a small constant factor (picking the right direction at each step), while \n the above approach is in comparison like O(N+x), because the optimal directions are picked \n once at the beginning. \n Both are linear in time, but the constant factor is lower here. \n \"\"\"\n",
  "62275b5bf6c169002379fa65": "def divide_and_multiply(n):\r\n    s, d = 1, []\r\n    for x in n:\r\n    b = x & - x\r\n    d . append(x / / b)\r\n    s *= b\r\n    return (sum(d) + max(d) * (s - 1)) % (10 * * 9 + 7)\r\n",
  "619d3f32156bbd000896463c": "# Prisoner 0 is the leader\n# He always leaves the lightbulb on\n# If he found the lightbulb off 100 times, it means everyone visited at least once\n# Other prisoners must turn off the lightbulb only if:\n# - they never turned it off before\n# - it is currently on\n# TLDR:\n# - turning the lightbulb on means \"I visited\"\n# - do not turn it on if you already did it\n# - prisoner 0 is in charge of resetting the lightbulb\ndef living_room(prisoner_number, lightbulb, previous_visits):\n    if prisoner_number == 0:\n    if len(previous_visits) - sum(previous_visits) == 100:\n    return True, True\n    return True, False\n    if lightbulb and not any(previous_visits):\n    return False, False\n    return lightbulb, False\n",
  "62cecd4e5487c10028996e04": "from math import ceil\n\n\ndef race_podium(b):\n    f = ceil((b) / 3) + 1\n    s = min(f - 1, b - f - 1)\n    return s, f, b - f - s\n",
  "62c75ce198d93d02a42ca7a3": "def most_points(m, n):\r\n    return [(0, 0)] if n == m == 1 else [(0, y) for y in range(m > 1, n)] + [(x, 0) for x in range(n > 1, m)]\r\n",
  "62b2072d62c66500159693ff": "from itertools import permutations\r\n# Missing digits\r\n\r\n\r\ndef get_unknown(puzzle):\r\n    return set(range(1, 10)) - set(puzzle)\r\n\r\n    # All possible tries to solve the puzzle\r\n    def get_possible(puzzle):\r\n    for perm in map(iter, permutations(get_unknown(puzzle))):\r\n    yield [x or next(perm) for x in puzzle]\r\n\r\n    # Check if a solution is valid\r\n    def check_possible(result):\r\n    return sum(result[: 4]) == sum(result[3: 7]) == sum(result[6:]) + result[0]\r\n\r\n    # Main function\r\n    def magic_triangle_solutions(puzzle):\r\n    return [* filter(check_possible, get_possible(puzzle))]\r\n",
  "62ca07aaedc75c88fb95ee2f": "def ascend_descend(l, m, M): return '' . join(\n    map(str, l * [* range(m, M + 1), * range(M - 1, m, - 1)]))[: l]\n",
  "62c93765cef6f10030dfa92b": "def solution(start, finish):\r\n    return sum(divmod(finish - start, 3))\r\n",
  "62cb487e43b37a5829ab5752": "FILTERS = set(FILTERS)\r\n\r\n\r\ndef is_valid(query: str) - > bool:\r\n    return all(u . split(':')[0] in FILTERS for u in query . split() if ':' in u)\r\n",
  "62c74a39fba7810016e601b1": "def sum_edges(n): return (n, n * (5 * n * n - 3 * n + 10) / 6 - 2)[n > 1]\n",
  "62cc917fedc75c95ef961ad1": "HEAVENLY_STEMS = '\u7532\u4e59\u4e19\u4e01\u620a\u5df1\u5e9a\u8f9b\u58ec\u7678'\r\nEARTHLY_BRANCHES = '\u5b50\u4e11\u5bc5\u536f\u8fb0\u5df3\u5348\u672a\u7533\u9149\u620c\u4ea5'\r\nYEAR = dict(\r\n    zip(map('' . join, zip(HEAVENLY_STEMS * 6, EARTHLY_BRANCHES * 5)), range(60)))\r\n\r\n\r\ndef how_old(birth_year, present_year):\r\n    a, b = YEAR[birth_year], YEAR[present_year]\r\n    return b - a + 60 * (a >= b)\r\n",
  "62c7b2ebb8d7c8005e3b1f23": "from math import factorial\r\nfrom functools import lru_cache\r\nf = lru_cache(maxsize=None)(factorial)\r\n\r\n\r\ndef pascal_pyr_layer(n):\r\n    return [[f(n - 1) / / f(n - 1 - i) / / f(i - j) / / f(j) for j in range(i + 1)] for i in range(n)]\r\n",
  "62c702489012c30017ded374": "import asyncio\n\n\nasync def request_manager(n: int) - > str:\n    return '' . join(await asyncio . gather(* (send_request() for _ in range(n))))\n",
  "62c4ad0e86f0166ec7bb8485": "def sum_corners(n): return n * n + 2 * (n > 1)\n",
  "62c376ce1019024820580309": "def get_cell_addresses(cell_range):\r\n    x, y = cell_range . split(':')\r\n    if x == y:\r\n        return []\r\n    a, b, c, d = ord(x[0]), abs(int(x[1:])), ord(y[0]), abs(\r\n        int(y[1:]))  # abs because the tests give some negative values\r\n    return [f\" { chr ( i )}{ j } \" for j in range(b, d + 1) for i in range(a, c + 1)]\r\n",
  "62b3356dacf409000f53cab7": "import re\r\nfrom itertools import *\r\n\r\n\r\ndef string_generator(pattern):\r\n    format = re . sub(\r\n        '\\[.*?\\]', '{}', pattern . replace('{', '{{'). replace('}', '}}'))\r\n    generators = [generator(x) for x in re . findall(\r\n        '\\[.*?\\]', pattern . replace(' ', ''))]\r\n    yield from starmap(format . format, zip(* generators)) if generators else repeat(pattern)\r\n\r\n    def generator(s):\r\n    match re . split('=|,', s[1: - 1]):\r\n    case[\"INC_INT\", * args]: yield from inc_int(* map(int, args))\r\n    case[\"INC_FLOAT\", * args]: yield from inc_float(precision(args), * map(float, args))\r\n    case[\"INTERVAL\", * args]: yield from interval(* map(int, args))\r\n    case[\"PERIODIC\", * args]: yield from periodic(* map(int, args))\r\n\r\n    def precision(args):\r\n    return max((len(x . split('.')[1]) for x in args), default=1)\r\n\r\n    def inc_int(start=1, step=1):\r\n    yield from count(start, step)\r\n\r\n    def inc_float(precision, start=0.1, step=0.1):\r\n    yield from map(f'{{ :. { precision } f}} ' . format, count(start, step))\r\n\r\n    def interval(first=1, last=None):\r\n    yield from cycle(range(first, (last or first) + 1))\r\n\r\n    def periodic(start=1, n=1):\r\n    yield from (start + x / / n for x in count())\r\n",
  "62bf879e8e54a4004b8c3a92": "def guess(colours, guesses, hats):\r\n    return colours[- sum(colours . index(c) for c in guesses + hats) % len(colours)]\r\n",
  "62b0c1d358e471005d28ca7e": "from itertools import cycle\r\n\r\n\r\ndef program(field, max_instructions):\r\n    dirs, fld = {'R': (0, 1), 'D': (1, 0)}, field . split('\\n')\r\n    ln = len(fld)\r\n    seen = {(0, 0)}\r\n    queue = [[(0, 0, '')]]\r\n\r\n    def is_path(path):\r\n    x, y = 0, 0\r\n    for p in cycle(path):\r\n    x, y = x + dirs[p][0], y + dirs[p][1]\r\n    if x >= ln or y >= ln:\r\n        return True\r\n    if fld[x][y] == 'H':\r\n        return False\r\n    for _ in range(max_instructions):\r\n    cur = []\r\n    for q in queue:\r\n    for k, (dx, dy) in dirs . items():\r\n    x, y = q[- 1][0] + dx, q[- 1][1] + dy\r\n    path = '' . join(x for _, _, x in q) + k\r\n    if x >= ln or y >= ln or is_path(path):\r\n    return path\r\n    if (x, y) not in seen and fld[x][y] != 'H':\r\n    cur . append(q + [(x, y, k)])\r\n    queue = cur[:]\r\n",
  "62bd9616aced6376cc37950e": "def pizza(n): return n * ~ - n * (n * n - 5 * n + 18) / / 24 + 1\n",
  "62bdd252d8ba0e0057da326c": "BASE = ord(\"a\") - 1\r\n\r\n\r\ndef encrypt(word, n):\r\n    xs = [x - BASE for x in map(ord, word)]\r\n    for _ in range(n):\r\n    xs[:] = (x * 3 - 5 for x in xs)\r\n    return xs\r\n    def decrypt(encrypted_word, n):\r\n    xs = encrypted_word[:]\r\n    for _ in range(n):\r\n    xs[:] = ((x + 5) / / 3 for x in xs)\r\n    return \"\" . join(chr(x + BASE) for x in xs)\r\n",
  "62b708450ee74b00589fcaba": "from datetime import datetime, timedelta\r\n# Encode the given velocity and interval information\r\n# (Velocity, start kms, stop kms)\r\nFAST = [\r\n    (34, 0, 200),\r\n    (32, 200, 400),\r\n    (30, 400, 600),\r\n    (28, 600, 1000),\r\n    (26, 1000, 1200),\r\n    (25, 1200, 1800),\r\n    (24, 1800, 2000),\r\n]\r\nSLOW = [\r\n    (20, 0, 60),\r\n    (15, 60, 600),\r\n    (11.428, 600, 1000),\r\n    (13.333, 1000, 1200),\r\n    (11, 1200, 1400),\r\n    (10, 1400, 1800),\r\n    (9, 1800, 2000),\r\n]\r\n\r\n\r\ndef duration_to_hms(duration):\r\n    \"\"\"Convert duration in decimal hours to hours, minutes, seconds to nearest second\"\"\"\r\n    hours = int(duration)\r\n    residue = duration - hours\r\n    mins = int(residue * 60)\r\n    residue -= mins / 60\r\n    secs = round(residue * 3600)\r\n    return hours, mins, secs\r\n    def calc_interval_and_durations(vel, start, stop):\r\n    \"\"\"Given velocity and start/stop distances calculate: \r\n 1. The interval. \r\n 2. The duration for full interval in decimal time. \r\n 3. The hours/minutes/seconds of the duration (to nearest second) \r\n \"\"\"\r\n    interval = stop - start\r\n    duration = interval / vel\r\n    hours, mins, secs = duration_to_hms(duration)\r\n    return interval, duration, hours, mins, secs\r\n    # Convert values to something a little more useful for calculation later\r\n    fast = [\r\n        calc_interval_and_durations(vel, start, stop)\r\n        for vel, start, stop in FAST\r\n    ]\r\n    slow = [\r\n        calc_interval_and_durations(vel, start, stop)\r\n        for vel, start, stop in SLOW\r\n    ]\r\n\r\n    def hh_mm_to_time(s):\r\n    \"\"\" \r\n Convert a string in the format HH:MM to hours and minutes after 2000-01-01 00:00:00.0 \r\n \"\"\"\r\n    hh, mm = s . split(':')\r\n    hh, mm = int(hh), int(mm)\r\n    return datetime(2000, 1, 1, hh, mm, 0)\r\n\r\n    def time_to_control(dt):\r\n    \"\"\" \r\n Convert a timestamp into the control format \r\n \"\"\"\r\n    if dt . second >= 30:\r\n       # Round up a minute\r\n    dt += timedelta(minutes=1)\r\n    hh_mm = f' { dt : % H : % M } '\r\n    if dt . day > 1:\r\n    return f' { hh_mm } (+ { dt . day - 1 } )'\r\n    return hh_mm\r\n    def calculate_control(stages, time, km):\r\n    \"\"\" \r\n Given the stages, the start time and the distance calculate the minimum timestamp for alloted arrival \r\n \"\"\"\r\n    timestamp = hh_mm_to_time(time)\r\n    for interval, duration, hours, mins, secs in stages:\r\n    if interval <= km:\r\n    timestamp += timedelta(hours=hours, minutes=mins, seconds=secs)\r\n    km -= interval\r\n    else:\r\n    hours, mins, secs = duration_to_hms(duration / interval * km)\r\n    timestamp += timedelta(hours=hours, minutes=mins, seconds=secs)\r\n    km = 0\r\n    if km == 0:\r\n    break\r\n    return timestamp\r\n    def control_open_time(time, km):\r\n    \"\"\" \r\n Given start time and distance find the open control time to nearest minute \r\n \"\"\"\r\n    timestamp = calculate_control(fast, time, km)\r\n    return time_to_control(timestamp)\r\n\r\n    def control_close_time(time, km):\r\n    \"\"\" \r\n Given start time and distance find the close control time to nearest minute \r\n \"\"\"\r\n    timestamp = calculate_control(slow, time, km)\r\n    # Allow for start time spread\r\n    timestamp += timedelta(hours=1)\r\n    return time_to_control(timestamp)\r\n",
  "62b931bcb16c630025076970": "# I mean, they work\r\ndef gcd_lcm(x, y):\r\n    if y % x == 0:\r\n    return x, y\r\n",
  "62b3e38df90eac002c7a983f": "import re\r\n\r\n\r\ndef solve(s):\r\n    stk = []\r\n    for m in re . finditer(r'\\[backspace\\](?:\\*(\\d*))?|.', s):\r\n    if m[0]. startswith('[backspace]'):\r\n    n = int(m[1] or 1)\r\n    while n and stk:\r\n        stk . pop()\r\n        n -= 1\r\n    else:\r\n    stk . append(m[0])\r\n    return '' . join(stk)\r\n",
  "62b1860db38ba1739bcaaebf": "def attack_plan(user_count, k):\r\n\r\n    dp = [[[- float(\"inf\")] * 4 for _ in range(k + 1)]\r\n          for _ in range(len(user_count) + 1)]  # [time][attacks][consecutive]\r\n    dp[0][0][0] = 0\r\n    for i, count in enumerate(user_count):\r\n    for r in range(k + 1):\r\n    dp[i + 1][r][0] = max(dp[i + 1][r][0], max(dp[i][r]))  # Stop attack\r\n    if r < k:\r\n    dp[i + 1][r + 1][1] = max(dp[i + 1][r + 1][1], dp[i][r][0])\r\n    dp[i + 1][r + 1][2] = max(dp[i + 1][r + 1][2], dp[i][r][1])\r\n    dp[i + 1][r + 1][3] = max(dp[i + 1][r + 1][3],\r\n                              dp[i][r][2] + count, dp[i][r][3] + count)\r\n\r\n    return max(dp[- 1][- 1])\r\n",
  "62ad72443809a4006998218a": "def like_or_dislike(lst):\r\n\t state = 'Nothing'\r\n for i in lst :\r\n\t\t state = 'Nothing' if i == state else i \r\n return state",
  "62a933d6d6deb7001093de16": "def get_the_vowels(word):\r\n    n = 0\r\n    for i in word:\r\n    if i == \"aeiou\" [n % 5]:\r\n    n += 1\r\n    return n\r\n",
  "62a3855fcaec090025ed2a9a": "from copy import deepcopy\r\n\r\n\r\ndef decode_smoke_signals(days):\r\n    days = deepcopy(days)\r\n    decoded = {}\r\n\r\n    # Keep eliminating signals until the puzzle has been solved\r\n    changed = True\r\n    while changed:\r\n        # Go through day by day and attempt to determine what each signal could be.\r\n    changed = False\r\n    signals = {}\r\n    for day in days:\r\n    for signal in day[0]:\r\n    if not signal in signals:\r\n        # Add all of today's events as possibilities for this signal\r\n    signals[signal] = set([a for a in day[1]])\r\n    else:\r\n        # Remove any previous possibilities that aren't in today's events\r\n    signals[signal] = signals[signal]. intersection(set(day[1]))\r\n\r\n    # Add any signals that were solved to the decoded list and remove them\r\n    # from the days list (and up to 1 instance of each corresponding event)\r\n    for signal, possible in signals . items():\r\n    if len(possible) == 1:\r\n    changed = True\r\n    event = list(possible)[0]\r\n    decoded[signal] = event\r\n    for day in days:\r\n    if signal in day[0]:\r\n    day[0]. remove(signal)\r\n    day[1]. remove(event)\r\n\r\n    return decoded\r\n",
  "62a611067274990047f431a8": "def alternate(n, first_value, second_value):\r\n    return [[first_value, second_value][i % 2] for i in range(n)]\r\n",
  "62a25309b070a3002f53b684": "import numpy as np\n\n\ndef surface_area(m):\n    return 2 * np . count_nonzero(m) + sum(abs(np . diff(m, 1, i, 0, 0)). sum() for i in range(2))\n",
  "62a0a24ed518853c3528683f": "from fractions import Fraction\r\nfrom functools import lru_cache\r\nfrom math import comb, factorial\r\nB = [Fraction(1, 1)]\r\nfor i in range(1, 141):\r\n    B . append(\r\n        1 - sum(comb(i, j) * Fraction(B[j], i - j + 1) for j in range(i)))\r\n\r\n    def build(\r\n        i, x, y): return f\" { abs ( x )}{ f'/ { y } ' * ( y > 1 )} n { f'^ { i } ' * ( i > 1 )} \"\r\n    fact = lru_cache(maxsize=None)(factorial)\r\n\r\n    def equation(k):\r\n    coeff = [build(k + 1, 1, k + 1), '+', build(k, 1, 2)]\r\n    for i in range(2, k + 1):\r\n    if (x := (B[i] * fact(k)) / (fact(i) * fact(k - i + 1))):\r\n    coeff . append(\"-+\" [x > 0])\r\n    coeff . append(build(k - i + 1, * x . as_integer_ratio()))\r\n    return ' ' . join(coeff)\r\n",
  "629e18298f2d21006516e381": "def permuts(n):\r\n    x = [1, 2]\r\n    for i in range(n):\r\n    x . append(x[- 1] + x[- 2])\r\n    return x[n - 1]\r\n",
  "620dd259f7b0000017fc7b45": "from math import gcd\n\n\ndef coins(coin1, coin2):\n    return - 1 if gcd(coin1, coin2) != 1 else (coin1 - 1) * (coin2 - 1) - 1\n",
  "629e4d5f24b98110a83b2d0d": "from functools import partial\r\nfrom re import compile\r\nr1 = partial(compile(r\"(?=[a-z])([^aeiou])\"). sub, r\"\\1o\\1\")\r\nr2 = partial(compile(r\"(?=[A-Z])([^AEIOU])\"). sub, r\"\\1O\\1\")\r\n\r\n\r\ndef robber_encode(sentence):\r\n    return r1(r2(sentence))\r\n",
  "626a887e8a33feabd6ad8f25": "class predicate:\r\n\r\n    def __init__(self, func): self . f = func\r\n    def __call__(self, * a, * * kw): return self . f(* a, * * kw)\r\n\r\n    def __invert__(self): return self . __class__(lambda * a, * * kw: not self . f(* a, * * kw))\r\n    def __or__(self, o): return self . __class__(lambda * a, * * kw: self . f(* a, * * kw) or o . f(* a, * * kw))\r\n    def __and__(self, o): return self . __class__(lambda * a, * * kw: self . f(* a, * * kw) and o . f(* a, * * kw))\r\n",
  "6297d639de3969003e13e149": "from itertools import permutations\r\n\r\n\r\ndef best_route(cities, costs):\r\n    nothome = [x for x in cities if x != 'Notgnihsaw']\r\n    tbl = {city1: {city2: cost for city2, cost in zip(\r\n        cities, row)} for city1, row in zip(cities, costs)}\r\n    return min(([* p, 'Notgnihsaw'] for p in permutations(nothome)), key=lambda tour: sum(tbl[a][b] for a, b in zip(['Notgnihsaw'] + tour, tour)))\r\n",
  "6294a4d0eb816e36363b9079": "from ipaddress import IPv4Address as ip\n\n\ndef match(net_addr: str, wc_mask: str, ipv4_addr: str) - > bool:\n    return int(ip(net_addr)) | int(ip(wc_mask)) == int(ip(ipv4_addr)) | int(ip(wc_mask))\n",
  "628f8211840e153e14346eaa": "from ipaddress import IPv4Network\n\n\ndef network_cidr(ipv4_addr, net_mask):\n    return str(IPv4Network(f' { ipv4_addr } / { net_mask } ', strict=False))\n",
  "62949a3deb816e36363b8ee6": "def is_wristband(arr):\r\n    note = {1, 2, 3, 4}\r\n    for i, j in zip(arr, arr[1:]):\r\n    if 1 in note and (len(set(i)) != 1 or len(set(j)) != 1):\r\n    note . remove(1)\r\n    if 2 in note and i != j:\r\n    note . remove(2)\r\n    if 3 in note and i[: - 1] != j[1:]:\r\n    note . remove(3)\r\n    if 4 in note and j[: - 1] != i[1:]:\r\n    note . remove(4)\r\n    if not note:\r\n    return False\r\n    return True\r\n",
  "628e3ee2e1daf90030239e8a": "def interlockable(a, b):\r\n    return not a & b\r\n",
  "628e6f112324192c65cd8c97": "def prescribe(d, a, b):\r\n    return max(x + (d - x) / / a * a for x in range(0, d + 1, b))\r\n",
  "629049687438580064f0e6dd": "import itertools\n\n\ndef pack(m): return tuple(tuple(sum(g)\n                                for k, g in itertools . groupby(r) if k) for r in m)\n\n\ndef encode(nonogram): return (pack(zip(* nonogram)), pack(nonogram))\n",
  "628df6b29070907ecb3c2d83": "def solution(s, t):\n\n    # Sprints are optimally placed at the end of the race\n    ''' \n    It is always beneficial to sprint at the end of the race \n    Sprints are optimally placed at the end of the race \n    e.g. RRRR...(SR)[n]S \n    We take a run without sprints are keep adding sprints at \n    the latest possible point until adding a sprint stops \n    increasing the total distance travelled \n\n    We can treat the final sprint as an add-on and count the number of \n    (SR) units we introduce into the race. Looking at this, each add \n    on unit changes the distance from 2*s to (3*s-3*n), so altering \n    the distance by (s-3*n). We find the largest n<s for which (s-3*n)>0 \n    to find the trade-off point. If this is longer than the race in general \n    we do as many (SR) as possible. \n\n\n    '''\n    trade_off = s / / 3\n    # trade off must be less than max available slots\n    best_n_rs = min((t - 1) / / 2, trade_off)\n    def d(n): return s * t + s * (n + 1) - 3 / 2 * n * (n + 1)\n    return d(best_n_rs)\n",
  "628d253eb110f3270a8a1789": "def determinateValue(x, y, n): return 1 + [y, x][(q := x + y) % 2] + q * (q + 1) / / 2 - max(q - n + 1, 0) * * 2\n",
  "628d1c71b091df00651f0d83": "# Return a list of 2-tuples of integers, representing\n# the integer coordinates of ALL possible squares that\n# satisfy the minimum number of total moves requirement\nfrom statistics import median_low, median_high\n\n\ndef move_grains(grains):\n    xcoords = [x for x, _ in grains]\n    ycoords = [y for _, y in grains]\n    return [(x, y) for x in range(median_low(xcoords), median_high(xcoords) + 1) for y in range(median_low(ycoords), median_high(ycoords) + 1)]\n",
  "628bd39474087000456cd126": "# The final state is the binary representation of\n# the input, n, in reverse i.e. reading from left\n# to right gives lsb to msb.\n# So number of bubbles in final state in box i\n# is equal to b_i from binary repr of n.\n# To obtain 1 bubble in box i requires:\n# S(i) = 2*S(i-1) + 1 steps with S(0)=0\n# Solving the recurrence gives:\n# S(i) = 2**i - 1\n# Hence number of steps in total to place all bubbles\n# is sigma{ b_i * S(i) } over all binary digits of n\n# = sigma{ b_i * 2**i } - sigma{ b_i }\n# = n - sigma{bits in n}\ndef moving_bubbles(n):\n    return n - n . bit_count()\n",
  "628b60fcb7d0770ddea8877d": "def get_status(wins):\n    A = B = 0\n    for n in wins:\n    if n == \"Anna\":\n        A += 1\n    else:\n        B += 1\n    if (A > 3 or B > 3) and abs(A - B) > 1:\n    return f\" { n } WINS\"\n    return (\"Anna ADVANTAGE\" if B + 1 == A > 3 else\n            \"Bob ADVANTAGE\" if A + 1 == B > 3 else\n            [\"0a\", \"15a\", \"30a\", \"DEUCE\"][min(A, 3)] if A == B else\n            f\"Bob {[ 0 , 15 , 30 , 40 ][ B ]} , Anna {[ 0 , 15 , 30 , 40 ][ A ]} \")\n",
  "628b633fb7d0770d57a88809": "from copy import deepcopy\r\nRADIATION_SOURCES = {\r\n    # You can easily modify:\r\n    # symbol: ((x, y, val), ...), # affected cells and impact value\r\n    'A': (\r\n         (- 1, - 1, 1), (0, - 1, 1), (1, - 1, 1),\r\n         (- 1, 0, 1), (1, 0, 1),\r\n         (- 1, 1, 1), (0, 1, 1), (1, 1, 1),\r\n    ),\r\n    'B': (\r\n         (0, - 2, 2),\r\n        (0, - 1, 2),\r\n        (- 2, 0, 2), (- 1, 0, 2), (1, 0, 2), (2, 0, 2),\r\n        (0, 1, 2),\r\n        (0, 2, 2),\r\n    ),\r\n    'C': (\r\n         (- 2, - 2, 3), (2, - 2, 3),\r\n        (- 1, - 1, 3), (1, - 1, 3),\r\n\r\n        (- 1, 1, 3), (1, 1, 3),\r\n        (- 2, 2, 3), (2, 2, 3),\r\n    ),\r\n}\r\n\r\n\r\ndef calculate_cells(field):\r\n    cp_field = deepcopy(field)\r\n    width = (height := len(cp_field)) and len(cp_field[0])\r\n    for y in range(height):\r\n    for x in range(width):\r\n    for a, b, val in RADIATION_SOURCES . get(cell := cp_field[y][x], []):\r\n    if 0 <= (ny := y + b) < height and 0 <= (nx := x + a) < width:\r\n    if (nv := cp_field[ny][nx]) not in RADIATION_SOURCES:\r\n    cp_field[ny][nx] = str(int(nv) + val)\r\n    return cp_field\r\n",
  "628ba76a85a2d500649da696": "def ipv4_address_class(ipv4_addr):\r\n    n = int(ipv4_addr . split(\".\")[0])\r\n    return \" EDCBA\" [(n <= 127) + (n <= 191) + (n <= 223) + (n <= 239) + (n <= 255)]\r\n",
  "6288de23ab7ede0031602521": "def ipv4_to_binary(ipv4_addr: str) - > str:\r\n    return \".\" . join(f\" { octet :0 8 b } \" for octet in map(int, ipv4_addr . split(\".\")))\r\n",
  "626ec08b40a15e2d250575cf": "from math import comb\n\n\ndef use_all_symbols(n, a):\n    return sum((- 1) * * i * comb(a, i) * (a - i) * * n for i in range(a + 1))\n",
  "60245d013b9cda0008f4da8e": "N = \"Alab,Alas,Am,Ari,Ark,Ca,Col,Con,De,Di,F,Ge,Gu,H,Id,Il,In,Io,Ka,Ke,L,Mai,Mar,Mas,Mic,Min,Missi,Misso,Mo,Neb,Nev,New H,New J,New M,New Y,North C,North D,Northe,Oh,Ok,Or,Pe,Pu,R,South C,South D,Ten,Tex,U.,Ut,Ve,Vi,Wa,We,Wi,Wy\" . split(\r\n    \",\")\r\nC = \"AL AK AS AZ AR CA CO CT DE DC FL GA GU HI ID IL IN IA KS KY LA ME MD MA MI MN MS MO MT NE NV NH NJ NM NY NC ND MP OH OK OR PA PR RI SC SD TN TX VI UT VT VA WA WV WI WY\" . split()\r\n\r\n\r\ndef abbr(s):\r\n    return next(c for n, c in zip(N, C) if s . startswith(n))\r\n",
  "627183ce5aa8580057592940": "def optimal_conversations(n):\r\n    if n == 2:\r\n        return [(1, 2)]\r\n    if n == 3:\r\n        return [(1, 2), (1, 3), (2, 3)]\r\n\r\n    # Optimal solution for 4 people\r\n    res = [(1, 2), (3, 4), (1, 3), (2, 4)]\r\n\r\n    # If more than 4 people, just get their information at first and give them the (1, 2, 3, 4) at the end\r\n    above_4 = [(1, i) for i in range(5, n + 1)]\r\n\r\n    return above_4 + res + above_4\r\n",
  "5597ca93d5b5b37db8000066": "from functools import cache\r\nfrom gmpy2 import is_prime, next_prime\r\n\r\n\r\n@ cache\r\ndef \u03c3(m, n):\r\n    s, p = 1, 2\r\n    while n > 1:\r\n    while n % p:\r\n    p = n if is_prime(n) else next_prime(p)\r\n    i = 1\r\n    while n % p == 0:\r\n    n / /= p\r\n    i += 1\r\n    s *= (p * * i - 1) / / (p - 1)\r\n    return s if m == 1 else \u03c3(m - 1, s)\r\n\r\n    def first_mk_perfectnumber(m, k):\r\n    i = 1\r\n    while \u03c3(m, i) != k * i:\r\n    i += 1\r\n    return i\r\n",
  "626d691649cb3c7acd63457b": "import re\r\n\r\n\r\ndef champion_rank(pilot: int, events: str) - > int:\r\n    arr = [i for i in range(1, 21)]\r\n    for x in re . findall(\"\\d+ [IO]\", events):\r\n    r, t = x . split()\r\n    if t == 'I':\r\n    arr . remove(int(r))\r\n    else:\r\n    j = arr . index(int(r))\r\n    arr[j], arr[j - 1] = arr[j - 1], arr[j]\r\n    return arr . index(pilot) + 1 if pilot in arr else - 1\r\n",
  "626d96eb49cb3c7a2f634bbf": "def white_black_frogs(n):\r\n    return '' . join('j' * i + 'wb' [i & 1] for i in range(n)) + '' . join('j' * (n - i) + 'bw' [(i + n) & 1] for i in range(n))\r\n",
  "626b949b40a15ed6e7055b8f": "def is_reachable(s, e):\r\n    ss, es = ['' . join(b[y][x] for y, x in [(0, 0), (1, 2), (2, 0), (0, 1),\r\n                        (2, 2), (1, 0), (0, 2), (2, 1)] if b[y][x] != '_') for b in (s, e)]\r\n    return s[1][1] == e[1][1] and ss in es * (1 + (len(es) < 8))\r\n",
  "62013b174c72240016600e60": "def resolver(guess, solution):\r\n    letters, answer = {}, ['b'] * len(guess)\r\n    for i, (g, s) in enumerate(zip(guess, solution)):\r\n    if g == s:\r\n        answer[i] = 'g'\r\n    else:\r\n        letters[s] = letters . get(s, 0) + 1\r\n    for i, (g, s) in enumerate(zip(guess, solution)):\r\n    if g != s and letters . get(g, 0) > 0:\r\n    answer[i] = 'y'\r\n    letters[g] -= 1\r\n    return '' . join(answer)\r\n",
  "626868a414c0146ddbe0e6be": "def limited_king(n):\r\n    res = n % 3 == 1 and [(0, j) for j in range(n)] or []\r\n\r\n    for x in range(bool(res), n, 3):\r\n    res . extend((k, l) for l in range(n - 1, - 1, - 1)\r\n                 for k in range(x, x + 2))\r\n    if x + 2 != n:\r\n    res . extend((x + 2, j) for j in range(n))\r\n\r\n    return res\r\n",
  "6267a007e67fba0058725ad2": "def partitions(n):\r\n    T = [1] + [0] * n\r\n    for i in range(1, n + 1):\r\n    for j in range(n, i - 1, - 1):\r\n    T[j] += T[j - i]\r\n    return T[- 1]\r\n",
  "62665d43e67fbaf7b37212d2": "def bell(n):\r\n    return [(i + 1) * (n - i) for i in range(n)]\r\n",
  "62652939385ccf0030cb537a": "def promotion(board):\r\n    pieces = [(i, j) for i, r in enumerate(board)\r\n              for j, p in enumerate(r) if p != ' ']\r\n    if not len(pieces) == 2:\r\n        return []\r\n    a, b = pieces\r\n    if a[0] == b[0] or a[1] == b[1]:\r\n    return ['queen', 'rook']\r\n    if {abs(a[0] - b[0]), abs(a[1] - b[1])} == {1, 2}:\r\n    return ['knight']\r\n    if abs(a[0] - b[0]) == abs(a[1] - b[1]):\r\n    return ['queen', 'bishop']\r\n    return []\r\n",
  "6262f9f7afc4729d8f5bef48": "def white_black_areas(cs, rs):\r\n    r_even, r_odd = sum(rs[1:: 2]), sum(rs[:: 2])\r\n    c_even, c_odd = sum(cs[1:: 2]), sum(cs[:: 2])\r\n    return (c_odd * r_odd + c_even * r_even, r_even * c_odd + r_odd * c_even)\r\n",
  "625d02d7a071210017c8f0c3": "def line_up(hints):\r\n    graph = dict((a, b) if side == 'right' else (b, a)\r\n                 for a, _, b, _, _, side in map(str . split, hints))\r\n    start = (set(graph) - set(graph . values())). pop()\r\n    queue = []\r\n    while start:\r\n    queue . append(start)\r\n    start = graph . get(start)\r\n    return queue\r\n",
  "615dd90346a119004af6d916": "from itertools import count\nfrom math import sin\n\n\ndef taylors_sine_terms(x: float, epsilon: float) - > int:\n    sin_x = sin(x)\n    approx = 0\n    fact = 1\n    for i in count(1):\n    approx -= (- 1) * * i * x * * (2 * i - 1) / fact\n    if abs(sin_x - approx) < epsilon:\n        return i\n    fact *= 2 * i * (2 * i + 1)\n",
  "625ea5c1a071210065c923af": "def plastic_balance(L):\r\n    if L and L[0] + L[- 1] != sum(L[1: - 1]):\r\n        return plastic_balance(L[1: - 1])\r\n    return L\r\n",
  "625d1c5b2f6c2c00300d97b7": "def xorr(n):\r\n    return (n, 1, n + 1, 0)[n % 4]\r\n\r\n    def xor_reduction(m, n):\r\n    return xorr(m - 1) ^ xorr(n)\r\n",
  "6255e6f2c53cc9001e5ef629": "from collections import Counter\r\n\r\n\r\ndef wordle(wordlist, guesses):\r\n    for g, r in guesses:\r\n    z = Counter(d for d, p in zip(g, r) if p != '-')\r\n    wordlist = [w for w in wordlist if all((p == 'G') == (c == d) and not (p == '-' and w . count(\r\n        d) > z[d]) for c, d, p in zip(w, g, r)) and all(w . count(c) >= v for c, v in z . items())]\r\n    return wordlist\r\n",
  "624f3171c0da4c000f4b801d": "def barista(coffees, n):\r\n    coffees = sorted([v for v in coffees if v])\r\n    times = coffees[: n]\r\n    for v in coffees[n:]:\r\n    times . append(times[- n] + 2 + v)\r\n    return sum(times)\r\n",
  "62524390983b35002c8ff1e5": "def mul37(num):\n    k = (2 * num + 6) / / 7\n    a, b = 7 * k - 2 * num, num - 3 * k\n    return f'3 * { a } + 7 * { b } '\n",
  "624fc787983b3500648faf11": "def conceal(msg, pixels):\r\n    bits = '' . join(f' { ord ( c ) : 0 > 8 b } .' for c in msg)\r\n    if len(bits) <= len(pixels) * 3:\r\n    bits = iter(bits)\r\n    return [[mix(v, next(bits, \".\")) for v in p] for p in pixels]\r\n\r\n    def mix(v, b):\r\n    return v if b == \".\" else v >> 1 << 1 | int(b)\r\n",
  "624dfbc87ee0d200157ad483": "def interweave(a, b):\n    b = sorted(list(b))\n    i, j, s = 0, len(b) - 1, []\n    for c in a:\n    match c:\n    case '<':\n    s . append(b[i])\n    i += 1\n    case other:\n    s . append(b[j])\n    j -= 1\n    s . append(b[i])\n    return s\n    # from itertools import permutations, zip_longest\n    #\n    # def interweave(ineqs, ints):\n    # for xs in permutations(ints):\n    # #print(s)\n    # s = ''.join([str(a) if o is None else f\"{a}{o}\" for a,o in zip_longest(xs,ineqs)])\n    # r = eval(s)\n    # if r:\n    # return s\n",
  "624e0a4c3e1d7b0031588666": "def recurrence(values):\n    # let's take the first item as nadir, the previous item is temporarily equal to nadir\n    prev = nadir = values[0]\n    counter = 0  # a counter of ever higher successive values\n    bio = False  # 3 consecutive rising PSA values after reaching the nadir value, now it's False\n    for val in values[1:]:  # get next value from the list\n    if val < nadir:  # new nadir?\n    nadir = val  # if yes we start counting again, so:\n    bio = False  # - reset the bio\n    counter = 0  # - reset the counter\n    elif val > prev:  # if we detected an increase:\n    counter += 1  # - mark it\n    else:  # if we detected not an increase:\n    counter = 0  # - reset the counter to count again\n    prev = val  # remember previous item\n    if counter > 2:  # if we have 3 consecutive rising PSA values:\n    bio = True  # - we found 'biochemical recurrence'\n    return bio\n",
  "62443a1ea8fca9002346d72c": "def winner(choices, p1, p2):\r\n    if p1 == p2:\r\n    return \"Draw!\"\r\n    r = (choices . index(p2) - choices . index(p1)) % len(choices)\r\n    if r == len(choices) / 2:\r\n    return \"Draw!\"\r\n    if r < len(choices) / 2:\r\n    return \"Player 2 won!\"\r\n    return \"Player 1 won!\"\r\n",
  "6243819a58ad06b6c663d32b": "def next_pos(s): return [f + r for f in 'abcdefgh' for r in '12345678' if ~ int(f + r + s, 24) * * 4 % 577 ^ 4 < 4]\n",
  "6202149e89771200306428f0": "def is_possible(db: dict) - > bool:\r\n    db = dict(db)\r\n    stk = list(db)\r\n    day = [0] * len(db)\r\n\r\n    while stk:\r\n    a = stk . pop()\r\n    if a not in db:\r\n        continue\r\n    lst = db . pop(a)\r\n    day[a] = day[a] or 1\r\n    oppDay = day[a] ^ 3\r\n    for b in lst:\r\n    if day[b] and day[b] != oppDay:\r\n        return False\r\n    day[b] = oppDay\r\n    stk . extend(lst)\r\n    return True\r\n",
  "62396d476f40250024bcfce9": "# return the minimum number of stops, otherwise -1\ndef get_stops(up, down, n_floors, floor):\n    visited = {1}\n    queue = [(1, 0)]\n    while queue:\n        fl, stops = queue.pop(0)\n        if fl == floor: return stops\n        for f in [fl+up, fl-down]:\n            if 1 <= f <= n_floors and not f in visited:\n                visited.add(f)\n                queue.append((f, stops+1))\n    return -1",
  "621470ede0bb220022c9e396": "def c1(p): return (l: = len(p)) > 1 and sum(int(e . split('/')[0]) for e in p) / len(p) >= 140\n\n\ndef c2(p): return (l: = len(p)) > 1 and sum(int(e . split('/')[1]) for e in p) / len(p) >= 90\n\n\ndef c3(p): return any(\n    int(e . split('/')[0]) >= 180 and int(e . split('/')[1]) >= 110 for e in p)\n\n\ndef hypertensive(P): return sum(c1(p) or c2(p) or c3(p) for p in P)\n",
  "622a6a822494ab004b2c68d2": "def slices_to_name(n):\r\n    if isinstance(n, int) and n > 1:\r\n    return ' ' . join(n % 2 * ['bread'] + n / / 2 * ['sandwich'])\r\n\r\n    def name_to_slices(name):\r\n    if isinstance(name, str):\r\n    n = 2 * name . count('sandwich') + name . count('bread')\r\n    if name == slices_to_name(n):\r\n    return n\r\n",
  "620bce448e757800242821fe": "from unittest import TestCase\r\n\r\n\r\nclass TestPhoneBook (TestCase):\r\n\r\n    def setUp(self):\r\n        # Arrange\r\n    self . phone_book = PhoneBook()\r\n\r\n    def test_create_method(self):\r\n        # Act\r\n    self . phone_book . create('User', '12345678')\r\n\r\n    # Assert\r\n    self . assertEqual(self . phone_book['User'], '12345678')\r\n\r\n    def test_retrieve_method_when_the_name_exists(self):\r\n        # Arrange\r\n    self . phone_book['User'] = '12345678'\r\n    # Act\r\n    result = self . phone_book . retrieve('User')\r\n\r\n    # Assert\r\n    self . assertEqual(result, '12345678')\r\n\r\n    def test_retrieve_method_when_the_name_does_not_exist(self):\r\n        # Act & Assert\r\n    with self . assertRaises(KeyError) as cm:\r\n    self . phone_book . retrieve('User')\r\n\r\n    # Assert\r\n    self . assertEqual(str(cm . exception), \"'Name not found!'\")\r\n\r\n    def test_update_method_when_the_name_exists(self):\r\n        # Arrange\r\n    self . phone_book['User'] = '12345678'\r\n    # Act\r\n    self . phone_book . update('User', '87654321')\r\n\r\n    # Assert\r\n    self . assertEqual(self . phone_book['User'], '87654321')\r\n\r\n    def test_delete_method_when_the_name_exists(self):\r\n        # Arrange\r\n    self . phone_book['User'] = '12345678'\r\n    # Act\r\n    self . phone_book . delete('User')\r\n\r\n    # Assert\r\n    self . assertNotIn('User', self . phone_book)\r\n",
  "621e323a98afab001628d9a0": "def joker_card(joker_nums, ticket_serials):\r\n    prize_dict = {\r\n        0: 'Losing card',\r\n        1: 'Losing card',\r\n        2: 'V type',\r\n        3: 'IV type',\r\n        4: 'III type',\r\n        5: 'II type',\r\n        6: 'I type'\r\n    }\r\n    prize = []\r\n    joker = list(map(lambda x: str(x)[- 1], joker_nums))[:: - 1]\r\n    for tricket in ticket_serials:\r\n    count = 0\r\n    for i, num in enumerate(tricket[:: - 1]):\r\n    if num == joker[i]:\r\n    count += 1\r\n    else:\r\n    break\r\n    prize . append(prize_dict[count])\r\n    return prize\r\n",
  "622de76d28bf330057cd6af8": "def amount_of_pages(summary):\n    # 1-9: 9 = 9 * 1 * 10**0\n    # 10-99: 180 = 9 * 2 * 10**1\n    # 100-999: 2700 = 9 * 3 * 10**2\n    # 1000-9999: 36000 = 9 * 4 * 10**3\n    # 10000-99999: 450000 = 9 * 5 * 10**4\n    res = 0\n    for x in range(1, 6):\n    y = 9 * x * 10 * * (x - 1)\n    if summary <= y:\n    return res + summary / / x\n    res += y / / x\n    summary -= y\n",
  "621f89cc94d4e3001bb99ef4": "import re\r\n\r\n\r\ndef dont_give_me_five(start, end):\r\n    def count(n): return int(re . sub(r'5(\\d*)', lambda m: '4' + '9' *\r\n                                      len(m[1]), str(n)). translate(str . maketrans(\"56789\", \"45678\")), 9)\r\n    if start > 0:\r\n    return count(end) - count(start - 1)\r\n    elif end < 0:\r\n    return count(- start) - count(- end - 1)\r\n    else:\r\n    return count(end) + count(- start) + 1\r\n",
  "61fef3a2d8fa98021d38c4e5": "def get_card(n):\n    if (n % 2 == 0 and (n / / 2) % 2 == 1) or n == 4:\n    return n / / 2\n    else:\n    return 1\n    def card_game(n):\n    alice = 0\n    bob = 0\n    flag = True\n    while n > 0:\n    this_turn = get_card(n)\n    if flag:\n    alice += this_turn\n    else:\n    bob += this_turn\n    flag = not flag\n    n -= this_turn\n    return alice\n",
  "621ab012ed37430016df15c0": "def half_plane(p1, p2, p3):\r\n    \"\"\" \r\n    Returns a function that checks the affiliation of a point (x, y) \r\n    to a half-plane (defined by point p1, p2) to which point p3 belongs. \r\n    If the given three points do not form a triangle (only a straight line), \r\n    an exception is raised. \r\n    Note that the function works for any lines also for vertical lines. \r\n    \"\"\"\r\n    (x1, y1), (x2, y2), (x3, y3) = p1, p2, p3\r\n    left, right = (y3 - y2) * (x2 - x1), (x3 - x2) * (y2 - y1)\r\n    if left > right:\r\n    return lambda x, y: (y - y2) * (x2 - x1) >= (x - x2) * (y2 - y1)\r\n    elif left < right:\r\n    return lambda x, y: (y - y2) * (x2 - x1) <= (x - x2) * (y2 - y1)\r\n    raise ValueError(\"Detection of a degenerate triangle.\")\r\n\r\n    def draw_triangle(triangle, n):\r\n    p1, p2, p3 = triangle\r\n    p1p2 = half_plane(p1, p2, p3)\r\n    p2p3 = half_plane(p2, p3, p1)\r\n    p1p3 = half_plane(p1, p3, p2)\r\n    # The point (x, y) lies in the triangle if all three dependencies are satisfied:\r\n    return [[p1p2(x, y) and p2p3(x, y) and p1p3(x, y) for x in range(n)] for y in range(n)]\r\n",
  "6210fb7aabf047000f3a3ad6": "def assemble(input):\r\n    result = list(input[0]) if input else []\r\n\r\n    for i in input:\r\n    for j, k in enumerate(i):\r\n    result[j] = k if result[j] == '*' else result[j]\r\n\r\n    return '' . join(result). replace('*', '#')\r\n",
  "5fe2ea999fd2140016feec63": "def longest_stem_length(rna):\r\n    min_stem, loop_sizes, base_pairs = 4, range(\r\n        6, 13), dict(zip('ACGU', 'UGCA'))\r\n    lgt, pairs = 0, [(i, i + s + 1) for s in loop_sizes for i in range(\r\n        len(rna) - s - 1) if rna[i + s + 1] == base_pairs[rna[i]]]\r\n    while pairs:\r\n    lgt, pairs = lgt + 1, [(i - 1, j + 1) for i, j in pairs if 0 <= i -\r\n                           1 and j + 1 < len(rna) and rna[j + 1] == base_pairs[rna[i - 1]]]\r\n    return 0 if lgt < min_stem else lgt\r\n",
  "61efc02e4fd88600343b5c58": "# WTF?\nflag = \"FLAG{IS-IT-EASY-YET-FUN}\"\n",
  "61eeb6e7577f050037b17a2d": "def smile(text):\r\n    eyes = [\":\", \";\", \"=\"]\r\n    noses = [\"\", \"-\", \"~\"]\r\n    mouths = [\"[\", \"(\"]\r\n    mouths_2 = [']', ')']\r\n    for eye in eyes:\r\n    for nose in noses:\r\n    for i, mouth in enumerate(mouths):\r\n    face = eye + nose + mouth\r\n    face_2 = eye + nose + mouths_2[i]\r\n    if face in text:\r\n    text = text . replace(face, face_2)\r\n    return text\r\n",
  "61e1f175fbf3bd002a5528cd": "import re\r\n\r\n\r\ndef toS(m, s): return f' { m }{ s : 0 > 2 } ' . lstrip('0')\r\n\r\n\r\ndef compact(s): return re . sub(r'(.)\\1+', r'\\1', s)\r\n\r\n\r\ndef cmpS(a, b): return (len(a) > len(b)) - (len(a) < len(b))\r\n\r\n\r\ndef get_best_combination(t):\r\n    m, s = divmod(t, 60)\r\n    M, S = m - 1, s + 60\r\n    a, b = map(toS, (m, M), (s, S))\r\n    A, B = map(compact, (a, b))\r\n    cmp = cmpS(A, B) or cmpS(a, b)\r\n    return a if s > 39 or cmp < 1 else b\r\n",
  "61e2edfeaf28c2001b57af98": "# -*- coding:utf-8 -*-\n# author : utoppia\n# description : solutions for codewars.com\n# updated at : 2022-02-03 16:19\n# -----------------------------------------------------\n# Kata UUID : 61e2edfeaf28c2001b57af98\n# Title : Subsequence Sums II\n# Kyu : 5\n# Kata's Sensi: tonylicoding\n# Tags : ['Algorithms', 'Mathematics', 'Numbers']\n# Collection : 2\n# Bookmarked : \uf006 8\n# Solved : \uf5c0 28/31\n# Language : Python\n# ----------------------------------------------------\ndef subsequence_sums(a, qs):\n    \"\"\" \n Let b[i] = a[i] + ... + a[n], \n therefore for some query (l, r), \n the answer is a[l] + a[l+1] * 2 + ... + a[r] * (r - l + 1), \n which can be writen as (a[l] + ... + a[r]) + (a[l+1] + ... + a[r]) + ... + (a[r]) \n let c = a[r+1] + ... + a[n], \n the equation upon can be expressed as \n (b[l] - c) + (b[l+1] - c) + ... + (b[r] - c) = b[l] + ... + b[r] - c * (r - l + 1) \n thus, we can make s[i] = a[1] + ... + a[i], \n for some query (l, r), we can calculate c quickly as s[n] - s[r] \n and make S[i] = b[1] + ... + b[i], therefor b[l] + ... + b[r] = S[r] - S[l-1], \n ans = S[r] - S[l-1] - (s[n] - s[r]) * (r - l + 1) \n problem has been solved! \n \"\"\"\n    n = len(a)\n    b = [0 for _ in range(n + 1)]\n    tmp = 0\n    for i in range(n, 0, - 1):\n    tmp += a[i - 1]\n    b[i] = tmp\n    S = [0 for _ in range(n + 1)]\n    for i in range(1, n + 1):\n    S[i] = S[i - 1] + b[i]\n    s = [0 for _ in range(n + 1)]\n    for i in range(1, n + 1):\n    s[i] = s[i - 1] + a[i - 1]\n\n    ret = []\n    for l, r in qs:\n    ret . append(S[r] - S[l - 1] - (s[n] - s[r]) * (r - l + 1))\n    return ret\n",
  "61e1b974eb372a001f719527": "from collections import defaultdict\r\n\r\n\r\ndef neighbors(pos):\r\n    i, j = pos\r\n    return [(i + k, j + l) for k in range(- 1, 2) for l in range(- 1, 2) if k or l]\r\n\r\n    def first_impossible(elems) - > int:\r\n    memo, done = defaultdict(int), set(elems)\r\n\r\n    def update(p, n):\r\n    for pos in neighbors(p):\r\n    if pos not in done:\r\n    memo[pos] += n\r\n    def rec(n):\r\n    if not (coords := [k for k, v in memo . items() if v == n and k not in done]):\r\n    return n\r\n    res = 0\r\n    for p1 in coords:\r\n    done . add(p1)\r\n    update(p1, n)\r\n    res = max(res, rec(n + 1))\r\n    done . remove(p1)\r\n    update(p1, - n)\r\n    return res\r\n    for p in elems:\r\n    update(p, 1)\r\n    return rec(2)\r\n",
  "61e173ccbc916700267ef2ae": "def triple_crown(r):\r\n    for i in r:\r\n    if all(r[i][k] > r[j][k] for k in r[i] for j in r if i != j):\r\n    return i\r\n    return 'None of them'\r\n",
  "61de6142b31ff7000cc27e10": "def wpp(a, b, n):\r\n    z = []\r\n    for i in range(b):\r\n    c = (a * i) % b\r\n    d = min(c + a, b)\r\n    z . append((a, c))\r\n    z . append((c + a - d, d))\r\n    if n in (c + a - d, d):\r\n        return z\r\n    if c + a >= b:\r\n    z . append((c + a - d, 0))\r\n    z . append((0, c + a - d))\r\n    return []\r\n",
  "5f2ef12bfb6eb40019cc003e": "def fold_cube(nums):\r\n    return expand(nums . pop(), set(nums), 1, 2, 3) == {1, 2, 3, - 1, - 2, - 3}\r\n\r\n    def expand(val, nums, x, y, z):\r\n    dirs = {z}\r\n    for num in nums . copy():\r\n    if abs(val - num) not in (1, 5) or {val % 5, num % 5} == {0, 1}:\r\n    continue\r\n    nums . discard(num)\r\n    diff = val - num\r\n    sign = diff / / abs(diff)\r\n    nx, ny, nz = (x, z * sign, - y *\r\n                  sign) if abs(diff) == 1 else (- z * sign, y, x * sign)\r\n    dirs |= expand(num, nums, nx, ny, nz)\r\n    return dirs\r\n",
  "5f304fb8785c540016b9a97b": "from typing import Tuple\r\nimport pandas as pd\r\n\r\n\r\nclass Person:\r\n\r\n    @ staticmethod\r\n    def sort_key(person: 'Person') - > Tuple[int, int]:\r\n        # Sort by descending rating and ascending number of pre-allocated partners\r\n    return (- person . rating, len(person . partners))\r\n\r\n    def __init__(self, sex, rating):\r\n    self . rating = rating\r\n    self . ideal_partners = 1\r\n    self . min_rating = 0\r\n    self . partners = []\r\n    self . fully_allocated = False\r\n    if sex == 'M':\r\n    if rating >= 8:\r\n    self . ideal_partners = 2\r\n    else:  # sex == 'F'\r\n    self . min_rating = rating\r\n    if self . min_rating < 8:\r\n    self . min_rating = min(self . rating + 2, 8)\r\n\r\n    def add_partner(self, partner):\r\n    self . partners . append(partner)\r\n    if len(self . partners) == self . ideal_partners:\r\n    self . fully_allocated = True\r\n    def guysAloneFromGroup(men, women):\r\n    men = sorted([Person('M', m) for m in men], key=Person . sort_key)\r\n    women = sorted([Person('W', w) for w in women], key=Person . sort_key)\r\n\r\n    for w in women:\r\n    for m in men:\r\n    if m . fully_allocated:\r\n    continue\r\n    if m . rating >= w . min_rating:\r\n    m . add_partner(w)\r\n    w . add_partner(m)\r\n    men = sorted(men, key=Person . sort_key)\r\n    break\r\n    return [m . rating for m in men if not m . partners][:: - 1]\r\n",
  "5e8886a24475de0032695b9e": "import numpy\nimport scipy . ndimage as i\na = numpy . array\nevolve = e = lambda M, R, s: s and e(a([a(r). size == i . correlate(\n    2 * a(M) - 1, 2 * a(r) - 1, int, 'wrap') for r in R]). any(0). tolist(), R, s - 1) or M\n",
  "61db0b0d5b4a78000ef34d1f": "def bus_animation(bn, bs, fc, fs):\r\n    b = ['' . join(x[0] + x[1] * (bn - 1) + x[2]) + ' ' * (fs - 17 - 5 * (bn - 1)) for x in [\r\n        [' ________', '_____', '_____ '],\r\n        ['| | ', '| ', '| | \\ '],\r\n        ['|___|____', '|____', '|_|___\\ '],\r\n        ['| ', ' ', '| | \\\\'],\r\n        ['`--(o)(o)', '-----', \"--(o)--'\"]\r\n    ]]\r\n    return f\"\\n { ' ' * fs } \\n { '-' * fs } \\n\" . join('\\n' . join((' ' * i * bs + x)[: fs] for x in b) for i in range(fc))\r\n",
  "61daff6b2fdc2a004328ffe4": "def first_coefficient(n): return (k: = n % 2 * ~ n >> 1, - k)\n",
  "58a3c836623e8c72eb000188": "def array_equalization(a, k):\n    totals, ends = {}, {}\n    for i, n in enumerate(a):\n    if n not in ends:\n        totals[n], ends[n] = 0, - 1\n    if i < ends[n]:\n        continue\n    count = (i - ends[n] - 1 + k - 1) / / k\n    totals[n] += count\n    ends[n] = max(i, ends[n] + count * k)\n    return min(t + (len(a) - ends[n] - 1 + k - 1) / / k\n               for n, t in totals . items() if ends[n] < len(a))\n",
  "55d6afe3423873eabe000069": "def get_key_length(cipher_text, max_key_length):\r\n    # count the occurences where there is a match when shifting the sequence by a offset\r\n    offsets = [len([d for d in zip(cipher_text, cipher_text[offset:]) if d[0] == d[1]])\r\n               for offset in range(1, max_key_length)]\r\n    # get the offset that generated the most matches\r\n    return offsets . index(max(offsets)) + 1\r\n",
  "561c20edc71c01139000017c": "def build_matches_table(t):\r\n\r\n    teams, ans = [* range(1, t + 1)], []\r\n    for _ in range(t - 1):\r\n    teams = [teams[0]] + teams[2:] + [teams[1]]\r\n    ans += [[(teams[i], teams[t - i - 1]) for i in range(0, t, 2)]]\r\n\r\n    return ans\r\n",
  "5bec507e1ab6db71110001fc": "def button_sequences(seqR, seqB):\r\n    pattern, state = '', ''\r\n    def toBool(seq): return [i == '1' for i in seq]\r\n    for red, blue in zip(toBool(seqR), toBool(seqB)):\r\n    if red and state == 'R' or blue and state == 'B':\r\n    continue\r\n    state = 'R' if red else 'B' if blue else ''\r\n    pattern += state\r\n    return pattern\r\n",
  "61ce25e92ca4fb000f689fb0": "def isbn_converter(isbn):\r\n    s = '978' + isbn . replace('-', '')[: - 1]\r\n    m = sum(int(d) * (1 + 2 * (i & 1)) for i, d in enumerate(s)) % 10\r\n    return f'978- { isbn [: - 1 ] }{ m and 10 - m } '\r\n",
  "61c1ffd793863e002c1e42b5": "def canal_mania(a, b, w):\r\n    m = 0\r\n    while len(a) + len(b) > 0:\r\n    for q in [a, b]:\r\n    n = 0\r\n    while len(q) and n + q[0] <= w:\r\n    n += q . pop(0)\r\n    m += 2 * (n + 1)\r\n    return m\r\n",
  "61c78b57ee4be50035d28d42": "def merge_strings(first, second):\r\n    start = 0\r\n    stop = len(first)\r\n    while True:\r\n    if first[start: len(first)] == second[0: stop]:\r\n    break\r\n    else:\r\n    start = start + 1\r\n    stop = stop - 1\r\n    return first[0: start] + second\r\n",
  "61b09ce998fa63004dd1b0b4": "class Miner:\r\n    def __init__(self, exp=0):\r\n    self . level = next(i for i in range(40, 0, - 1) if exp >= EXPERIENCE[i])\r\n    self . exp = exp\r\n    def mine(self, rock):\r\n    lvl, exp = ROCKS[rock]\r\n    if self . level >= lvl:\r\n    self . exp += exp\r\n    if self . level < 40 and self . exp >= EXPERIENCE[self . level + 1]:\r\n    self . level += 1\r\n    return f\"Congratulations, you just advanced a Mining level! Your mining level is now { self . level } .\"\r\n    return \"You swing your pick at the rock.\"\r\n    return f\"You need a mining level of { lvl } to mine { rock } .\"\r\n",
  "61aa4873f51ce80053a045d3": "def name(s):\r\n    bag = {(0, 0)}\r\n    for w in s:\r\n    l_, v_ = len(w), sum(bytes(w, 'utf8')) - len(w) * 96\r\n    bag |= {(l + l_, v + v_) for l, v in bag}\r\n    return max(l for l, v in bag if v <= 10 * l)\r\n",
  "61aa487e73debe0008181c46": "def robot(n, m, s):\r\n    x, y, xmin, ymin, xmax, ymax = 0, 0, 0, 0, 0, 0\r\n    for cur in s:\r\n    y += (cur == 'D') - (cur == 'U')\r\n    x += (cur == 'R') - (cur == 'L')\r\n    xmin = min(xmin, x)\r\n    ymin = min(ymin, y)\r\n    xmax = max(xmax, x)\r\n    ymax = max(ymax, y)\r\n    if xmax - xmin + 1 > m or ymax - ymin + 1 > n:\r\n    xmin += cur == 'L'\r\n    ymin += cur == 'U'\r\n    break\r\n    return 1 - ymin, 1 - xmin\r\n",
  "61a87854b4ae0b000fe4f36b": "# Just cleaned it a bit\r\ndef format_playlist(songs):\r\n    size1 = max((4, * (len(s[0]) for s in songs)))\r\n    size2 = max((6, * (len(s[2]) for s in songs)))\r\n    border = f\"+- { '-' * size1 } -+------+- { '-' * size2 } -+\"\r\n\r\n    def line(\r\n        a, b, c): return f\"| { a . ljust ( size1 )} | { b . ljust ( 4 )} | { c . ljust ( size2 )} |\"\r\n    res = []\r\n    res . append(border)\r\n    res . append(line(\"Name\", \"Time\", \"Artist\"))\r\n    res . append(border)\r\n\r\n    for name, duration, artist in sorted(songs, key=lambda k: (k[2], k[0])):\r\n    res . append(line(name, duration, artist))\r\n    if songs:\r\n    res . append(border)\r\n\r\n    return '\\n' . join(res)\r\n",
  "61a8c3a9e5a7b9004a48ccc2": "DIRECTIONS = ['N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW']\r\n\r\n\r\ndef direction(facing, turn):\r\n    return DIRECTIONS[(turn / / 45 + DIRECTIONS . index(facing)) % 8]\r\n",
  "619f200fd0ff91000eaf4a08": "def odd_or_even(n):\r\n    return (\"Even\", \"Either\", \"Odd\", \"Either\")[n % 4]\r\n",
  "61a2fcac3411ca0027e71108": "def max_sum_path(a, b):\r\n    i, j, A, B = 0, 0, 0, 0\r\n    while i < len(a) and j < len(b):\r\n    x, y = a[i], b[j]\r\n    if x == y:\r\n        A = B = max(A, B)\r\n    if x <= y:\r\n        i, A = i + 1, A + x\r\n    if x >= y:\r\n        j, B = j + 1, B + y\r\n    return max(A + sum(a[i:]), B + sum(b[j:]))\r\n",
  "5ef1fe9981e07b00015718a8": "from functools import reduce\r\nPRIMES = [1, 2, 3, 5, 7, 11, 13, 17, 19, 23]\r\n\r\n\r\ndef find_max(n):\r\n    s = set()\r\n    while n not in s:\r\n    s . add(n)\r\n    n = reduce(lambda x, d: x * PRIMES[int(d)], str(n), 1)\r\n    return max(s)\r\n",
  "5ed056c9263d2f001738b791": "# Not sure why the set the right order without sorting it but eh, it works\r\ndef group(arr, idx):\r\n    result, idx2 = {}, set(range(len(arr[0]))) - set(idx)\r\n    for row in arr:\r\n    key = tuple(map(row . __getitem__, idx))\r\n    value = map(row . __getitem__, idx2)\r\n    result[key] = list(map(int . __add__, result[key], value)\r\n                       ) if key in result else list(value)\r\n    return result\r\n",
  "5fb856190d5230001d48d721": "def pentagonal(n):\r\n    return 1 + 5 * (n - 1) * n / / 2 if n > 0 else - 1\r\n",
  "5ff2093d375dca00170057bc": "def count_min_rotations(d): return min(\n    sum((v != i) + (v + i == 7) for v in d) for i in range(1, 7))\n",
  "617ae98d26537f000e04a863": "def to_mountain(mat):\r\n    h, w = len(mat), len(mat[0])\r\n    for j in range(h):\r\n    for i in range(w):\r\n    if j:\r\n        mat[j][i] = max(mat[j][i], mat[j - 1][i] - 1)\r\n    if i:\r\n        mat[j][i] = max(mat[j][i], mat[j][i - 1] - 1)\r\n    if j and i:\r\n        mat[j][i] = max(mat[j][i], mat[j - 1][i - 1] - 1)\r\n    if j and i + 1 < w:\r\n        mat[j][i] = max(mat[j][i], mat[j - 1][i + 1] - 1)\r\n    if j + 1 < h and i:\r\n        mat[j][i] = max(mat[j][i], mat[j + 1][i - 1] - 1)\r\n    for j in reversed(range(h)):\r\n    for i in reversed(range(w)):\r\n    if j + 1 < h:\r\n        mat[j][i] = max(mat[j][i], mat[j + 1][i] - 1)\r\n    if i + 1 < w:\r\n        mat[j][i] = max(mat[j][i], mat[j][i + 1] - 1)\r\n    if j + 1 < h and i + 1 < w:\r\n        mat[j][i] = max(mat[j][i], mat[j + 1][i + 1] - 1)\r\n    if j and i + 1 < w:\r\n        mat[j][i] = max(mat[j][i], mat[j - 1][i + 1] - 1)\r\n    if j + 1 < h and i:\r\n        mat[j][i] = max(mat[j][i], mat[j + 1][i - 1] - 1)\r\n    return mat\r\n",
  "618647c4d01859002768bc15": "def guess_colour(guesses, hats):\r\n    return \"Red\" if ((hats + guesses). count(\"Blue\")) % 2 else \"Blue\"\r\n",
  "618688793385370019f494ae": "from itertools import combinations\nfrom math import dist\n\n\ndef is_square(points: list) - > bool:\n    # (Number of points = Number of unique points = 4) and (Two kind of distances)\n    return (len(points) == len(set(points)) == 4) and (len(set(dist(* pair) for pair in combinations(points, 2))) == 2)\n",
  "615da209cf564e0032b3ecc6": "def regex_below(n): return (s: = str(n)) and \"^(?=[^0])(\" + '|' . join(f'( { s [: i ]} [^\\D { int ( d )} -9])?\\d{{ { len ( s ) - i - 1 } }} ' for i, d in enumerate(s)) + \")$\"\n",
  "617ae2c4e321cd00300a2ec6": "from math import sqrt\n\n\ndef is_constructable(area):\n    ''' \n Is \"area\" the sum of two perfect squares? \n '''\n    return any(\n        sqrt(area - num * * 2). is_integer()\n        for num in range(int(sqrt(area)) + 1)\n    )\n",
  "617bfa617cdd1f001a5cadc9": "def mountains_of_hoiyama(w):\r\n    return ((w + 1) * * 3 - w * * 2) / / 8 + 1\r\n",
  "617af2ff76b7f70027b89db3": "def find_the_strongest_apes(apes):\r\n    apes . sort(key=lambda a: a['name'])\r\n    imt = {'Gorilla': 0, 'Gibbon': 0, 'Orangutan': 0, 'Chimpanzee': 0}\r\n    res = {'Gorilla': None, 'Gibbon': None,\r\n           'Orangutan': None, 'Chimpanzee': None}\r\n    for ape in apes:\r\n    k = ape['height'] + ape['weight']\r\n    if imt[ape['type']] < k:\r\n    imt[ape['type']] = k\r\n    res[ape['type']] = ape['name']\r\n    return res\r\n",
  "6177b4119b69a40034305f14": "def solution(mtrx):\r\n    return any(i . index('>') < i . index('x') for i in mtrx if '>' in i and 'x' in i) or \\\r\n        any(i . index('<') > i . index('x') for i in mtrx if '<' in i and 'x' in i) or \\\r\n        any(i . index('^') > i . index('x') for i in zip(* mtrx) if '^' in i and 'x' in i) or \\\r\n        any(i . index('v') < i . index('x')\r\n            for i in zip(* mtrx) if 'v' in i and 'x' in i)\r\n",
  "6174318832e56300079b7d4b": "from itertools import islice\r\n\r\n\r\ndef decipher(bs):\r\n    bs = iter(bs)\r\n    def eat(n): return islice(bs, n)\r\n    def decode(size, key): return [(c - key) % 256 for c in eat(size)]\r\n\r\n    out = [* eat(8)]\r\n    for key in bs:\r\n    sizeB = decode(3, key)\r\n    size = int . from_bytes(sizeB, byteorder='big') + 8\r\n    out . extend((0, * sizeB, * decode(size, key)))\r\n\r\n    return b'' . join(i . to_bytes(1, byteorder='big') for i in out)\r\n",
  "544e5d75908f2d5eb700052b": "from collections import Counter\r\nfrom string import ascii_uppercase\r\nALPHABET = ascii_uppercase * 2\r\nFREQUENCY_LETTERS = {\r\n    'A': 0.0815, 'B': 0.0144, 'C': 0.0276, 'D': 0.0379, 'E': 0.1311, 'F': 0.0292, 'G': 0.0199,\r\n    'H': 0.0526, 'I': 0.0635, 'J': 0.0013, 'K': 0.0042, 'L': 0.0339, 'M': 0.0254, 'N': 0.0710,\r\n    'O': 0.0800, 'P': 0.0198, 'Q': 0.0012, 'R': 0.0638, 'S': 0.0610, 'T': 0.1047, 'U': 0.0246,\r\n    'V': 0.0092, 'W': 0.0154, 'X': 0.0017, 'Y': 0.0198, 'Z': 0.0008\r\n}\r\n\r\n\r\ndef get_keyword(text, key_len):\r\n    keyword = [find_key_for_group([text[letter] for letter in range(i, len(text), key_len)])\r\n               for i in range(key_len)]\r\n    return '' . join(keyword)\r\n\r\n    def find_key_for_group(group):\r\n    blocks = [Counter(ALPHABET[ALPHABET . find(letter) - i]\r\n                      for letter in group) for i in range(26)]\r\n    chi_squared = [(index, sum(get_chi_squared(block, len(group))))\r\n                   for index, block in enumerate(blocks)]\r\n    return ALPHABET[min(chi_squared, key=lambda x: x[1])[0]]\r\n\r\n    def get_chi_squared(block, length):\r\n    return [(block . get(letter, 0) - (length * FREQUENCY_LETTERS[letter])) * * 2 / (length * FREQUENCY_LETTERS[letter])\r\n            for letter in ascii_uppercase]\r\n",
  "61711668cfcc35003253180d": "# what \"best practice\" should be about\r\ndef identify_bb(boxes, weigh):\r\n    boxes_amount = len(boxes)\r\n    sample = (box for count, box in enumerate(boxes, 1) for _ in range(count))\r\n    sample_weight = weigh(* sample)\r\n    sample_amount = triangular(boxes_amount)\r\n    deluxe_number = sample_weight % sample_amount - 1\r\n    return boxes[deluxe_number]\r\n\r\n    def triangular(number):\r\n    return number * (number + 1) / / 2\r\n",
  "602db3215c22df000e8544f0": "def two_are_positive(a, b, c):\r\n    return sum([a > 0, b > 0, c > 0]) == 2\r\n",
  "61707b71059070003793bc0f": "def find_height(n):\r\n    r = int((n * 6) * * (1 / 3))\r\n    return r if r * (r + 1) * (r + 2) / / 6 <= n else r - 1\r\n",
  "616fcf0580f1da001b925606": "# the DSL is preloaded, and is constructed as follows:\n# variables: Variable(index: int)\n# constants: CTrue() ; CFalse()\n# binary operators: And(a: BoolFn, b: BoolFn) ; Or(a: BoolFn, b: BoolFn)\n# unary operators: Not(a: BoolFn)\n# the function beval(fn: BoolFn, vars: list[bool]) -> bool can be used to eval a DSL term\n# var_count: the number of input variables to the target function\n# examples: a list of examples, each of which is a pair (inputs, output)\n# inputs is a tuple of bools and output is a single bool\n# return: the synthesized target function, expressed in the DSL as above\n# return None if it's impossible to synthesize a correct function\nfrom functools import reduce\nimport operator\n\n\ndef synthesize(var_count, examples):\n    dic = {}\n    for inp, out in examples:\n    if inp in dic and dic[inp] != out:\n    return None\n    dic[inp] = out\n    if var_count == 0:\n    if examples and examples[0][1] == True:\n    return CTrue()\n    else:\n    return CFalse()\n    if all(not out for inp, out in examples):\n    return CFalse()\n    return reduce(Or, (reduce(And, (Variable(i) if e else Not(Variable(i)) for i, e in enumerate(k))) for k, v in examples if v))\n",
  "615bf5f446a1190007bfb9d9": "import pandas as pd\n\n\ndef flatten(dataframe, col):\n    return dataframe . explode(col). reset_index(drop=True)\n",
  "609243c36e796b003e79e6b5": "def webpolygons(a):\r\n    stack = [[1, 1, 0]]\r\n    for n in a:\r\n    if n > 1:\r\n        stack . append([n, 1, 0])\r\n    elif len(stack) > 1:\r\n    branch, prod_, sum_ = stack . pop()\r\n    stack[- 1][1] *= branch * prod_\r\n    stack[- 1][2] += branch * sum_ + \\\r\n        branch * ~ - branch / / 2 * prod_ * * 2\r\n    while len(stack) > 1:\r\n    branch, prod_, sum_ = stack . pop()\r\n    stack[- 1][2] += branch * sum_\r\n    return stack[- 1][2]\r\n",
  "616a585e6814de0007f037a7": "def cargobot(states, programs, max_steps):\r\n\r\n    def isValid(cmd):\r\n    return cmd . flag is None \\\r\n        or hold and (cmd . flag == 'ANY' or cmd . flag == hold . color) \\\r\n        or hold is None and cmd . flag == 'NONE'\r\n\r\n    def pushCmds(i): stk . extend(reversed(programs[i]))\r\n\r\n    pos, hold, stk, states = 0, None, [], [x[:] for x in states]\r\n    pushCmds(0)\r\n\r\n    for _ in range(max_steps):\r\n    if not stk:\r\n        break\r\n    cmd = stk . pop()\r\n    if not isValid(cmd):\r\n        continue\r\n    cmd = cmd . command\r\n    if cmd in 'LEFT RIGHT':\r\n    pos += (- 1) * * (cmd == 'LEFT')\r\n    pos = max(0, min(pos, len(states) - 1))\r\n    elif cmd == 'DOWN':\r\n    if hold:\r\n    states[pos]. append(hold)\r\n    hold = None\r\n    elif states[pos]:\r\n    hold = states[pos]. pop()\r\n    else:\r\n    pushCmds(int(cmd[- 1]) - 1)\r\n\r\n    return states\r\n",
  "6167e70fc9bd9b00565ffa4e": "from itertools import accumulate\n\n\ndef barista(coffees):\n    return sum(accumulate(sorted(coffees), lambda a, c: a + 2 + c))\n",
  "60416d5ee50db70010e0fbd4": "def nth_root_equals_digit_sum(n):\r\n    answer = []\r\n    for x in range(1, 1000):\r\n    if sum([int(i) for i in (str(x * * n))]) == x:\r\n    answer . append(x * * n)\r\n    return answer\r\n",
  "6161847f52747c0025d0349a": "def create_n_dimensional_array(n, size):\r\n    res = f'level { n } '\r\n    for _ in range(n):\r\n    res = [res] * size\r\n    return res\r\n",
  "615e3cec46a119000efd3b1f": "class R_e:\r\n    def __init__(self, real, epsilon=0):\r\n    self . real = real\r\n    self . epsilon = epsilon\r\n    def __str__(self):  # (Not necessary to complete the Kata; but always useful)\r\n    return \"R_e(\" + str(self . real) + \", \" + str(self . epsilon) + \")\"\r\n    def __repr__(self):  # (Not necessary to complete the Kata; but always useful)\r\n    return str(self)\r\n\r\n    def inclusion_map(self, other):  # Will be used later to implicitly convert reals into R_e\r\n    return other if type(other) == type(self) else R_e(other)\r\n\r\n    def __eq__(self, other):\r\n    other = self . inclusion_map(other)\r\n    return self . real == other . real and self . epsilon == other . epsilon\r\n    def __add__(self, other):\r\n    other = self . inclusion_map(other)\r\n    return R_e(self . real + other . real, self . epsilon + other . epsilon)\r\n\r\n    def __radd__(self, other):  # Obviously assumes commutativity for addition\r\n    return self + other\r\n    def __neg__(self):\r\n    return R_e(- self . real, - self . epsilon)\r\n\r\n    def __sub__(self, other):\r\n    return self + (- other)\r\n\r\n    def __rsub__(self, other):\r\n    return other + (- self)\r\n\r\n    def __mul__(self, other):  # Does not necessarily have to be commutative\r\n    other = self . inclusion_map(other)\r\n    return R_e(self . real * other . real, self . real * other . epsilon + self . epsilon * other . real)\r\n\r\n    def __rmul__(self, other):  # Does not necessarily assume the multiplication to be commutative; hence can easily be generalized to non-commutative structures (...Such as \"Quaternions\" :) )\r\n    other = self . inclusion_map(other)\r\n    return R_e(other . real * self . real, other . real * self . epsilon + other . epsilon * self . real)\r\n\r\n    def inverse(self):  # Does not necessarily assume multiplication to be commutative, hence can be generalized to... (gosh I really do like \"Quaternions\")\r\n        # Otherwise, one could just compute __pow__ first, and then return self**(-1)\r\n    rx = 1 / self . real\r\n    # General non-commutative formula\r\n    return R_e(rx, - rx * (self . epsilon) * rx)\r\n    def __truediv__(self, other):\r\n    return self * (self . inclusion_map(other). inverse())\r\n\r\n    def __rtruediv__(self, other):\r\n    return other * (self . inverse())\r\n\r\n    def __pow__(self, n):  # n must be \"real\"; NB: here, for this Kata, this function assumes that the \"real\" and \"epsilon\" parts commute together (which will always trivially be the case with Real or Complex Numbers),\r\n        # thus allowing to use this \"simpler version\", which also allows \"non-integer\" values for n\r\n        # however, if this were to be implemented for more general, non-commutative structures, the \"power\" should then be\r\n        # defined recursively (for integers), using, for example the well-known \"Exponentiation by squaring\" algorithm...\r\n    return R_e(self . real * * n, n * self . real * * (n - 1) * self . epsilon)\r\n\r\n    def deriv(f, n=1):  # the \"+R_e(0)\" is there only to handle the particular case where f is a constant such as lambda x : 1; as epsilon is not defined for integers\r\n    return f if n == 0 else deriv(lambda x: (f(R_e(x, 1)) + R_e(0)). epsilon, n - 1)\r\n",
  "6159dda246a119001a7de465": "import re\n\n\ndef translate(s, voc):\n    return re . sub(r'[\\w*]+', lambda m: next(filter(re . compile(m . group(). replace('*', '.')). fullmatch, voc)), s)\n",
  "5eecd4a5e5d13e000150e249": "def PREPEND(vs): return lambda v: PAIR(FALSE)(PAIR(v)(vs))\r\n\r\n\r\ndef BUILD_TAIL(vs): return lambda v: PREPEND(APPEND(TAIL(vs))(v))(HEAD(vs))\r\n\r\n\r\ndef APPEND(vs): return (IS_EMPTY(vs)(PREPEND)(BUILD_TAIL))(vs)\r\n",
  "6087bb6050a6230049a068f1": "from itertools import zip_longest\r\n\r\n\r\ndef columnize(a, n):\r\n    a = [a[i: i + n] for i in range(0, len(a), n)]\r\n    b = [max(map(len, x)) for x in zip_longest(* a, fillvalue=\"\")]\r\n    return \"\\n\" . join(\" | \" . join(y . ljust(z) for y, z in zip(x, b)) for x in a)\r\n",
  "6155e74ab9e9960026efc0e4": "def solve(arr):\n    e, o, s = 0, 0, 0\n    for n in arr:\n    if n & 1:\n        e, o = o, e + 1\n    else:\n        e += 1\n    s += o\n    return s\n",
  "61559bc4ead5b1004f1aba83": "def spiral_sum(n): return (n + 1) * * 2 / / 2 - 1\n",
  "5dd08d43dcc2e90029b291af": "def distribution(population, minimum):\r\n    if (diff := sum(minimum - p for p in population if p < minimum)) == 0:\r\n        return population\r\n    popul, total = sorted(population, reverse=True), 0\r\n    rich = next(k for k, (v, p) in enumerate(\r\n        zip(popul, popul[1:]), 1) if (total := total + v) - p * k >= diff)\r\n    money, rem = divmod(total - diff, rich)\r\n    return [minimum if p < minimum else money + int((rich := rich - 1) < rem) if p > money else p for p in population]\r\n",
  "614f1732df4cfb0028700d03": "class AmoebaBrain:\r\n    def __init__(self):\r\n    self . smell = - 1\r\n    self . checked = set()\r\n    self . back = None\r\n    self . X = self . Y = 0\r\n\r\n    def get_move_direction(self, surrounding, food_smell):\r\n        # Current pos is now tested, no need to try it again later\r\n    self . checked . add((self . X, self . Y))\r\n\r\n    # We went in the wrong direction, let's go back\r\n    if food_smell < self . smell:\r\n    self . X += self . back[0]\r\n    self . Y += self . back[1]\r\n    return self . back\r\n    # Best smell is new smell\r\n    self . smell = food_smell\r\n    for x in range(- 1, 2):\r\n    for y in range(- 1, 2):\r\n        # That's not a wall and we didn't check this path before\r\n    if surrounding[- y + 1][x + 1] and (self . X + x, self . Y + y) not in self . checked:\r\n        # Onward to food!\r\n    self . X += x\r\n    self . Y += y\r\n    self . back = (- x, - y)\r\n    return (x, y)\r\n\r\n    # Guess we're starving\r\n    raise Exception(\"No path found!\")\r\n",
  "614dfc4ce78d31004a9c1276": "f = {\r\n    'V': lambda d: d['A'] * d['R'],\r\n    'A': lambda d: d['V'] / d['R'],\r\n    'R': lambda d: d['V'] / d['A']\r\n}\r\n\r\n\r\ndef ohms_law(s):\r\n    data = {v[- 1]: float(v[: - 1]) for v in s . split()}\r\n    res_key = next(iter(set(f) - set(data)))\r\n    value = str(round(f[res_key](data), 6))\r\n    return f' { value }{ res_key } '\r\n",
  "614adaedbfd3cf00076d47de": "import numpy as np\r\n\r\n\r\ndef expansion(matrix, n):\r\n\r\n    arr = np . array(matrix)\r\n\r\n    for i in range(n):\r\n\r\n    new_col = arr . sum(axis=1)\r\n    new_row = arr . sum(axis=0)\r\n    new_e = np . trace(arr)\r\n\r\n    new_row = np . append(new_row, new_e). reshape((1, len(arr) + 1))\r\n\r\n    arr = np . c_[arr, new_col]\r\n    arr = np . r_[arr, new_row]\r\n\r\n    arr[- 1, - 1] = new_e\r\n    return arr . tolist()\r\n",
  "614ac445f13ead000f91b4d0": "def solve(eq):\r\n    a, b = eq . replace('x', '0'). split('=')\r\n    x = eval(a) - eval(b)\r\n    if '- x' in eq:\r\n        x *= - 1\r\n    return x if eq . index('x') > eq . index('=') else - x\r\n",
  "61488fde47472d000827a51d": "def is_valid(positions):\r\n    # get relevant positions\r\n    bishop_left = positions . find(\"B\")\r\n    bishop_right = positions . rfind(\"B\")\r\n    rook_left = positions . find(\"R\")\r\n    rook_right = positions . rfind(\"R\")\r\n    king = positions . find(\"K\")\r\n\r\n    # valid if king between rooks and bishops on different colors\r\n    return rook_left < king < rook_right and bishop_left % 2 != bishop_right % 2\r\n",
  "5f1891d30970800010626843": "from scipy . special import comb\n\n\ndef multiply(n, k):\n    r, d = 1, 2\n    while d * d <= n:\n    i = 0\n    while n % d == 0:\n    i += 1\n    n / /= d\n    r *= comb(i + k - 1, k - 1, exact=True)\n    d += 1\n    if n > 1:\n    r *= k\n    return r\n",
  "5819f1c3c6ab1b2b28000624": "def padovan(n):\n    x, y, z = 1, 0, 0\n    for c in map(int, bin(n)[2:]):\n    x, y, z = x * x + 2 * y * z, 2 * x * y + y * \\\n        y + z * z, x * z + 2 * y * z + x * z + y * y\n    if c:\n        x, y, z = y, z, x + y\n    return x + y + z\n",
  "6146a6f1b117f50007d44460": "def delta(lst):\r\n    return [a - b for a, b in zip(lst, lst[1:])]\r\n\r\n    def dual_seq(lst):\r\n    return lst[: 1] + [(lst := delta(lst))[0] for _ in lst[1:]]\r\n\r\n    def extra_pol(lst, n):\r\n    return dual_seq(dual_seq(lst) + [0] * n)\r\n",
  "5fafdcb2ace077001cc5f8d0": "from math import prod\r\n\r\n\r\ndef weigh_the_list(xs):\r\n    p = prod(xs)\r\n    return [p / / x for x in xs[: - 1]] + [- p * (len(xs) - 1) / / xs[- 1]]\r\n",
  "5ee044344a543e001c1765b4": "def blind_number(n):\r\n    a, b = 1, 3\r\n    for _ in range(n):\r\n    a, b = b, (a + b) * 2 % 1000000007\r\n    return a\r\n",
  "61432694beeca7000f37bb57": "def f(x, y, z):\r\n    return sum((x - i) * (y - i) * (z - i) for i in range(min(x, y, z)))\r\n",
  "60633afe35b4960032fd97f9": "def RK4(x0, y0, h, f, x1):\r\n    ys, cur = [y0], x0\r\n    while cur < x1:\r\n    k1 = h * f(cur, ys[- 1])\r\n    k2 = h * f(cur + h / 2, ys[- 1] + k1 / 2)\r\n    k3 = h * f(cur + h / 2, ys[- 1] + k2 / 2)\r\n    k4 = h * f(cur + h, ys[- 1] + k3)\r\n\r\n    ys . append(ys[- 1] + (k1 + 2 * k2 + 2 * k3 + k4) / 6)\r\n    cur += h\r\n    return ys\r\n",
  "61419e8f0d12db000792d21a": "from math import comb\r\n\r\n\r\ndef formula(n):\r\n    return (f'1/( { formula ( - n ) } )' if n < 0 else '1' if not n else\r\n            '+' . join(binom(n - i, i) for i in range(n + 1)))\r\n\r\n    def binom(a, b):\r\n    c = comb(a + b, a)\r\n    return f\" { c if c > 1 else '' }{ term ( 'a' , a ) }{ term ( 'b' , b ) } \"\r\n    def term(c, n):\r\n    return f' { c } ^ { n } ' if n > 1 else c if n else ''\r\n",
  "613f13a48dfb5f0019bb3b0f": "from itertools import count, takewhile\nfrom math import isqrt\n\n\ndef find_player_counts(number_of_games):\n    \"\"\" \n let games(p) = number of games for p players \n \n let i, k be nonnegative integers \n games(2^i * (2k + 1)) = (2^i - 1) * (2k + 1) + (2k + 1) * (2k + 1 - 1) / 2 \n let n = 2^i - 1 \n games((n + 1) * (2k + 1)) = 2k^2 + (2n+1)k + n \n \n let g be the given number of games. \n solve 2k^2 + (2n+1)k + (n - g) = 0 for k \n (only need the greater solution, must be an integer) \n \"\"\"\n    ns = takewhile(lambda n: n <= number_of_games,\n                   ((1 << i) - 1 for i in count()))\n    guesses = ((n, quadratic(2, 2 * n + 1, n - number_of_games)) for n in ns)\n    return [(n + 1) * (2 * k + 1) for n, k in guesses if k is not None]\n\n    def quadratic(a, b, c):\n    sq = b * b - 4 * a * c\n    sqrt = isqrt(sq)\n    if sqrt * sqrt != sq:\n    return None\n    top = - b + sqrt\n    if top % (2 * a):\n    return None\n    return top / / (2 * a)\n",
  "6135e4f40cffda0007ce356b": "def bishop(start, end, moves):\r\n    sx, sy = map(ord, start)\r\n    ex, ey = map(ord, end)\r\n    dx, dy = abs(ex - sx), abs(ey - sy)\r\n    return moves > 1 and dx % 2 == dy % 2 or dx == dy and (moves > 0 or dx == 0)\r\n",
  "61390c407d15c3003fabbd35": "def locate_entrance(office: list) - > tuple:\r\n    def is_on_edge(r, c):\r\n    try:\r\n    return r == 0 or r == len(office) - 1 or \\\r\n        c == 0 or c == len(office[r]) - 1 or \\\r\n        office[r][c - 1] == ' ' or office[r][c + 1] == ' ' or \\\r\n        office[r + 1][c] == ' ' or office[r - 1][c] == ' '\r\n    except IndexError:\r\n    return True\r\n    for row_num, row in enumerate(office):\r\n    for col_num, tile in enumerate(row):\r\n    if tile == '.' and is_on_edge(row_num, col_num):\r\n    return col_num, row_num\r\n",
  "6138ee916cb50f00227648d9": "def joust(list_field: tuple, v_knight_left: int, v_knight_right: int) - > tuple:\r\n    if v_knight_left == 0 and v_knight_right == 0:\r\n    return list_field\r\n    len1, len2 = len(list_field[0]), len(list_field[1])\r\n    left_point, right_point = 2, len1 - 3\r\n    while left_point < right_point:\r\n    left_point += v_knight_left\r\n    right_point -= v_knight_right\r\n    return (\" \" * (left_point - 2) + \"$->\" + \" \" * (len1 - left_point - 1),\r\n            \" \" * right_point + \"<-P\" + \" \" * (len2 - right_point - 3))\r\n",
  "5b4f309dbdd074f9070000a3": "def score_match(frames):\r\n    pts, pins = [[], []], [0, 0]\r\n    for f in zip(* frames):\r\n    for i, (s, p) in enumerate(map(scoreFrame, f)):\r\n    pts[i]. append(s)\r\n    pins[i] += p\r\n    score1 = [1 + (a > b) - (a < b) for a, b in zip(* pts)]\r\n    a, b = pins\r\n    scores = [score1 + [a > b], [2 - s for s in score1] + [b > a]]\r\n    overall = int . __sub__(* map(sum, scores))\r\n\r\n    res = {'result': \"The match is a draw!\" if not overall else f\"Player { 1 if overall > 0 else 2 } won!\"}\r\n    res . update(\r\n        {f'player { i + 1 } ': {'frames': pts[i], 'points': scores[i]} for i in range(2)})\r\n\r\n    return res\r\n    def scoreFrame(frame):\r\n    score, pins = 0, 0\r\n    frame = [tuple(v != 'F' and v or 0 for v in f) for f in frame]\r\n    for i, (a, b, c) in enumerate(zip(frame, frame[1:] + [(0, 0)], frame[2:] + [(0, 0)] * 2)):\r\n    s = sum(a)\r\n    score += s + b[0] * (s == 10) + (a[0] == 10) * (b[1] + c[0] * (b[0] == 10))\r\n    pins += s\r\n    return score, pins\r\n",
  "58b22dc7a5d5def60300002a": "class Rectangle:\r\n    @ staticmethod\r\n    def rect_into_rects(length, width):\r\n    if width < length:\r\n        width, length = length, width\r\n    rects = []\r\n    while 0 < length < width:\r\n    sqs, width = divmod(width, length)\r\n    rects += sum(([(d * length, length)] * (sqs - d + 1)\r\n                 for d in range(2, sqs + 1)), [])\r\n    if width:\r\n        rects += [(d * length + width, length) for d in range(1, sqs + 1)]\r\n    width, length = length, width\r\n    return list(map('({0[0]}*{0[1]})' . format, rects)) or None\r\n",
  "5dc424122c135e001499d0e5": "class Meta (type):\r\n    def __invert__(self): return Meta(\r\n        \"\", (), {\"__new__\": lambda _, x: not self(x)})\r\n\r\n    def __and__(self, other): return Meta(\r\n        \"\", (), {\"__new__\": lambda _, x: self(x) and other(x)})\r\n    def __or__(self, other): return Meta(\r\n        \"\", (), {\"__new__\": lambda _, x: self(x) or other(x)})\r\n\r\n    class Specification (metaclass=Meta):\r\n    pass\r\n",
  "5dcde0b9fcb0d100349cb5c0": "''' \n Write a function that returns the longest contiguous palindromic substring in s. \n In the event that there are multiple longest palindromic substrings, return the \n first to occur. \n '''\n\n\ndef longest_palindrome(s, sep=\" \"):\n    # Interpolate some inert character between input characters\n    # so we only have to find odd-length palindromes\n    t = sep + sep . join(s) + sep\n    r = 0  # Rightmost index in any palindrome found so far ...\n    c = 0  # ... and the index of the centre of that palindrome.\n    spans = []  # Length of the longest substring in T[i:] mirrored in T[i::-1]\n    # Manacher's algorithm\n    for i, _ in enumerate(t):\n    span = min(spans[2 * c - i], r - i - 1) if i < r else 0\n    while span <= i < len(t) - span and t[i - span] == t[i + span]:\n    span += 1\n    r, c = max((r, c), (i + span, i))\n    spans . append(span)\n\n    span = max(spans)\n    middle = spans . index(span)\n\n    return t[middle - span + 1: middle + span]. replace(sep, \"\")\n",
  "5d6eef37f257f8001c886d97": "def gen(l, p, arr, n, q):\r\n    if not p:\r\n        yield []\r\n        return\r\n    for i in p:\r\n    if len(l) + 1 < n or sum(l[len(l) - n + 1:]) + arr[i] <= q:\r\n    for s in gen(l + [arr[i]], p - set([i]), arr, n, q):\r\n        yield [arr[i]] + s\r\n\r\n    def solver(arr, n, q):\r\n    return next(gen([], set(range(len(arr))), arr, n, q), ())\r\n",
  "5ee12f0a5c357700329a6f8d": "def get_minimum_hamiltonian_cycle(adj):\r\n    candidates = [((a,), 0) for a in adj]\r\n    best_cycle = None\r\n    best_cost = float('inf')\r\n    len_adj = len(adj)\r\n    while candidates:\r\n    path, cost = candidates . pop()\r\n    for node, c in adj[path[- 1]]. items():\r\n    new_cost = cost + c\r\n    if node not in path:\r\n    if new_cost < best_cost:\r\n    candidates . append(((* path, node), new_cost))\r\n    elif node == path[0] and len(path) == len_adj and new_cost < best_cost:\r\n    best_cycle = path\r\n    best_cost = new_cost\r\n    return best_cycle\r\n",
  "5d2351b313dba8000eecd5ee": "from bisect import bisect_left, bisect\r\nsp = set(map(str, PRIMES))\r\n\r\n\r\ndef tp(s):\r\n    for x in range(1, len(s)):\r\n    if s[: x] in sp and (s[x:] in sp or tp(s[x:])):\r\n        return True\r\n    return False\r\n    TOTAL_PRIMES = [i for i in PRIMES if tp(str(i))]\r\n\r\n    def total_primes(a, b):\r\n    return TOTAL_PRIMES[bisect_left(TOTAL_PRIMES, a): bisect(TOTAL_PRIMES, b)]\r\n",
  "592e5d8cb7b59e547c00002f": "def lucky_candies(a, k):\r\n    l = [0] + (k - 1) * [float('-inf')]\r\n    for x in a:\r\n    l = [max(l[(i - x) % k] + x, y) for i, y in enumerate(l)]\r\n    return l[0]\r\n",
  "60f3639b539c06001a076267": "from typing import Dict, List\nfrom numpy import array\nfrom numpy . linalg import eigvalsh\n\n\ndef get_greatest_spore_multiplier(graph: Dict[int, List[int]]) - > float:\n    if not graph:\n        return 0\n    matrix = array([[x in adj for x in graph] for adj in graph . values()])\n    return max(eigvalsh(matrix))\n",
  "5e28ae347036fa001a504bbe": "UNITS = {'\u265d': {\"moves\": [(1, 1), (1, - 1), (- 1, 1), (- 1, - 1)], \"limit\": False},\r\n         '\u265c': {\"moves\": [(1, 0), (0, 1), (- 1, 0), (0, - 1)], \"limit\": False},\r\n         '\u265f': {\"moves\": [(1, 1), (1, - 1)], \"limit\": True},\r\n         '\u265e': {\"moves\": [(2, 1), (2, - 1), (- 2, 1), (- 2, - 1), (- 1, 2), (1, 2), (- 1, - 2), (1, - 2)], \"limit\": True},\r\n         '\u265b': {\"moves\": [(1, 1), (1, - 1), (- 1, 1), (- 1, - 1), (1, 0), (0, 1), (- 1, 0), (0, - 1)], \"limit\": False}}\r\n\r\n\r\ndef king_is_in_check(chessboard):\r\n    hostile = [(square, x, y) for x, row in enumerate(chessboard)\r\n               for y, square in enumerate(row) if square not in (' ', '\u2654')]\r\n    return any([move(square, x, y, chessboard) for square, x, y in hostile])\r\n\r\n    def move(unit, x, y, board):\r\n    if UNITS[unit][\"limit\"]:\r\n    for a, b in UNITS[unit][\"moves\"]:\r\n    try:\r\n    if not is_in_board(x + a, y + b):\r\n    continue\r\n    square = board[x + a][y + b]\r\n    if square == '\u2654':\r\n    return True\r\n    except:\r\n        pass\r\n    return False\r\n    else:\r\n    for a, b in UNITS[unit][\"moves\"]:\r\n    base_a, base_b = a, b\r\n    while True:\r\n    try:\r\n    if not is_in_board(x + base_a, y + base_b):\r\n    break\r\n    square = board[x + base_a][y + base_b]\r\n    if square != ' ':\r\n    print(square)\r\n    if square == '\u2654':\r\n    return True\r\n    else:\r\n        break\r\n    base_a += a\r\n    base_b += b\r\n    except:\r\n        break\r\n    return False\r\n    def is_in_board(x, y):\r\n    return x >= 0 and y >= 0\r\n",
  "5c1bb3d8e514df60b1000242": "def artificial_rain(garden):\r\n    left, area, record = 0, 0, 1\r\n    for i in range(1, len(garden)):\r\n    if garden[i] < garden[i - 1]:\r\n    left = i\r\n    elif garden[i] > garden[i - 1]:\r\n    area = max(area, record)\r\n    record = i - left\r\n    record += 1\r\n    return max(area, record)\r\n",
  "5e1b37bcc5772a0028c50c5d": "from heapq import heappush, heappop\r\n\r\n\r\ndef min_num_taxis(requests):\r\n    taxis = [- 1]\r\n    for start, end in sorted(requests):\r\n    if taxis[0] < start:\r\n    heappop(taxis)\r\n    heappush(taxis, end)\r\n    return len(taxis)\r\n",
  "6025224447c8ed001c6d8a43": "from collections import defaultdict\r\nfrom functools import wraps\r\nCACHE = defaultdict(lambda: defaultdict(lambda: None))\r\n\r\n\r\ndef overload(* types):\r\n    def dec(func):\r\n    overloads = CACHE[func . __qualname__]\r\n    overloads[types] = func\r\n    @ wraps(func)\r\n    def wrapper(* a, * * kw):\r\n    typs = tuple(type(v) for v in a + tuple(kw . values()))\r\n    f = overloads[typs] or overloads[typs[1:]]\r\n    return f(* a, * * kw)\r\n    return wrapper\r\n    return dec\r\n",
  "5ebcfe1b8904f400208e3f0d": "from collections import defaultdict\r\n\r\n\r\nclass FuncAdd:\r\n    # Good Luck!\r\n    funcs = defaultdict(list)\r\n\r\n    def __init__(self, func):\r\n    name = func . __name__\r\n    FuncAdd . funcs[name]. append(func)\r\n    self . name = name\r\n    def __call__(self, * args, * * kwargs):\r\n    vals = []\r\n    if self . name not in FuncAdd . funcs:\r\n    raise NameError()\r\n    for f in FuncAdd . funcs[self . name]:\r\n    vals . append(f(* args, * * kwargs))\r\n    return tuple(vals)\r\n\r\n    @ classmethod\r\n    def delete(cls, self):\r\n    del cls . funcs[self . name]\r\n\r\n    @ classmethod\r\n    def clear(cls):\r\n    cls . funcs = defaultdict(list)\r\n",
  "5ea1de08a140dc0025b10d82": "def parse(c, f): return eval(sub(* ' ,', sub('\\((\\S*) ', r\"f['\\1'](\", c)))\n",
  "54e0816286522e95990007de": "# I think this kate could use more tests\r\nclass MyClass:\r\n    def __init__(self, f): self . gen = f()\r\n    def __enter__(self): return next(self . gen)\r\n    def __exit__(self, * args): pass\r\n    def contextmanager(f):\r\n    def wrapper(): return MyClass(f)\r\n    return wrapper\r\n",
  "5b574980578c6a6bac0000dc": "def get_without_every_piece(s):\r\n    Z = []\r\n    for i, x in enumerate(s):\r\n    if not x . isalpha():\r\n        continue\r\n    a, b, c, p, q = s[: i], 1, s[i + 1:], 0, 0\r\n    if a and a[- 1]. isdigit():\r\n        p, a = int(a[- 1]), a[: - 1]\r\n    if c and c[0]. isdigit():\r\n        q, c = int(c[0]), c[1:]\r\n    Z += [a + str(p + q + b) + c]\r\n    return Z\r\n",
  "589d1c08cc2e997caf0000e5": "from math import ceil\r\n\r\n\r\ndef array_erasing(lst):\r\n    # coding and coding...\r\n    dic = []\r\n    last = lst[0]\r\n    count = 0\r\n    for i, j in enumerate(lst):\r\n    if j == last:\r\n    count += 1\r\n    else:\r\n    dic . append(count)\r\n    last = j\r\n    count = 1\r\n    dic . append(count)\r\n    step = 0\r\n    length = len(dic)\r\n    p1 = (length - 1) / / 2\r\n    p2 = length / / 2\r\n    while True:\r\n    if len(dic) > 4:\r\n    if dic[p1] > 1 or dic[p2] > 1:\r\n    return step + ceil((length + 1) / 2)\r\n    if dic[p1 - 1] > 1:\r\n    step += 1\r\n    dic[p1 - 2] += dic[p1]\r\n    dic . pop(p1 - 1)\r\n    dic . pop(p1 - 1)\r\n    length = len(dic)\r\n    p1 = (length - 1) / / 2\r\n    p2 = length / / 2\r\n    continue\r\n    if dic[p2 + 1] > 1:\r\n    step += 1\r\n    dic[p2] += dic[p2 + 2]\r\n    dic . pop(p2 + 1)\r\n    dic . pop(p2 + 1)\r\n    length = len(dic)\r\n    p1 = (length - 1) / / 2\r\n    p2 = length / / 2\r\n    continue\r\n    if p1 >= 2 and p2 <= len(dic) - 4:\r\n    p1 -= 1\r\n    p2 += 1\r\n    elif len(dic) <= 4:\r\n    continue\r\n    else:\r\n    if dic[0] + dic[- 1] > 2:\r\n    return step + ceil(len(dic) / 2) + 1\r\n    else:\r\n    return step + ceil((len(dic) + 1) / 2)\r\n\r\n    else:\r\n    length = len(dic)\r\n    if length == 4:\r\n    if dic[1] + dic[2] == 2 and dic[0] + dic[3] >= 4:\r\n    return step + 4\r\n    else:\r\n    return step + 3\r\n    elif length == 3:\r\n    if dic[1] == 1 and dic[0] + dic[2] >= 3:\r\n    return step + 3\r\n    else:\r\n    return step + 2\r\n    else:\r\n    return len(dic)\r\n",
  "6129095b201d6b000e5a33f0": "def f(a, b, c):\r\n    return 3 * (a * b * c) + 2 * (a * b + b * c + a * c) + a + b + c\r\n",
  "588833be1418face580000d8": "def three_split(arr):\r\n    need = sum(arr) / 3\r\n    result, chunks, current = 0, 0, 0\r\n    for i in range(0, len(arr) - 1):\r\n    current += arr[i]\r\n    if current == 2 * need:\r\n    result += chunks\r\n    if current == need:\r\n    chunks += 1\r\n    return result\r\n",
  "5fee4559135609002c1a1841": "from itertools import product\r\nfrom string import ascii_lowercase\r\n\r\n\r\ndef short_url_generator():\r\n    for l in range(1, 5):\r\n    yield from ('short.ly/' + '' . join(p) for p in product(ascii_lowercase, repeat=l))\r\n\r\n    class UrlShortener:\r\n\r\n    short_urls = short_url_generator()\r\n    long_to_short = {}\r\n    short_to_long = {}\r\n\r\n    @ classmethod\r\n    def shorten(cls, long_url):\r\n    if long_url in cls . long_to_short:\r\n    return cls . long_to_short[long_url]\r\n\r\n    short_url = next(cls . short_urls)\r\n    cls . long_to_short[long_url] = short_url\r\n    cls . short_to_long[short_url] = long_url\r\n    return short_url\r\n    @ classmethod\r\n    def redirect(cls, short_url):\r\n    if short_url in cls . short_to_long:\r\n    return cls . short_to_long[short_url]\r\n\r\n    raise Exception('Redirection failed!')\r\n\r\n    Url_shortener = UrlShortener\r\n",
  "59f3956825d575e3330000a3": "import re\r\nREPL = {'R': '[GA]', 'Y': '[CT]', 'M': '[AC]', 'K': '[GT]', 'S': '[GC]',\r\n        'W': '[AT]', 'B': '[CGT]', 'D': '[AGT]', 'H': '[ACT]', 'V': '[ACG]', 'N': '[ACGT]'}\r\nREGIFY = re . compile(f'[ { \"\" . join ( REPL ) } ]')\r\n\r\n\r\ndef get_pos(base, seq, query):\r\n    q = next(re . finditer(\r\n        rf' { query } \\s+(?:\\([^)]*\\)\\s+)?([A-Z]+)', base), ['', ''])[1]\r\n    if not q:\r\n        return \"This query name does not exist in given Base\"\r\n    regS = REGIFY . sub(lambda m: REPL . get(m[0], m[0]), q)\r\n    found = \" \" . join(str(m . start() + 1)\r\n                       for m in re . finditer(regS, seq, flags=re . I))\r\n\r\n    return found or f\" { query } is not in given string\"\r\n",
  "603e0bb4e7ce47000b378d10": "TRANSFORMS = {\r\n    'M': [lambda x, y:(x, - y), lambda x, y:(- x, y), lambda x, y:(y, x), lambda x, y:(- y, - x)],\r\n    'C4': [lambda x, y:(y, - x)],\r\n    'C2': [lambda x, y:(- x, - y)],\r\n}\r\n\r\nGROUPS = (\r\n    ('D4', {'C4', 'M'}),\r\n    ('D2', {'C2', 'M'}),\r\n    ('C4', {'C4'}),\r\n    ('C2', {'C2'}),\r\n    ('M', {'M'}),\r\n)\r\n\r\n\r\ndef norm(lst):\r\n    mX, mY = map(min, zip(* lst))\r\n    return {(x - mX, y - mY) for x, y in lst}\r\n\r\n    def matchGrp(coords, f):\r\n    return coords == norm([f(x, y) for x, y in coords])\r\n\r\n    def symmetry(polyomino):\r\n    coords = norm([(x, y) for x, d in polyomino . items() for y in d])\r\n    ops = {grp for grp, syms in TRANSFORMS . items() if any(matchGrp(coords, f)\r\n                                                            for f in syms)}\r\n    return next((grpName for grpName, grpOps in GROUPS if grpOps <= ops), 'N')\r\n",
  "5ff296fc38965a000963dbbd": "from typing import List\r\n\r\n\r\ndef tree(root: str, files: List[str]):\r\n\r\n    padders = (('\u251c\u2500\u2500 ', '\u2502 '),\r\n               ('\u2514\u2500\u2500 ', ' '))\r\n\r\n    def dfs(root, tree, pad='', link='', follow=''):\r\n    yield pad + link + root\r\n    pad += follow\r\n    lst = sorted(tree . items(), key=lambda it: (not it[1], it[0]))\r\n    for n, (k, v) in enumerate(lst, 1):\r\n    yield from dfs(k, v, pad, * padders[n == len(lst)])\r\n\r\n    tree = {}\r\n    for path in files:\r\n    d = tree\r\n    for v in path . split('/'):\r\n    d[v] = d . get(v, {})\r\n    d = d[v]\r\n\r\n    yield from dfs(root, tree)\r\n",
  "60aa29e3639df90049ddf73d": "from itertools import accumulate\r\n\r\n\r\ndef binarray(lst):\r\n    d, m = {}, 0\r\n    acc = accumulate(lst, lambda a, v: a + (v or - 1), initial=0)\r\n    for i, a in enumerate(acc):\r\n    if a not in d:\r\n        d[a] = i\r\n    else:\r\n        m = max(m, i - d[a])\r\n    return m\r\n",
  "5c80b55e95eba7650dc671ea": "def complete_binary_tree(a):\r\n    def in_order(n=0):\r\n    if n < len(a):\r\n    yield from in_order(2 * n + 1)\r\n    yield n\r\n    yield from in_order(2 * n + 2)\r\n\r\n    result = [None] * len(a)\r\n    for i, x in zip(in_order(), a):\r\n    result[i] = x\r\n    return result\r\n",
  "5e41c408b72541002eda0982": "f \\\n    = \\\n    t(\n        '', (\n        ),\n        {'\\\n f\\\n ':\n         k('\\\n H\\\n e\\\n l\\\n l\\\n o\\\n,\n \\\n w\n           o\n           r\n           l\n           d !'\n           )}\n    )(\n    )\\\n    . f\n",
  "5d81d8571c6411001a40ba66": "from itertools import chain\n\n\ndef dots_and_boxes(moves):\n    nodes = 1 + max(chain . from_iterable(moves))\n    player, Y = 0, int(nodes * * .5)\n    pts, grid = [0, 0], [4] * nodes\n    for a, b in moves:\n    swap = 1\n    if a > b:\n        a, b = b, a\n    for i in (a, a - Y if b - a == 1 else a - 1):\n    if i < 0:\n        continue\n    grid[i] -= 1\n    if not grid[i]:\n    pts[player] += 1\n    swap = 0\n    player ^= swap\n    return tuple(pts)\n",
  "610ab162bd1be70025d72261": "def ideal_trader(prices):\r\n    res = 1\r\n    for i in range(1, len(prices)):\r\n    if prices[i] > prices[i - 1]:\r\n    res *= prices[i] / prices[i - 1]\r\n    return res\r\n",
  "5ec1692a2b16bb00287a6d8c": "from itertools import combinations\r\n\r\n\r\ndef area(a, b, c):\r\n    return abs(a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2\r\n    def maxmin_areas(points):\r\n    r = list(filter(lambda x: x > 0, map(\r\n        lambda p: area(* p), combinations(points, 3))))\r\n    return max(r), min(r)\r\n",
  "57c7930dfa9fc5f0e30009eb": "from math import ceil, floor, log2\r\n\r\n\r\ndef closest_power(n):\r\n    return (4 if n <= 4 else min(\r\n        (f(n * * (1 / i)) * * i\r\n         for i in range(2, ceil(log2(n)) + 1)\r\n         for f in (floor, ceil)),\r\n        key=lambda x: (abs(x - n), x)))\r\n",
  "5fdb81b71e47c6000d26dc4b": "from preloaded import Tree, Leaf, Branch\r\n\r\n\r\ndef tree_to_parens(tree: Tree) - > str:\r\n    def infix(tree):\r\n    node = tree\r\n    while getattr(node, 'right', None) is not None:\r\n    yield '('\r\n    yield from infix(node . left)\r\n    yield ')'\r\n    node = node . right\r\n    return '' . join(infix(tree))\r\n\r\n    def parens_to_tree(parens: str) - > Tree:\r\n    def chain():\r\n    node = Leaf()\r\n    while stack[- 1] is not None:\r\n    node = Branch(stack . pop(), node)\r\n    return node\r\n    stack = [None]\r\n    for par in parens:\r\n    if par == '(':\r\n        stack . append(None)\r\n    else:\r\n        stack[- 1] = chain()\r\n    return chain()\r\n",
  "61044b64704a9e0036162a1f": "def sort_the_pile(p, t):\r\n    for i in t:\r\n    if i > 0:\r\n    p = p[: - i] + sorted(p[- i:], reverse=True)\r\n    return p\r\n",
  "6112e90fda33cb002e3f3e44": "def lcd(n): return n and ((n * 79 + 4) / / 10 + lcd(n / / 100)) % 10\n",
  "6113c2dc3069b1001b8fdd05": "def count_duplicates(* args):\r\n    return len(args[0]) - len(set(zip(* args)))\r\n",
  "610bfdde5811e400274dbf66": "from collections import Counter\r\n\r\n\r\ndef missing_cards(cards):\r\n    cs = Counter(x for c in cards for x in c)\r\n    y = next(x for x, k in cs . items() if k == 6)\r\n    r = [[y], [y]]\r\n    for x in (x for x, k in cs . items() if k == 7):\r\n    s = set(r[1] + [x])\r\n    r[all(len(set(c) & s) <= 1 for c in cards)]. append(x)\r\n    return [* map(tuple, r)]\r\n",
  "5852d0d463adbd39670000a1": "from collections import deque\r\n\r\n\r\ndef mirrored_exponential_chunks(arr):\r\n    left, median = divmod(len(arr), 2)\r\n    p, right, mirror = 1, left + median, deque([])\r\n    if median:\r\n        mirror . append(arr[left: right])\r\n    while left > 0:\r\n    p *= 2\r\n    mirror . appendleft(arr[max(left - p, 0): left])\r\n    mirror . append(arr[right: right + p])\r\n    left -= p\r\n    right += p\r\n    return list(mirror)\r\n",
  "61055e2cb02dcb003da50cd5": "from itertools import combinations\r\n\r\n\r\ndef pair_items(a, b):\r\n    n = min(len(a), len(b))\r\n    return [list(zip(x, y)) for x in combinations(a, n) for y in combinations(b, n)]\r\n",
  "61026860c135de00251c6a54": "def decode(s, r, a): return \"\" . join(\n    chr((e := x - t - r - a) + [39, 97][e < 26]) for t, x in zip([0, * s], s))\n",
  "610159919347db0019cabddc": "INF = float('inf')\r\n\r\n\r\ndef determine_sequence(arr):\r\n    isArith = len({b - a for a, b in zip(arr, arr[1:])}) == 1\r\n    isGeom = len({b / a if a else INF for a, b in zip(arr, arr[1:])}) == 1\r\n    return set(arr) != {0} and - 1 + isArith + 2 * isGeom\r\n",
  "60fb2e158b940b00191e24fb": "def number_of_duplicate_digits(n):\r\n    return 9 * 10 * * (n - 1) - 9 * * n\r\n",
  "60815326bbb0150009f55f7e": "# https://en.wikipedia.org/wiki/Erd\u0151s\u2013Gallai_theorem#Statement\r\ndef solution(degrees):\r\n    degrees = sorted(filter(None, degrees), reverse=True)\r\n    return not degrees or sum(degrees) % 2 == 0 and all(sum(degrees[: k + 1]) <= k * (k + 1) + sum(min(k + 1, x) for i, x in enumerate(degrees[k + 1:])) for k in range(len(degrees)))\r\n",
  "5e94456c4af7f4001f2e2a52": "SHIPS = dict(zip('<>^v', [(0, - 1), (0, 1), (- 1, 0), (1, 0)]))\r\nMIRRORS = {'/': - 1, '\\\\': 1}\r\n\r\n\r\ndef rotate(dx, dy, c): c = MIRRORS[c]; return dy * c, dx * c\r\n\r\n\r\ndef laser(lst):\r\n    X, Y = len(lst), len(lst[0])\r\n    out, seen = set(), set()\r\n    lasers = {(x, y, * SHIPS[c]) for x, r in enumerate(lst)\r\n              for y, c in enumerate(r) if c in SHIPS}\r\n    while lasers:\r\n    seen |= lasers\r\n    bag = set()\r\n    for x, y, dx, dy in lasers:\r\n    a, b = x + dx, y + dy\r\n    if 0 <= a < X and 0 <= b < Y:\r\n    c = lst[a][b]\r\n    if c in SHIPS:\r\n    if SHIPS . get(c, (1, 1)) == (- dx, - dy):\r\n    for m in '/\\\\':\r\n        bag . add((a, b, * rotate(dx, dy, m)))\r\n    else:\r\n    if c . isalnum():\r\n        out . add((a, b))\r\n    if c in MIRRORS:\r\n        dx, dy = rotate(dx, dy, c)\r\n    bag . add((a, b, dx, dy))\r\n    lasers = bag - seen\r\n    return sorted(lst[a][b] for a, b in out)\r\n",
  "5efdde81543b3b00153e918a": "from string import ascii_uppercase as letters\r\nimport re\r\n\r\n\r\ndef encipher(s, key, S=5):\r\n\r\n    def cleanW(s): return s . replace(' ', '')\r\n\r\n    def replKey(m):\r\n    di = (m[0] + 'X')[: 2]\r\n    (i, j), (x, y) = (chars[c] for c in di)\r\n    return (mat[i][(j + 1) % S] + mat[x][(y + 1) % S] if i == x else\r\n            mat[(i + 1) % S][j] + mat[(x + 1) % S][y] if j == y else\r\n            mat[i][y] + mat[x][j])\r\n\r\n    def unused(c):\r\n    nonlocal clean\r\n    if c in used:\r\n        return False\r\n    if c in 'IJ':\r\n    if c == 'J':\r\n        clean = 'IJ'\r\n    used . update('IJ')\r\n    else:\r\n        used . add(c)\r\n    return True\r\n    clean = 'JI'\r\n    used = set()\r\n    it = iter(cleanW(key . upper() + letters))\r\n    mat = [[next(c for c in it if c . isalpha() and unused(c))\r\n            for _ in range(S)] for _ in range(S)]\r\n    chars = {c: (i, j) for i, r in enumerate(mat) for j, c in enumerate(r)}\r\n\r\n    ss = re . sub(r'([A-Z])(?=\\1)', r'\\1X',\r\n                  cleanW(s . upper()). replace(* clean))\r\n    it = iter(re . sub(r'..?', replKey, ss))\r\n    return re . sub(r'\\w', lambda _: next(it), s) + '' . join(it)\r\n",
  "60f9f0145a54f500107ae29b": "def solve_sequence(seq):\r\n    ds = [(seq[:] or [0])]\r\n    while len(set(seq)) > 1:\r\n    ds . append(seq := [b - a for a, b in zip(seq, seq[1:])])\r\n    def fact(n, l): return n * fact(n - 1, l - 1) if l else 1\r\n    terms = [v[0] / / fact(i, i) for i, v in enumerate(ds)]\r\n    return lambda n: sum(v * fact(n, i) if i else v for i, v in enumerate(terms))\r\n",
  "57e32bb7ec7d241045000661": "total, memo = 0, [[], [], [], []]\r\nfor z in range(4, 600):\r\n    x, z3, tmp = 1, z * * 3, []\r\n    while (x2 := x * * 2) < z3:\r\n    y2, r = divmod(z3 - x2, 3)\r\n    if r == 0 and (y := y2 * * 0.5) % 1 == 0:\r\n    tmp . append([x, int(y), z])\r\n    total += 1\r\n    x += 1\r\n    if tmp:\r\n    tmp . sort(key=lambda t: (sum(t), - t[0]))\r\n    else:\r\n    tmp = memo[- 1][1]\r\n    memo . append([total, tmp])\r\n\r\n    dioph_solver = memo . __getitem__\r\n",
  "60fa9511fb42620019966b35": "def peel_the_onion(s, d):\r\n    return [i * * d - (i - 2) * * d if i > 1 else 1 for i in range(s, 0, - 2)]\r\n",
  "5901aee0af945e3a35000068": "import numpy as np\r\nfrom itertools import permutations, chain\r\n\r\n\r\ndef rearr(matrix):\r\n    ln = len(matrix)\r\n    for p in permutations(chain . from_iterable(matrix)):\r\n    arr = np . reshape(p, (ln, ln))\r\n    if np . linalg . det(arr) == 0:\r\n    return arr . tolist()\r\n    return - 1\r\n",
  "566b4504595b1b2317000012": "def make_sum_chains(f_, n):\r\n    return sum(f_(i) * sum(f(i) for f in FUNCTIONS if f != f_) for i in range(1, n + 1))\r\n",
  "60eb76fd53673e001d7b1b98": "# Who needs loops?\ndef counting_hexagons(n):\n    x = n / / 3\n    s0 = x\n    s1 = x * (x - 1) / / 2\n    s2 = s1 * (2 * x - 1) / / 3\n    s3 = s1 * s1\n    m0 = s0 * (n * * 2 - 3 * n + 2)\n    m1 = s1 * (n * * 2 - 9 * n + 11)\n    m2 = s2 * (- 6 * n + 18)\n    m3 = s3 * 9\n    return (m0 + m1 + m2 + m3) / / 2\n",
  "57fb33039610ce3b490000f9": "from itertools import count, takewhile\r\nfrom collections import Counter\r\nfrom math import ceil\r\n\r\n\r\ndef count_col_hits(k, col, rng):\r\n    a, b = rng\r\n    na = ceil((- (2 * k + 1) + ((2 * k + 1) * * 2 + 8 * (k + a)) * * .5) / 2)\r\n    c = Counter(col[(v - 1) % len(col)] for v in takewhile(lambda v: v <= b, (n * (n + 1) / / 2 + (n - 1) * k for n in count(na))))\r\n\r\n    if not c:\r\n        return []\r\n\r\n    mCol = max(c . values())\r\n    lst = sorted(k for k, v in c . items() if v == mCol)\r\n    return [mCol, lst if len(lst) != 1 else lst[0]]\r\n",
  "569d754ec6447d939c000046": "from itertools import accumulate, chain, count, dropwhile, takewhile, islice, permutations\r\n\r\n\r\ndef permuted_powerset(digits):\r\n    l = list(map(str, digits))\r\n    c = chain . from_iterable(permutations(l, r) for r in range(1, len(l) + 1))\r\n    return dropwhile(0 . __eq__, map(int, map('' . join, c)))\r\n\r\n    def sublist_sum_below(m, iterable):\r\n    l = list(takewhile(m . __ge__, iterable))\r\n    a = (accumulate(islice(l, i, None)) for i in range(len(l)))\r\n    return chain . from_iterable(takewhile(m . __ge__, g) for g in a)\r\n\r\n    def count_hits_powterm(digits, power):\r\n    p = set(permuted_powerset(digits))\r\n    s = p . intersection(sublist_sum_below(\r\n        max(p), map(power . __rpow__, count(1))))\r\n    return len(s), sorted(s)\r\n",
  "56411486f3486fd9a300001a": "from collections import defaultdict\r\nfrom functools import reduce\r\nfrom math import gcd\r\nfrom heapq import *\r\n\r\n\r\ndef queuer(n, m): return m * (m + n), n, m\r\n\r\n\r\nMAX_P = 1500000\r\nD_ORD = defaultdict(list)\r\nq, seen = [queuer(2, 3)], set((2, 3))\r\n\r\nwhile q:\r\n    p, n, m = heappop(q)\r\n    a, b, c = tri = tuple(sorted((n * n, m * n, m * m - n * n)))\r\n\r\n    if reduce(gcd, tri) == 1:\r\n        D_ORD[p]. append(tri)\r\n\r\n    for nxt in ((n + 1, m + (m - n == 1)), (n, m + 1)) if m < 2 * n - 1 else ((n + 1, m + (m - n == 1)),):\r\n    if nxt not in seen:\r\n    tup = queuer(* nxt)\r\n    if tup[0] <= MAX_P:\r\n    heappush(q, tup)\r\n    seen . add(nxt)\r\n\r\n    LST = [[k, sorted(lst)] for k, lst in D_ORD . items()]\r\n\r\n    def per_ang_twice(n): return LST[n - 1]\r\n",
  "5c178c8430f61aa318000117": "VALID_PAWN_MOVE_REGEX = '([a-h][2-7]|[a-h][18]=[QBNR]|(axb|bx[ac]|cx[bd]|dx[ce]|ex[df]|fx[eg]|gx[fh]|hxg)([2457]|[36](e\\.p\\.)?|[18](=[QBNR])?))[+#]?$'\n",
  "56876fd23475fa415e000031": "map = {\r\n    \"r\": \"\u2656\",\r\n    \"n\": \"\u2658\",\r\n    \"b\": \"\u2657\",\r\n    \"q\": \"\u2655\",\r\n    \"k\": \"\u2654\",\r\n    \"p\": \"\u2659\",\r\n    \"R\": \"\u265c\",\r\n    \"N\": \"\u265e\",\r\n    \"B\": \"\u265d\",\r\n    \"Q\": \"\u265b\",\r\n    \"K\": \"\u265a\",\r\n    \"P\": \"\u265f\",\r\n}\r\n\r\nblank1 = \"\u2587\"\r\nblank2 = \"\uff3f\"\r\n\r\n\r\ndef parse_fen(string):\r\n    fields = string . split(\" \")\r\n    state = fields[0]. split(\"/\")\r\n    flip = 1 if fields[1] == \"w\" else - 1\r\n    board = \"\"\r\n    for y, row in enumerate(state[:: flip]):\r\n    x = 0\r\n    for code in row[:: flip]:\r\n    if code in map:\r\n    board += map[code]\r\n    x += 1\r\n    else:\r\n    for _ in range(int(code)):\r\n    board += blank2 if (y + x) % 2 else blank1\r\n    x += 1\r\n    board += \"\\n\"\r\n    return board\r\n",
  "5f30a416542ae3002a9c4e18": "from math import gcd\r\n\r\n\r\ndef reflecting_light(max_x, max_y, point, num_reflections):\r\n    dx, dy = point\r\n    if dx == 0 or dy == 0:\r\n    return 0, 0, 0, 0\r\n    d = gcd(dx, dy)\r\n    max_x *= dy / / d\r\n    max_y *= dx / / d\r\n    r0 = (max_x + max_y) / / gcd(max_x, max_y)\r\n    r = min(r0, num_reflections + 1)\r\n    nx = max_x * r / / (max_x + max_y) - (r == r0)\r\n    ny = max_y * r / / (max_x + max_y) - (r == r0)\r\n    return (nx + 1) / / 2, (ny + 1) / / 2, nx / / 2, ny / / 2\r\n",
  "5f78635e51f6bc003362c7d9": "def is_it_possible(field):\r\n    flag = True\r\n    ls = [(0, 1, 2), (3, 4, 5), (6, 7, 8), (0, 3, 6),\r\n          (1, 4, 7), (2, 5, 8), (0, 4, 8), (2, 4, 6)]\r\n    num = field . count('X') - field . count('0')\r\n    dic = {1: ('0', '0', '0'), 0: ('X', 'X', 'X')}\r\n    if num in [0, 1]:\r\n    for a, b, c in ls:\r\n    if (num, (field[a], field[b], field[c])) in dic . items():\r\n    flag = False\r\n    else:\r\n        flag = False\r\n    return flag\r\n",
  "5ca22e6b86eed5002812061e": "from bisect import bisect\r\nFIB = [0, 1]\r\nTOP = 2 * * 512\r\na, b = 1, 1\r\nwhile FIB[- 1] < TOP:\r\n    a, b = a + b, a\r\n    FIB . append(a)\r\n\r\n    def nearest_fibonacci(n):\r\n    i = bisect(FIB, n)\r\n    return min(FIB[i - 1: i + 1], key=lambda v: (abs(v - n), v))\r\n",
  "5f845fcf00f3180023b7af0a": "def how_many_times(a, b):\n    if a > b:\n        a, b = b, a\n    if a <= 0:\n        return - 1\n    if a == b:\n        return a\n    n = b - a\n    return sum(1 + (x < n / x <= a) for x in range(1, min(a, int(n * * 0.5)) + 1) if not n % x)\n",
  "5ef9c85dc41b4e000f9a645f": "def scanner(qrc):\r\n    bits = '' . join(str(qrc[x][y] ^ ((x + y) % 2 == 0))\r\n                     for x, y in ticTocGen())\r\n    size = int(bits[4: 12], 2)\r\n    return '' . join(chr(int(bits[i: i + 8], 2)) for i in range(12, 12 + 8 * size, 8))\r\n\r\n    def ticTocGen():\r\n    x, y, dx = 20, 20, - 1\r\n    while y > 13:\r\n    yield from ((x, y - dy) for dy in range(2))\r\n    x += dx\r\n    if x == 8 or x > 20:\r\n    dx *= - 1\r\n    y -= 2\r\n    x = x == 8 and 9 or 20\r\n",
  "5e3f043faf934e0024a941d7": "def codewar_result(codewarrior, opponent):\r\n    armies = sorted(codewarrior, reverse=True)\r\n    opp = sorted(opponent, reverse=True)\r\n    wins = 0\r\n    while opp:\r\n\r\n    if max(armies) < max(opp):\r\n    opp . remove(max(opp))\r\n    armies . remove(min(armies))\r\n    wins -= 1\r\n    elif max(armies) > min(opp):\r\n    target = max(i for i in opp if i < max(armies))\r\n    optimal = min(i for i in armies if i > target)\r\n    opp . remove(target)\r\n    armies . remove(optimal)\r\n    wins += 1\r\n    elif max(armies) == max(opp):\r\n    opp . remove(max(opp))\r\n    armies . remove(max(armies))\r\n\r\n    if wins == 0:\r\n    return 'Stalemate'\r\n    elif wins > 0:\r\n    return 'Victory'\r\n    else:\r\n    return 'Defeat'\r\n",
  "5c2bedd7eb9aa95abe14d0ed": "from datetime import datetime\n\n\ndef get_calendar_week(date_string):\n    return datetime . strptime(date_string, \"%Y-%m-%d\"). isocalendar()[1]\n",
  "5b4e9d82beb865d4150000b1": "import re\n\n\ndef correct(m):\n    w, n, v = m . groups()\n    v = v or ''\n    if n:\n    return w + v\n    nt = \"N'T\" if w . isupper() and (not v or v . isupper()) else \"n't\"\n    return f\" { w }{ nt [ w . lower () == 'can' :]}{ v } \"\n    def speech_correction(words, speech):\n    return speech if not words else re . sub(rf\"\\b( { '|' . join ( words )} )((?<=can)'t|n't)?('ve)?\\b\", correct, speech, flags=re . I)\n",
  "571dd22c2b97f2ce400010d4": "from gmpy2 import is_prime\r\nfrom itertools import starmap\r\nfrom collections import Counter\r\nfrom operator import itemgetter, pow\r\n\r\n\r\ndef score(L): return sum(starmap(pow, Counter(L). items())) * len(L)\r\n\r\n\r\ndef find_spec_prod_part(n, com):\r\n    def gen(x, d=2):\r\n    if x == 1:\r\n    yield []\r\n    for y in range(d, min(n, x + 1)):\r\n    if x % y == 0:\r\n    for res in gen(x / / y, y):\r\n    yield res + [y]\r\n\r\n    if is_prime(n):\r\n        return \"It is a prime number\"\r\n    return eval(com)(([x, score(x)] for x in gen(n)), key=itemgetter(1))\r\n",
  "5614adad2283aa822f0000b3": "def find_factors(nm):\r\n    res, cur, lnm = [], 2, nm\r\n    while lnm >= cur * * 2:\r\n    if lnm % cur == 0:\r\n    res . append(cur)\r\n    lnm / /= cur\r\n    else:\r\n    cur += 1\r\n    return res + [lnm] * (lnm != nm)\r\n\r\n    def prod_int_partII(n, s):\r\n    fct = find_factors(n)\r\n\r\n    tot, cur, stot, sarr = int(len(fct) > 0), {tuple(fct)}, 0, []\r\n    if s == len(fct):\r\n    stot, sarr = tot, fct\r\n    for k in range(len(fct) - 2):\r\n    cset = set()\r\n    for t in cur:\r\n    for i, x in enumerate(t):\r\n    for j, y in enumerate(t[i + 1:], i + 1):\r\n    cset . add(\r\n        tuple(sorted(t[: i] + t[i + 1: j] + t[j + 1:] + (t[i] * t[j],))))\r\n    cur = cset\r\n    tot += len(cur)\r\n    if k == len(fct) - s - 1:\r\n    stot, sarr = len(cur), sorted(sorted(c)\r\n                                  for c in cset) if len(cset) > 1 else sorted(cset . pop())\r\n\r\n    return [tot, stot, sarr]\r\n",
  "5f2dcbbd1b69a9000f225940": "from collections import Counter\r\n\r\n\r\ndef order_by_frequency(text):\r\n    frequencies = Counter(filter(str . islower, text . lower()))\r\n    return sorted(frequencies, key=frequencies . get, reverse=True)\r\n\r\n    def key(extract, ordered=order_by_frequency(a_scandal_in_bohemia)):\r\n    table = dict(zip(order_by_frequency(extract), ordered))\r\n    return '' . join(sorted(table, key=table . get))\r\n",
  "6067346f6eeb07003fd82679": "def solve(grid):\r\n    n0 = len(grid)\r\n    n = n0 & ~ 1\r\n    rs = [0] * n\r\n    cs = [0] * n\r\n    for ir in range(n):\r\n    for ic in range(n):\r\n    if grid[ir][ic]:\r\n    rs[ir] ^= 1\r\n    cs[ic] ^= 1\r\n    res = [(ic, ir)\r\n           for ir in range(n)\r\n           for ic in range(n)\r\n           if not rs[ir] ^ cs[ic] ^ grid[ir][ic]]\r\n    if n0 % 2 == 1 and not grid[n][n]:\r\n    res . append((n, n))\r\n    return res\r\n",
  "5c658c2dd1574532507da30b": "from collections import defaultdict\r\nWORDS = defaultdict(lambda: defaultdict(list))\r\nfor w in words:\r\n    for i, c in enumerate(w):\r\n    WORDS[c][i]. append(w)\r\n\r\n    def crossword_2x2(puzzle):\r\n\r\n    def count(a, b): return (a, b, sum(values[c] for c in a + b))\r\n    def hasHash(r): return '#' in r\r\n    def hasLetter(r): return any(c . isalpha() for c in r)\r\n\r\n    def findPos(pred): return [next(i for i, r in enumerate(arr) if pred(r))\r\n                               for arr in (puzzle, zip(* puzzle))]\r\n\r\n    (xH, yH), (xL, yL) = map(findPos, (hasHash, hasLetter))\r\n    cnds = WORDS[puzzle[xL][yL]]\r\n\r\n    if xH != xL and yH != yL:\r\n    genAcrossDown = ((a, b) for a in cnds[yL] for b in cnds[xL])\r\n    elif xH == xL:\r\n    genAcrossDown = ((b, a) for a in cnds[xL] for b in WORDS[a[1 ^ xL]][yL])\r\n    else:\r\n    genAcrossDown = ((a, b) for a in cnds[yL] for b in WORDS[a[1 ^ yL]][xL])\r\n\r\n    return sorted((count(a, b) for a, b in genAcrossDown if a != b),\r\n                  key=lambda x: (- x[- 1], x))\r\n",
  "56bcafba66a2ab39e6001226": "def simplify(p):\r\n    new_p = [(0, 0)]\r\n    new_str = ''\r\n    x = 0\r\n    y = 0\r\n    for i in p:\r\n    if i == '<':\r\n    x -= 1\r\n    elif i == '>':\r\n    x += 1\r\n    elif i == '^':\r\n    y += 1\r\n    elif i == 'v':\r\n    y -= 1\r\n    if (x, y) not in new_p:\r\n    new_p . append((x, y))\r\n    new_str += i\r\n    else:\r\n    for j in new_p[:: - 1]:\r\n    if j != (x, y):\r\n    new_p . pop()\r\n    new_str = new_str[: - 1]\r\n    else:\r\n    break\r\n    return new_str\r\n",
  "5735b2b413c205fe39000c68": "def shorten(ip, i=7):\r\n    ip = \":\" + \":\" . join([group . lstrip(\"0\")\r\n                          or \"0\" for group in ip . split(\":\")])\r\n    length = len(ip)\r\n    while i and len(ip) == length:\r\n    ip = ip . replace(\":0\" * i, \"::\", 1)\r\n    i -= 1\r\n    return ip[1:]. replace(\":::\", \"::\")\r\n",
  "5543e329a69dcb81b9000111": "def expected_utility(p0, p1, utilities):\r\n    ln = len(p0)\r\n    return round(sum(utilities[i][j] * p0[i] * p1[j] for i in range(ln) for j in range(ln)), 2)\r\n",
  "55b0fb65e1227b17d60000dc": "import json\r\n\r\n\r\ndef jsonattr(filepath):\r\n    def decorate(cls):\r\n    with open(filepath) as json_file:\r\n    for name, value in json . load(json_file). items():\r\n    setattr(cls, name, value)\r\n    return cls\r\n    return decorate\r\n",
  "5bfb0d9b392c5bf79a00015a": "def create_octahedron(size):\r\n    if size <= 1 or size % 2 == 0:\r\n    return []\r\n    m = size / / 2\r\n    return [[[int(abs(x - m) + abs(y - m) + abs(z - m) <= m)\r\n              for z in range(size)]\r\n             for y in range(size)]\r\n            for x in range(size)]\r\n",
  "58b34b2951ccdb84f2000093": "from itertools import accumulate\r\n\r\n\r\ndef earth_movers_distance(x, px, y, py):\r\n    values, dx, dy = sorted(set(x + y)), dict(zip(x, px)), dict(zip(y, py))\r\n    dist = (b - a for a, b in zip(values, values[1:]))\r\n    diff = accumulate(dy . get(n, 0) - dx . get(n, 0) for n in values)\r\n    return sum(d * abs(n) for d, n in zip(dist, diff))\r\n",
  "577d0a117a3dbd36170001c2": "from itertools import chain\r\nTOME = {\r\n    '8 weeks': ['fiveInOne', 'pneumococcal', 'rotavirus', 'meningitisB'],\r\n    '12 weeks': ['fiveInOne', 'rotavirus'],\r\n    '16 weeks': ['fiveInOne', 'pneumococcal', 'meningitisB'],\r\n    '12 months': ['meningitisB', 'hibMenC', 'measlesMumpsRubella'],\r\n    '40 months': ['measlesMumpsRubella', 'preSchoolBooster'],\r\n    'september': ['offer fluVaccine'],\r\n    'october': ['offer fluVaccine'],\r\n    'november': ['offer fluVaccine'],\r\n}\r\n\r\n\r\ndef vaccine_list(* args):\r\n    return sorted(set(chain . from_iterable(\r\n        TOME . get(s, ()) for s in args\r\n    )))\r\n",
  "5d0ae91acac0a50232e8a547": "def traffic_lights(road, n):\r\n    lightsIdx = [(i, 6 * (c != 'G')) for i, c in enumerate(road) if c in 'RG']\r\n    car, ref = road . find('C'), road . replace('C', '.')\r\n    mut, out = list(ref), [road]\r\n\r\n    for turn in range(1, n + 1):\r\n\r\n    for i, delta in lightsIdx:  # Update all lights\r\n    state = (delta + turn) % 11\r\n    mut[i] = 'G' if state < 5 else 'O' if state == 5 else 'R'\r\n    # Move the car if possible (even if outside of the road)\r\n    car += car + 1 >= len(road) or mut[car + 1] in '.G'\r\n    if car < len(road):\r\n        # Update, archive, then restore the road state\r\n        old, mut[car] = mut[car], 'C'\r\n    out . append('' . join(mut))\r\n    if car < len(road):\r\n        mut[car] = old\r\n    return out\r\n",
  "5edc8c53d7cede0032eb6029": "def solve(n):\r\n    for i in range(int(n * * 0.5), 0, - 1):\r\n    x = n - i * * 2\r\n    if x > 0 and x % (2 * i) == 0:\r\n    return ((n - i * * 2) / / (2 * i)) * * 2\r\n    return - 1\r\n",
  "5f579a3b34d5ad002819eb9e": "def sharkovsky(a, b): return f(a) < f(b)\r\n\r\n\r\ndef f(n, p=0):\r\n    while n % 2 == 0:\r\n    n >>= 1\r\n    p += 1\r\n    return n == 1, p * (- 1) * * (n == 1), n\r\n",
  "5f05e334a0a6950011e72a3a": "def keyer(w): return (len(w), - sum(map(str . isupper, w)), w)\r\n\r\n\r\ndef index_of(words, target):\r\n\r\n    def cmp(i, base=keyer(target)):\r\n    o = keyer(words[i])\r\n    return (o > base) - (o < base)\r\n\r\n    l, h = 0, len(words)\r\n    while l < h:\r\n    m = h + l >> 1\r\n    v = cmp(m)\r\n    if not v:\r\n        return m\r\n    if v < 0:\r\n        l = m\r\n    else:\r\n        h = m\r\n",
  "5fc85f4d682ff3000e1c4305": "def pin_rook(* kb):\r\n    (_, x, y), (_, i, j) = kb\r\n    if x == i:\r\n        return [f\"R { x }{ r } \" for r in '12345678' if y < j < r or r < j < y]\r\n    if y == j:\r\n        return [f\"R { r }{ y } \" for r in 'abcdefgh' if x < i < r or r < i < x]\r\n    return []\r\n",
  "5f70c55c40b1c90032847588": "def points(dice):\n    dice = sorted([int(d) for d in dice])\n    counts = [dice . count(i) for i in range(1, 7)]\n    if 5 in counts:\n        # GENERALA\n    return 50\n    if 4 in counts:\n        # POKER\n    return 40\n    if 3 in counts and 2 in counts:\n        # FULLHOUSE\n    return 30\n    if counts . count(1) == 5 and counts . index(0) not in [2, 3, 4]:\n        # STRAIGHT\n    return 20\n    return 0\n",
  "5f6d120d40b1c900327b7e22": "def leaderboard_sort(leaderboard, changes):\r\n    for change in changes:\r\n    name, delta = change . split()\r\n    idx = leaderboard . index(name)\r\n    leaderboard . insert(idx - int(delta), leaderboard . pop(idx))\r\n    return leaderboard\r\n",
  "5fe382d3e01a94000d54916a": "import re\r\n\r\n\r\nclass Investigator:\r\n    def __init__(self): self . decoded = []\r\n    def postcard(self, s): self . decoded . append(\r\n        '' . join(re . findall(r'(?<=\\w)[A-Z]| (?= )', s)))\r\n\r\n    def hidden_message(self): return '' . join(self . decoded)\r\n",
  "5f885fa9f130ea00207c7dc8": "import regex\r\n\r\n\r\ndef loneliest(s):\r\n    ss = regex . findall(r'(?<!\\s)\\s*\\S\\s*', s . strip(), overlapped=True)\r\n    max_len = max(map(len, ss))\r\n    return [s . strip() for s in ss if len(s) == max_len]\r\n",
  "602d1d769a1edc000cf59e4c": "import numpy as np\n''' \n    Parameters: \n    - days (n) number of days for prediction, an integer \n    - weather_today (i), an integer \n    - final_whether (j) we want to predict in n days, an integer \n    - P = [[p_11, ..., p_1k], [p_21, ..., p_2k], ..., [p_k1, ..., p_kk]], \n    tranistion matrix, where p_xy is probability going from weather x to y in one day \n    '''\n\n\ndef weather_prediction(days, weather_today, final_weather, P):\n    return np . linalg . matrix_power(np . array(P). transpose(), days)[final_weather, weather_today]\n",
  "5f9d63c2ac08cb00338510f7": "def is_cyclic(p):\r\n    links = dict(zip(* p))\r\n    m = next(iter(links))\r\n    while m in links:\r\n    m = links . pop(m)\r\n    return not links\r\n",
  "5fad2310ff1ef6003291a951": "def weigh_the_list(a):\r\n    return [w for i in range(0, len(a), 2) for w in [a[i + 1], - a[i]]]\r\n",
  "5f0ea61fd997db00327e6c25": "def fcfs(lst):\n    t, CT, TAT, WRT, dTP = (0,) * 5\n    for at, bt in sorted(lst):\n    if t < at:\n    dTP, t = dTP - (at - t), at\n    ct = t + bt\n    CT += ct\n    WRT += t - at\n    TAT += ct - at\n    t += bt\n    return tuple(round(v / len(lst), 2) for v in (CT, TAT, WRT, dTP + t))\n",
  "5f8584916ddaa300013e1592": "from itertools import count\n\n\ndef squared_digits_series(n):\n    s = n\n    for p in count():\n    p = 2 * * p\n    x = min(p, n)\n    s += 10 * p * x\n    n -= x\n    if n < 1:\n        return s\n",
  "5fc2a4b9bb2de30012c49609": "INF = float('inf')\r\n\r\n\r\ndef order_breaker(lst):\r\n    return next(b for a, b, c in zip([- INF] + lst, lst, lst[1:] + [INF])\r\n                if a <= c and (a > b or b > c))\r\n",
  "5ff369c8ee41be0021770fee": "def build_table(lst, style):\r\n    if not lst:\r\n        return ''\r\n    align = {'left': '<', 'mid': '^', 'right': '>'}[style . align]\r\n    pad = style . sep_hi * style . off_min\r\n    sizes = [max(map(len, r)) for r in zip(* lst)]\r\n    fullsize = sum(sizes) + style . off_min * 2 * len(sizes) + \\\r\n        (len(sizes) - 1) * len(style . sep_vi) + 2 * len(style . sep_ve)\r\n\r\n    def buildCell(\r\n        w, size): return f' { pad }{ w . replace ( \" \" , style . sep_hi ) :{ style . sep_hi }{ align }{ size }}{ pad } '\r\n\r\n    def buildRow(r): return style . sep_vi . join(buildCell(w, size)\r\n                                                  for w, size in zip(r, sizes))\r\n\r\n    return '\\n' . join((style . sep_he * fullsize,\r\n                        * (\"{ve}{row}{ve}\" . format(ve=style . sep_ve, row=buildRow(r)) for r in lst))\r\n                       )\r\n",
  "5fbfa1f738c33e00082025e0": "def collatz():\r\n    seq = {1}\r\n    while True:\r\n    yield from sorted(seq)\r\n    seq = {2 * x for x in seq} | {~ - x / / 3 for x in seq if x % 6 == 4} - {1}\r\n",
  "5f5daf1a209a64001183af9b": "def make_chocolates(s, b, n):\r\n    bigs = min(n / / 5, b)\r\n    n -= 5 * bigs\r\n    if n & 1 and bigs:\r\n        n += 5\r\n    smalls = min(s, n / / 2)\r\n    return - 1 if n - 2 * smalls else smalls\r\n",
  "605d58ab7f229d001bac446e": "def spinning_wheel(wheel):\r\n    n, k = len(wheel), wheel . count('W')\r\n    return 100 * n / / (2 * n - k) if k else 0\r\n",
  "5f3afc40b24f090028233490": "from itertools import cycle\r\n\r\n\r\ndef swap(s, n):\r\n    b = cycle(bin(n)[2:])\r\n    return \"\" . join(c . swapcase() if c . isalpha() and next(b) == '1' else c for c in s)\r\n",
  "603301b3ef32ea001c3395d0": "def cinema(x, y):\r\n    if 2 * x >= y and 2 * y >= x:\r\n    return \"BGB\" * (x - y) + \"GBG\" * (y - x) + \"BG\" * (min(x, y) - abs(x - y))\r\n",
  "602afedfd4a64d0008eb4e6e": "from datetime import *\n\n\ndef get_day(days, is_leap):\n    return (date(2019 + is_leap, 1, 1) + timedelta(days - 1)). strftime(\"%B, %-d\")\n",
  "60ca2ce44875c5004cda5c74": "def calc_distance(path):\r\n    return 5 * sum(\r\n        max(abs(a - b) for a, b in zip(p1, p2))\r\n        for p1, p2 in zip(path, path[1:]))\r\n",
  "604693a112b42a0016828d03": "def guess_number(answers):\r\n    return int('' . join(map(str, reversed(answers))), 2)\r\n\r\n    def answers_sequence(n):\r\n    return list(map(int, reversed(f\" { n :0 5 b } \")))\r\n",
  "5f3e7df1e0be5a00018a008c": "from collections import defaultdict\r\n\r\n\r\ndef print_tob(feed):\r\n    memo = {}\r\n    for order in feed:\r\n    if order[0] == 'c':\r\n        del memo[order[1]]\r\n    else:\r\n        memo[order[2]] = (order[1], order[3], order[4])\r\n\r\n    res = defaultdict(lambda: defaultdict(int))\r\n    for side, quantity, price in memo . values():\r\n    res[side][price] += quantity\r\n    a, b = max(res['b']. items(), default=(0, 0))\r\n    c, d = min(res['s']. items(), default=(0, 0))\r\n\r\n    return f\" { b } @ { a } : { d } @ { c } \"\r\n",
  "5fe26f4fc09ce8002224e95d": "def puzzle(i):\r\n    ps = set()\r\n    def sp(i, p=2):\r\n    if i == 1:\r\n        return ''\r\n    d = ps . add(p) or 0\r\n    while i % p == 0:\r\n    d, i = d + 1, i / / p\r\n    while any(p % q == 0 for q in ps):\r\n    p += 1\r\n    return puzzle(d) + sp(i, p)\r\n    return f'( { sp ( i )} )' if i else '.'\r\n",
  "5f0f14348ff9dc0035690f34": "from math import comb\r\n\r\n\r\ndef combinations(n, m):\r\n    return (\r\n        sum(comb(m + 2, i) * comb(n, 3 - i) for i in range(3)),\r\n        sum(comb(m + 2, i) * comb(n, 4 - i) for i in range(3)),\r\n    )\r\n",
  "60a38f4df61065004fd7b4a7": "def squared_spiral(n):\r\n    b = round(n * * .5)\r\n    e = (b / / 2 + b % 2 - max(0, b * * 2 - n), - (b / / 2) + max(0, n - b * * 2))\r\n    return e if b % 2 else (- e[0], - e[1])\r\n",
  "607218fd3d84d3003685d78c": "from itertools import groupby\r\n\r\n\r\ndef create_gradient(colors):\r\n    col_grad = sorted(colors, key=lambda x: x[1])\r\n    col_grad = [[* g][- 1] for k, g in groupby(col_grad, key=lambda x: x[1])]\r\n\r\n    def lin_grad(pos):\r\n    if not col_grad:\r\n    return [0, 0, 0]\r\n\r\n    ind = next((k for k, x in enumerate(col_grad)\r\n               if x[1] >= pos), len(col_grad))\r\n    if ind == len(col_grad):\r\n    return col_grad[len(col_grad) - 1][0]\r\n    elif ind == 0 or col_grad[ind][1] == pos:\r\n    return col_grad[ind][0]\r\n    else:\r\n    (y1, x1), (y2, x2) = col_grad[ind - 1], col_grad[ind]\r\n    aplha = (x2 - pos) / (x2 - x1)\r\n    return [aplha * a + (1 - aplha) * b for a, b in zip(y1, y2)]\r\n\r\n    return lin_grad\r\n",
  "6001a06c6aad37000873b48f": "A = \"\"\"Twelve drummers drumming, \n Eleven pipers piping, \n Ten lords a-leaping, \n Nine ladies dancing, \n Eight maids a-milking, \n Seven swans a-swimming, \n Six geese a-laying, \n Five gold rings, \n Four calling birds, \n Three French hens, \n Two turtle doves, and \n A partridge in a pear tree.\"\"\" . split(\"\\n\")\nB = \"First,Second,Third,Fourth,Fifth,Sixth,Seventh,Eighth,Ninth,Tenth,Eleventh,Twelfth\" . split(\n    \",\")\n\n\ndef f(): return \"\\n\\n\" . join(\n    f\"On the { B [ i ]} day of Christmas\\nMy true love sent to me\\n\" + \"\\n\" . join(A[- i - 1:]) for i in range(12))\n",
  "600c18ec9f033b0008d55eec": "def find_reverse_number(n):\n    \"\"\" Return the nth number in sequence of reversible numbers. \n    For reversible numbers, a pattern emerges when compared to n: \n    if we subtract a number made of a sequence of the digit 9 \n    (i.e. 9, 99, 999, our magic number) from n, the result forms \n    the left half of the nth reversible number starting from 0. \n    The number of digits \"9\" in the magic number increases every \n    time n reaches an order of magnitude of the number 11; the \n    width of that order of magnitude is the width of the magic number. \n    That width also tells us how many digits of the left half must \n    be mirrored to form the final, nth reversible number. \n\n    Examples (_ digits get mirrored, | digits remain static) \n\n    n = 109 -> 100 -> 1001 \n    -9 _|| _||_ \n\n    n = 110 -> 11 -> 1111 \n    -99 __ ____ \n\n    n = 1099 -> 1000 -> 100001 \n    -99 __|| __||__ \n\n    n = 1100 -> 101 -> 101101 \n    -999 ___ ______ \n    \"\"\"\n    n = n - 1  # this kata assumes 1-based indices\n    if n < 10:  # tiny optimization\n    return n\n    x = n / / 11  # order of magnitude\n    width = len(str(x))  # width of x\n    nines = int(\"9\" * width)  # the magic number\n    lh = str(n - nines)  # the left side of the result\n    rh = lh[: width][:: - 1]  # the right side of the result\n    result = int(lh + rh)\n    return result\n",
  "600bfda8a4982600271d6069": "from itertools import count\r\nmemo = []\r\n\r\n\r\ndef palgen():\r\n    yield 0\r\n    for digits in count(1):\r\n    first = 10 * * ((digits - 1) / / 2)\r\n    for s in map(str, range(first, 10 * first)):\r\n    yield int(s + s[- (digits % 2) - 1:: - 1])\r\n\r\n    def gen_memo():\r\n    global memo\r\n    for n in palgen():\r\n    memo . append(n)\r\n    if len(memo) > 1000000:\r\n        break\r\n\r\n    def find_reverse_number(n):\r\n    global memo\r\n    if memo == []:\r\n        gen_memo()\r\n    return memo[n - 1]\r\n",
  "6012457c0aa675001d4d560b": "def as_sum_of_powers_of_3(n):\n    if not n:\n        return '0'\n    r = ''\n    while n != 0:\n    k = n % 3\n    r += '0+-' [k]\n    if k == 2:\n        k = - 1\n    n = (n - k) / / 3\n    return r\n",
  "607a8f270f09ea003a38369c": "def sukuna(n):\r\n    all_numbers, square = set(), int(n * * .5) + 1\r\n    for i in range(2, square):\r\n    for j in range(2, square):\r\n    if i * * j <= n:\r\n    all_numbers . add(i * * j)\r\n    else:\r\n    break\r\n    return n - len(all_numbers)\r\n",
  "605d25f4f24c030033da9afb": "def convert_lambda_to_def(s):\r\n    sheet = 'def {}({}):\\n return{}'\r\n    s = s . replace(' = lambda ', ':')\r\n    name, arg, ret = s . split(':', 2)\r\n    return sheet . format(name, arg, ret)\r\n",
  "590a924c7dfc1a238d000047": "from itertools import combinations\n\n\ndef perfect_team_of_minimal_size(n, candidates):\n    for j in range(1, len(candidates) + 1):\n    if any(len(set(sum(i, []))) >= n for i in combinations(candidates, j)):\n        return j + 1\n    return - 1\n",
  "605f4035f38ca800072b6d06": "class Function:\r\n    def __init__(self, f, df):\r\n    self . f = f\r\n    self . df = df\r\n    def __add__(self, other):\r\n    def f(x): return self . f(x) + other . f(x)\r\n    def df(x): return self . df(x) + other . df(x)\r\n    return Function(f, df)\r\n\r\n    def __sub__(self, other):\r\n    def f(x): return self . f(x) - other . f(x)\r\n    def df(x): return self . df(x) - other . df(x)\r\n    return Function(f, df)\r\n\r\n    def __mul__(self, other):\r\n    def f(x): return self . f(x) * other . f(x)\r\n    def df(x): return self . df(x) * other . f(x) + self . f(x) * other . df(x)\r\n    return Function(f, df)\r\n\r\n    def __truediv__(self, other):\r\n    def f(x): return self . f(x) / other . f(x)\r\n    def df(x): return (self . df(x) * other . f(x) - self . f(x) * other . df(x)) / other . f(x) * * 2\r\n    return Function(f, df)\r\n\r\n    def __matmul__(self, other):\r\n    def f(x): return self . f(other . f(x))\r\n    def df(x): return other . df(x) * self . df(other . f(x))\r\n    return Function(f, df)\r\n\r\n    def __call__(self, x, grad=False):\r\n    return (self . f, self . df)[grad](x)\r\n",
  "60490a215465720017ab58fa": "def gangs(divisors, k):\r\n    return len({tuple(y for y in divisors if x % y == 0) for x in range(1, k + 1)})\r\n",
  "60d20fe1820f1b004188ceed": "triangle = lambda * a: 2 * max(a) < sum(a)\n",
  "60b775debec5c40055657733": "def create_multiplications(l):\r\n    return [lambda x, i=i: i * x for i in range(l)]\r\n",
  "60cc93db4ab0ae0026761232": "from collections import deque\r\n\r\n\r\ndef arrange(s):\r\n    q = deque(s)\r\n    return [q . pop() if 0 < i % 4 < 3 else q . popleft() for i in range(len(s))]\r\n",
  "60d7a52b57c9d50055b1a1f7": "def create_abacus(n):\r\n    n, res = map(int, str(n). zfill(9)), []\r\n    for d in n:\r\n    a, b = divmod(d, 5)\r\n    res . append(list(\"**-*****\"))\r\n    res[- 1][not a] = res[- 1][b + 3] = \" \"\r\n    return \"\\n\" . join(map(\"\" . join, zip(* res)))\r\n\r\n    def read_abacus(abacus):\r\n    m, n = map(\"\" . join, zip(* abacus . split(\"\\n\"))), \"\"\r\n    for r in m:\r\n    a, b = not r . index(\" \"), r . rfind(\" \") - 3\r\n    n += str(5 * a + b)\r\n    n = n . lstrip(\"0\")\r\n    return int(n) if n else 0\r\n",
  "5e67ce1b32b02d0028148094": "def truth_table(f):\r\n\r\n    vars = f . __code__ . co_varnames\r\n    name = n if (n := f . __code__ . co_name) != \"<lambda>\" else \"f\"\r\n    lines = [\r\n        f\" { ' ' . join ( vars )} \\t\\t { name } ( { ',' . join ( vars )} )\\n\\n\"]\r\n    for i in range(0, 2 * * len(vars)):\r\n    arg_values = tuple([int(x) for x in f\" { i : 0 > { len ( vars )} b } \"])\r\n    result = int(f(* arg_values))\r\n    lines . append(\r\n        f\" { ' ' . join ( str ( x ) for x in arg_values )} \\t\\t { result } \\n\")\r\n    return \"\" . join(lines)\r\n",
  "60df63c6ce1e7b0023d4af5c": "from collections import defaultdict\r\nfrom itertools import accumulate\r\n\r\n\r\ndef subsequence_sums(arr, s):\r\n    res, memo = 0, defaultdict(int)\r\n    for x in accumulate(arr, initial=0):\r\n    res += memo[x - s]\r\n    memo[x] += 1\r\n    return res\r\n",
  "60d5b5cd507957000d08e673": "from math import comb\n\n\ndef S(m, n):\n    return comb(m + n - 1, m)\n",
  "5f79b90c5acfd3003364a337": "last_digit = l = lambda n, d = (1, 1, 2, 6, 4, 2, 2, 4, 2, 8): n < 10 and d[n] or ((6 - n / / 10 % 10 % 2 * 2) * l(n / / 5) * d[n % 10]) % 10\n",
  "6040b781e50db7000ab35125": "def delta(iter_, n):\r\n    iter_ = iter(iter_) if n == 1 else delta(iter_, n - 1)\r\n    prev = next(iter_)\r\n    for v in iter_:\r\n    yield v - prev\r\n    prev = v\r\n",
  "60dda5a66c4cf90026256b75": "def some_but_not_all(seq, pred):\r\n    return any(map(pred, seq)) and not all(map(pred, seq))\r\n",
  "60d6f2653cbec40007c92755": "import math\r\n\r\n\r\ndef cipher_text(plain_text):\r\n    text = \"\" . join(c . lower() for c in plain_text if c . isalpha())\r\n\r\n    s = math . sqrt(len(text))\r\n    a = math . floor(s)\r\n    b = math . ceil(s)\r\n    if a * b < len(text):\r\n    a = b\r\n    return \" \" . join(text[i:: b]. ljust(a, \" \") for i in range(b))\r\n",
  "60edafd71dad1800563cf933": "def counter():\n    count = 0\n    def function():\n    nonlocal count\n    count += 1\n    return count\n    return function\n",
  "60e4dfc1dc28e70049e2cb9d": "def strings_in_max_depth(s):\r\n    start, deepest, lvl, out = 0, 0, 0, [s]\r\n\r\n    for i, c in enumerate(s):\r\n    if c == ')':\r\n    if lvl == deepest:\r\n        out . append(s[start: i])\r\n    lvl -= 1\r\n    elif c == '(':\r\n    lvl += 1\r\n    start = i + 1\r\n    if lvl > deepest:\r\n    out, deepest = [], lvl\r\n    return out\r\n",
  "60d2325592157c0019ee78ed": "def sum_of_sums(n):\n    def S(n): return (n * (n + 1)) / / 2\n    def Z(n): return (n * (n + 1) * (n + 2)) / / 6\n    return S(Z(n))\n",
  "60e238105b0327001434dfd8": "def maximum_median(arr, s):\r\n    s / /= 2\r\n    return max(arr[s: - s or len(arr)])\r\n",
  "60b7d7c82358010006c0cda5": "def corner_fill(square):\r\n    sq = square . copy()\r\n    result = []\r\n    while True:\r\n    try:\r\n    result . extend(sq . pop(0))\r\n    result . extend(row . pop(- 1) for row in sq)\r\n    result . extend([row . pop(- 1) for row in sq][:: - 1])\r\n    result . extend(sq . pop(0)[:: - 1])\r\n    except IndexError:\r\n    break\r\n    return result\r\n",
  "60b05d49639df900237ac463": "from functools import lru_cache\r\n\r\n\r\n@ lru_cache(None)\r\ndef stop_at(sides, target, curr_score=0):\r\n    return curr_score if curr_score >= target else \\\r\n        sum(stop_at(sides, target, curr_score + i)\r\n            for i in range(2, sides + 1)) / sides\r\n",
  "5f7a715f6c1f810017c3eb07": "def start(fn): return fn([])\r\n\r\n\r\ndef end(a): return a . pop()\r\n\r\n\r\ndef push(a): return (lambda n: (lambda fn: fn(a + [n])))\r\n\r\n\r\ndef add(a): return (lambda fn: fn(a + [a . pop() + a . pop()]))\r\n\r\n\r\ndef sub(a): return (lambda fn: fn(a + [a . pop() - a . pop()]))\r\n\r\n\r\ndef mul(a): return (lambda fn: fn(a + [a . pop() * a . pop()]))\r\ndef div(a): return (lambda fn: fn(a + [a . pop() / / a . pop()]))\r\n",
  "60c47b07f24d000019f722a2": "from sys import intern as make_identical\n",
  "60c8bfa19547e80045184000": "def decode_bits(s): return s[1:: 2]. count('1') - s[:: 2]. count('1')\n",
  "60b744478e8d62003d327e6a": "def is_in_cantor(num, den, n):\n    if num < 0 or num > den:\n        return False\n    for i in range(n):\n    num *= 3\n    if num > den and num < den * 2:\n        return False\n    num %= den\n    return True\n",
  "597f334f1fe82a950500004b": "def get_common_directory_path(pathes):\r\n    res = ''\r\n    for cs in zip(* pathes):\r\n    if len(set(cs)) == 1:\r\n    res += cs[0]\r\n    else:\r\n    break\r\n    arr = res . split('/')[: - 1]\r\n    if not arr:\r\n    return ''\r\n    return '/' . join(arr) + '/'\r\n",
  "5aa67541373c2e69a20000c9": "WINS = [(0, 1, 2, 3), (4, 5, 6, 7), (8, 9, 10, 11), (12, 13, 14, 15),\r\n        (16, 17, 18, 19), (20, 21, 22, 23), (24, 25, 26, 27), (28, 29, 30, 31),\r\n        (32, 33, 34, 35), (36, 37, 38, 39), (40, 41, 42, 43), (44, 45, 46, 47),\r\n        (48, 49, 50, 51), (52, 53, 54, 55), (56, 57, 58, 59), (60, 61, 62, 63),\r\n        (0, 4, 8, 12), (1, 5, 9, 13), (2, 6, 10, 14), (3, 7, 11, 15),\r\n        (16, 20, 24, 28), (17, 21, 25, 29), (18, 22, 26, 30), (19, 23, 27, 31),\r\n        (32, 36, 40, 44), (33, 37, 41, 45), (34, 38, 42, 46), (35, 39, 43, 47),\r\n        (48, 52, 56, 60), (49, 53, 57, 61), (50, 54, 58, 62), (51, 55, 59, 63),\r\n        (0, 16, 32, 48), (1, 17, 33, 49), (2, 18, 34, 50), (3, 19, 35, 51),\r\n        (4, 20, 36, 52), (5, 21, 37, 53), (6, 22, 38, 54), (7, 23, 39, 55),\r\n        (8, 24, 40, 56), (9, 25, 41, 57), (10, 26, 42, 58), (11, 27, 43, 59),\r\n        (12, 28, 44, 60), (13, 29, 45, 61), (14, 30, 46, 62), (15, 31, 47, 63),\r\n        (0, 20, 40, 60), (1, 21, 41, 61), (2, 22, 42, 62), (3, 23, 43, 63),\r\n        (3, 18, 33, 48), (7, 22, 37, 52), (11, 26, 41, 56), (15, 30, 45, 60),\r\n        (0, 17, 34, 51), (4, 21, 38, 55), (8, 25, 42, 59), (12, 29, 46, 63),\r\n        (12, 24, 36, 48), (13, 25, 37, 49), (14, 26, 38, 50), (15, 27, 39, 51),\r\n        (3, 6, 9, 12), (19, 22, 25, 28), (35, 38, 41, 44), (51, 54, 57, 60),\r\n        (0, 5, 10, 15), (16, 21, 26, 31), (32, 37, 42, 47), (48, 53, 58, 63),\r\n        (0, 21, 42, 63), (3, 22, 41, 60), (12, 25, 38, 51), (15, 26, 37, 48)]\r\n\r\nBOARD_MOVES_POSITION = {(0, 0, 0): 0, (1, 0, 0): 1, (2, 0, 0): 2, (3, 0, 0): 3,\r\n                        (0, 1, 0): 4, (1, 1, 0): 5, (2, 1, 0): 6, (3, 1, 0): 7,\r\n                        (0, 2, 0): 8, (1, 2, 0): 9, (2, 2, 0): 10, (3, 2, 0): 11,\r\n                        (0, 3, 0): 12, (1, 3, 0): 13, (2, 3, 0): 14, (3, 3, 0): 15,\r\n                        (0, 0, 1): 16, (1, 0, 1): 17, (2, 0, 1): 18, (3, 0, 1): 19,\r\n                        (0, 1, 1): 20, (1, 1, 1): 21, (2, 1, 1): 22, (3, 1, 1): 23,\r\n                        (0, 2, 1): 24, (1, 2, 1): 25, (2, 2, 1): 26, (3, 2, 1): 27,\r\n                        (0, 3, 1): 28, (1, 3, 1): 29, (2, 3, 1): 30, (3, 3, 1): 31,\r\n                        (0, 0, 2): 32, (1, 0, 2): 33, (2, 0, 2): 34, (3, 0, 2): 35,\r\n                        (0, 1, 2): 36, (1, 1, 2): 37, (2, 1, 2): 38, (3, 1, 2): 39,\r\n                        (0, 2, 2): 40, (1, 2, 2): 41, (2, 2, 2): 42, (3, 2, 2): 43,\r\n                        (0, 3, 2): 44, (1, 3, 2): 45, (2, 3, 2): 46, (3, 3, 2): 47,\r\n                        (0, 0, 3): 48, (1, 0, 3): 49, (2, 0, 3): 50, (3, 0, 3): 51,\r\n                        (0, 1, 3): 52, (1, 1, 3): 53, (2, 1, 3): 54, (3, 1, 3): 55,\r\n                        (0, 2, 3): 56, (1, 2, 3): 57, (2, 2, 3): 58, (3, 2, 3): 59,\r\n                        (0, 3, 3): 60, (1, 3, 3): 61, (2, 3, 3): 62, (3, 3, 3): 63}\r\n\r\n\r\ndef move_to_position(move):\r\n    try:\r\n    return BOARD_MOVES_POSITION[tuple(move)]\r\n    except KeyError:\r\n    None\r\n    def legal_move(board, player, move):\r\n    place = move_to_position(move)\r\n    if place is None:\r\n    return False\r\n    else:\r\n    board[place] = player\r\n    return True\r\n    def play_OX_3D(moves):\r\n    board = dict()\r\n    for index, move in enumerate(moves):\r\n    player = \"O\" if (index % 2) == 0 else \"X\"\r\n    if not legal_move(board, player, move):\r\n    return \"No winner\"\r\n    set_of_player_positions = set(\r\n        key for (key, value) in board . items() if value == player)\r\n    for winning_moves in WINS:\r\n    if set(winning_moves). issubset(set_of_player_positions):\r\n    return f\" { player } wins after { len ( board )} moves\"\r\n    return \"No winner\"\r\n",
  "60a54750138eac0031eb98e1": "TRANS = str . maketrans(\"A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\",\r\n                        \"1 2 3 4 5 6 7 8 1 2 3 4 5 7 9 2 3 4 5 6 7 8 9\")\r\nWEIGHTS = [8, 7, 6, 5, 4, 3, 2, 10, 0, 9, 8, 7, 6, 5, 4, 3, 2]\r\n\r\n\r\ndef check_vin(vin):\r\n    try:\r\n    return len(vin) == 17 and vin[8] == \"0123456789X\" [sum(int(c) * w for c, w in zip(vin . translate(TRANS), WEIGHTS)) % 11]\r\n    except:\r\n    return False\r\n",
  "60a516d70759d1000d532029": "from itertools import accumulate\n\n\ndef survivors(ms, pss):\n    return [i\n            for i, (m, pss) in enumerate(zip(ms, pss))\n            if all(m > 0 for m in accumulate(pss, lambda m, p: m - 1 + p, initial=m))]\n",
  "60a2d7f50eee95000d34f414": "def last_survivors(arr, nums):\r\n    return '' . join(map(shrink, zip(* arr), nums))\r\n\r\n    def shrink(col, n):\r\n    return '' . join(col). replace(' ', '')[: - n or len(col)]\r\n",
  "5fefee21b64cc2000dbfa875": "def min_permutation(n):\r\n    f = n < 0\r\n    s = \"\" . join(sorted(str(abs(n))))\r\n    n = s . count(\"0\")\r\n    s = s . replace(\"0\", \"\")\r\n    return int(s[: 1] + \"0\" * n + s[1:]) * (- 1 if f else 1)\r\n",
  "609eee71109f860006c377d1": "def last_survivor(letters, coords):\r\n    for x in coords:\r\n    letters = letters[0: x] + letters[x + 1:]\r\n    return letters\r\n",
  "60a1aac7d5a5fc0046c89651": "from re import sub\r\n\r\n\r\ndef last_survivors(s):\r\n    while len(set(s)) != len(s):\r\n    s = sub(r'(.)(.*)\\1', lambda x: chr((ord(x . group(1)) - 96) %\r\n            26 + 97) + x . group(2), s)\r\n    return s\r\n",
  "6097a9f20d32c2000d0bdb98": "vowel = set(\"aeiouAEIOU\"). __contains__\n\n\ndef i(word):\n    if not word or word[0]. islower() or word[0] == 'I' or 2 * sum(map(vowel, word)) >= len(word):\n    return \"Invalid word\"\n    return 'i' + word\n",
  "6089c7992df556001253ba7d": "class Song:\r\n    def __init__(self, title, artist):\r\n    self . title = title\r\n    self . artist = artist\r\n    self . _seen = set()\r\n\r\n    def how_many(self, people):\r\n    tmp = set(map(str . lower, people))\r\n    res = len(tmp - self . _seen)\r\n    self . _seen . update(tmp)\r\n    return res\r\n",
  "609d17f9838b2c0036b10e89": "def handler(key, isCaps=False, isShift=False):\r\n    if not isinstance(key, str) or len(key) != 1 or key . isupper():\r\n    return 'KeyError'\r\n    num = \"1234567890-=[];'\\/.,`\"\r\n    unNum = '!@#$%^&*()_+{}:\"|?><~'\r\n    if key . isalpha() and (isCaps != isShift):\r\n    return key . upper()\r\n\r\n    if not key . isalpha() and isShift:\r\n    return key . translate(str . maketrans(num, unNum))\r\n\r\n    return key\r\n",
  "5fb44fbd98799a0021dca93a": "def cons(a): return lambda b: lambda c: lambda d: c(a)(b(c)(d))\r\n\r\n\r\ndef snoc(a): return lambda b: lambda c: lambda d: b(c)(c(a)(d))\r\n\r\n\r\ndef map(a): return lambda b: lambda c: lambda d: b(\r\n    lambda e: lambda f: c(a(e))(f))(d)\r\n\r\n\r\ndef filter(a): return lambda b: lambda c: lambda d: b(\r\n    lambda e: lambda f: a(e)(c(e)(f))(f))(d)\r\n",
  "60a9148187cfaf002562ceb8": "import re\n\n\ndef quadratic_builder(expression):\n    # replace -x with -1x in the expression\n    expression = re . sub(\"-([a-z])\", r\"-1\\1\", expression)\n\n    # extract constants and variable name\n    m, x, n, p, _, q = re . findall(\"\"\" \n \\( # opening bracket \n (-?\\d*) # constant (m) \n (\\D) # variable (x) \n ([+-]\\d*) # constant (n) \n \\) # closing bracket \n \\( # opening bracket \n (-?\\d*) # constant (p) \n (\\D) # variable (x) \n ([+-]\\d*) # constant (q) \n \\) # closing bracket \n \"\"\", expression, flags=re . VERBOSE). pop()\n    m, n, p, q = map(int, [m or 1, n, p or 1, q])\n\n    # calculate constants of the result\n    a, b, c = m * p, m * q + n * p, n * q\n    # construct output\n    A = f\" { a }{ x } ^2\" if a != 0 else \"\"\n    B = f\" { b : + }{ x } \" if b != 0 else \"\"\n    C = f\" { c : + } \" if c != 0 else \"\"\n    # remove 1s\n    result = re . sub(r\"(\\b|\\+|-)1\" + x, r\"\\1\" + x, A + B + C)\n\n    return result\n",
  "60a82776de1604000e29eb50": "def f(a, b): return (0, z: = len(a))[z > b]\n",
  "60a94f1443f8730025d1744b": "def grid(N):\r\n    if N < 0:\r\n        return None\r\n    abc = 'abcdefghijklmnopqrstuvwxyz' * 8\r\n    val = []\r\n    for i in range(N):\r\n    arr = list(abc[i: N + i])\r\n    out = ' ' . join(arr)\r\n    val . append(out)\r\n    return '\\n' . join(val)\r\n",
  "5c1b25bc85042749e9000043": "from itertools import accumulate\r\nimport re\r\nDEFAULT = 'No'\r\nNOTES = 'C C# D D# E F F# G G# A A# B' . split()\r\nMAJOR_SCHEME = (0, 2, 2, 1, 2, 2, 2, 1)\r\n\r\nSPLITTER = re . compile('|' . join(\r\n    sorted(NOTES, key=len, reverse=True)) + '|.')\r\nCHORDS_DCT = {frozenset(NOTES[(i + delta) % 12] for delta in accumulate(MAJOR_SCHEME)): root\r\n              for i, root in enumerate(NOTES)}\r\n\r\n\r\ndef major_scale(melody):\r\n    result = CHORDS_DCT . get(frozenset(SPLITTER . findall(melody)), DEFAULT)\r\n    return f\" { result } major scale\"\r\n",
  "5c9d62cbf1613a001af5b067": "from itertools import groupby\r\nfrom operator import itemgetter\r\nfrom os . path import commonprefix\r\nfirst = itemgetter(0)\r\n\r\n\r\ndef radix_tree(* words):\r\n    words = [w for w in words if w]\r\n    result = {}\r\n    for key, grp in groupby(sorted(words), key=first):\r\n    lst = list(grp)\r\n    prefix = commonprefix(lst)\r\n    result[prefix] = radix_tree(* (w[len(prefix):] for w in lst))\r\n    return result\r\n",
  "5e9ed1864f12ec003281e761": "def markdown_code_corrector(s):\r\n    out, inBlk, cont = [], 0, 0\r\n    for l in s . split('\\n'):\r\n    isCode = l . startswith(('&', '>>>'))\r\n    if not inBlk and isCode or inBlk and not isCode and not cont:\r\n    out . append(\"```\")\r\n    out . append(l)\r\n    inBlk = isCode or inBlk and cont\r\n    cont = l . endswith('\\\\')\r\n\r\n    if inBlk:\r\n        out . append(\"```\")\r\n    return '\\n' . join(out)\r\n",
  "604f8591bf2f020007e5d23d": "PROVIDERS = (\r\n    lambda n: n * 2 or 5,\r\n    lambda n: n * 4 + 1,\r\n    lambda n: n * 2 + 1,\r\n    lambda n: n * 4 + 3,\r\n    lambda n: n * 8 + 3,\r\n)\r\n\r\n\r\ndef next_multiple_of_five(n):\r\n    return PROVIDERS[n % 5](n)\r\n",
  "5ecc16daa200d2000165c5b1": "def increment(number, iterations, spacer):\r\n    step = len(str(number)) - 1\r\n    for i in range(iterations):\r\n\r\n    step = (step - spacer) % len(str(number))\r\n    number = number + 10 * * (step)\r\n\r\n    return number\r\n",
  "5f799eb13e8a260015f58944": "def count_horses(sound_str):\r\n    res = []\r\n    lst = list(sound_str)\r\n    while set(lst) != {'0'}:\r\n    for j in range(len(lst)):\r\n    if lst[j] != '0':\r\n    res . append(j + 1)\r\n    for k in range(j, len(lst), j + 1):\r\n    lst[k] = str(int(lst[k]) - 1)\r\n    break\r\n    return res\r\n",
  "60576b180aef19001bce494d": "def count_checkerboard(w, h, r):\r\n    nW, rW = divmod(w, r)\r\n    nH, rH = divmod(h, r)\r\n\r\n    rect = nW * nH / / 2 * r * * 2  # full rectangle\r\n    # right vertical strip (except corner)\r\n    rStrip = (nH + nW % 2) / / 2 * r * rW\r\n    # bottom horizontal strip (except corner)\r\n    bStrip = (nW + nH % 2) / / 2 * r * rH\r\n    # bottom right corner: black only if parity of nH and nW are different\r\n    corner = (nH ^ nW) % 2 * rH * rW\r\n    return rect + rStrip + bStrip + corner\r\n",
  "56135a61f8b29814340000cd": "def prod_int_part(n, min_=2):\r\n    total, fac = 0, []\r\n    for d in range(min_, int(n * * .5) + 1):\r\n    if not n % d:\r\n    count, sub = prod_int_part(n / / d, d)\r\n    total += count + 1\r\n    if not count:\r\n        sub = [n / / d]\r\n    if not fac:\r\n        fac = [d] + sub\r\n    return [total, fac]\r\n",
  "5f5fffc4f6b3390029a6b277": "from textwrap import wrap\r\n\r\n\r\ndef to_utf8_binary(string):\r\n    return '' . join(format(x, 'b'). rjust(8, '0') for x in bytearray(string, 'utf-8'))\r\n\r\n    def from_utf8_binary(bitstring):\r\n    return bytearray([int(t, 2) for t in wrap(bitstring, 8)]). decode()\r\n",
  "601ae2a5f6d6bb0012947f27": "def session(play): play . __globals__['threshold'] = 0\n",
  "5fddfbe6a65636001cc4fcd2": "def is_valid_set(* props):\r\n    return all(len(set(x)) != 2 for x in props)\r\n",
  "6021ab77b00bf1000dd276d3": "r = range(2, 40)\ndef f(): return sorted({x * * y + y * * x for x in r for y in r})[: 121]\n",
  "5f8219c1ae0eb800291c50c1": "from collections import Counter\r\n\r\n\r\ndef lowest(s):\r\n    if not s:\r\n        return 0\r\n    cnt = Counter(s)\r\n    pairs, seeds = map(sum, zip(* (divmod(n, 2) for n in cnt . values())))\r\n    return len(s) if not seeds else pairs / / seeds * 2 + 1\r\n",
  "5baf21542d15ec9453000147": "from math import ceil\r\n\r\n\r\ndef mega_mind(hp, dps, shots, regen):\r\n    if dps * shots >= hp:\r\n        return ceil(hp / dps)\r\n    if dps * shots <= regen:\r\n        return - 1\r\n    number_of_regenerations = ceil((hp - dps * shots) / (dps * shots - regen))\r\n    return ceil((hp + regen * number_of_regenerations) / dps)\r\n",
  "5bdcd20478d24e664d00002c": "def wheat_from_chaff(values):\n    i, j = 0, len(values) - 1\n    while True:\n    while i < j and values[i] < 0:\n        i += 1\n    while i < j and values[j] > 0:\n        j -= 1\n    if i >= j:\n        return values\n    values[i], values[j] = values[j], values[i]\n",
  "5c22954a58251f1fdc000008": "def image2ascii(image):\r\n    return '\\n' . join('' . join(glyphs[(v * 8) / / 255] for v in r) for r in image)\r\n",
  "5f849ab530b05d00145b9495": "import numpy as np\r\ndir = {\r\n    'L': lambda a: np . sort(a)[:, :: - 1],\r\n    'R': lambda a: np . sort(a),\r\n    'U': lambda a: np . sort(a, axis=0)[:: - 1, :],\r\n    'D': lambda a: np . sort(a, axis=0)\r\n}\r\n\r\n\r\ndef flip(d, a):\r\n    return dir[d](np . array(a)). tolist()\r\n",
  "5f7c38eb54307c002a2b8cc8": "def remove_parentheses(s):\r\n    lvl, out = 0, []\r\n    for c in s:\r\n    lvl += c == '('\r\n    if not lvl:\r\n        out . append(c)\r\n    lvl -= c == ')'\r\n    return '' . join(out)\r\n",
  "5c2b4182ac111c05cf388858": "def solve(time):\r\n    def number(n):\r\n    if n > 20:\r\n        return \"twenty {}\" . format(number(n - 20))\r\n    return [\r\n        None, \"one\", \"two\", \"three\", \"four\",\r\n        \"five\", \"six\", \"seven\", \"eight\", \"nine\",\r\n        \"ten\", \"eleven\", \"twelve\", \"thirteen\",\r\n        \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\",\r\n        \"eighteen\", \"nineteen\", \"twenty\"][n]\r\n    hours, minutes = (int(s) for s in time . split(':'))\r\n    if minutes <= 30:\r\n    direction = \"past\"\r\n    else:\r\n    hours = (hours + 1) % 24\r\n    direction = \"to\"\r\n    minutes = 60 - minutes\r\n    hour = number((hours + 11) % 12 + 1) if hours else \"midnight\"\r\n    if minutes == 0:\r\n    return \"{} o'clock\" . format(hour) if hours else hour\r\n    if minutes == 15:\r\n    return \"quarter {} {}\" . format(direction, hour)\r\n    if minutes == 30:\r\n    return \"half past {}\" . format(hour)\r\n    return \"{} minute{} {} {}\" . format(\r\n        number(minutes), \"\" if minutes == 1 else \"s\", direction, hour)\r\n",
  "5f5bc8a04e485f002d85b303": "def parse_IPv6(iPv6):\r\n    return '' . join(str(sum(int(c, 16) for c in s)) for s in iPv6 . split(iPv6[4]))\r\n",
  "5c1448e08a2d87eda400005f": "from math import hypot\r\nDIRS = {'\u2190': (0, - 1), '\u2191': (- 1, 0), '\u2192': (0, 1), '\u2193': (1, 0),\r\n        '\u2196': (- 1, - 1), '\u2197': (- 1, 1), '\u2198': (1, 1), '\u2199': (1, - 1)}\r\n\r\n\r\ndef count_deaf_rats(town):\r\n    pipper = next((x, y) for x, r in enumerate(town)\r\n                  for y, c in enumerate(r) if c == 'P')\r\n    return sum(isDeaf(pipper, x, y, * DIRS[c])\r\n               for x, r in enumerate(town) for y, c in enumerate(r)\r\n               if c in DIRS)\r\n\r\n    def isDeaf(pipper, x, y, dx, dy):\r\n    dCurrent, dNext = (hypot(* (a - b for a, b in zip(pipper, pos)))\r\n                       for pos in ((x, y), (x + dx, y + dy)))\r\n    return dCurrent < dNext\r\n",
  "601d457ce00e9a002ccb7403": "def lazy(n):\r\n    step = - 1\r\n    def inner(func):\r\n    def wrapper(* args, * * kwargs):\r\n    nonlocal step\r\n    step += 1\r\n    if n > 0 and step % n:\r\n    return None\r\n    elif n < 0 and not (step + 1) % n:\r\n    return None\r\n    else:\r\n    return func(* args, * * kwargs)\r\n\r\n    return wrapper\r\n    return inner\r\n",
  "5fa6d9e9454977000fb0c1f8": "def unpack_sausages(truck):\r\n    display = \"\"\r\n    counter = 0\r\n    for box in truck:\r\n    for pack in box:\r\n    if pack[0] == \"[\" and pack[- 1] == \"]\":\r\n    contents = pack[1: - 1]\r\n    if len(contents) == 4 and len(set(contents)) == 1:\r\n    counter += 1\r\n    if counter % 5:\r\n    display += contents\r\n    return \" \" . join(display)\r\n",
  "5ecc1d68c6029000017d8aaf": "from itertools import cycle, chain\r\n\r\n\r\ndef max_hexagon_beam(n, seq):\r\n    h = 2 * n - 1\r\n    seq = cycle(seq)\r\n    sums = [[0] * h for _ in range(3)]  # [horz, diagUp, diagDown]\r\n    for r in range(h):\r\n    for c, v in zip(range(n + r if r < n else h + n - 1 - r), seq):\r\n    idxs = (r, c + max(0, r - n + 1), c + max(0, n - 1 - r))\r\n    for i, j in enumerate(idxs):\r\n        sums[i][j] += v\r\n    return max(chain . from_iterable(sums))\r\n",
  "5ee98cf315741d00104499e5": "def mul_power(n, k):\r\n    a = 1\r\n    for p in range(2, int(n * * .5) + 1):\r\n    if not n % p:\r\n    m = 0\r\n    while not n % p:\r\n    n / /= p\r\n    m += 1\r\n    a *= p * * (- m % k)\r\n    if n > 1:\r\n    a *= n * * (k - 1)\r\n    return a\r\n",
  "5efcaedf95d7110017896ced": "from struct import pack\ns = \"{:08b}\" . format\n\n\ndef float_to_IEEE_754(f: float) - > str:\n    binary = '' . join(map(s, pack('!d', f)))\n    return ' ' . join((binary[0], binary[1: 12], binary[12:]))\n",
  "5f1ab7bd5af35f000f4ff875": "import struct\r\n   class FloatType (NoValue):\r\n        POSITIVE_DENORMALIZED = auto()\r\n        NEGATIVE_DENORMALIZED = auto()\r\n        POSITIVE_NORMALIZED = auto()\r\n        NEGATIVE_NORMALIZED = auto()\r\n        POSITIVE_INFINITY = auto()\r\n        NEGATIVE_INFINITY = auto()\r\n        POSITIVE_ZERO = auto()\r\n        NEGATIVE_ZERO = auto()\r\n        POSITIVE_QUIET_NAN = auto()\r\n        NEGATIVE_QUIET_NAN = auto()\r\n        POSITIVE_SIGNALING_NAN = auto()\r\n        NEGATIVE_SIGNALING_NAN = auto()\r\n\r\n    def category (exponent, mantissa):\r\n    return (\r\n        \"quiet_nan\" if mantissa [0 ] else\r\n        \"signaling_nan\" if any (mantissa ) else\r\n        \"infinity\"\r\n    ) if all(exponent) else (\r\n        \"normalized\" if any (exponent ) else\r\n        \"denormalized\" if any (mantissa ) else\r\n        \"zero\"\r\n    )\r\n\r\n    def get_float_type (number: float) - > FloatType :\r\n    bits = format (struct . unpack (\"Q\" , struct . pack (\"d\" , number ))[ 0 ], \"064b\" )\r\n    sign, exponent , mantissa = bits [: 1 ], bits [1 : 12 ], bits [12 :]\r\n    name = category ([b == \"1\" for b in exponent], [b == \"1\" for b in mantissa ])\r\n    return FloatType[f\" { 'positive' if sign == '0' else 'negative' } _ { name } \" . upper ()]\r\n",
  "608673cf4b69590030fee8d6": "def lyrics_print(lyrics):\r\n    return [lyric[: i] + [f\" { w [: j + 1 ]} _\"] for lyric in lyrics for i, w in enumerate(lyric) for j in range(len(w))]\r\n",
  "58f174ed7e9b1f32b40000ec": "def max_profit(prices):\r\n    m = best = float('-inf')\r\n    for v in reversed(prices):\r\n    m, best = max(m, best - v), max(best, v)\r\n    return m\r\n",
  "60512be8bbc51a000a83d767": "from functools import reduce\n\n\ndef operator(a, n, b):\n    if n == 0:\n        return 1 + b\n    if n == 1:\n        return a + b\n    if n == 2:\n        return a * b\n    if n == 3:\n        return a * * b\n    return reduce(lambda x, _: a * * x, [1] * (b + 1))\n",
  "59073712f98c4718b5000022": "def penaltyShots(shots, score):\r\n    sa, sb = score\r\n    return (abs(sa - sb) <= 1) + (sa == sb) if shots >= 5 else max(6 - shots - abs(sa - sb), 0)\r\n",
  "6022c97dac16b0001c0e7ccc": "def score(line):\r\n    try:\r\n    pos = line . index('p')\r\n    except ValueError:\r\n    pos = line . index('P')\r\n    left = line[pos + 1: - 1]\r\n    return len(left) + left . count('~')\r\n\r\n    def calculate_winners(snapshot, penguins):\r\n    res = sorted((score(line), name)\r\n                 for line, name in zip(snapshot . splitlines(), penguins))\r\n    return f\"GOLD: { res [ 0 ][ 1 ]} , SILVER: { res [ 1 ][ 1 ]} , BRONZE: { res [ 2 ][ 1 ]} \"\r\n",
  "5f631ed489e0e101a70c70a0": "def tourney(lst):\r\n    out = [lst]\r\n    while len(lst) > 1:\r\n    lst = [lst[- 1]] * (len(lst) % 2) + [* map(max, lst[:: 2], lst[1:: 2])]\r\n    out . append(lst)\r\n    return out\r\n",
  "605150ba96ff8c000b6e3df8": "def battle_codes(chars, nums):\r\n\r\n    if not chars or not nums:\r\n        return 'Peace'\r\n    chars = [ord(c) - 96 for c in chars]\r\n    nums = [* map(int, nums[:: - 1])]\r\n\r\n    while chars and nums:\r\n    c, n = chars[- 1], nums[- 1]\r\n    chars[- 1], nums[- 1] = c - n, n - c\r\n    if len(chars) > 1:\r\n    chars[- 2] -= n\r\n    if chars[- 2] < 1:\r\n        chars . pop(- 2)\r\n\r\n    if nums[- 1] < 1:\r\n        nums . pop()\r\n    if chars[- 1] < 1:\r\n        chars . pop()\r\n\r\n    return '' . join(chars and (chr(c + 96) for c in chars) or map(str, nums[:: - 1])) or 'Draw'\r\n",
  "5f0795c6e45bc600247ab794": "import crypt\r\n\r\n\r\ndef runShell(boxNr):\r\n    print(boxNr)\r\n    if boxNr == 1:\r\n        # return \"cd /root; cat root.txt\"\r\n    return 'CodeWars{7594357083475890320019dsfsdjfl32423hjkasd9834haksdSKJAHD32423khdf}'\r\n    elif boxNr == 2:\r\n    hash = crypt . crypt('a', '$1$root')\r\n    cmds = ['cd /etc',\r\n            'ls -l',\r\n            'cat passwd',\r\n            'echo root:' + hash + ':0:0::/root:/bin/bash > passwd',\r\n            'su root a',\r\n            'cd /root',\r\n            'ls -l',\r\n            'cat root.txt']\r\n    # return ';'.join(cmds)\r\n    return 'CodeWars{jfklsfjljlk&8632847dhfkjds876fDKJFHD(F&/KHKJDF}'\r\n    elif boxNr == 3:\r\n        # return \"ls -la; cat .hidden_password_for_root.txt; cat root.txt fil3pa44word\"\r\n    return 'CodeWars{fdjslfd2433SKAJF(/&Dfkhk3h4kfsd786234kjf}'\r\n",
  "5efae11e2d12df00331f91a6": "import hashlib\r\n\r\n\r\ndef crack(hash):\r\n    for i in range(100000):\r\n    if hashlib . md5(str(i). zfill(5). encode()). hexdigest() == hash:\r\n    return str(i). zfill(5)\r\n",
  "5ef9ca8b76be6d001d5e1c3e": "def encode(stg):\r\n    return \"\" . join(digit * 3 for char in stg for digit in f\" { ord ( char ):0 8 b } \")\r\n\r\n    def decode(binary):\r\n    reduced = (get_digit(triplet) for triplet in chunks(binary, 3))\r\n    return \"\" . join(get_char(byte) for byte in chunks(\"\" . join(reduced), 8))\r\n\r\n    def chunks(seq, size):\r\n    return (seq[i: i + size] for i in range(0, len(seq), size))\r\n\r\n    def get_digit(triplet):\r\n    return max(triplet, key=triplet . count)\r\n\r\n    def get_char(byte):\r\n    return chr(int(byte, 2))\r\n",
  "5cfe4465ac68b86026b09c77": "import math\r\n\r\n\r\ndef divisors(p):\r\n    a = [1]\r\n    for i in range(2, int(math . sqrt(p)) + 1):\r\n    if p % i == 0:\r\n    a . extend([i, p / / i])\r\n    a . extend([p])\r\n    return list(set(a))\r\n    def solve(p):\r\n    for d in sorted(divisors(p - 1)):\r\n    if pow(10, d, p) == 1:\r\n    return '{}-sum' . format(d)\r\n    break\r\n    elif pow(10, d, p) == p - 1:\r\n    return '{}-altsum' . format(d)\r\n    break\r\n",
  "58efb6ef0849132bf000008f": "def build_palindrome(s):\r\n    for n in range(len(s), - 1, - 1):\r\n    if s[: n] == s[: n][:: - 1]:\r\n    return s[n:][:: - 1] + s\r\n    if s[- n:] == s[- n:][:: - 1]:\r\n    return s + s[: - n][:: - 1]\r\n",
  "5bc64f48eba26e79df000031": "import re\r\n\r\n\r\ndef licence_plate(s):\r\n    plate = '-' . join(re . findall(r'[A-Z]+|\\d+',\r\n                       s . upper()))[: 8]. rstrip('-')\r\n    return plate if len(plate) > 1 and not plate . isdigit() else 'not possible'\r\n",
  "5bebcbf2832c3acc870000f6": "def score(hand):\r\n    score = sum(int(c) if c . isdigit() else 11 if c ==\r\n                \"A\" else 10 for c in hand)\r\n    aces = hand . count(\"A\")\r\n\r\n    for _ in range(aces):\r\n    if score > 21:\r\n    score -= 10\r\n    return \"BJ\" if score == 21 and len(hand) == 2 else score if score <= 21 else 0\r\n    def winners(player1, player2, player3, dealer, deck):\r\n    p1, p2, p3, house = map(score, (player1, player2, player3, dealer))\r\n\r\n    if house == \"BJ\":\r\n    return []\r\n\r\n    deck = deck[:: - 1]\r\n\r\n    while 0 < house < 17 and deck:\r\n    dealer . append(deck . pop())\r\n    house = score(dealer)\r\n\r\n    return ([\"Player 1\"] * (p1 == \"BJ\" or p1 > house) +\r\n            [\"Player 2\"] * (p2 == \"BJ\" or p2 > house) +\r\n            [\"Player 3\"] * (p3 == \"BJ\" or p3 > house) +\r\n            [])\r\n",
  "5e0f6a3a2964c800238ca87d": "from collections import Counter\r\n\r\n\r\ndef blocks(s):\r\n    def sort(c): return (c . isdigit(), c . isupper(), c)\r\n    answer, counter = [], Counter(s)\r\n    while counter:\r\n    block = '' . join(sorted(counter, key=sort))\r\n    answer . append(block)\r\n    counter = counter - Counter(block)\r\n    return '-' . join(answer)\r\n",
  "5fc7d2d2682ff3000e1a3fbc": "import re\n\n\ndef is_a_valid_message(message):\n    return all(n and int(n) == len(s) for n, s in re . findall(\"(\\d*)(\\D*)\", message)[: - 1])\n",
  "5f25f475420f1b002412bb1f": "def find_the_number_plate(customer_id):\r\n    q, r = divmod(customer_id, 999)\r\n    q, a = divmod(q, 26)\r\n    c, b = divmod(q, 26)\r\n    return f\" { chr ( a + 97 )}{ chr ( b + 97 )}{ chr ( c + 97 )}{ r + 1 :0 3 d } \"\r\n",
  "58dc420210d162048a000085": "def meeting_time(Ta, Tb, r):\r\n    if Ta == 0:\r\n    return \"{:.2f}\" . format(abs(Tb))\r\n    elif Tb == 0:\r\n    return \"{:.2f}\" . format(abs(Ta))\r\n    else:\r\n    return \"{:.2f}\" . format(abs(Ta * Tb / (Tb - Ta)))\r\n",
  "5713338968e0cf779b00096e": "def find_comb_noncontig(arr, t, k):\r\n    comb_sum = []\r\n    for r, x in enumerate(arr, - 1):\r\n    comb_sum . append([x] + [x + y for l in range(r) for y in comb_sum[l]])\r\n    return sum(t - k <= z <= t + k for row in comb_sum for z in row)\r\n",
  "608cc9666513cc00192a67a9": "def compute_ranges(arr, op, rs):\r\n    \"\"\" \r\n    Efficient and easy segment trees \r\n    http://codeforces.com/blog/entry/18051 \r\n    \"\"\"\r\n    def f(a, b):\r\n    if a is None:\r\n        return b\r\n    if b is None:\r\n        return a\r\n    return op(a, b)\r\n\r\n    def query(l, r):\r\n    resL = resR = None\r\n    l += n\r\n    r += n\r\n    while l < r:\r\n    if l & 1:\r\n    resL = f(resL, tree[l])\r\n    l += 1\r\n    if r & 1:\r\n    r -= 1\r\n    resR = f(tree[r], resR)\r\n    l >>= 1\r\n    r >>= 1\r\n    return f(resL, resR)\r\n\r\n    n = len(arr)\r\n    tree = n * [None] + arr\r\n    for i in range(n - 1, 0, - 1):\r\n    tree[i] = f(tree[i << 1], tree[i << 1 | 1])\r\n\r\n    return [query(l, r) for l, r in rs]\r\n",
  "6004cb552b8bc80017fe26b1": "# 78 :D\ndef time_hands_cross(a, b): return f\" { a } :%02d:%02d\" % divmod(a % b * 3600 / / ~ - b, 60) * (a != ~ - b)\n",
  "5ecb44975864da0012572d5c": "import re\r\nimport bs4\r\nimport requests\r\nHOST = 'https://en.wikipedia.org'\r\nEXCLUDING_NAMESPACES = re . compile(f\"^/wiki/(?!\\w+:)\")\r\n\r\n\r\ndef wikiscraping(url):\r\n    body = bs4 . BeautifulSoup(requests . get(\r\n        url). text). find('div', id='bodyContent')\r\n    links = body . find_all('a', href=EXCLUDING_NAMESPACES)\r\n    return {link . get('title'): HOST + link . get('href') for link in links}\r\n",
  "5c1ac4f002c59c725900003f": "def check_sequence(seq, L, N):\r\n    return sum(1 for r in seq . replace('HT', 'H T'). replace('TH', 'T H'). split() if len(r) == L) == N\r\n",
  "5f8070c834659f00325b5313": "calculate = eval\n",
  "5ef0456fcd067000321baffa": "def connotation(s):\r\n    lst = s . upper(). split()\r\n    return sum('A' <= w[0] <= 'M' for w in lst) >= len(lst) / 2\r\n",
  "5ed7625f548425001205e290": "from collections import deque\r\nfrom typing import *\r\n\r\n\r\ndef f(t): return Union[tuple(to_type_hint(x) for x in t)]\r\n\r\n\r\nd = {\r\n    list: List,\r\n    set: Set,\r\n    deque: Deque,\r\n    frozenset: FrozenSet\r\n}\r\n\r\n\r\ndef to_type_hint(t):\r\n    v = t . __class__\r\n    if t is None:\r\n    return\r\n    if v is tuple:\r\n    w = tuple(to_type_hint(x) for x in t)\r\n    return Tuple[w if len(t) <= 3 else (to_type_hint(t[0]), ...) if len(set(w)) == 1 else (Union[w], ...)]\r\n\r\n    elif t and v is dict:\r\n    return Dict[f(t . keys()), f(t . values())]\r\n\r\n    elif t and v in d:\r\n    return d[v][f(t)]\r\n\r\n    return v\r\n",
  "60908bc1d5811f0025474291": "def find_squares(n):\r\n    m = (n - 1) / / 2\r\n    return f' {( m + 1 ) * * 2 } - { m * * 2 } '\r\n",
  "5c1556f37f0627f75b0000d5": "import datetime\r\n\r\n\r\ndef days(date, month, year):\r\n    x = datetime . datetime(year, month, date)\r\n    y = datetime . datetime(2437, 3, 24)\r\n    delta = y - x\r\n    t = delta . days\r\n    if year < 1752 or (year == 1752 and month < 9) or (year == 1752 and month == 9 and date < 14):\r\n    t -= 11\r\n    if year < 1752:\r\n    y = year / / 4 * 4 + 4\r\n    for i in range(y, 1752, 4):\r\n    if i % 100 == 0 and i % 400 != 0:\r\n    t += 1\r\n    return t\r\n",
  "5bf71b94e50d1b00590000fe": "import re\r\n\r\n\r\ndef count_squares(lines):\r\n    h, w = len(lines), max(map(len, lines))\r\n    grid = \"\\t\" . join(line . ljust(w) for line in lines)\r\n\r\n    return sum(\r\n        len(re . findall(r\"(?=\\+[-+]{%d}\\+.{%d}(?:[|+].{%d}[|+].{%d}){%d}\\+[-+]{%d}\\+)\"\r\n                         % (i, w + 1 - i - 2, i, w + 1 - i - 2, i, i), grid))\r\n        for i in range(0, min(w, h) - 1)\r\n    )\r\n",
  "5b86a6d7a4dcc13cd900000b": "from itertools import count\r\n\r\n\r\ndef getRevStep(step): return ((step << 2) + (step >> 2)) & 15\r\n\r\n\r\nCONFIG = ((8, - 1, 0, 'N'), (4, 0, - 1, 'W'), (2, 1, 0, 'S'), (1, 0, 1, 'E'))\r\nSWARM = [tuple((step, getRevStep(step), dx, dy, dir) for step, dx, dy, dir in CONFIG if not step & n)\r\n         for n in range(16)]\r\n\r\n\r\ndef maze_solver(arr):\r\n\r\n    for x, row in enumerate(arr):\r\n    for y, v in enumerate(row):\r\n    if v == 'B':\r\n        ball = (x, y)\r\n    elif v == 'X':\r\n        end = (x, y)\r\n\r\n    bag = {ball}\r\n    lX, lY = len(arr), len(arr[0])\r\n    paths = [[[] for _ in range(lY)] for _ in range(lX)]\r\n\r\n    lastModifiedBagGen = - 1\r\n    for nIter in count(0):\r\n\r\n    for x, y in bag:\r\n        paths[x][y]. append('')  # \"wait there\"\r\n    oldBagLen = len(bag)\r\n    while 1:\r\n    addToBag = set()\r\n    for x, y in bag:\r\n    doors = 0 if isinstance(arr[x][y], str) else arr[x][y]\r\n\r\n    for step, revStep, dx, dy, dir in SWARM[doors]:\r\n    a, b = x + dx, y + dy\r\n    if (0 <= a < lX and 0 <= b < lY  # in board\r\n        and len(paths[a][b]) <= nIter  # \"No! Don't go there again!\"\r\n            and (isinstance(arr[a][b], str) or not revStep & arr[a][b])):  # target tile allows travel too\r\n    addToBag . add((a, b))\r\n    paths[a][b] = paths[x][y][:]\r\n    paths[a][b][- 1] += dir\r\n    if end == (a, b):\r\n        return paths[a][b]\r\n\r\n    if not addToBag:\r\n        break\r\n    bag |= addToBag\r\n    if oldBagLen != len(bag):\r\n        lastModifiedBagGen = nIter\r\n    elif nIter - lastModifiedBagGen > 4:\r\n        return None\r\n    arr = [[((n << 1) + (n >> 3)) & 15 if isinstance(n, int) else n for n in row]\r\n           for row in arr]  # Rotate all tiles colckwise\r\n",
  "605721e922624800435689e8": "def generate_all_possible_matches(n=1):\r\n\r\n    def rec(a, b, p):\r\n    p . append(f' { a } : { b } ')\r\n    if n == a or n == b:\r\n    yield p[:]\r\n    else:\r\n    yield from rec(a + 1, b, p)\r\n    yield from rec(a, b + 1, p)\r\n    p . pop()\r\n\r\n    return list(rec(0, 0, []))\r\n",
  "5877027d885d4f6144000404": "from collections import deque\r\nfrom numpy import cross, dot\r\nMOVES = ((1, 0), (- 1, 0), (0, 1), (0, - 1))\r\nDIRS = ('v', '^', '>', '<')\r\n\r\n\r\ndef escape(maze):\r\n\r\n    start = x, y = next((x, y) for x, row in enumerate(maze)\r\n                        for y, c in enumerate(row) if c not in '# ')\r\n    X, Y, dir = len(maze), len(maze[0]), MOVES[DIRS . index(maze[x][y])]\r\n    q, seens = deque([(start, dir)]), {}\r\n\r\n    if not x or x == X - 1 or not y or y == Y - 1:\r\n        return []  # Already at the end, do nothing\r\n    noPath = True\r\n    while q:\r\n    (x, y), dir = q . popleft()\r\n    for dx, dy in MOVES:\r\n    xx, yy = pos = (x + dx, y + dy)\r\n\r\n    if 0 <= xx < X and 0 <= yy < Y and maze[xx][yy] == ' ' and pos not in seens:\r\n    q . append((pos, (dx, dy)))\r\n    # data: (origin position, direction before origin, direction after origin)\r\n    seens[pos] = ((x, y), dir, (dx, dy))\r\n    if not xx or xx == X - 1 or not yy or yy == Y - 1:  # Escaped!\r\n    q, noPath = [], False  # reset the queue to stop it, \"from the for loop\"\r\n    break\r\n    if noPath:\r\n        return []  # No path, no chocolate...\r\n    path = []\r\n    while pos != start:\r\n    pos, dir, nextDir = seens[pos]\r\n    # scalar prouct > 0 <=> go ahead, otherwise, turn back\r\n    scal = dot(dir, nextDir)\r\n    # cross product > 0 <=> turn left, otherwise, turn right\r\n    prod = cross(dir, nextDir)\r\n    if scal:\r\n        # dot != 0 => both directions are colinear\r\n        path . append('FB' if scal < 0 else 'F')\r\n    else:\r\n        # orthogonal directions, take a turn\r\n        path . append('FL' if prod > 0 else 'FR')\r\n    return list('' . join(path)[:: - 1])\r\n",
  "5ca24526b534ce0018a137b5": "HOLDERS = '12345678910*#'\r\nTOME = {c: n * str(i) for i, seq in enumerate(' /.,?!/abc/def/ghi/jkl/mno/pqrs/tuv/wxyz' . split('/'))\r\n        for n, c in enumerate(seq, 1)}\r\nTOME . update({c: c + '-' for c in HOLDERS})\r\nTOME . update({c: n * '*' for n, c in enumerate(\"'-+=\", 1)})\r\n\r\n\r\ndef send_message(s):\r\n    isUp, out = 0, []\r\n\r\n    def press(seq):\r\n    if out and out[- 1][- 1] == seq[0]:\r\n        seq = ' ' + seq\r\n    out . append(seq)\r\n\r\n    for c in s:\r\n    if c . isalpha() and isUp != c . isupper():\r\n    press('#')\r\n    isUp ^= 1\r\n    press(TOME[c . lower()])\r\n\r\n    return '' . join(out)\r\n",
  "5f120a13e63b6a0016f1c9d5": "def consecutive_sum(num):\r\n    upper_limit = 1\r\n    while True:\r\n    if upper_limit * (upper_limit + 1) / / 2 > num:\r\n    break\r\n    upper_limit += 1\r\n    return sum([1 if i % 2 and not num % i else 1 if not i % 2 and num % i == i / / 2 else 0 for i in range(1, upper_limit)])\r\n",
  "5fc836f5a167260008dfad7f": "def check(n, m):\r\n    return n * m >= 20 or f\" { min ( n , m )}{ max ( n , m )} \" == \"34\"\r\n",
  "5736378e3f3dfd5a820000cb": "def bus_timer(current_time):\r\n    h, m = map(int, current_time . split(\":\"))\r\n    current_time = 60 * h + m\r\n    if current_time >= 1436 or current_time <= 355:\r\n    return (355 - current_time) % 1440\r\n    else:\r\n    return (10 - current_time) % 15\r\n",
  "5fc4e46867a010002b4b5f70": "from calendar import _monthlen as last_day\n",
  "606b43f4adea6e00425dff42": "def grid_map(lst, op):\r\n    return [[* map(op, x)] for x in lst]\r\n",
  "5f8a15c06dbd530016be0c19": "def duplicate_sandwich(arr):\r\n    start, end = [i for i, x in enumerate(arr) if arr . count(x) > 1]\r\n    return arr[start + 1: end]\r\n",
  "605ae9e1d2be8a0023b494ed": "def count_salutes(hallway: str) - > int:\r\n    right = 0\r\n    salutes = 0\r\n    for p in hallway:\r\n    if p == '>':\r\n    right += 1\r\n    if p == '<':\r\n    salutes += 2 * right\r\n    return salutes\r\n",
  "60113ded99cef9000e309be3": "def separate_types(seq):\r\n    result = {}\r\n\r\n    for element in seq:\r\n    if type(element) not in result:\r\n    result[type(element)] = [element]\r\n    else:\r\n    result[type(element)]. append(element)\r\n\r\n    return result\r\n",
  "5f5802bf4c2cc4001a6f859e": "def grid_index(grid, indexes):\r\n    flat = sum(grid, [])\r\n    return \"\" . join(flat[i - 1] for i in indexes)\r\n",
  "5f76c4779164bf001d52c141": "def cdnf(truth_table):\r\n    return ' + ' . join(f'( { buildRow ( r [: - 1 ]) } )' for r in truth_table if r[- 1])\r\n\r\n    def buildRow(r):\r\n    return ' * ' . join(f' { \"~\" * ( not b ) } x { i } ' for i, b in enumerate(r, 1))\r\n",
  "5ff6060ed14f4100106d8e6f": "def uncensor(infected, discovered):\r\n    return infected . replace('*', '{}'). format(* discovered)\r\n",
  "5f8341f6d030dc002a69d7e4": "def least_larger(a, i):\r\n    b = [x for x in a if x > a[i]]\r\n    return a . index(min(b)) if b else - 1\r\n",
  "5ff50f64c0afc50008861bf0": "def solution(n):\r\n    return {4: 7, 7: 4}. get(n)\r\n",
  "5f882dcc272e7a00287743f5": "def always_odd(n): return n - (n % 2 == 0)\n",
  "5f6d533e1475f30001e47514": "def consecutive(A, a, b):\r\n    return abs(A . index(a) - A . index(b)) == 1\r\n",
  "6076d4edc7bf5d0041b31dcf": "def sort_bytes(number):\r\n    return int . from_bytes(sorted(number . to_bytes(4, 'little')), 'little')\r\n",
  "601c18c1d92283000ec86f2b": "def status(nums):\r\n    cnts = {n: len(nums) - i for i,\r\n            n in enumerate(sorted(nums, reverse=True), 1)}\r\n\r\n    def itemStatus(it): return it[0] + cnts[it[1]]\r\n    return [v for _, v in sorted(enumerate(nums), key=itemStatus)]\r\n",
  "6066ae080168ff0032c4107a": "from itertools import dropwhile\n\n\ndef max_sum_between_two_negatives(arr):\n    top = c = - 1\n    for v in dropwhile((0). __le__, arr):\n    if v < 0:\n    top, c = max(top, c), 0\n    else:\n    c += v\n    return top\n",
  "5fbfc2c0dce9ec000de691e3": "def set_clock(time, buttons):\r\n    h, m = map(int, time . split(':'))\r\n    h += buttons . count('H')\r\n    m += buttons . count('M')\r\n    return f' { h % 24 or 24 } : { m % 60 :0 2 } '\r\n",
  "5f77d62851f6bc0033616bd8": "def valid_spacing(s):\r\n    return s == ' ' . join(s . split())\r\n",
  "605f5d33f38ca800322cb18f": "def tap_code_translation(text):\r\n    dots = {'a': '. .', 'b': '. ..', 'c': '. ...', 'd': '. ....', 'e': '. .....', 'f': '.. .', 'g': '.. ..', 'h': '.. ...', 'i': '.. ....', 'j': '.. .....', 'k': '. ...', 'l': '... .', 'm': '... ..', 'n': '... ...',\r\n            'o': '... ....', 'p': '... .....', 'q': '.... .', 'r': '.... ..', 's': '.... ...', 't': '.... ....', 'u': '.... .....', 'v': '..... .', 'w': '..... ..', 'x': '..... ...', 'y': '..... ....', 'z': '..... .....'}\r\n    return ' ' . join([dots[i] for i in text])\r\n",
  "604517d65b464d000d51381f": "def strange_math(n, k):\r\n    return sorted(range(n + 1), key=str). index(k)\r\n",
  "5f47e79e18330d001a195b55": "def base_finder(seq):\r\n    return len(set('' . join(seq)))\r\n",
  "5ffc226ce1666a002bf023d2": "def solution(mtrx):\r\n    for row in mtrx:\r\n    if \">\" in row and \"x\" in row:\r\n    return row . index(\">\") < row . index(\"x\")\r\n    return False\r\n",
  "5effa412233ac3002a9e471d": "def add(a, b):\r\n    s = \"\"\r\n    while a + b:\r\n    a, p = divmod(a, 10)\r\n    b, q = divmod(b, 10)\r\n    s = str(p + q) + s\r\n    return int(s or '0')\r\n",
  "5f3142b3a28d9b002ef58f5e": "def word_pattern(word):\r\n    ret, box, i = [], {}, 0\r\n    for e in word . lower():\r\n    if e not in box:\r\n    box[e] = str(i)\r\n    i += 1\r\n    ret . append(box[e])\r\n    return '.' . join(ret)\r\n",
  "603b2bb1c7646d000f900083": "def shifter(st):\r\n    return sum(all(elem in \"HIMNOSWXZ\" for elem in x) for x in set(st . split()))\r\n",
  "5ebae674014091001729a9d7": "from fractions import Fraction as F\r\n\r\n\r\ndef fractran(code, n):\r\n    fs = [F(f) for f in code . split()]\r\n    for _ in range(1000):\r\n    try:\r\n    n = next(f * n for f in fs if (f * n). denominator == 1)\r\n    except StopIteration:\r\n    break\r\n    return n\r\n",
  "5f70e4cce10f9e0001c8995a": "def solution(s):\r\n    st = [1 for i in range(1, len(s)) if s[i - 1] == s[i]]\r\n    return sum(st)\r\n",
  "5fc7caa854783c002196f2cb": "def speedify(s):\r\n    lst = [' '] * (len(s) + 26)\r\n    for i, c in enumerate(s):\r\n    lst[i + ord(c) - 65] = c\r\n    return '' . join(lst). rstrip()\r\n",
  "604287495a72ae00131685c7": "def doubleton(num):\r\n    n = num + 1\r\n    while len(set(str(n))) != 2:\r\n    n += 1\r\n    return n\r\n",
  "5ff22b6e833a9300180bb953": "def differences(lst):\r\n    if len(lst) < 2:\r\n        return lst[0] if lst else 0\r\n    return differences([abs(b - a) for a, b in zip(lst, lst[1:])])\r\n",
  "5fc4349ddb878a0017838d0f": "def red_knight(N, P):\r\n    return ('White' if P % 2 == N else 'Black', P * 2)\r\n",
  "5fde1ea66ba4060008ea5bd9": "# Make sure you follow the order of reaction\n# output should be H2O,CO2,CH4\ndef burner(c, h, o):\n    water = co2 = methane = 0\n    while h > 1 and o > 0:\n    water += 1\n    h -= 2\n    o -= 1\n    while c > 0 and o > 1:\n    co2 += 1\n    c -= 1\n    o -= 2\n    while c > 0 and h > 3:\n    methane += 1\n    c -= 1\n    h -= 4\n    return water, co2, methane\n",
  "5f5da7a415fbdc0001ae3c69": "def is_in_middle(s):\r\n    while len(s) > 4:\r\n    s = s[1: - 1]\r\n    return 'abc' in s\r\n",
  "5f656199132bf60027275739": "MODELS = {\r\n    'link': '[{txt}]({uL})',\r\n    'img': '![{txt}]({uL})',\r\n    'code': \"```{uL}\\n{txt}\\n```\",\r\n}\r\n\r\n\r\ndef generate_markdowns(mkd, txt, url_or_language):\r\n    return MODELS[mkd]. format(txt=txt, uL=url_or_language)\r\n",
  "5f70c883e10f9e0001c89673": "def flip(d, a):\r\n    return sorted(a, reverse=d == 'L')\r\n",
  "5f9f43328a6bff002fa29eb8": "def approx_equals(a, b):\r\n    return abs(a - b) < 0.001\r\n",
  "5eea52f43ed68e00016701f3": "from collections import deque\r\n\r\n\r\ndef count_ways(n, k):\r\n    s, d = 1, deque([0] * k)\r\n    for i in range(n):\r\n    d . append(s)\r\n    s = 2 * s - d . popleft()\r\n    return s - d . pop()\r\n",
  "5ebd53ea50d0680031190b96": "UNITS = ' bir iki \u00fc\u00e7 d\u00f6rt be\u015f alt\u0131 yedi sekiz dokuz' . split(' ')\r\nTENS = ' on yirmi otuz k\u0131rk elli altm\u0131\u015f yetmi\u015f seksen doksan' . split(' ')\r\n\r\n\r\ndef get_turkish_number(n):\r\n    return f' { TENS [ n / / 10 ] } { UNITS [ n % 10 ] } ' . strip() or 's\u0131f\u0131r'\r\n",
  "5e98712b7de14f0026ef1cc1": "def group_cities(seq):\r\n    result = []\r\n    sort_result = []\r\n    seq = list(dict . fromkeys(seq))  # removing duplicates\r\n    for e, i in enumerate(seq):\r\n    sort_result = [j for j in seq if len(j) == len(\r\n        i) and j . lower() in 2 * (i . lower())]\r\n    if not sorted(sort_result) in result:\r\n    result . append(sorted(sort_result))\r\n    return (sorted(sorted(result), key=len, reverse=True))\r\n",
  "5d98b6b38b0f6c001a461198": "def code(s):\r\n    return '' . join(f' { \"0\" * ( d . bit_length () - 1 )} 1 { d : b } ' for d in map(int, s))\r\n\r\n    def decode(s):\r\n    it, n, out = iter(s), 1, []\r\n    for c in it:\r\n    if c == '0':\r\n    n += 1\r\n    else:\r\n    out . append(int('' . join(next(it) for _ in range(n)), 2))\r\n    n = 1\r\n    return '' . join(map(str, out))\r\n",
  "5df754981f177f0032259090": "def mant_exp(a_number, digits_number):\n    exp = 0\n    m = a_number\n    num = 10 * * digits_number\n    if m < num:  # negative exponent\n    while m * 10 < num:\n    m *= 10\n    exp -= 1\n    else:\n    while m >= num:\n    m /= 10\n    exp += 1\n    return str(int(m)) + 'P' + str(exp)\n",
  "5eb9a92898f59000184c8e34": "from math import factorial as fact\r\n\r\n\r\ndef sum_arrangements(n):\r\n    s = str(n)\r\n    perms = fact(len(s) - 1)\r\n    coefAll = int('1' * len(s))\r\n    return coefAll * perms * sum(map(int, s))\r\n",
  "584daf7215ac503d5a0001ae": "def parse_expr(s):\r\n    s = s[1: - 1] if s[0] == '(' else s\r\n    if s . isdigit():\r\n        return ('num', int(s))\r\n    elif ' ' not in s:\r\n        return ('var', s)\r\n    depth = 0\r\n    first_space = s . index(' ')\r\n    op = s[: first_space]\r\n    for i, c in enumerate(s[first_space + 1:]):\r\n    if c == '(':\r\n        depth += 1\r\n    elif c == ')':\r\n        depth -= 1\r\n    if depth == 0 and c == ' ':\r\n    second_space = first_space + i + 1\r\n    return op, parse_expr(s[first_space + 1: second_space]), parse_expr(s[second_space + 1::])\r\n    return op, parse_expr(s[first_space + 1:])\r\n\r\n    def deriv(expr):\r\n    op, a, b = expr + ((None,) if len(expr) < 3 else ())\r\n    return {\r\n        'num': lambda: ('num', 0),\r\n        'var': lambda: ('num', 1),\r\n        '+': lambda: ('+', deriv(a), deriv(b)),\r\n        '-': lambda: ('-', deriv(a), deriv(b)),\r\n        '*': lambda: ('+', ('*', deriv(a), b), ('*', a, deriv(b))),\r\n        '/': lambda: ('/', ('-', ('*', deriv(a), b), ('*', a, deriv(b))), ('^', b, ('num', 2))),\r\n        'exp': lambda: ('*', deriv(a), ('exp', a)),\r\n        'tan': lambda: ('*', deriv(a), ('+', ('num', 1), ('^', ('tan', a), 2))),\r\n        'sin': lambda: ('*', deriv(a), ('cos', a)),\r\n        'cos': lambda: ('*', deriv(a), ('*', ('num', - 1), ('sin', a))),\r\n        'ln': lambda: ('/', deriv(a), a),\r\n        '^': lambda: ('*', ('*', ('num', b[1]), ('^', a, ('num', b[1] - 1))), deriv(a)) if b[0] == 'num' else ('*', expr, deriv(('*', b, ('ln', a))))\r\n    }. get(op)()\r\n\r\n    def simplify(expr):\r\n    op, a, b = expr + ((None,) if len(expr) < 3 else ())\r\n    if type(a) == type(()):\r\n        a = simplify(a)\r\n    if type(b) == type(()):\r\n        b = simplify(b)\r\n    if op in ('num', 'var'):\r\n        return a\r\n    elif op == '*' and 0 in (a, b):\r\n        return 0\r\n    elif op == '^' and b == 1:\r\n        return a\r\n    elif op == '^' and b == 0:\r\n        return 1\r\n    elif op == '*' and 1 in (a, b):\r\n        return a * b\r\n    elif op == '+' and 0 in (a, b):\r\n        return a if a else b\r\n    elif op == '-' and b == 0:\r\n        return a\r\n    elif type(a) == type(b) == int:\r\n        return calc(op, a, b)\r\n    else:\r\n        return (op, a) + ((b,) if b else ())\r\n\r\n    def calc(op, a, b):\r\n    return {'+': a + b, '-': a - b, '*': a * b, '/': a / b, '^': a * * b}. get(op)\r\n\r\n    def to_str(expr):\r\n    return str(expr). replace(',', ''). replace('\\'', '')\r\n\r\n    def diff(expr):\r\n    return to_str(simplify(deriv(parse_expr(expr))))\r\n",
  "5c1ae703ba76f438530000a2": "import re\r\n\r\n\r\ndef word_mesh(arr):\r\n    common = re . findall(r'(.+) (?=\\1)', ' ' . join(arr))\r\n    return '' . join(common) if len(common) + 1 == len(arr) else 'failed to mesh'\r\n",
  "5d653190d94b3b0021ec8f2b": "def product_sum(xs, m):\r\n    ss = [1] + [0] * m\r\n    for x in xs:\r\n    for i in range(m, 0, - 1):\r\n    ss[i] += ss[i - 1] * x\r\n    return ss[m] % (10 * * 9 + 7)\r\n",
  "5db017dd3affec001f3775b1": "import re\r\n\r\n\r\ndef autoformat(s): return re . sub(r'^[ \\t]+', indenter, s, flags=re . M)\r\n\r\n\r\ndef indenter(m, s=0):\r\n    for c in m[0]:\r\n        s += c == ' ' or 4 - s % 4\r\n    n, r = divmod(s, 4)\r\n    return ' ' * (n + (r > 1)) * 4\r\n",
  "5eb34624fec7d10016de426e": "def martingale(bank, outcomes):\n    stake = 100\n    for i in outcomes:\n    if i == 0:\n    bank -= stake\n    stake *= 2\n    else:\n    bank += stake\n    stake = 100\n    return bank\n",
  "5eb27d81077a7400171c6820": "from math import ceil, log10\r\n\r\n\r\ndef graceful_tipping(bill):\r\n    bill *= 1.15\r\n    if bill < 10:\r\n    return ceil(bill)\r\n    e = int(log10(bill))\r\n    unit = (10 * * e) / 2\r\n    return ceil(bill / unit) * unit\r\n",
  "5eaf798e739e39001218a2f4": "def relations(family_list, target_pair):\r\n    parents = {}\r\n    for parent, child in family_list:\r\n    parents[child] = parent\r\n    a, b = target_pair\r\n    ap = parents . get(a)\r\n    app = parents . get(ap)\r\n    bp = parents . get(b)\r\n    bpp = parents . get(bp)\r\n\r\n    if b == ap:\r\n    return 'Mother'\r\n    if b == app:\r\n    return 'Grandmother'\r\n    if a == bp:\r\n    return 'Daughter'\r\n    if a == bpp:\r\n    return 'Granddaughter'\r\n    if ap == bp:\r\n    return 'Sister'\r\n    if app == bpp:\r\n    return 'Cousin'\r\n    if app == bp:\r\n    return 'Aunt'\r\n    if ap == bpp:\r\n    return 'Niece'\r\n",
  "5eaf88f92b679f001423cc66": "def reflections(n, m):\n    x = y = 0\n    dx = dy = 1\n    while 1:\n    x += dx\n    y += dy\n    if x == y == 0 or x == n and y == m:\n        return 1\n    if 0 in (x, y) and (x == n or y == m):\n        return 0\n    if x in (0, n):\n        dx *= - 1\n    if y in (0, m):\n        dy *= - 1\n",
  "59a6949d398b5d6aec000007": "import re\r\nNAME = r'[_a-zA-Z]\\w*'\r\nTOKENIZER = re . compile(fr'->|(?:in |out )(?= * { NAME } )| { NAME } |.')\r\n  CONVERTER = {'*': '?',\r\n                'in ': '? super ',\r\n                 'out ': '? extends ',\r\n                 'Int': 'Integer',\r\n                 'Unit': 'Void'}\r\n\r\n   class InvalidExpr (Exception):\r\n        pass\r\n\r\n    def FATAL (msg): raise InvalidExpr (msg)\r\n\r\n    def transpile(s):\r\n\r\n    def walk(step=0):\r\n    nonlocal i\r\n    i += step\r\n    while i < len (tokens) and tokens [i] == ' ':\r\n        i += 1\r\n\r\n    def eat (what=None):\r\n    nonlocal i\r\n    ret = taste(what)\r\n    if what and not ret:\r\n        FATAL(f'Expected { what } but got { ret } (i= { i } )')\r\n    walk(1)\r\n    return CONVERTER . get(ret, ret)\r\n\r\n    def taste(what=None):\r\n    return i < len (tokens) and (what is None or re . match (what , tokens [i ])) and tokens [i ]\r\n\r\n    # -----------------------------------------------------\r\n\r\n    def _type():\r\n    if taste(r'\\('):\r\n        return _functionType()\r\n    elif not taste(NAME):\r\n        FATAL(f\"Expected a name but got { taste ()} \")\r\n    name = eat()\r\n    if taste('[<.]'):\r\n        return _userType(name)\r\n    else:\r\n        return name\r\n\r\n    def _functionType():\r\n    eat()\r\n    params = []\r\n    if not taste(r'\\)'):\r\n    while 1:\r\n    params . append(_type())\r\n    if taste(r'\\)'):\r\n        break\r\n    eat(',')\r\n    eat(r'\\)')\r\n    eat(\"->\")\r\n    params . append(_type())\r\n\r\n    return f'Function { len ( params ) - 1 } < { \",\" . join ( params ) } >'\r\n    def _userType(name):\r\n    userT = name\r\n    if taste('<'):\r\n        userT += _typeParams()\r\n    if taste(r'\\.'):\r\n        userT += eat (r'\\.') + _userType (eat (NAME ))\r\n    return userT\r\n    def _typeParams():\r\n    lst = []\r\n    eat('<')\r\n    while 1:\r\n    lst . append(_typeParam())\r\n    if not taste(','):\r\n        break\r\n    eat()\r\n    eat('>')\r\n    return f\"< { ',' . join ( lst ) } >\"\r\n    def _typeParam():\r\n    if taste(r'\\*|in |out '):\r\n    x = eat()\r\n    if x != '?':\r\n        x += eat(NAME)\r\n    return x\r\n    else:\r\n    return _type()\r\n\r\n    # -----------------------------------------------------\r\n    i, tokens = 0, TOKENIZER . findall(s)\r\n    try:\r\n    walk()\r\n    ans = _type()\r\n    if i == len(tokens):\r\n        return ans\r\n    except InvalidExpr as e:\r\n        pass\r\n",
  "55d18ceefdc5aba4290000e5": "from math import factorial as fac\r\n\r\n\r\ndef comb(n, k): return fac(n) / (fac(k) * fac(n - k))\r\n\r\n\r\ndef roll_dice(n, m, x):\r\n    return 1 - sum((- 1) * * k * comb(n, k) * comb(x - 1 - k * m, x - n - 1 - k * m) / m * * n for k in range(n + 1) if x - n - 1 >= m * k)\r\n",
  "5ea39ab1d8425e0029fcd035": "def ping_pong(sounds: str) - > str:\r\n    p, c, f = dict . fromkeys(('ping', 'pong'), 0), None, None\r\n    for x in sounds . split('-'):\r\n    if c and x not in p:\r\n    f = c\r\n    if c and x in p:\r\n    p[c] += 1\r\n    c = [None, x][x in p]\r\n    if len(set(p . values())) == 1:\r\n    p . pop(f)\r\n    return max(p . items(), key=lambda x: x[1])[0]\r\n",
  "5ea91813b4702500282042c3": "n = false(false)\r\no = true(true)\r\nt = false\r\na = false\r\nd = true(false)\r\nr = false(true)\r\nx = None\r\n",
  "5dfa33aacec189000f25e9a9": "def loneliest(n):\r\n    a = list(map(int, str(n)))\r\n    b = [(sum(a[max(0, i - x): i + x + 1]) - x, x) for i, x in enumerate(a)]\r\n    return (min(b)[0], 1) in b\r\n",
  "5ea6f5d99fe5a2001e14ba13": "def find_cycle(a, b):\r\n    if (a % 2 and b % 2) or 1 in {a, b}:\r\n    return None\r\n    else:\r\n    r, c = (a, b) if a % 2 == 0 else (b, a)\r\n    res = [(0, y) for y in range(c)]\r\n    res . extend([(x, c - 1) for x in range(1, r)])\r\n\r\n    for k, x in enumerate(range(r - 1, 0, - 1)):\r\n    res . extend([(x, y if k % 2 else c - 2 - y) for y in range(c - 1)])\r\n    res . append((0, 0))\r\n\r\n    return res if r == a else [(y, x) for x, y in res]\r\n",
  "5ea2a798f9632c0032659a75": "import pandas as pd\n\n\ndef max_common(df_a, df_b):\n    return pd . concat([df_a, df_b]). filter(items=df_a . columns). groupby(level=0). max()\n",
  "5e60cdcd01712200335bd676": "import pandas as pd\n\n\ndef rename_columns(df, names):\n    return pd . DataFrame(data=df . values, columns=names)\n",
  "5602c713f75452a7c500005c": "import math\n\n\ndef dist(x, y): return (x * * 2 + y * * 2) * * .5\n\n\ndef tang_from_point(circle, point):\n    ((cx, cy), r), (px, py) = circle, point\n    a, b = math . asin(r / dist(py - cy, px - cx)\n                       ), math . atan2(py - cy, px - cx)\n    return [[round(m, 4), round(py - m * px, 4)] for m in sorted((math . tan(b + a), math . tan(b - a)))]\n",
  "56ccc33b29aab18ca4001c64": "from fractions import Fraction\nfrom collections import defaultdict\nfrom itertools import combinations\nfrom math import inf\n\n\ndef max_encount_points(lst):\n    d = defaultdict(int)\n    for (i, j), (x, y) in combinations(lst, 2):\n    slope = Fraction(y - j, (x - i)) if x - i else inf\n    ord0 = j - slope * i if x - i else x\n    d[(slope, ord0)] += 1\n    m = max(d . values())\n    n = [* d . values()]. count(m)\n\n    return (1 + (1 + 8 * m) * * .5) / 2, n\n",
  "57180ffc1c27346abd0011ee": "from itertools import permutations\r\n\r\n\r\ndef concat_max_min(arr, k, s):\r\n    num = []\r\n    for i in range(1, len(arr) + 1):\r\n    for x in permutations(arr, i):\r\n    m = '' . join(map(str, x))\r\n    if len(m) >= k and all(sum(map(int, m[j: j + k])) <= s for j in range(len(m) - k + 1)):\r\n    num . append(int(m))\r\n    return [min(num), max(num)] if num else []\r\n",
  "5cb758d83e6dce00149bb5cd": "def f(d_max, n):\n    \"\"\"Calculate the nth element of \n    d_max-th Farey sequence in descending order.\"\"\"\n    a, b, c, d = 1, 1, d_max - 1, d_max\n    for _ in range(n):\n    if a == 0:\n        break\n    k = (d_max + b) / / d\n    a, b, c, d = c, d, (k * c - a), (k * d - b)\n    return f\" { a } / { b } \" if a else \"-1\"\n",
  "571957959906af00f90012f3": "class MetaDict (type):\r\n    def __getitem__(cls, item): return cls . members[item]\r\n    def __iter__(cls): return (key for key in cls . members)\r\n\r\n    def remember(cls):\r\n    class Recall (cls):\r\n    __metaclass__ = MetaDict\r\n    members = {}\r\n    def __new__(c, * args):\r\n    key = args[0] if len(args) == 1 else args\r\n    if key in c . members:\r\n    return c . members[key]\r\n    self = cls . __new__(c, * args)\r\n    c . members[key] = self\r\n    return self\r\n    Recall . __name__ = cls . __name__\r\n    return Recall\r\n",
  "5e9df3a0a758c80033cefca1": "def no_order(equation):\r\n    equation = equation . replace(' ', '')\r\n    equation = equation . replace('+', ')+')\r\n    equation = equation . replace('-', ')-')\r\n    equation = equation . replace('*', ')*')\r\n    equation = equation . replace('/', ')//')\r\n    equation = equation . replace('%', ')%')\r\n    equation = equation . replace('^', ')**')\r\n    equation = '(' * equation . count(')') + equation\r\n    try:\r\n        return eval(equation)\r\n    except:\r\n        pass\r\n",
  "5e98a87ce8255200011ea60f": "id_ = lambda * cnts: '' . join(cnts)\r\n\r\n\r\nclass Tag:\r\n    def __init__(self, f=id_): self . func = f\r\n    def __call__(self, * contents): return self . func(* contents)\r\n\r\n    def __getattr__(self, tag): return Tag(\r\n        lambda * cnts: self(f'< { tag } > { \"\" . join ( cnts ) } </ { tag } >'))\r\n\r\n    Format = Tag()\r\n",
  "5e958a9bbb01ec000f3c75d8": "import numpy as np\n\n\ndef encrypt(text, key):\n    # Declare string variable to store the answer\n    ans = ''\n    # Covert all the alphabets to upper case and clean everything else\n    clean_text = '' . join([i . upper() for i in text if i . isalpha()])\n    # Add Z to the cleaned text if the length of it is odd\n    clean_text += 'Z' * (len(clean_text) % 2)\n    # Return empty string if the cleaned text is empty\n    if len(clean_text) == 0:\n    return ''\n    # Find the key matrix\n    km = np . matrix([[ord(key[0]) - 97, ord(key[1]) - 97],\n                     [ord(key[2]) - 97, ord(key[3]) - 97]])\n    # Create a text matrix\n    tm = np . matrix([[ord(clean_text[i]) - 65, ord(clean_text[i + 1]) - 65]\n                     for i in range(0, len(clean_text), 2)]). T\n    # Multiply the key matrix by the text matrix and apply modulo 26\n    am = (km * tm) % 26\n    # Convert the numbers back to letters and append them to the ans variable\n    for i in np . array(am . T):\n    ans += chr(i[0] + 65)\n    ans += chr(i[1] + 65)\n    # Return the answer variable\n    return ans\n",
  "5e96332d18ac870032eb735f": "def womens_age(n):\r\n    return f\" { n } ? That's just { 20 + n % 2 } , in base { n / / 2 } !\"\r\n",
  "5e921a2550beae0025322e79": "def rotate(seq):\r\n    s = []\r\n    while True:\r\n    s . append(next(seq))\r\n    yield iter([* map(next, s)][:: - 1])\r\n",
  "5e8dd197c122f6001a8637ca": "def remove_duplicate_ids(obj):\r\n    out, seen = {}, {}\r\n    for i in sorted(obj . keys(), key=int, reverse=True):\r\n    uniques = []\r\n    for v in obj[i]:\r\n    if v not in seen:\r\n    uniques . append(v)\r\n    seen[v] = 1\r\n    out[i] = uniques\r\n    return out\r\n",
  "5e882048999e6c0023412908": "class DefaultList (list):\r\n    def __init__(self, it, default):\r\n    super(). __init__(it)\r\n    self . default = default\r\n    def __getitem__(self, i):\r\n    try:\r\n        return super(). __getitem__(i)\r\n    except IndexError:\r\n        return self . default\r\n",
  "5e4eb72bb95d28002dbbecde": "def regex_contains_all(st):\r\n    return '' . join(f'(?=.* { x } )' for x in set(st))\r\n",
  "5e860c16c7826f002dc60ebb": "def largest_power(n):\r\n    print(n)\r\n    if n <= 4:\r\n    if n == 1:\r\n    return (0, - 1)\r\n    return (1, - 1)\r\n\r\n    # num_of_occurances\r\n    freq = 0\r\n    x = []\r\n    largest = 0\r\n    j = 0\r\n    while 2 * * largest < n:\r\n    largest += 1\r\n    largest -= 1\r\n    for i in range(2, largest + 1):\r\n    while j * * i < n:\r\n    j += 1\r\n    j -= 1\r\n    x . append(j * * i)\r\n    j = 0\r\n    return (max(x), x . count(max(x)))\r\n",
  "5e81303e7bf0410025e01031": "def side_len(x, y):\r\n    return [z for z in range(abs(x - y) + 1, x + y) if z * z not in (abs(x * x - y * y), x * x + y * y)]\r\n",
  "5e7e4b7cd889f7001728fd4a": "def to_table(data, header=False, withIdx=False):\r\n    head = f'<thead> { getLine ( data [ 0 ], withIdx , \"th\" ) } </thead>' * header\r\n    body = f'<tbody> { \"\" . join ( getLine ( d , withIdx , n = i ) for i , d in enumerate ( data [ header :], 1 )) } </tbody>'\r\n    return f'<table> { head }{ body } </table>'\r\n    def getLine(row, withIdx, tag='td', n=''):\r\n    line = withIdx * [f'< { tag } > { n } </ { tag } >'] + \\\r\n        [f'< { tag } > { \"\" if d is None else d } </ { tag } >' for d in row]\r\n    return f'<tr> { \"\" . join ( line ) } </tr>'\r\n",
  "5e7bc286a758770033b56a5a": "# -*- coding: utf-8 -*-\r\nimport operator\r\n\r\n\r\nclass Placeholder:\r\n    def __init__(self, op=None, left=None, right=None):\r\n    self . op = op\r\n    self . left = left\r\n    self . right = right\r\n    def calc(self, args):\r\n    if self . op:\r\n    x, args = self . left . calc(args) if isinstance(\r\n        self . left, Placeholder) else (self . left, args)\r\n    y, args = self . right . calc(args) if isinstance(\r\n        self . right, Placeholder) else (self . right, args)\r\n    return self . op(x, y), args\r\n    return args[0], args[1:]\r\n\r\n    def __call__(self, * args):\r\n    return self . calc(args)[0]\r\n\r\n    def __add__(self, other):\r\n    return Placeholder(op=operator . add, left=self, right=other)\r\n\r\n    def __sub__(self, other):\r\n    return Placeholder(op=operator . sub, left=self, right=other)\r\n\r\n    def __mul__(self, other):\r\n    return Placeholder(op=operator . mul, left=self, right=other)\r\n\r\n    def __floordiv__(self, other):\r\n    return Placeholder(op=operator . floordiv, left=self, right=other)\r\n\r\n    def __radd__(self, other):\r\n    return Placeholder(op=operator . add, left=other, right=self)\r\n\r\n    def __rsub__(self, other):\r\n    return Placeholder(op=operator . sub, left=other, right=self)\r\n\r\n    def __rmul__(self, other):\r\n    return Placeholder(op=operator . mul, left=other, right=self)\r\n\r\n    def __rfloordiv__(self, other):\r\n    return Placeholder(op=operator . floordiv, left=other, right=self)\r\n\r\n    x = Placeholder()\r\n",
  "5e7837d0262211001ecf04d7": "def html(tag, * contents, * * attr):\r\n    openTag = tag + \\\r\n        '' . join(\r\n            f' { \"class\" if k == \"cls\" else k } =\" { v } \"' for k, v in attr . items())\r\n\r\n    return '\\n' . join(f'< { openTag } > { c } </ { tag } >' for c in contents) or f'< { openTag } />'\r\n",
  "5e297e9f63f1db003317cbac": "def paint_tiles(costs):\r\n    t = [0] * 4\r\n    for cs in costs:\r\n    t = [c + min(t[j] for j in range(4) if j != i) for i, c in enumerate(cs)]\r\n    return min(t)\r\n",
  "5c237d7c1ea8b34b32000244": "def remove_duplicate(A): return [* map(eval, sorted(set(map(str, A))))]\n",
  "5e64cc85f45989000f61526c": "from scipy . special import comb\r\n\r\n\r\ndef almost_everywhere_zero(n, k):\r\n    if k == 0:\r\n        return 1\r\n    first, * rest = str(n)\r\n    l = len(rest)\r\n    return 9 * * k * comb(l, k, exact=True) + \\\r\n        (int(first) - 1) * 9 * * (k - 1) * comb(l, k - 1, exact=True) + \\\r\n        almost_everywhere_zero(int(\"\" . join(rest) or 0), k - 1)\r\n",
  "5e65916b4696e500134987e1": "def no_musical(classS, classE, showFreq, classT):\n    nYears, deltaY = classE - classS, showFreq - classT\n    if not showFreq:\n        return nYears + 1\n    if deltaY < 1:\n        return 0\n    n, r = divmod(nYears, showFreq)\n    return deltaY * n + min(r, deltaY)\n",
  "5e614d3ffa2602002922a5ad": "def odd_even_compositions(Q): return not Q or (2 - (1 & Q)) * 3 * * (~ - Q >> 1)\n",
  "558d5c71c68d1e86b000010f": "def is_vampire(x, y): return sorted(f\" { x }{ y } \") == sorted(\r\n    f\" { x * y } \") and x % 10 + y % 10 > 0\r\n\r\n\r\nvampires = sorted({x * y for p in (1, 2) for x in range(10 * * p, 10 * * (p + 1)) for y in range(x, 10 * * (p + 1)) if is_vampire(x, y)})\r\n\r\n\r\ndef VampireNumber(k):\r\n    return vampires[k - 1]\r\n",
  "5da1df6d8b0f6c0026e6d58d": "def c(k):\n    from math import sqrt\n    root = int(sqrt(k))\n    if (root * root != k):\n    return 0\n    i = 2\n    num = k * root\n    result = 1\n    while (num > 1):\n    div_num_nb = 0\n    while (num % i == 0):\n    num / /= i\n    div_num_nb += 1\n    result *= div_num_nb + 1\n    i += 1\n    return result\n",
  "5e5fbcc5fa2602003316f7b5": "from itertools import compress, product, chain\r\nfrom functools import partial\r\n\r\n\r\ndef check(f, s):\r\n    if f . is_literal():\r\n        return f in s\r\n    elif f . is_and():\r\n        return all(check(e, s) for e in f . args)\r\n    elif f . is_or():\r\n        return any(check(e, s) for e in f . args)\r\n    elif f . is_not():\r\n        return not check(f . args[0], s)\r\n\r\n    def get_name(f):\r\n    if f . is_literal():\r\n        yield f\r\n    else:\r\n        yield from chain . from_iterable(map(get_name, f . args))\r\n\r\n    def sat(f):\r\n    s = set(get_name(f))\r\n    return next(filter(partial(check, f), map(set, map(partial(compress, s), product((0, 1), repeat=len(s))))), False)\r\n",
  "5e60cc55d8e2eb000fe57a1c": "from math import sqrt\n\n\ndef n_bonacci_ratio(n):\n    return (n + sqrt(n * * 2 + 4)) / 2\n",
  "5e602796017122002e5bc2ed": "def partial_keys(d):\r\n    class Dct (dict):\r\n    def __getitem__(self, pk):\r\n    k = min((k for k in self if k . startswith(pk)), default=None)\r\n    return k if k is None else super(). __getitem__(k)\r\n    return Dct(d)\r\n",
  "5e5acfe31b1c240012717a78": "def id_(k): return lambda v: (k, v)\r\n\r\n\r\nCONFIG = {\r\n    bool: id_('new'),\r\n    int: id_('year'),\r\n    tuple: lambda t: ('model', ' ' . join(t)),\r\n    str: id_('make'),\r\n}\r\n\r\n\r\ndef make_model_year(lst):\r\n    return dict(CONFIG[type(data)](data) for data in lst)\r\n",
  "5e417587e35dfb0036bd5d02": "def path_counter(con):\r\n\r\n    out = [[- 1] * len(con[0]) for i in range(len(con))]\r\n    f = 0, 0\r\n    for y in range(len(con)):\r\n    for x in range(len(con[0])):\r\n    if con[y][x] == 'f':\r\n    f = y, x\r\n    break\r\n    out[f[0]][f[1]] = 0\r\n    dirs = {(0, 1): 'l', (0, - 1): 'r', (1, 0): 'u', (- 1, 0): 'd'}\r\n    stack = [f]\r\n    while stack:\r\n    y, x = stack . pop()\r\n    for dy, dx in dirs . keys():\r\n    ny, nx = (y + dy) % len(con), (x + dx) % len(con[0])\r\n    if con[ny][nx] == dirs[(dy, dx)]:\r\n    out[ny][nx] = out[y][x] + 1\r\n    stack . append((ny, nx))\r\n    return out\r\n",
  "5e454bf176551c002ee36486": "def subs_offset_apply(subs, offset):\r\n    def parse(time):\r\n    hours, minutes, seconds, milliseconds = map(\r\n        int, time . replace(',', ':'). split(':'))\r\n    return ((hours * 60 + minutes) * 60 + seconds) * 1000 + milliseconds\r\n    def render(time, min=parse('00:00:00,000'), max=parse('99:59:59,999')):\r\n    if not min <= time <= max:\r\n    raise OverflowError\r\n    seconds, milliseconds = divmod(time, 1000)\r\n    minutes, seconds = divmod(seconds, 60)\r\n    hours, minutes = divmod(minutes, 60)\r\n    return f' { hours :0 2 } : { minutes :0 2 } : { seconds :0 2 } , { milliseconds :0 3 } '\r\n    try:\r\n    start, _, stop, * text = subs . split()\r\n    start, stop = parse(start), parse(stop)\r\n    return f' { render ( start + offset )} --> { render ( stop + offset )} { \" \" . join ( text )} '\r\n    except OverflowError:\r\n    return 'Invalid offset'\r\n",
  "5e5ccbda30e9d0001ec77bb6": "from re import compile\r\nREGEX1 = compile(r\"0+|1+\"). findall\r\nREGEX2 = compile(r\"(0+) (0+)\"). findall\r\nbinary = \"{:07b}\" . format\r\n\r\n\r\ndef send(s):\r\n    temp = '' . join(binary(ord(c)) for c in s)\r\n    return ' ' . join(\"0 \" + '0' * len(x) if x[0] == '1' else \"00 \" + x for x in REGEX1(temp))\r\n\r\n    def receive(s):\r\n    temp = '' . join(y if x == '00' else '1' * len(y) for x, y in REGEX2(s))\r\n    return '' . join(chr(int(temp[i: i + 7], 2)) for i in range(0, len(temp), 7))\r\n",
  "5e5b7f55c2e8ae0016f42339": "from operator import add, sub, mul, truediv\r\n\r\n\r\ndef calculate(expression):\r\n    stack = []\r\n    ops = {'+': add, '-': sub, '*': mul, '/': truediv}\r\n    for a in reversed(expression . split()):\r\n    stack . append(ops[a](stack . pop(), stack . pop())\r\n                   if a in ops else float(a))\r\n    return stack . pop()\r\n",
  "5e539724dd38d0002992eaad": "def cipher(p):\r\n    return '' . join(chr((ord(j) + i % 3 + (i - 1) / / 3 - 97) % 26 + 97) if j != ' ' and i != 0 else j for i, j in enumerate(p))\r\n",
  "5e52946a698ef0003252b526": "def get_mask(xs):\n    '''Convert iterable of 1s and 0s to a binary number'''\n    d = 0\n    for x in xs:\n    d = (d << 1) | x\n    return d\n    def automata(rules, initial, generations):\n    automata = initial[:]\n    # m: width of neighbourhood on either side\n    m, n = len(rules[0]) / / 2, len(automata)\n    # used to limit bitmask to width of rule\n    mask = get_mask([1] * len(rules[0]))\n    rules = list(map(get_mask, rules))  # rules converted to bitmasks\n    temp = [0] * n  # used for swapping\n    for _ in range(generations):\n        # neighbourhood at index 0 as a bitmask\n    b = get_mask([automata[i % n] for i in range(- m, m + 1)])\n    for a in range(n):\n    temp[a] = int(any(b == rule for rule in rules))  # match any rule\n    # left-shift, push out MSB, push in next value\n    b = (b << 1) & mask | automata[(a + m + 1) % n]\n    automata, temp = temp, automata  # swap buffers\n    return automata\n",
  "5e529a6fb95d280032d04389": "def rat_at(n):\r\n    a, b = 0, 1\r\n    for bit in f\" { n + 1 : b } \":\r\n    if bit == '1':\r\n    a += b\r\n    else:\r\n    b += a\r\n    return a, b\r\n    def index_of(a, b):\r\n    n, mask = 0, 1\r\n    while a != b:\r\n    n += mask * (a > b)\r\n    mask *= 2\r\n    a, b = (a, b - a) if b > a else (a - b, b)\r\n    return n + mask - 1\r\n",
  "5e4e8f5a72d9550032953717": "def all_rationals():\r\n    yield (1, 1)\r\n    for a, b in all_rationals():\r\n    yield from [(a, a + b), (a + b, b)]\r\n",
  "5e4bb05b698ef0001e3344bc": "def solve(arr):\r\n    a, b, c, d = arr[0: 4]\r\n    # print(a, b, c, d)\r\n    # print(arr[4:])\r\n    first4 = [abs(a * c - b * d), (a * d + b * c)]\r\n    if len(arr) == 4:\r\n    return first4\r\n    return solve(first4 + arr[4:])\r\n",
  "5e4cf596dc3099002a30cbb1": "def bindable(a, b, bindings):\r\n    if a == b or (a, b) in bindings:\r\n    return True\r\n    elif a . is_sum():\r\n    return all(bindable(x, b, bindings) for x in a . subtypes)\r\n    elif b . is_sum():\r\n    return any(bindable(a, x, bindings) for x in b . subtypes)\r\n    if a . is_product() and b . is_product():\r\n    asub, bsub = a . subtypes, b . subtypes\r\n    return len(asub) == len(bsub) and all(bindable(x, y, bindings) for x, y in zip(asub, bsub))\r\n    return False\r\n",
  "5e4d8a53b499e20016b018a0": "def decoder(sequence):\r\n    i = 0\r\n    out = []\r\n    while i < len(sequence):\r\n    j = sequence . index('1', i)\r\n    i = 2 * j + 1 - i\r\n    out . append(int(sequence[j: i], 2) - 1)\r\n    return out\r\n",
  "5e4a1a43698ef0002d2a1f73": "d, polydivisible, arr = 1, [], list(range(1, 10))\r\nwhile arr:\r\n    d += 1\r\n    polydivisible . extend(arr)\r\n    arr = [n for x in arr for n in\r\n           range(- (- x * 10 / / d) * d, (x + 1) * 10, d)]\r\n\r\n    def next_num(n):\r\n    from bisect import bisect\r\n    idx = bisect(polydivisible, n)\r\n    if idx < len(polydivisible):\r\n    return polydivisible[idx]\r\n",
  "5e498a51dc30990025221647": "w = (s\r\n     (q, s\r\n      (q, r,)))\r\n",
  "5e453b6476551c0029e275db": "def word_problem(rules: List[Tuple[str, str]], from_str: str, to_str: str, applications: int) - > bool:\r\n    def rec(s, n): return s == to_str or n and any(s[i:]. startswith(x) and rec(\r\n        s[: i] + y + s[i + len(x):], n - 1) for i in range(len(s)) for x, y in rules)\r\n    return rec(from_str, applications)\r\n",
  "5e4217e476126b000170489b": "def polydivisible(x):\r\n    for i in range(1, len(str(x)) + 1):\r\n    if int(str(x)[: i]) % i != 0:\r\n    return False\r\n    return True\r\n",
  "5e2733f0e7432a000fb5ecc4": "def get_free_urinals(urinals):\r\n    return - 1 if '11' in urinals else sum(((len(l) - 1) / / 2 for l in f'0 { urinals } 0' . split('1')))\r\n",
  "5e2c7639b5d728001489d910": "def get_product_id(url):\r\n    return url . split('-')[- 2]\r\n",
  "5e2aec959bce5c001f090c4d": "from math import factorial\n\n\ndef count_of_heads(heads, n, k):\n    return sum(factorial(i) * n for i in range(1, k + 1)) + (heads - k)\n",
  "5e28b3ff0acfbb001f348ccc": "def is_solved(board):\r\n    curr = 0\r\n    for r in board:\r\n    for c in r:\r\n    if c != curr:\r\n    return False\r\n    curr += 1\r\n    return True\r\n",
  "5e2596a9ad937f002e510435": "def infected(s):\r\n    lands = s . split('X')\r\n    total = sum(map(len, lands))\r\n    infected = sum(len(x) for x in lands if '1' in x)\r\n    return infected * 100 / (total or 1)\r\n",
  "5e18743cd3346f003228b604": "from re import sub\n\n\ndef nines(n):\n    return n - int(sub(r'9.*$', lambda m: '8' * len(m[0]), str(n)), 9)\n",
  "5e16ffb7297fe00001114824": "def top3(* args):\r\n    return [item[0] for item in sorted(zip(* args), key=lambda x: x[1] * x[2], reverse=True)[: 3]]\r\n",
  "5e0baea9d772160032022e8c": "from typing import List\r\n\r\n\r\nclass GameTable:\r\n    def __init__(self, number_of_teams, games):\r\n    self . teams = self . __create_teams(number_of_teams)\r\n    self . matches = self . __read_matches(games)\r\n    self . ranks = [1] * number_of_teams\r\n    def __create_teams(self, number_of_teams):\r\n    teams = []\r\n    for i in range(0, number_of_teams, 1):\r\n    teams . append(Team(i))\r\n    return teams\r\n    def __read_matches(self, games):\r\n    matches = []\r\n    for match in games:\r\n    home_team = self . teams[match[0]]\r\n    away_team = self . teams[match[1]]\r\n\r\n    new_match = Match(home_team=home_team, away_team=away_team,\r\n                      goals_home_team=match[2], goals_away_team=match[3])\r\n    matches . append(new_match)\r\n    return matches\r\n    def play_games(self):\r\n    for match in self . matches:\r\n    match . play()\r\n\r\n    def rank(self):\r\n    self . teams . sort(key=lambda team: (\r\n        team . points, team . score_diff, team . goals_made), reverse=True)\r\n\r\n    rank = 1\r\n    same_rank = False\r\n    counter = 0\r\n    for i in range(len(self . teams)):\r\n    current_team = self . teams[i]\r\n\r\n    if same_rank == True:\r\n    counter += 1\r\n    else:\r\n    rank += counter\r\n    counter = 0\r\n    self . ranks[current_team . number] = rank\r\n    if i < len(self . teams) - 1:\r\n    last_team = self . teams[i + 1]\r\n    if (current_team . points == last_team . points\r\n        and current_team . score_diff == last_team . score_diff\r\n            and current_team . goals_made == last_team . goals_made):\r\n    self . ranks[current_team . number] = rank\r\n    same_rank = True\r\n    continue\r\n    else:\r\n    same_rank = False\r\n    rank += 1\r\n    return self . ranks\r\n    def print_final_table(self):\r\n    print(\"\\033[1mRank\\tTeam\\tFor:Against\\tGD\\tPoints\\t\\033[0m\")\r\n    for rank, team in zip(sorted(self . ranks), self . teams):\r\n    print(\r\n        f\" { rank } \\t\\t { team . name } \\t\\t { team . goals_made } : { team . goals_received } \\t { '+' + str ( team . score_diff ) if team . score_diff > 0 else team . score_diff } \\t { team . points } \\t\")\r\n\r\n    class Match:\r\n    def __init__(self, home_team, away_team, goals_home_team, goals_away_team):\r\n    self . home_team = home_team\r\n    self . away_team = away_team\r\n    self . goals_home_team = goals_home_team\r\n    self . goals_away_team = goals_away_team\r\n    def play(self) - > None:\r\n    diff = self . score_diff()\r\n    self . home_team . goals_made += self . goals_home_team\r\n    self . away_team . goals_made += self . goals_away_team\r\n    self . home_team . goals_received += self . goals_away_team\r\n    self . away_team . goals_received += self . goals_home_team\r\n    self . home_team . score_diff += diff\r\n    self . away_team . score_diff += diff * - 1\r\n    if self . goals_home_team > self . goals_away_team:\r\n    self . home_team . points += 2\r\n    elif self . goals_home_team == self . goals_away_team:\r\n    self . home_team . points += 1\r\n    self . away_team . points += 1\r\n    else:\r\n    self . away_team . points += 2\r\n    def score_diff(self) - > int:\r\n    return self . goals_home_team - self . goals_away_team\r\n    def __str__(self):\r\n    return f\" { self . home_team } played against { self . away_team } -> { self . goals_home_team } : { self . goals_away_team } \"\r\n    class Team:\r\n    def __init__(self, number):\r\n    self . number = number\r\n    self . name = f\"Team { number } \"\r\n    self . points = 0\r\n    self . score_diff = 0\r\n    self . goals_made = 0\r\n    self . goals_received = 0\r\n    def __eq__(self, value):\r\n    return self . number == value . number\r\n    def __str__(self):\r\n    return f\" { self . name } with a score of { self . points } and diff of { self . score_diff } \"\r\n    def compute_ranks(number: int, games: List[List[int]]) - > List:\r\n    table = GameTable(number, games)\r\n    table . play_games()\r\n    ranks = table . rank()\r\n\r\n    table . print_final_table()\r\n    return ranks\r\n    if __name__ == \"__main__\":\r\n    number = 6\r\n    games = [[0, 5, 2, 2],  # Team 0 - Team 5 = > 2:2\r\n             [1, 4, 0, 2],  # Team 1 - Team 4 = > 0:2\r\n             [2, 3, 1, 2],  # Team 2 - Team 3 = > 1:2\r\n             [1, 5, 2, 2],  # Team 1 - Team 5 = > 2:2\r\n             [2, 0, 1, 1],  # Team 2 - Team 0 = > 1:1\r\n             [3, 4, 1, 1],  # Team 3 - Team 4 = > 1:1\r\n             [2, 5, 0, 2],  # Team 2 - Team 5 = > 0:2\r\n             [3, 1, 1, 1],  # Team 3 - Team 1 = > 1:1\r\n             [4, 0, 2, 0]]  # Team 4 - Team 0 = > 2:0\r\n    compute_ranks(number, games)\r\n    print()\r\n    compute_ranks(8, [[0, 7, 2, 0]])\r\n",
  "5e0b72d2d772160011133654": "def solve(xs):\r\n    x, y, z = sorted(xs)\r\n    return min(x + y, (x + y + z) / / 2)\r\n",
  "5dfd129673aa2c002591f65d": "def find_best_game(games):\r\n    return max(games, key=lambda g: sum(p * v for p, v in g . outcomes)). name\r\n",
  "5e07b5c55654a900230f0229": "def reverse_in_parentheses(s):\r\n    stack = []\r\n    for i in s:\r\n    stack . append(i)\r\n\r\n    if i == ')':\r\n    opening = len(stack) - stack[:: - 1]. index('(') - 1\r\n    stack . append('' . join(\r\n        [i[:: - 1]. translate(str . maketrans('()', ')(')) for i in stack[opening:][:: - 1]]))\r\n    del stack[opening: - 1]\r\n\r\n    return '' . join(stack)\r\n",
  "5e0607115654a900140b3ce3": "def sequence(n): return int(format(n, 'b'), 3)\n",
  "5e030f77cec18900322c535d": "def minimum(a, x):\r\n    return min(a % x, - a % x)\r\n",
  "5df261342964c80028345a0a": "def check_parity(parity, bin_str):\r\n    return [0, 1][bin_str . count(\"1\") % 2 == (parity == \"even\")]\r\n",
  "5df0041acec189002d06101f": "def pathfinder_scores(scores):\r\n    pathpoints = {'7': - 4, '8': - 2, '9': - 1, '10': 0, '11': 1, '12': 2,\r\n                  '13': 3, '14': 5, '15': 7, '16': 10, '17': 13, '18': 17}\r\n    points = []\r\n    for x in scores:\r\n    if str(x) in pathpoints:\r\n    points . append(pathpoints . get(str(x)))\r\n    elif str(x) not in pathpoints:\r\n    return False\r\n    print(sum(points))\r\n    if sum(points) > 25:\r\n    return False\r\n    return True\r\n",
  "5deeb1cc0d5bc9000f70aa74": "def zombie_shootout(z, r, a):\r\n    s = min(r * 2, a)\r\n    return f\"You shot all { z } zombies.\" if s >= z else f\"You shot { s } zombies before being eaten: { 'overwhelmed' if s == 2 * r else 'ran out of ammo' } .\"\r\n",
  "5dd5128f16eced000e4c42ba": "def solve(st):\r\n    return min(set(st), key=lambda c: (st . index(c) - st . rindex(c), c))\r\n",
  "5dd259444228280032b1ed2a": "def solve(s, g):\r\n    return - 1 if s % g else (g, s - g)\r\n",
  "5db8a241b8d7260011746407": "class Game ():\r\n\r\n    def __init__(self, arr):\r\n    self . comands = arr\r\n    self . score = 0\r\n    self . step = None\r\n    self . fild = [- 1] * 9\r\n    self . over = lambda x: max(x) >= 29\r\n    def __break__(self):\r\n    while - 1 not in self . fild:\r\n    self . score += 1\r\n    self . fild = [e - 1 for e in self . fild]\r\n    return self . over(self . fild)\r\n\r\n    def __values__(self, comand):\r\n    self . step = 4 + {'R': lambda m: + int(m),\r\n                       'L': lambda m: - int(m)}[comand[1]](comand[2])\r\n    return int(comand[0])\r\n\r\n    def game(self):\r\n    for comand in self . comands:\r\n    block = self . __values__(comand)\r\n    self . fild[self . step] += block\r\n    if self . __break__():\r\n    break\r\n    return self . score\r\n    def tetris(arr) - > int:\r\n    play = Game(arr)\r\n    return play . game()\r\n",
  "5db42a943c3c65001dcedb1a": "import re\r\n\r\n\r\ndef encoder(s):\r\n    d, out, it = {}, [], iter(s)\r\n    for c in it:\r\n    i, k = 0, c\r\n    while k in d:\r\n    i, c = d[k], next(it, '')\r\n    if not c:\r\n        break\r\n    k += c\r\n    d[k] = len(d) + 1\r\n    out . append(f' { i }{ c } ')\r\n    return '' . join(out)\r\n\r\n    def decoder(s):\r\n    d = ['']\r\n    for m in re . finditer(r'(\\d+)(\\D?)', s):\r\n    d . append(d[int(m[1])] + m[2])\r\n    return '' . join(d)\r\n",
  "5db19d503ec3790012690c11": "weight = lambda n, w, e = __import__('math'). exp(- 2): (1 - 3 * e) / (1 - e) / 4 * (1 - e * * n) * w\n",
  "5d9b52214a336600216bbd0e": "def gcd(a, b):  # Just a simple Euclidean algorithm to compute gcd\n    while (b != 0):\n    a, b = b, a % b\n    return a\n    def survivor(zombies):\n\n    if (len(zombies) == 0):  # First let's deal with lists of length == 0\n    return - 1\n    zombies . sort()  # Then let's sort the list\n    if zombies[0] == 1:  # If zombie[0] is 1, we know every number will be biten\n    return 0\n    ####################################################################\n    # Let's check if there is an infinity of solutions. #\n    # It is equivalent to see if gcd of all numbers is different from 1.#\n    ####################################################################\n    zombies_gcd = 0\n    for z in zombies:\n    zombies_gcd = gcd(z, zombies_gcd)\n    if zombies_gcd != 1:\n    return - 1\n    ####################################################################\n    # Now let's list every number to see who's the last one to be bitten#\n    ####################################################################\n    length = zombies[- 1] + 1\n    who_is_bitten = [False for i in range(length)]\n\n    for z in zombies:  # Of courses zombies are considered as bitten\n    who_is_bitten[z] = True\n    # We know that zombies[0]-1 is a survivor so we can begin by that number\n    i = zombies[0] - 1\n    # We keep track of the number of consecutive zombies\n    consecutive_zombies = 0\n    # we know if there are zombies[0] consecutive zombies in a row,\n    while (consecutive_zombies < zombies[0]):\n        # then there won't be any survivor after that\n        # If the number is not bitten, then it becomes the new last survivor\n    if not (who_is_bitten[i]):\n    result = i\n    consecutive_zombies = 0\n    else:  # Otherwise, it bites other numbers which are at range\n    consecutive_zombies += 1\n    # if the list is too short we have to add new numbers\n    while (i + zombies[- 1] >= len(who_is_bitten)):\n    who_is_bitten . append(False)\n\n    for z in zombies:\n        # Then number i bites numbers that are at its range\n    who_is_bitten[i + z] = True\n    i += 1\n    return result\n",
  "5dae2599a8f7d90025d2f15f": "from math import log2\n\n\ndef consecutive_ducks(n):\n    return not log2(n). is_integer()\n",
  "5dad6e5264e25a001918a1fc": "from string import ascii_lowercase as aLow\r\n\r\n\r\ndef decode(r):\r\n    i = next(i for i, c in enumerate(r) if c . isalpha())\r\n    n, r = int(r[: i]), r[i:]\r\n    maps = {chr(97 + n * i % 26): c for i, c in enumerate(aLow)}\r\n    return \"Impossible to decode\" if len(maps) != 26 else '' . join(maps[c] for c in r)\r\n",
  "5da9973d06119a000e604cb6": "def counting_valleys(s):\r\n    level, valleys = 0, 0\r\n    for step in s:\r\n    if step == 'U' and level == - 1:\r\n    valleys += 1\r\n    level += {'U': 1, 'F': 0, 'D': - 1}[step]\r\n\r\n    return valleys\r\n",
  "5da995d583326300293ce4cb": "def map_vector(vector, circle1, circle2):\r\n    (vx, vy), (x1, y1, r1), (x2, y2, r2) = vector, circle1, circle2\r\n    v = (complex(vx, vy) - complex(x1, y1)) / r1 * r2 + complex(x2, y2)\r\n    return v . real, v . imag\r\n",
  "5da9af1142d7910001815d32": "points = [0, 40, 100, 300, 1200]\r\n\r\n\r\ndef get_score(arr) - > int:\r\n    cleared = 0\r\n    score = 0\r\n    for lines in arr:\r\n    level = cleared / / 10\r\n    score += (level + 1) * points[lines]\r\n    cleared += lines\r\n    return score\r\n",
  "5da74bf201735a001180def7": "def rotate_cw(seq, cw=1):\r\n    if not seq or not seq[0]:\r\n        return []\r\n\r\n    lst = [[] for i in range(len(seq) + len(seq[0]) - 1)]\r\n\r\n    for i in range(len(seq)):\r\n    for j in range(len(seq[0])):\r\n    lst[i + j * cw + int(cw / 2 - 0.5) * (- len(seq[0]) + 1)\r\n        ]. append(seq[i][j])\r\n\r\n    return [\"\" . join(i)[:: - cw] for i in lst] if type(lst[0][0]) is str else [i[:: - cw] for i in lst]\r\n\r\n    def rotate_ccw(seq): return rotate_cw(seq, cw=- 1)\r\n",
  "5da558c930187300114d874e": "from collections import namedtuple\r\nfrom unicodedata import normalize\r\n\r\n\r\ndef create_namedtuple_cls(cls_name, fields):\r\n    d = {normalize('NFKC', f): f for f in fields}\r\n\r\n    class Data (namedtuple(cls_name, fields)):\r\n    def __getattr__(self, item):\r\n    return self . __getattribute__(d[item]) if item in d else None\r\n    Data . __name__ = cls_name\r\n    return Data\r\n",
  "5d5f5f25f8bdd3001d6ff70a": "def histogram(results):\r\n    r = []\r\n    m = max(results)\r\n    s = sum(results)\r\n    if s != 0:\r\n    for i in range(m * 15 / / s, - 1, - 1):\r\n    l = []\r\n    for j in range(6):\r\n    c = []\r\n    a = results[j] * 15 / / s\r\n    b = results[j] * 100 / / s\r\n    if a == i:\r\n    if b != 0:\r\n    c += f' { b } %'\r\n    elif b == 0 and results[j] != 0:\r\n    c += '<1%'\r\n    elif i < a:\r\n    c += '\u2588\u2588'\r\n    else:\r\n    c += ' '\r\n    if len(c) < 3:\r\n        c += ' ' * (3 - len(c))\r\n    l += c\r\n    line = '' . join(l). rstrip(' ')\r\n    if len(line):\r\n    r += line + '\\n'\r\n    r += \"------------------\\n\"\r\n    r += \" 1 2 3 4 5 6\\n\"\r\n    return '' . join(r)\r\n",
  "5d9fe0ace0aad7001290acb7": "def number_of_sigfigs(number):\r\n    s = number . lstrip(\"0\")\r\n    if \".\" in s:\r\n    if s[0] == \".\":\r\n    return len(s[1:]. lstrip(\"0\")) or 1\r\n    return len(s) - 1\r\n    return len(s . rstrip(\"0\"))\r\n",
  "5d9f95424a336600278a9632": "def powers(n):\r\n    return [1 << i for i, x in enumerate(reversed(bin(n))) if x == \"1\"]\r\n",
  "5b3d5ad43da310743c000056": "import re\r\n\r\n\r\ndef make_password(length, flagUpper, flagLower, flagDigit):\r\n    password = \"1aA2bB3cC4dD5eE6fF7gG8hH9iI0jJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ\"\r\n    if not flagUpper:\r\n    password = re . sub('[A-Z]', '', password)\r\n    if not flagLower:\r\n    password = re . sub('[a-z]', '', password)\r\n    if not flagDigit:\r\n    password = re . sub('[0-9]', '', password)\r\n\r\n    return password[: length]\r\n",
  "5d5f5ea8e3d37b001dfd630a": "def histogram(results):\r\n    t = sum(results)\r\n    return \"\" . join(f' { i + 1 } | { \"\u2588\" * ( 50 * results [ i ] / / t )} { 100 * results [ i ] / / t } %\\n' if results[i] else f' { i + 1 } |\\n' for i in range(len(results) - 1, - 1, - 1))\r\n",
  "562c94ed7549014148000069": "LENGTHS = {12: [3, 4, 5], 30: [5, 12, 13], 70: [20, 21, 29], 40: [8, 15, 17], 56: [7, 24, 25], 176: [48, 55, 73], 126: [28, 45, 53], 208: [39, 80, 89], 408: [119, 120, 169], 198: [36, 77, 85], 154: [33, 56, 65], 234: [65, 72, 97], 84: [12, 35, 37], 90: [9, 40, 41], 330: [88, 105, 137], 260: [60, 91, 109], 546: [105, 208, 233], 1026: [297, 304, 425], 476: [84, 187, 205], 456: [95, 168, 193], 736: [207, 224, 305], 286: [44, 117, 125], 418: [57, 176, 185], 1218: [336, 377, 505], 828: [180, 299, 349], 1178: [217, 456, 505], 2378: [696, 697, 985], 1188: [220, 459, 509], 800: [175, 288, 337], 1160: [319, 360, 481], 390: [52, 165, 173], 340: [51, 140, 149], 900: [252, 275, 373], 570: [120, 209, 241], 644: [115, 252, 277], 1364: [396, 403, 565], 714: [136, 273, 305], 374: [85, 132, 157], 494: [133, 156, 205], 144: [16, 63, 65], 132: [11, 60, 61], 532: [140, 171, 221], 442: [104, 153, 185], 1044: [203, 396, 445], 1924: [555, 572, 797], 874: [152, 345, 377], 918: [189, 340, 389], 1518: [429, 460, 629], 608: [96, 247, 265], 1116: [155, 468, 493], 2146: [464, 777, 905], 1950: [429, 700, 821], 920: [120, 391, 409], 986: [145, 408, 433], 1716: [195, 748, 773], 2050: [369, 800, 881], 2220: [420, 851, 949], 1240: [279, 440, 521], 1680: [455, 528, 697], 510: [60, 221, 229], 700: [75, 308, 317], 1890: [432, 665, 793], 1848: [280, 759, 809], 1794: [273, 736, 785], 1776: [407, 624, 745], 2296: [615, 728, 953], 646: [68, 285, 293], 598: [69, 260, 269], 1998: [540, 629, 829], 1488: [336, 527, 625], 2132: [451, 780, 901], 1242: [184, 513, 545], 1254: [165, 532, 557], 1450: [200, 609, 641], 864: [135, 352, 377], 2184: [616, 663, 905], 1334: [276, 493, 565], 1320: [231, 520, 569], 1550: [300, 589, 661], 690: [\r\n    161, 240, 289], 850: [225, 272, 353], 220: [20, 99, 101], 182: [13, 84, 85], 782: [204, 253, 325], 672: [160, 231, 281], 1702: [333, 644, 725], 1392: [240, 551, 601], 1540: [315, 572, 653], 1050: [168, 425, 457], 2150: [301, 900, 949], 1674: [216, 713, 745], 1968: [287, 816, 865], 1100: [132, 475, 493], 1886: [205, 828, 853], 1508: [156, 667, 685], 798: [76, 357, 365], 1054: [93, 476, 485], 966: [84, 437, 445], 928: [87, 416, 425], 2170: [248, 945, 977], 2064: [215, 912, 937], 1554: [185, 672, 697], 1628: [259, 660, 709], 2236: [387, 884, 965], 1102: [261, 380, 461], 1302: [341, 420, 541], 312: [24, 143, 145], 240: [15, 112, 113], 1080: [280, 351, 449], 950: [228, 325, 397], 2030: [348, 805, 877], 2322: [473, 864, 985], 1612: [260, 651, 701], 1914: [232, 825, 857], 1736: [168, 775, 793], 1150: [92, 525, 533], 1480: [111, 680, 689], 1350: [100, 621, 629], 1330: [105, 608, 617], 1610: [385, 552, 673], 1850: [481, 600, 769], 420: [28, 195, 197], 306: [17, 144, 145], 1426: [368, 465, 593], 1276: [308, 435, 533], 2294: [372, 925, 997], 1566: [108, 725, 733], 1978: [129, 920, 929], 1798: [116, 837, 845], 1804: [123, 836, 845], 2214: [533, 756, 925], 544: [32, 255, 257], 380: [19, 180, 181], 1820: [468, 595, 757], 1650: [400, 561, 689], 2046: [124, 957, 965], 684: [36, 323, 325], 462: [21, 220, 221], 2262: [580, 741, 941], 2072: [504, 703, 865], 840: [40, 399, 401], 552: [23, 264, 265], 1012: [44, 483, 485], 650: [25, 312, 313], 1200: [48, 575, 577], 756: [27, 364, 365], 1404: [52, 675, 677], 870: [29, 420, 421], 1624: [56, 783, 785], 992: [31, 480, 481], 1860: [60, 899, 901], 1122: [33, 544, 545], 1260: [35, 612, 613], 1406: [37, 684, 685], 1560: [39, 760, 761], 1722: [41, 840, 841], 1892: [43, 924, 925]}\r\n\r\n\r\ndef integer_right_triangles(p):\r\n    out = []\r\n    for length in LENGTHS:\r\n    d, m = divmod(p, length)\r\n    if not m:\r\n    out.append([x*d for x in LENGTHS[length]])\r\n    return sorted(out, key=lambda x: x[0])\r\n",
  "5d96030e4a3366001d24b3b7": "def solve(before, after):\r\n    (avg1, dist1), (avg2, dist2) = before, after\r\n    return round((avg2 * dist2 - avg1 * dist1) / (dist2 - dist1), 1)\r\n",
  "5d95b7644a336600271f52ba": "from math import cos, sin, radians\r\n\r\n\r\ndef crusoe(n, d, ang, dist_mult, ang_mult):\r\n    x, y, a = 0, 0, radians(ang)\r\n    for i in range(n):\r\n    x += d * cos(a)\r\n    y += d * sin(a)\r\n    d *= dist_mult\r\n    a *= ang_mult\r\n    return x, y\r\n",
  "5d95118fdb5c3c0001a55c9b": "# Special cases for first and last column are possible but not needed\n# Rule n\u00b01 of those katas, there's ALWAYS a formula\ndef spiral_column(n, c):\n    n2, n3, c2, c3 = n * * 2, n * * 3, c * * 2, c * * 3\n    nc, nc2, n2c = n * c, n * c2, n2 * c\n    if 2 * c <= n:\n    return (24 * n2c - 3 * n2 - 48 * nc2 + 6 * nc + 3 * n + 32 * c3 - 6 * c2 - 2 * c) / / 6\n    return (8 * n3 - 24 * n2c + 9 * n2 + 48 * nc2 - 42 * nc + 7 * n - 32 * c3 + 42 * c2 - 10 * c) / / 6\n",
  "5c1905cc16537c7782000783": "class Modular (int):\r\n    def __new__(cls, n):\r\n    return super(). __new__(cls, n % 12345787)\r\n    def __add__(self, other):\r\n    return Modular(super(). __add__(other))\r\n    def __mul__(self, other):\r\n    return Modular(super(). __mul__(other))\r\n    @ staticmethod\r\n    def asmatrix(matrix):\r\n    from numpy import mat\r\n    return mat([[Modular(n) for n in row] for row in matrix], dtype=Modular)\r\n\r\n    def two_by_n(n, k):\r\n    b = [[k], [2 * k * (k - 1)]]\r\n    m = [[0, 1], [(k - 1) * * 2, k - 2]]\r\n    m = Modular . asmatrix(m)\r\n    return (m * * (n - 1) * b)[0]\r\n",
  "5d6a11ab2a1ef8001dd1e817": "def connect_the_dots(paper):\r\n    Y = paper . find(\"\\n\") + 1\r\n    lst = list(paper)\r\n    pts = {c: i for i, c in enumerate(paper) if c . isalpha()}\r\n    chrs = sorted(pts)\r\n\r\n    for i in range(len(pts) - 1):\r\n    a, b = sorted((pts[chrs[i]], pts[chrs[i + 1]]))\r\n    (x, y), (u, v) = divmod(a, Y), divmod(b, Y)\r\n    dx, dy = Y * ((u > x) - (u < x)), (v > y) - (v < y)\r\n\r\n    for j in range(a, b + 1, dx + dy):\r\n        lst[j] = '*'\r\n    return '' . join(lst)\r\n",
  "5cfd36ea4c60c3001884ed42": "def solve(s):\r\n    r, l = 0, 0\r\n    for c in s:\r\n    m = ord('Z') - ord(c)\r\n    r, l = r + m + l * m, m + l * 26\r\n    return r % 1000000007\r\n",
  "5d870ff1dc2362000ddff90b": "def correct(m, n, bits):\r\n    l = m * n\r\n    row = next((i for i in range(\r\n        m) if f\" { bits [ i * n :( i + 1 ) * n ]}{ bits [ l + i ]} \" . count(\"1\") % 2), None)\r\n    col = next((i for i in range(\r\n        n) if f\" { bits [ i : l : n ]}{ bits [ l + m + i ]} \" . count(\"1\") % 2), None)\r\n    if row is col is None:\r\n    return bits\r\n    err = (l + row) if col is None else (l + m +\r\n                                         col) if row is None else (row * n + col)\r\n    return f\" { bits [: err ]}{ int ( bits [ err ]) ^ 1 }{ bits [ err + 1 :]} \"\r\n",
  "5d8365b570a6f6001519ecc8": "def fix_parentheses(stg):\r\n    original, o, c = stg, \"(\", \")\"\r\n    while \"()\" in stg:\r\n    stg = stg . replace(\"()\", \"\")\r\n    opening, closing = o * stg . count(c), c * stg . count(o)\r\n    return f\" { opening }{ original }{ closing } \"\r\n",
  "5d62961d18198b000e2f22b3": "def generate_number(squad, n):\r\n    if n not in squad:\r\n        return n\r\n    for i in range(1, 10):\r\n    for j in range(1, 10):\r\n    if i + j == n and i * 10 + j not in squad:\r\n    return i * 10 + j\r\n",
  "5c511d8877c0070e2c195faf": "from difflib import SequenceMatcher\r\n\r\n\r\ndef validate(username, password):\r\n    l1, l2 = len(username), len(password)\r\n    match = SequenceMatcher(\r\n        None, username, password). find_longest_match(0, l1, 0, l2)\r\n    return match . size < min(l1, l2) / 2\r\n",
  "5be7f613f59e0355ee00000f": "from calendar import month_abbr\r\nfrom datetime import datetime\r\n\r\n\r\ndef solve(a, b):\r\n    res = [month_abbr[month]\r\n           for year in range(a, b + 1)\r\n           for month in [1, 3, 5, 7, 8, 10, 12]\r\n           if datetime(year, month, 1). weekday() == 4]\r\n    return (res[0], res[- 1], len(res))\r\n",
  "591592b0f05d9a3019000087": "def diplomas(h, w, n):\r\n    x = int((h * w * n) * * .5)\r\n    while (x / / h) * (x / / w) < n:\r\n    x += 1\r\n    return x\r\n",
  "5be1a950d2055d589500005b": "class BullsAndCows:\r\n    def __init__(self, n):\r\n    if not self . allowed(n):\r\n        raise ValueError()\r\n    self . n, self . turns, self . solved = str(n), 0, False\r\n    def plural(self, n): return 's' if n != 1 else ''\r\n    def allowed(self, n): return 1234 <= n <= 9876 and len(\r\n        set(c for c in str(n))) == 4\r\n\r\n    def compare_with(self, n):\r\n    if self . solved:\r\n        return 'You already won!'\r\n    if self . turns >= 8:\r\n        return 'Sorry, you\\'re out of turns!'\r\n    if self . n == str(n):\r\n    self . solved = True\r\n    return 'You win!'\r\n    if not self . allowed(n):\r\n        raise ValueError()\r\n    self . turns += 1\r\n    bulls = sum(a == b for a, b in zip(self . n, str(n)))\r\n    cows = max(len({e for e in self . n} & {e for e in str(n)}) - bulls, 0)\r\n    return f' { bulls } bull { self . plural ( bulls )} and { cows } cow { self . plural ( cows )} '\r\n",
  "580535462e7b330bd300003d": "from collections import Counter\r\n\r\n\r\ndef oracle(gestures):\r\n    res, C = [], Counter(gestures)\r\n    if C[\"scissors\"] > C[\"paper\"]:\r\n        res . append(\"rock\")\r\n    if C[\"rock\"] > C[\"scissors\"]:\r\n        res . append(\"paper\")\r\n    if C[\"paper\"] > C[\"rock\"]:\r\n        res . append(\"scissors\")\r\n    return \"/\" . join(res) or \"tie\"\r\n",
  "5c15dd0fb48e91d81b0000c6": "ALL_SETS = tuple(map(set, (TANK, DAMAGE, SUPPORT)))\r\n\r\n\r\ndef team_comp(heroes):\r\n    s = set(heroes)\r\n    if len(heroes) != 6 or len(s) != 6:\r\n    raise InvalidTeam()\r\n\r\n    return [len(s & ss) for ss in ALL_SETS]\r\n",
  "56b85fc4f18876abf0000877": "from math import floor\r\n\r\n\r\ndef f(k, n):\r\n    num = [1]\r\n    if n == 0:\r\n    return num[0]\r\n    for i in range(1, k):\r\n    num . append(i + 1)\r\n    for j in range(k, n + 1):\r\n    num . append(num[floor(j / k)] + num[j - 1])\r\n    if k > n:\r\n    return num[n]\r\n    return num[- 1]\r\n",
  "5c2d5de69611562191289041": "def calc(a):\r\n    res = [0] * (len(a) + 1)\r\n    for k in range(len(a)):\r\n    res = [2 * max(a[i] + res[i + 1], a[i + k] + res[i])\r\n           for i in range(len(a) - k)]\r\n    return res[0]\r\n",
  "5d82344d687f21002c71296e": "# sheffer of same thing twice returns opposite\r\ndef NOT(a):\r\n    return sheffer(a, a)\r\n\r\n    # return true only if a and b are true, which is NOT sheffer\r\n    def AND(a, b):\r\n    return NOT(sheffer(a, b))\r\n\r\n    # sheffer of each variable's NOT flip's sheffer's truth table\r\n    def OR(a, b):\r\n    return sheffer(NOT(a), NOT(b))\r\n",
  "579637b41ace7f92ae000282": "from math import factorial\n\n\ndef nth_catalan_number(n):\n    return factorial(2 * n) / / factorial(n + 1) / / factorial(n)\n",
  "57c8d7f8484cf9c1550000ff": "import re\r\n\r\n\r\nclass Checkout (object):\r\n    def __init__(self, d={}):\r\n    self . pricing, self . total, self . fruits, self . free = d, 0, {}, {}\r\n\r\n    def scan(self, n, qty=1):\r\n    item = get_price(n)\r\n    for i in range(qty):\r\n    if not self . free . get(n, 0):\r\n        self . total += item\r\n        self . fruits[n] = self . fruits . get(n, 0) + 1\r\n    else:\r\n        self . free[n] -= 1\r\n        continue\r\n    if n in self . pricing:\r\n    m = self . pricing[n]\r\n    if 'for' in m:\r\n    how, f = m . split(\"for\")\r\n    if not self . fruits[n] % int(how):\r\n        self . total = self . total - item * int(how) + float(f)\r\n    elif 'buy' in m:\r\n    how, f = re . sub(r'buy|get', ' ', m). strip(). split()\r\n    if not self . fruits[n] % int(how):\r\n        self . free[n] = int(f)\r\n    elif 'off' in m:\r\n    how, f = re . sub(r'off|ormore', ' ', m). strip(). split()\r\n    if self . fruits[n] == int(f):\r\n        self . total -= float(how)\r\n    self . total = round(self . total, 2)\r\n",
  "5cc70653658d6f002ab170b5": "def sqr_modulus(z):\r\n    if not (z[0] in ('cart', 'polar') and all(isinstance(x, int) for x in z[1:])):\r\n    return (False, - 1, 1)\r\n    sm = sum(\r\n        (re * * 2 + im * * 2 for re, im in zip(z[1:: 2], z[2:: 2]))\r\n        if z[0] == 'cart' else\r\n        (r * * 2 for r in z[1:: 2]))\r\n    return (True, sm, int('' . join(sorted(str(sm), reverse=True))))\r\n",
  "597737709e2c45882700009a": "EXCEPTIONS = {\r\n    'Cr': ['Ar', '4s1 3d5'],\r\n    'Cu': ['Ar', '4s1 3d10'],\r\n    'Nb': ['Kr', '5s1 4d4'],\r\n    'Mo': ['Kr', '5s1 4d5'],\r\n    'Ru': ['Kr', '5s1 4d7'],\r\n    'Rh': ['Kr', '5s1 4d8'],\r\n    'Pd': ['Kr', '5s0 4d10'],\r\n    'Ag': ['Kr', '5s1 4d10'],\r\n    'La': ['Xe', '6s2 4f0 5d1'],\r\n    'Ce': ['Xe', '6s2 4f1 5d1'],\r\n    'Gd': ['Xe', '6s2 4f7 5d1'],\r\n    'Pt': ['Xe', '6s1 4f14 5d9'],\r\n    'Au': ['Xe', '6s1 4f14 5d10'],\r\n    'Ac': ['Rn', '7s2 5f0 6d1'],\r\n    'Th': ['Rn', '7s2 5f0 6d2'],\r\n    'Pa': ['Rn', '7s2 5f2 6d1'],\r\n    'U': ['Rn', '7s2 5f3 6d1'],\r\n    'Np': ['Rn', '7s2 5f4 6d1'],\r\n    'Cm': ['Rn', '7s2 5f7 6d1'],\r\n}\r\nORBITALS = \"spdfg\"\r\nELT_TO_Z = {elt: i for i, elt in enumerate(ELEMENTS, 1)}\r\nfor arr in EXCEPTIONS . values():\r\n    arr[1] = [(int(s[0]), ORBITALS . find(s[1]), s[2:])\r\n              for s in arr[1]. split(' ')]\r\n\r\n    def get_electron_configuration(element):\r\n    elt, repl = EXCEPTIONS . get(element, (element, []))\r\n    # n: principal quantum number / l: secondary qunatum number (minus 1) / nl: n+l\r\n    z, nl, config = ELT_TO_Z[elt], 0, {}\r\n    while z:\r\n    nl += 1\r\n    for l in range(nl - 1 >> 1, - 1, - 1):\r\n    nE = min(z, 2 + l * 4)\r\n    config[(nl - l, l)] = nE\r\n    z -= nE\r\n    if not z:\r\n        break\r\n    for a, b, n in repl:\r\n        config[(a, b)] = n\r\n    s = \" \" . join(f' { k [ 0 ] }{ ORBITALS [ k [ 1 ]] }{ n } ' for k, n in sorted(\r\n        config . items()))\r\n    return f' { element } -> { s } '\r\n",
  "5d0d1c14c843440026d7958e": "def find_needed_guards(k):\r\n    b = '' . join('1' if g else '0' for g in k)\r\n    return sum(len(ng) / / 2 for ng in b . split(\"1\"))\r\n",
  "5704bf9b38428f1446000a9d": "def histogram(lst, w):\r\n    lst = [n / / w for n in lst]\r\n    m = max(lst, default=- 1) + 1\r\n    return [lst . count(n) for n in range(m)]\r\n",
  "57c4f4ac0fe1438e630007c6": "def my_hat_guess(p, f):\r\n    return 'red' if (p . count('blue') + f . count('blue')) % 2 == 0 else 'blue'\r\n",
  "5becace7063291bebf0001d5": "def positive_to_negative(arr):\r\n    flip = [0 if n == 1 else 1 for n in arr]\r\n\r\n    for i in range(len(flip)):\r\n    if flip[- (i + 1)] == 1:\r\n    flip[- (i + 1)] = 0\r\n    else:\r\n    flip[- (i + 1)] = 1\r\n    break\r\n    return flip\r\n",
  "58af1bb7ac7e31b192000020": "def find_summands(n):\r\n    return list(range(n * n - n + 1, n * n + n + 1, 2))\r\n",
  "58f5e53e663082f9aa000060": "def bijective_to_int(b):\r\n    return sum(2 * * i * int(d) for i, d in enumerate(b[:: - 1]))\r\n\r\n    def int_to_bijective(n):\r\n    b = \"\"\r\n    while n:\r\n    b += \"21\" [n % 2]\r\n    n = (n - 1) / / 2\r\n    return b[:: - 1]\r\n",
  "580a8f039a90a3654b000032": "import re\r\n\r\n\r\ndef could_be(original, another):\r\n    a, b = [re . findall('[^ !.,;:?]+', x . lower(). strip())\r\n            for x in (original, another)]\r\n    return a != [] and b != [] and all(c in a for c in b)\r\n",
  "5872a121056584c25400011d": "class Random:\r\n    def __init__(self, seed: int = 0) - > None:\r\n    self . seed = seed\r\n    def randint(self, start: int, stop: int) - > int:\r\n    return start + int(self . random() * (stop - start + 1))\r\n\r\n    def random(self) - > float:\r\n    x = self . seed & 0xFFFFFFFF\r\n    x ^= x << 13 & 0xFFFFFFFF\r\n    x ^= x >> 17 & 0xFFFFFFFF\r\n    x ^= x << 5 & 0xFFFFFFFF\r\n    self . seed = x & 0xFFFFFFFF\r\n    return x / (1 << 32)\r\n",
  "56896d1d6ba4e91b8c00000d": "from base64 import b64decode, b64encode\nfrom random import randint\n\n\ndef adFly_decoder(sc):\n    return b64decode(b64decode(sc[:: 2] + sc[:: - 2])[26:]) or \"Invalid\"\n    def adFly_encoder(url):\n    temp = b64encode(\n        \"{:02d}https://adf.ly/go.php?u={}\" . format(randint(0, 99), b64encode(url)))\n    return '' . join(x + y for x, y in zip(temp[: len(temp) / / 2 + 1], temp[: len(temp) / / 2 - 1: - 1]))\n",
  "5769ac186f2dea6304000172": "def bouncy_count(m):\r\n    num = den = 1\r\n    for i in range(1, 11):\r\n    num *= m + i + i * (i == 10)\r\n    den *= i\r\n    return 10 * * m - num / / den + 10 * m + 1\r\n",
  "5cbcf4d4a0dcd2001e28fc79": "def panel_count(n, dim=3):\r\n    res = n * dim\r\n    for k in range(dim, 0, - 1):\r\n    if n:\r\n    p, d, l = 1, n, []\r\n    for r in range(dim, 0, - 1):\r\n    s = k < r or round(d * * (1 / r))\r\n    l . append(s)\r\n    d / /= s\r\n    p *= s\r\n    for r, s in zip(range(dim, 0, - 1), l):\r\n    res += k >= r and p / / s\r\n    n -= p\r\n    return res\r\n",
  "5d7d05d070a6f60015c436d1": "def get_w(h):\r\n    return [(' ' * w + '*' + ' ' * (2 * (h - w) - 3) + '*' + ' ' * (2 * w - 1) + '*' + ' ' * (2 * (h - w) - 3) + '*' + ' ' * w). replace('**', '*') for w in range(h)] if h > 1 else []\r\n",
  "5d7b9ed14cd01b000e7ebb41": "RANGES = {\r\n    'minute': (0, 59),\r\n    'hour': (0, 23),\r\n    'day of month': (1, 31),\r\n    'month': (1, 12),\r\n    'day of week': (0, 6),\r\n}\r\n\r\nALIASES = {\r\n    'month': ' JAN FEB MAR APR MAY JUN JUL AUG SEP OCT NOV DEC' . split(' '),\r\n    'day of week': 'SUN MON TUE WED THU FRI SAT' . split(),\r\n}\r\n\r\n\r\ndef get_alias(field, value):\r\n    try:\r\n    return ALIASES[field]. index(value)\r\n    except:\r\n    return int(value)\r\n\r\n    def parse(crontab):\r\n    def parse_field(field, value):\r\n    values = set()\r\n    for part in value . split(','):\r\n    part, * end = part . split('/')\r\n    step = int(end[0]) if end else 1\r\n    if part == '*':\r\n    start, stop = RANGES[field]\r\n    else:\r\n    part, * end = part . split('-')\r\n    start = get_alias(field, part)\r\n    stop = get_alias(field, end[0]) if end else start\r\n    values . update(range(start, stop + 1, step))\r\n    return ' ' . join(map(str, sorted(values)))\r\n    return '\\n' . join(f' { field : < 15 }{ parse_field ( field , value )} '\r\n                       for field, value in zip(RANGES, crontab . split()))\r\n",
  "5d7bb3eda58b36000fcc0bbb": "import numpy as np\n\n\ndef generalized_fibonacchi(a, b, n):\n    return np . dot(np . matrix(np . vstack((np . eye(len(b) - 1, len(b), 1), b[:: - 1])). astype(int), dtype=object) * * n, a)[0, 0]\n",
  "5d7c7697e8ad48001e642964": "def cube_times(times):\r\n    return (round((sum(times) - (min(times) + max(times))) / 3, 2), min(times))\r\n",
  "5d774cfde98179002a7cb3c8": "def make_class(* args):\r\n    class MyClass:\r\n    def __init__(self, * vals):\r\n    self . __dict__ = {x: y for x, y in zip(args, vals)}\r\n    return MyClass\r\n",
  "5d72704499ee62001a7068c7": "def more_odd(a, b):\r\n    if a % 2 == b % 2:\r\n    return more_odd(a / / 2, b / / 2)\r\n    return - 1 if a % 2 else 1\r\n    def oddest(a):\r\n    return sorted(a, cmp=more_odd)[0]\r\n",
  "5d6ee508aa004c0019723c1c": "def oddest(numbers):\n    most_odd = 0  # The current most odd number in the list\n    max_oddity = - 1  # The current greatest oddity rate, starts at -1 so that even an even number can be the unique most odd\n    is_unique = True  # If the current most odd number is really the most, so if there is no unique oddest number, it will return None\n    for num in numbers:  # Loop through all the numbers\n    oddity = 0  # The oddity rate starts at 0\n    print(num)\n    insider = num  # The coefficient of the number 2, so in 2n + 1, the insider is n\n    while insider % 2 == 1:  # While that coefficient is odd\n    if insider == - 1:\n        # Since the oddity rate of a number is NEVER greater than the absolute value of the number, this garantees that the current number is the most odd one\n    oddity = 1 + max([abs(n) for n in numbers])\n    break\n    else:\n    oddity += 1  # Add the oddity rate of the total number\n    # So if in 2n + 1, n is odd, represent it as 2(2m + 1) + 1, and set the value to m\n    insider = (insider - 1) / 2\n    if oddity > max_oddity:  # If the current number's oddity rate is greater than the current max oddity,\n    is_unique = True  # Set it to unique\n    max_oddity = oddity  # Set the max oddity to the current oddity\n    most_odd = num  # Set the most odd number to the current number\n    elif oddity == max_oddity:  # Otherwise, if it's the same rate\n    is_unique = False  # It's not unique\n    if is_unique and max_oddity >= 0:  # If the current most odd number is REALLY the most odd number and the list isn't empty\n    return most_odd  # Return it\n    return None  # Otherwise, return None\n",
  "5d7091aa7bf8d0001200c133": "BASE = [r . split('|') for r in '''\\ \n ### | | ### | ### | | ### | ### | ### | ### | ### | \n # # | # | # | # | # # | # | # | # | # # | # # | \n # # | # | # | # | # # | # | # | # | # # | # # | \n # # | # | # | # | # # | # | # | # | # # | # # | \n | | ### | ### | ### | ### | ### | | ### | ### | \n # # | # | # | # | # | # | # # | # | # # | # | \n # # | # | # | # | # | # | # # | # | # # | # | \n # # | # | # | # | # | # | # # | # | # # | # | \n ### | | ### | ### | | ### | ### | | ### | ### | ''' . split('\\n')]\n\n\ndef segment_display(n):\n    digs = [int(d, 16) for d in f' { n : A > 6 } ']\n    return '\\n' . join(f'| { \"|\" . join ( BASE [ x ][ d ] for d in digs ) } |'\n                       for x in range(len(BASE)))\n",
  "5d6f49d85e45290016bf4718": "def any_odd(n):\r\n    return 1 if '1' in bin(n)[2:][- 2:: - 2] else 0\r\n",
  "5d68d05e7a60ba002b0053f6": "def bonus(arr, s):\r\n    # \u0411\u041b\u042f\u0422\u042c, \u043d\u0438\u0445\u0443\u044f \u043d\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043a\u0430\u043a \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u0442\u043e\u0442 \u0451\u0431\u0430\u043d\u044b\u0439 \u0431\u043e\u043d\u0443\u0441!!!!!!\r\n    # \u042f \u0431\u043b\u044f\u0442\u044c \u043d\u0430 \u0441\u0430\u0439\u0442 \u043f\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u0437\u0430\u0448\u0451\u043b \u0438\u043b\u0438 \u043d\u0430 \u0441\u0430\u0439\u0442 \u044d\u043a\u0441\u0442\u0440\u0430\u0441\u0435\u043d\u043e\u0441\u043e\u0432 \u041d\u0410\u0425\u0423\u0419?!?!?!?!\r\n    print(\"\u041d\u0438\u0445\u0443\u044f \u043d\u0435 \u043f\u043e\u043d\u044f\u043b, \u043d\u043e \u043e\u0447\u0435\u043d\u044c \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e!!!!\")\r\n    s = s / (sum(1 / n for n in arr))\r\n    return [round(s / n) for n in arr]\r\n",
  "5d65fbdfb96e1800282b5ee0": "def wrap(height, width, length):\r\n    a, b, c = sorted([height, width, length])\r\n    return 4 * a + 2 * c + 2 * b + 20\r\n",
  "5bb9053a528b29a970000113": "from functools import reduce\nfrom gmpy2 import comb\nfrom operator import xor\n\n\ndef transform(a, x):\n    return reduce(xor, (comb(n + 1, x + 1) for n in a))\n",
  "5d629a6c65c7010022e3b226": "def get_hours(shifts):\r\n    return [clockToDelta(s) for s in shifts]\r\n\r\n    def clockToDelta(shift):\r\n    start, end = map(convert, shift)\r\n    return round(4 * (end - start)) / 4 % 24\r\n    def convert(clock):\r\n    h, m = map(int, clock[: - 2]. split(':'))\r\n    return h % 12 + 12 * (clock[- 2] == 'p') + m / 60\r\n",
  "5d5ee4c35162d9001af7d699": "def sum_of_minimums(numbers):\r\n    return sum(map(min, numbers))\r\n",
  "5cb5eb1f03c3ff4778402099": "def mutations(alice, bob, word, first):\r\n    seen = {word}\r\n    mapping = {0: alice, 1: bob}\r\n    prev_state, state = - 1, - 1\r\n    def foo(word, first):\r\n    nonlocal state, prev_state\r\n    foo . counter += 1\r\n    if foo . counter > 2 and state < 0 or foo . counter > 2 and prev_state < 0:\r\n    return\r\n    for a_word in mapping[first]:\r\n    counter = 0\r\n    for i, x in enumerate(a_word):\r\n    if a_word[i] == word[i]:\r\n    counter += 1\r\n    if counter == 3 and len(set(a_word)) == 4 and a_word not in seen:\r\n    seen . add(a_word)\r\n    prev_state = state\r\n    state = first\r\n    word = a_word\r\n    break\r\n    if counter == 3 or state < 0:\r\n    return foo(word, first ^ 1)\r\n\r\n    foo . counter = 0\r\n    foo(word, first)\r\n    return state\r\n",
  "5d5a7525207a674b71aa25b5": "def odd_row(n): return list(range(n * (n - 1) + 1, n * (n + 1), 2))\n",
  "5d59576768ba810001f1f8d6": "def quadratic(x1, x2):\r\n    return (1, - x1 - x2, x1 * x2)\r\n",
  "5d10d53a4b67bb00211ca8af": "from math import ceil\n\n\ndef waterbombs(fire, w):\n    return sum(ceil(len(l) / w) for l in fire . split('Y'))\n",
  "5d532b1893309000125cc43d": "from math import *\n\n\ndef number_of_hooks(length, maxHook):\n    return length and 2 * * ceil(max(0, log2(length / maxHook))) + 1\n",
  "5d50e3914861a500121e1958": "def add_letters(* letters):\r\n    return chr((sum(ord(c) - 96 for c in letters) - 1) % 26 + 97)\r\n",
  "5d4c6809089c6e5031f189ed": "def torrent(files):\r\n    files = sorted(files, key=lambda f: (\r\n        f['size_GB'] / f['speed_Mbps'], f['name']))\r\n    last = files[- 1]\r\n    return [f['name'] for f in files], 8000 * last['size_GB'] / last['speed_Mbps']\r\n",
  "5d4dd5c9af0c4c0019247110": "from math import sin, radians\r\n\r\n\r\ndef find_time_to_break(bearing_A, bearing_B):\r\n    a = radians(abs(bearing_A - bearing_B) / 2)\r\n    return 40 / (3 * sin(a)) if a else float(\"inf\")\r\n",
  "5d472159d4f8c3001d81b1f8": "from dateutil . parser import parse\r\n\r\n\r\ndef half_life(* persons):\r\n    p1, p2 = sorted(map(parse, persons))\r\n    return str(p2 + (p2 - p1))[: 10]\r\n",
  "5d37899a3b34c6002df273ee": "from itertools import chain\n\n\ndef cant_beat_so_join(lsts):\n    return list(chain . from_iterable(sorted(lsts, key=sum, reverse=True)))\n",
  "5d41e16d8bad42002208fe1a": "def more_zeros(s):\r\n    results = []\r\n\r\n    for letter in s:\r\n    dec_repr = bin(ord(letter))[2:]\r\n    if (dec_repr . count(\"0\") > dec_repr . count(\"1\")) and (letter not in results):\r\n    results . append(letter)\r\n\r\n    return results\r\n",
  "5d376cdc9bcee7001fcb84c0": "def odd_ones_out(numbers):\r\n    return [i for i in numbers if numbers . count(i) % 2 == 0]\r\n",
  "5d339b01496f8d001054887f": "M = 10 * * 9 + 7\n\n\ndef find_x(n):\n    return 3 * (pow(2, n + 1, M) - n - 2) % M\n",
  "5d2d0d34bceae80027bffddb": "import re\n\n\ndef sort_strings_by_vowels(seq):\n    return sorted(seq, reverse=True, key=lambda x: max((len(i) for i in re . findall(r'[aeiouAEIOU]+', x)), default=0))\n",
  "5cab471da732b30018968071": "def build_square(blocks):\r\n    for x in range(4):\r\n    if 4 in blocks:\r\n    blocks . remove(4)\r\n    elif 3 in blocks and 1 in blocks:\r\n    blocks . remove(3)\r\n    blocks . remove(1)\r\n    elif blocks . count(2) >= 2:\r\n    blocks . remove(2)\r\n    blocks . remove(2)\r\n    elif 2 in blocks and blocks . count(1) >= 2:\r\n    blocks . remove(2)\r\n    blocks . remove(1)\r\n    blocks . remove(1)\r\n    elif blocks . count(1) >= 4:\r\n    blocks . remove(1)\r\n    blocks . remove(1)\r\n    blocks . remove(1)\r\n    blocks . remove(1)\r\n    else:\r\n    return False\r\n    return True\r\n",
  "56b7a75cbd06e6237000138b": "def inner_join(arrA, arrB, indA, indB):\r\n    return [[* x, * y]\r\n            for x in arrA if x[indA] is not None\r\n            for y in arrB if y[indB] == x[indA]]\r\n",
  "5d2659626c7aec0022cb8006": "from itertools import count\n\n\ndef baum_sweet():\n    yield 1\n    for i in count(1):\n    yield not any(map(lambda x: len(x) % 2, bin(i). split('1')))\n",
  "5d26721d48430e0016914faa": "def paper_fold():\r\n    gen = paper_fold()\r\n    while True:\r\n    yield 1\r\n    yield next(gen)\r\n    yield 0\r\n    yield next(gen)\r\n",
  "5d2477487c046b0011b45254": "from functools import lru_cache\r\n\r\n\r\n@ lru_cache(maxsize=None)\r\ndef T(x, y, z):\r\n    if x <= y:\r\n    return y, 0\r\n    else:\r\n    (a, ac), (b, bc), (c, cc) = T(x - 1, y, z), T(y - 1, z, x), T(z - 1, x, y)\r\n    d, dc = T(a, b, c)\r\n    return d, 1 + ac + bc + cc + dc\r\n    def solve(n):\r\n    count = T(n, 0, n + 1)[1]\r\n    return sum(map(int, str(count)))\r\n",
  "5d23d89906f92a00267bb83d": "def get_order(order):\r\n    menu = ['burger', 'fries', 'chicken', 'pizza',\r\n            'sandwich', 'onionrings', 'milkshake', 'coke']\r\n    clean_order = ''\r\n    for i in menu:\r\n    clean_order += (i . capitalize() + ' ') * order . count(i)\r\n    return clean_order[: - 1]\r\n",
  "5d1eb2db874bdf9bf6a4b2aa": "def find_a(lst, n):\r\n    if n < 0:\r\n        return find_a(lst[:: - 1], 3 - n)\r\n    if n < 4:\r\n        return lst[n]\r\n    a, b, c, d = lst\r\n    for _ in range(n - 3):\r\n    a, b, c, d = b, c, d, 6 * d - 10 * c + 6 * b - a\r\n    return d\r\n",
  "5d1e1560c193ae0015b601a2": "def count(a, t, x):\r\n    return sum(not (t - v) % x if x else t == v for v in a)\r\n",
  "5d16af632cf48200254a6244": "\"\"\"Strongest even number in an interval kata \n Defines strongest_even(n, m) which returns the strongest even number in the set \n of integers on the interval [n, m]. \n Constraints: \n 1. 1 <= n < m < MAX_INT \n Note: \n 1. The evenness of zero is need not be defined given the constraints. \n 2. In Python 3, the int type is unbounded. In Python 2, MAX_INT is \n determined by the platform. \n Definition: \n A number is said to be more strongly even than another number if the \n multiplicity of 2 in its prime factorization is higher than in the prime \n factorization of the other number. \n \"\"\"\nfrom math import log2\n\n\ndef strongest_even(n, m):\n    \"\"\"Returns the strongest even number in the set of integers on interval \n [n, m]. \n \"\"\"\n    # It can be shown that the largest power of 2 on an interval [n, m] will\n    # necessarily be the strongest even number. Check first if the interval\n    # contains a power of 2, by comparing the log2 of the endpoints.\n    if int(log2(m)) > int(log2(n)):\n    return 2 * * int(log2(m))\n\n    # Modify the endpoints exclude any odd numbers. If the two endpoints are\n    # equal, the original interval contains only a single even number. Return it.\n    n += n % 2\n    m -= m % 2\n    if n == m:\n    return n\n    # All optimizations and edge cases are exhausted. Recurse with the\n    # modified endpoints halved, and multiply the result by 2.\n    return 2 * strongest_even(n / / 2, m / / 2)\n",
  "5d0365accfd09600130a00c9": "def solve(arr):\r\n\r\n    p, q = 1, 1\r\n    for k in arr:\r\n\r\n    x, y = max(k), min(k)\r\n\r\n    a = p * x\r\n    b = q * x\r\n    c = p * y\r\n    d = q * y\r\n    p = max(a, b, c, d)\r\n    q = min(a, b, c, d)\r\n\r\n    return max(p, q)\r\n",
  "5d076515e102162ac0dc514e": "def baby_shark_lyrics(): return \"\\n\" . join(f\" { y } , { ' doo' * 6 } \\n\" * 3 + y + \"!\" for y in [\n    x + \" shark\" for x in \"Baby Mommy Daddy Grandma Grandpa\" . split()] + [\"Let's go hunt\"]) + \"\\nRun away,\u2026\"\n",
  "5d023b69ac68b82dd2cdf70b": "def electron_ionization(electrons, rc, arad):\r\n    res, el, rd, prot = 0, electrons[:], arad / len(electrons), sum(electrons)\r\n\r\n    while rc and el:\r\n    res += min(rc, el[- 1]) * prot / (rd * len(el)) * * 2\r\n    rc -= min(rc, el[- 1])\r\n    el . pop()\r\n\r\n    return res\r\n",
  "5ce399e0047a45001c853c2b": "def parts_sums(ls):\r\n    result = [sum(ls)]\r\n    for item in ls:\r\n    result . append(result[- 1] - item)\r\n    return result\r\n",
  "5cfca6670310c20001286bc8": "def sp(s):\r\n    ln = len(s)\r\n    res = [''] * ln\r\n    res[:: 2] = s[ln / / 2:][:: - 1]\r\n    res[1:: 2] = s[: ln / / 2]\r\n\r\n    return '' . join(res)\r\n\r\n    def spiral_permutations(s):\r\n    seen, cur, res = {s}, s, [s]\r\n    while True:\r\n    cur = sp(cur)\r\n    if cur in seen:\r\n    return res\r\n    else:\r\n    seen . add(cur)\r\n    res . append(cur)\r\n",
  "5ce969ab07d4b7002dcaa7a1": "def solve(st):\r\n    return next((n for n in range(len(st) / / 2, 0, - 1) if st[: n] == st[- n:]), 0)\r\n",
  "5ce6cf94cb83dc0020da1929": "def uglify_word(s):\r\n    flag = 1\r\n    ugly = []\r\n    for c in s:\r\n    ugly . append(c . upper() if flag else c . lower())\r\n    flag = not flag or not c . isalpha()\r\n    return '' . join(ugly)\r\n",
  "5ce6728c939bf80029988b57": "import string\n\n\ndef solve(st):\n    return '' . join(sorted(st)) in string . ascii_letters\n",
  "5ce04eadd103f4001edd8986": "def solution(n, b):\r\n    return [x for x in range(1 << n) if x & b]\r\n",
  "5cde4e3f52910d00130dc92c": "def men_still_standing(cards):\r\n    # generate teams\r\n    A = {k: 0 for k in range(1, 12)}\r\n    B = A . copy()\r\n\r\n    for card in cards:\r\n        # parse card\r\n    team = A if card[0] == \"A\" else B\r\n    player = int(card[1: - 1])\r\n    color = card[- 1]\r\n\r\n    if player not in team:\r\n    continue\r\n    # record penalty\r\n    team[player] += 1 if color == \"Y\" else 2\r\n    if team[player] >= 2:\r\n    del team[player]\r\n\r\n    if len(team) < 7:\r\n    break\r\n    return len(A), len(B)\r\n",
  "593dbaccdf1adef94100006c": "def xp_to_target_lvl(* args):\n    if len(args) < 2:\n    return 'Input is invalid.'\n    current_xp, target_lvl = args\n    if not isinstance(target_lvl, int):\n    return 'Input is invalid.'\n    if not (0 < target_lvl < 171):\n    return 'Input is invalid.'\n    if current_xp < 0:\n    return 'Input is invalid.'\n    level = 1\n    xp = 314\n    xp_bump = 25\n    sum_ = 0\n    while level < target_lvl:\n    sum_ += xp\n    level += 1\n    xp_bump_reduction = level / / 10\n    xp += int(xp * (xp_bump - xp_bump_reduction) / 100)\n\n    diff = sum_ - current_xp\n    if diff <= 0:\n    return 'You have already reached level {}.' . format(target_lvl)\n    else:\n    return diff\n",
  "5ca3ae9bb7de3a0025c5c740": "def point(a, b):\n    def f(): return (a, b)\n    f . x = a\n    f . y = b\n    return f\n    def fst(pt):\n    return pt . x\n    def snd(pt):\n    return pt . y\n    def sqr_dist(pt1, pt2):\n    return (pt2 . x - pt1 . x) * * 2 + (pt2 . y - pt1 . y) * * 2\n    def line(pt1, pt2):\n    a = pt1 . y - pt2 . y\n    b = pt2 . x - pt1 . x\n    c = pt1 . x * pt2 . y - pt2 . x * pt1 . y\n    return [a, b, c]\n",
  "5cd5ba1ce4471a00256930c0": "def solution(n, d):\r\n    return [int(c) for c in str(n)[- d:]] if d > 0 else []\r\n",
  "5cd4aec6abc7260028dcd942": "def shortest_steps_to_num(num):\r\n    steps = 0\r\n    while num != 1:\r\n    if num % 2:\r\n    num -= 1\r\n    else:\r\n    num / /= 2\r\n    steps += 1\r\n    return steps\r\n",
  "5cd12646cf44af0020c727dd": "from math import ceil\r\nPI_DIGITS_SQUARED = [int(d) * * 2 for d in \"31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\"]\r\n\r\n\r\ndef square_pi(n):\r\n    return ceil(sum(PI_DIGITS_SQUARED[: n]) * * 0.5)\r\n",
  "582110dc2fd420bf7f00117b": "from math import floor, log\n\n\ndef count_sixes(n):\n    return floor((n - n % 2) * log(2, 10))\n",
  "5ccfcfad7306d900269da53f": "def digits(x): return set(str(x))\r\n\r\n\r\ndef LDTA(n):\r\n    if digits(n) == digits(n * n):\r\n    return None\r\n    seen = []\r\n    x = n\r\n    while len(seen) < 10:\r\n    for d in str(x):\r\n    if d not in seen:\r\n    seen . append(d)\r\n    x *= n\r\n    return int(seen[- 1])\r\n",
  "5cc80fbe701f0d001136e5eb": "from collections import defaultdict\r\n\r\n\r\ndef stem_and_leaf(a):\r\n    d = defaultdict(list)\r\n    for x in a:\r\n    d[x / / 10]. append(x % 10)\r\n    return {x: sorted(y) for x, y in d . items()}\r\n",
  "5cc2cd9628b4200020880248": "from operator import mul\r\n\r\n\r\ndef reduce_pyramid(base):\r\n    return sum(map(mul, base, comb_n(len(base) - 1)))\r\n\r\n    def comb_n(n):\r\n    c = 1\r\n    for k in range(0, n + 1):\r\n    yield c\r\n    c = c * (n - k) / / (k + 1)\r\n",
  "5cc1e284ece231001ccf7014": "def reverse(lst):\r\n    ret = []\r\n    while lst:\r\n    ret . append(lst[- 1])\r\n    lst = [a - b for a, b in zip(lst, lst[1:])]\r\n    return ret[:: - 1]\r\n",
  "5a0573c446d8435b8e00009f": "import re\r\n\r\n\r\nclass Me (object):\r\n    def __init__(self): self . x, self . y, self . dx, self . dy = 0, 0, - 1, 0\r\n    def move(self, n): self . x += n * self . dx; self . y += n * self . dy\r\n    def back(self): self . dx *= - 1; self . dy *= - 1\r\n    def turn(self, d): self . dx, self . dy = (self . dy * (- 1) * * (d == 'l'), 0) if self . dy else (0, self . dx * (- 1) * * (d == 'r'))\r\n    def where(self): return [self . x, self . y]\r\n    def __str__(\r\n        self): return f'x,y= { self . x } , { self . y } (dx,dy= { self . dx } , { self . dy } )'\r\n    me = Me()\r\n\r\n    def i_am_here(path):\r\n    for v in re . findall(r'\\d+|.', path):\r\n    if v in 'RL':\r\n        me . back()\r\n    elif v in 'rl':\r\n        me . turn(v)\r\n    else:\r\n        me . move(int(v))\r\n    return me . where()\r\n",
  "5cb99d1a1e00460024827738": "from itertools import count\r\n\r\n\r\ndef f1(n, k):\r\n    return next(n * m for m in count(1) if all(int(d) < k for d in str(n * m)))\r\n\r\n    def f2(n, k):\r\n    s = set(map(str, range(0, k)))\r\n    return next(n * m for m in count(1) if set(str(n * m)) == s)\r\n\r\n    def find_f1_eq_f2(n, k):\r\n    return next(m for m in count(n + 1) if f1(m, k) == f2(m, k))\r\n",
  "5cba04533e6dce000eaf6126": "def blood_moon(r):\n    \"\"\" if AC = r = CD \n    then AD = r * root2 \n    then AE = r * root 2 / 2 = EF \n    then AF = r \n    then area AEFH is pi r^2/ 8 \n    area triangle AEF is bh/2 = 1/2r^2 / 2 = r^2 / 4 \n    therefore area AFH = pir^2 / 8 - r^2 / 4 or pir^2 - 2r^2 all over 8 \n    area AFG is pi (r/2)^2 / 2 which is pi r^2 / 8 \n    thus area lune is pir^2 / 8 - (pir^2/8 - r^2 / 4) = r^2 / 4 \n    \"\"\"\n    return r * * 2 / 4\n",
  "5cb7baa989b1c50014a53333": "def is_sator_square(tablet):\r\n    A = {'' . join(lst) for lst in tablet}\r\n    B = {'' . join(lst)[:: - 1] for lst in tablet}\r\n    C = {'' . join(lst) for lst in zip(* tablet)}\r\n    D = {'' . join(lst)[:: - 1] for lst in zip(* tablet)}\r\n    return A == B == C == D\r\n",
  "5c45bef3b6adcb0001d3cc5f": "from itertools import combinations\r\nfrom math import gcd\r\n\r\n\r\ndef lcm_cardinality(n):\r\n    return 1 + sum(1 for a, b in combinations(divisors(n), 2) if lcm(a, b) == n)\r\n\r\n    def divisors(n):\r\n    d = {1, n}\r\n    for k in range(2, int(n * * 0.5) + 1):\r\n    if n % k == 0:\r\n    d . add(k)\r\n    d . add(n / / k)\r\n    return sorted(d)\r\n\r\n    def lcm(a, b):\r\n    return a * b / / gcd(a, b)\r\n",
  "5cb05eee03c3ff002153d4ef": "def get_section_id(scroll, sizes):\n    c = 0\n    for idx, s in enumerate(sizes):\n    c += s\n    if scroll < c:\n        return idx\n    return - 1\n",
  "55d5f4aae676c3da53000024": "def special_primes(n):\r\n    cat = [[] for _ in range(3)]\r\n    for x in range(101, n + 1, 2):\r\n    dig = list(map(int, str(x)))\r\n    sum_, set_ = sum(dig), set(dig)\r\n    if not sum_ % 3 or len(set_) != len(dig):\r\n        continue\r\n    if 0 in set_ or dig[0] * dig[- 1] == 45:\r\n        continue\r\n    if all(sum_ % k * * 2 for k in range(2, int(sum_ * * .5) + 1)):\r\n        continue\r\n    if not all(x % d for d in range(3, int(x * * .5) + 1, 2)):\r\n        continue\r\n    cat[sum({(a < b) - (a > b) for a, b in zip(dig, dig[1:])})]. append(x)\r\n    return [[len(l) and l[0], len(l) and l[- 1], len(l)] for l in cat]\r\n",
  "5ca6c0a2783dec001da025ee": "def num_blocks(w, l, h):\n    return w * l * h + (w + l) * (h - 1) * h / / 2 + (h - 1) * h * (2 * h - 1) / / 6\n    \"\"\" \n For those who wonder: \n first layer being of size w*l, the total number of blocks, SB, is: \n SB = w*l + (w+1)*(l+1) + (w+2)*(l+2) + ... + (w+h-1)*(l+h-1) \n So: SB = \" Sum from i=0 to h-1 of (w+i)*(l+i) \" \n Let's use the following notation for this: SB = S(i)[ (w+i)*(l+i) ] \n Then: \n SB = S(i)[ w*l + i(w+l) + i**2 ] \n \n = S(i)[ w*l ] + S(i)[ i(w+l) ] + S(i)[ i**2 ] \n \n = w*l*h + (w+l) * S(i)[ i ] + S(i)[ i**2 ] \n Here, you find two classic sums of sequences (see wiki or equivalent for the demonstrations): \n S(i)[ i ] = sum of all integers from 1 to x = x*(x+1) // 2 \n S(i)[ i**2 ] = sum of all squares of integers from 1 to x = x*(x+1)*(2*x+1) // 6 \n Since on our side we do the sum from 0 (which doesn't affect at all the result) \n to h-1 in place of x, we get: \n SB = w*l*h + (w+l) * (h-1)*h//2 + (h-1)*h*(2*h-1)//6 \n \"\"\"\n",
  "5bdc1558ab6bc57f47000b8e": "def find_jane(n):\r\n    return (n - 1) / / 2\r\n",
  "5be83eb488c754f304000185": "from math import ceil, sqrt\r\n\r\n\r\ndef fantabulous_birthday(n):\r\n    a = ceil(sqrt(n))\r\n    b = a * a - a + 1\r\n    c = a - abs(n - b)\r\n    return [a, c] if (n < b) ^ (a % 2) == 0 else [c, a]\r\n",
  "5bed96b9a68c19d394000b1d": "def vowel_recognition(input):\r\n    vowels = set('aeiouAEIOU')\r\n    s = t = 0\r\n    for c, e in enumerate(input, 1):\r\n    if e in vowels:\r\n    t += c\r\n    s += t\r\n    return s\r\n",
  "5c9a6e225ae9822e70abc7c1": "def clone_graph(node):\r\n    queue, mp = [node] if node else [], {}\r\n    while queue:\r\n    cur = queue . pop(0)\r\n    mp[cur] = GraphNode(cur . val)\r\n    for nd in cur . neighbors:\r\n    if nd not in mp:\r\n    queue . append(nd)\r\n\r\n    for k in mp:\r\n    mp[k]. neighbors = [mp[nd] for nd in k . neighbors]\r\n\r\n    return mp . get(node, None)\r\n",
  "5c2c0c5e2f172f0fae21729f": "def sim(k, n, p):\r\n    r = [(k, k, 0), (k, p, p)]\r\n    for i in range(n - 2):\r\n    u, d = r[0][1] + r[1][1], r[1][1]\r\n    r = [r[1], (r[1][0] + u - d, u, d)]\r\n    return r[1][0]\r\n\r\n    def calc(k, n, m, x):\r\n    z, o = sim(k, n - 1, 0), sim(k, n - 1, 1)\r\n    return sim(k, x, (m - z) / / (o - z))\r\n",
  "5c99553d5c67244b60cb5722": "# precalculate results\nLIMIT = 11000  # > 9977 + 104\nCACHE = [0]\nGRID = set()  # empty grid\nx, y = 0, 0  # ant's position\ndx, dy = 1, 0  # direction\nfor _ in range(LIMIT + 1):\n    if (x, y) in GRID:  # square is black\n    GRID . remove((x, y))\n    dx, dy = - dy, dx\n    else:  # square is white\n    GRID . add((x, y))\n    dx, dy = dy, - dx\n    # move forward\n    x += dx\n    y += dy\n    # store number of black squares\n    CACHE . append(len(GRID))\n\n    def langtons_ant(n):\n    if n < LIMIT:\n    return CACHE[n]\n\n    # a(n+104) = a(n) + 12 for n > 9976\n    x = (n - LIMIT) / / 104 + 1\n    return CACHE[n - x * 104] + x * 12\n",
  "570e0a6ce5c9a0a8c4000bbb": "def even_magic(n):\r\n    return [[n * n - (y * n + x) if x % 4 == y % 4 or (x % 4 + y % 4) % 4 == 3 else y * n + x + 1 for x in range(n)] for y in range(n)]\r\n",
  "5c942f40bc4575001a3ea7ec": "def per(n):\r\n    r = []\r\n    while n >= 10:\r\n    p = 1\r\n    for i in str(n):\r\n    p = p * int(i)\r\n    r . append(p)\r\n    n = p\r\n    return r\r\n",
  "5c8bf3ec5048ca2c8e954bf3": "def shortest_to_char(s, c):\r\n    if not s or not c:\r\n    return []\r\n\r\n    indexes = [i for i, ch in enumerate(s) if ch == c]\r\n    if not indexes:\r\n    return []\r\n\r\n    return [min(abs(i - ic) for ic in indexes) for i in range(len(s))]\r\n",
  "5b45e4b3f41dd36bf9000090": "def sequence(x):\r\n    return sorted(range(1, x + 1), key=str)\r\n",
  "5c824b7b9775761ada934500": "def gen(n):\n    if n >= 10 * * 16:\n        return\n    for i in range(10):\n    x = 10 * n + i\n    if x % sum(map(int, str(x))):\n        continue\n    yield x\n    for y in gen(x):\n        yield y\n    L = sorted(x for n in range(1, 10) for x in gen(n))\n\n    from bisect import bisect_left as bl, bisect_right as br\n    def rthn_between(a, b):\n    return L[bl(L, a): br(L, b)]\n",
  "5c765a4f29e50e391e1414d4": "import re\r\nPATTERN = re . compile(r'[aeyuio]+[^aeyuio ]*((?=e\\b)e)?', flags=re . I)\r\n\r\n\r\ndef is_haiku(text):\r\n    return [5, 7, 5] == [check(s) for s in text . split(\"\\n\")]\r\n\r\n    def check(s):\r\n    return sum(1 for _ in PATTERN . finditer(s))\r\n",
  "5c79c07b4ba1e100097f4e1a": "def yoga(classroom, poses):\r\n    total_poses = 0\r\n    for pose in poses:\r\n    for row in classroom:\r\n    for person in row:\r\n    if person + sum(row) >= pose:\r\n    total_poses += 1\r\n    return total_poses\r\n",
  "5c1a334516537ccd450000d8": "REGEX = r'^ *a* *b* *c* *d* *e* *f* *g* *h* *i* *j* *k* *l* *m* *n* *o* *p* *q* *r* *s* *t* *u* *v* *w* *x* *y* *z* *\\Z'\n",
  "5b360fcc9212cb0cf300001f": "from base64 import b64encode\n\n\ndef hex_to_base64(h: str) - > str:\n    return b64encode(bytes . fromhex(h)). decode()\n",
  "5c46ea433dd41b19af1ca3b3": "def hex_word_sum(s):\r\n    return sum(int(w, 16) for w in s . translate(str . maketrans('OS', '05')). split() if set(w) <= set('0123456789ABCDEF'))\r\n",
  "5c784110bfe2ef660cb90369": "def ranking(a):\r\n    a . sort(key=lambda x: (- x[\"points\"], x[\"name\"]))\r\n    for i, x in enumerate(a):\r\n    x[\"position\"] = i + 1 if not i or x[\"points\"] < a[i -\r\n                                                      1][\"points\"] else a[i - 1][\"position\"]\r\n    return a\r\n",
  "5c745b30f6216a301dc4dda5": "def moving_average(a, n):\r\n    if 0 < n <= len(a):\r\n        return [sum(a[i: i + n]) / n for i in range(len(a) - n + 1)]\r\n",
  "5c744111cb0cdd3206f96665": "def solution(to, lst):\r\n    dolSym, eurSym, power = ('', '\u20ac', - 1) if to == 'EUR' else ('$', '', 1)\r\n    return [f\" { dolSym }{ v * 1.1363636 * * power :, .2 f }{ eurSym } \" for v in lst]\r\n",
  "5c7254fcaccda64d01907710": "from collections import Counter\r\nimport re\r\n\r\n\r\ndef solve(files):\r\n    c = Counter(re . match('.*(\\.[^.]+)$', fn). group(1) for fn in files)\r\n    m = max(c . values(), default=0)\r\n    return sorted(k for k in c if c[k] == m)\r\n",
  "5c6dc504abcd1628cd174bea": "def echo_program():\r\n    return open(__file__). read()\r\n",
  "5c5abf56052d1c0001b22ce5": "def koch_curve(n):\r\n    if not n:\r\n        return []\r\n    deep = koch_curve(n - 1)\r\n    return [* deep, 60, * deep, - 120, * deep, 60, * deep]\r\n",
  "5c55ad8c9d76d41a62b4ede3": "def duplicates(arr):\r\n    return sum(arr . count(i) / / 2 for i in set(arr))\r\n",
  "5c563cb78dac1951c2d60f01": "def pass_the_door_man(word):\r\n    for i in word:\r\n    if i * 2 in word:\r\n    return (ord(i) - 96) * 3\r\n",
  "5c556845d7e0334c74698706": "def fit_in(a, b, m, n):\r\n    return max(a, b) <= min(m, n) and a + b <= max(m, n)\r\n",
  "5c5086287bc6600001c7589a": "def is_negative_zero(n):\r\n    return str(n) == '-0.0'\r\n",
  "5c4cb8fc3cf185147a5bdd02": "from math import prod\r\n\r\n\r\ndef sum_or_product(array, n):\r\n    array . sort()\r\n    n_sum = sum(array[- n:])\r\n    n_prod = prod(array[: n])\r\n    return \"sum\" if n_sum > n_prod else \"product\" if n_sum < n_prod else \"same\"\r\n",
  "5c374b346a5d0f77af500a5a": "def elevator(left, right, call):\r\n    return \"left\" if abs(call - left) < abs(call - right) else \"right\"\r\n",
  "5c44b0b200ce187106452139": "def args_count(* args, * * kwargs):\r\n    return len(args) + len(kwargs)\r\n",
  "5c356d3977bd7254d7191403": "def domino(n):\r\n    for a in range(n + 1):\r\n    for b in range(a):\r\n    yield b\r\n    yield a\r\n    yield a\r\n    yield 0\r\n    def domino_train(n):\r\n    return list(domino(n))\r\n",
  "5c3f31c2460e9b4020780aa2": "def recaman(n):\r\n    series, last = {0}, 0\r\n    for i in range(1, n + 1):\r\n    test = last - i\r\n    last = last + i if test < 0 or test in series else test\r\n    series . add(last)\r\n\r\n    return last\r\n",
  "5c2ab63b1debff404a46bd12": "from heapq import heappop, heappush\r\n\r\n\r\ndef comb(fruits):\r\n    total, heap = 0, sorted(fruits)\r\n    while len(heap) > 1:\r\n    cost = heappop(heap) + heappop(heap)\r\n    heappush(heap, cost)\r\n    total += cost\r\n    return total\r\n",
  "5c3433a4d828182e420f4197": "def reverse(a):\r\n    s = reversed('' . join(a))\r\n    return ['' . join(next(s) for _ in w) for w in a]\r\n",
  "5c2cea87b0aea22f8181757c": "REGEX = r'(?!(xx+)\\1+$)xx+$'\n",
  "5c2dbc63bfc6ec0001d2fcf9": "def fmax(a, b): a[:] = map(max, a, b)\n",
  "5c258f3c48925d030200014b": "from math import log2\n\n\ndef t(n):\n    if n == 0:\n    return 0\n    k = int(log2(n))\n    i = n - 2 * * k\n    if i == 0:\n    return (2 * * (2 * k + 1) + 1) / / 3\n    else:\n    return t(2 * * k) + 2 * t(i) + t(i + 1) - 1\n    toothpick = t\n",
  "5c11c3f757415b1735000338": "def palindromic_expression():\r\n    return \"intni\"\r\n",
  "5bfc9bf3b20606b065000052": "def findSolution(m):\r\n    return [j for j, r in enumerate(m) if r[0] ^ m[0][0]] + [len(m) + i for i, b in enumerate(m[0]) if not b]\r\n",
  "5bf774a81505a7413400006a": "def fix(paragraph):\r\n    return '. ' . join(s . capitalize() for s in paragraph . split('. '))\r\n",
  "5bf6bd7a3efceeda4700011f": "div_4 = '[048]$|\\d*([02468][048]|[13579][26])$'\n",
  "561f18d45df118e7c400000b": "from itertools import combinations\nfrom math import comb, prod\n\n\ndef eval_prod_sum(numbers: list, factor_count: int, addend_count: int, max_value: int) - > list or str:\n    if not (all(isinstance(i, int) for i in numbers) and\n            all(isinstance(i, int) and i > 0 for i in {factor_count, addend_count, max_value})):\n    return 'Error. Unexpected entries'\n    if factor_count > len(numbers):\n        return 'Error. Number of factors too high'\n    if addend_count > comb(len(numbers), factor_count):\n        return 'Error. Number of addens too high'\n    lower = equal = higher = 0\n    for sum_ in map(sum, combinations(map(prod, combinations(numbers, r=factor_count)), r=addend_count)):\n    if sum_ < max_value:\n        lower += 1\n    elif sum_ > max_value:\n        higher += 1\n    else:\n        equal += 1\n    return [{f'Below than { max_value } ': lower}, {f'Equals to { max_value } ': equal}, {f'Higher than { max_value } ': higher}]\n",
  "5622c008f0d21eb5ca000032": "from math import gcd\r\n\r\n\r\ndef find_max_triple(c_max):\r\n    triples = [(n * n - m * m, 2 * m * n, m * m + n * n)\r\n               for n in range(2, int(c_max * * 0.5) + 1)\r\n               for m in range(1 + n % 2, min(n, int((c_max - n * n) * * 0.5) + 1), 2)\r\n               if gcd(m, n) == 1]\r\n    largest = tuple(sorted(max(triples, key=sum)))\r\n    return [{f'number triples below-eq { c_max } ': len(triples)},\r\n            {'max perimeter': sum(largest)},\r\n            {'largest triple': [largest]}]\r\n",
  "574b448ed27783868600004c": "def avg(x):\r\n    return sum(x) / len(x)\r\n\r\n    def std(arr):\r\n    mu = avg(arr)\r\n    var = sum([(x - mu) * * 2 for x in arr]) / len(arr)\r\n    return var * * 0.5\r\n    def filter_val(lst):\r\n    len1 = len(lst)\r\n    while True:\r\n    mu = avg(lst)\r\n    s = std(lst)\r\n    ret = [x for x in lst if mu - 2.5 * s <= x <= mu + 2.5 * s]\r\n    if ret == lst:\r\n        break\r\n    else:\r\n        lst = ret\r\n    len2 = len(lst)\r\n    mean = avg(lst)\r\n    s = std(lst)\r\n    return [[len1, len2], mean, s]\r\n",
  "570176b0d1acef5778000fbd": "from math import e, factorial\r\n\r\n\r\ndef poi(l, x): return e * * - l * l * * x / factorial(x)\r\n\r\n\r\ndef prob_simpson(l, x, op='='):\r\n    if op == '=':\r\n        return poi(l, x)\r\n    if op == '>=':\r\n        return sum(poi(l, e) for e in range(x + 1))\r\n    if op == '>':\r\n        return sum(poi(l, e) for e in range(x))\r\n    if op == '<=':\r\n        return 1 - sum(poi(l, e) for e in range(x))\r\n    if op == '<':\r\n        return 1 - sum(poi(l, e) for e in range(x + 1))\r\n",
  "5be350bcce5afad8020000d6": "def max_match(s):\r\n    result = []\r\n\r\n    while s:\r\n    for size in range(len(s), 0, - 1):\r\n    word = s[: size]\r\n    if word in VALID_WORDS:\r\n    break\r\n    result . append(word)\r\n    s = s[size:]\r\n\r\n    return result\r\n",
  "5be4d000825f24623a0001e8": "# A001921 + A001570, aka A011944\r\n  v = [0, 2]\r\n   while v[- 1] < 1e180:\r\n        v . append(14 * v[- 1] - v[- 2])\r\n\r\n    from bisect import bisect\r\n    def find_closest_perim(p):\r\n    i = bisect(v, p)\r\n    return v [2 ] if i == 2 else min ([v [i ], v [i - 1 ]], key = lambda t : ( abs ( t - p ), - t ))",
  "5be0f1786279697939000157": "from functools import lru_cache\r\n\r\n\r\n@ lru_cache(maxsize=None)\r\ndef make_sequences(n):\r\n    return 1 + sum(map(make_sequences, range(1, n / / 2 + 1)))\r\n",
  "5be085e418bcfd260b000028": "def num_key_strokes(text):\r\n    return sum([1 if i in \"abcdefghijklmnopqrestuvwxyz1234567890-=`];[',.\\/ \" else 2 for i in text])\r\n",
  "5be0af91621daf08e1000185": "def sierpinski():\r\n    x = s = 0\r\n    while 1:\r\n    for a in 4, 9, 56, 61:\r\n    s += x + a\r\n    yield s\r\n    x += 65\r\n    s = sierpinski()\r\n    S = [next(s)]\r\n\r\n    from bisect import bisect_left\r\n    def find_closest_value(m):\r\n    while S[- 1] < m:\r\n        S . append(next(s))\r\n    i = bisect_left(S, m)\r\n    return min(S[i: i - 2: - 1], key=lambda n: abs(m - n))\r\n",
  "5bdc191306a8a678f6000187": "def shift_left(a, b):\r\n    r = len(a) + len(b)\r\n    for i in range(- 1, - min(len(a), len(b)) - 1, - 1):\r\n    if a[i] != b[i]:\r\n    break\r\n    r -= 2\r\n    return r\r\n",
  "5540b8b79bb322607b000021": "class SpreadSheetHelper:\r\n    from string import ascii_uppercase\r\n    BASE26 = dict(zip(ascii_uppercase, range(len(ascii_uppercase))))\r\n\r\n    @ classmethod\r\n    def convert_to_display(cls, internal):\r\n    display = []\r\n    row, col = internal\r\n    row += 1\r\n    while row:\r\n    row -= 1\r\n    row, n = divmod(row, 26)\r\n    display . append(cls . ascii_uppercase[n])\r\n    return '' . join(reversed(display)) + str(col + 1)\r\n\r\n    @ classmethod\r\n    def convert_to_internal(cls, display):\r\n    first_digit = next(n for n, c in enumerate(display) if c . isdigit())\r\n    row, col = display[: first_digit], display[first_digit:]\r\n    internal = - 1\r\n    for c in row:\r\n    internal += 1\r\n    internal *= 26\r\n    internal += cls . BASE26[c]\r\n    return internal, int(col) - 1\r\n",
  "5bce125d3bb2adff0d000245": "def london_city_hacker(journey):\n    # your code here\n    tube = 2.40\n    bus = 1.50\n    total_cost = 0.00\n    count = 0\n    for link in journey:\n    if isinstance(link, str):\n    total_cost += tube\n    count = 0\n    else:\n    if count == 0:\n    total_cost += bus\n    count += 1\n    else:\n    count = 0\n    return '\u00a3{:.2f}' . format(total_cost)\n",
  "5bd776533a7e2720c40000e5": "def pendulum(a):\r\n    a = sorted(a)\r\n    return a[:: 2][:: - 1] + a[1:: 2]\r\n",
  "5bc463f7797b00b661000118": "def is_possible(nums, goal):\r\n    if not nums:\r\n        return False\r\n    sums = {nums[0]}\r\n    for i in range(1, len(nums)):\r\n    sums = {n + s for n in sums for s in (- nums[i], nums[i])}\r\n    return goal in sums\r\n",
  "5bc9951026f1cdc77400011c": "def baby_count(x):\r\n    x = x . lower()\r\n    return min(x . count('a'), x . count('b') / / 2, x . count('y')) or \"Where's the baby?!\"\r\n",
  "5bd36d5e03c3c4a37f0004f4": "def limiter(limit, unique, lookup):\r\n    def wrapper(class_):\r\n    instances = {}\r\n    lookups = {}\r\n\r\n    def getinstance(* args, * * kwargs):\r\n    new_obj = class_(* args, * * kwargs)\r\n    if \"FIRST\" not in lookups:\r\n        lookups[\"FIRST\"] = new_obj\r\n    id = getattr(new_obj, unique)\r\n    if id in instances:\r\n    res = instances[id]\r\n    elif len(instances) < limit:\r\n    instances[id] = new_obj\r\n    res = lookups[\"LAST\"] = new_obj\r\n    else:\r\n    res = lookups[lookup]\r\n\r\n    lookups[\"RECENT\"] = res\r\n    return res\r\n    return getinstance\r\n    return wrapper\r\n",
  "5bd00c99dbc73908bb00057a": "def alpha_seq(s):\r\n    return \",\" . join((c * (ord(c) - 96)). capitalize() for c in sorted(s . lower()))\r\n",
  "5bcf52022f660cab19000300": "import operator as o\n\n\nclass v:\n    def __init__(s, a, b): s . a, s . b = a, b\n    def compute(s): return getattr(o, type(s). __name__)(s . a, s . b)\n\n    class value (int):\n        pass\n\n    class add (v):\n        pass\n\n    class sub (v):\n        pass\n\n    class mul (v):\n        pass\n\n    class truediv (v):\n        pass\n\n    class mod (v):\n        pass\n\n    class pow (v):\n        pass\n",
  "5bc5cfc9d38567e29600019d": "def candidates(ymd):\r\n    y, m, d = ymd . split('-')\r\n    return {ymd, f' { y } - { d } - { m } '}\r\n\r\n    def check_dates(records):\r\n    result = [0, 0, 0]\r\n    for start, end in records:\r\n    xs = [(dt1, dt2) for dt1 in candidates(start) for dt2 in candidates(end)\r\n          if dt1 <= dt2 and dt1[5: 7] <= '12' >= dt2[5: 7]]\r\n    i = 2 if len(xs) > 1 else xs[0] != (start, end)\r\n    result[i] += 1  # 2: uncertain, 1(True): recoverable, 0(False): correct\r\n    return result\r\n",
  "5bcd90808f9726d0f6000091": "def longest_substring(s: str) - > int:\r\n    start, memo, res = 0, {}, 0\r\n    for i, c in enumerate(s):\r\n    if c in memo and memo[c] >= start:\r\n    start, res = memo[c] + 1, max(res, i - start)\r\n    memo[c] = i\r\n    return max(res, len(s) - start)\r\n",
  "5b26047b9e40b9f4ec00002b": "import numpy as np\r\n\r\n\r\ndef products(n, min_divisor, max_divisor):\r\n    if n == 1:\r\n    yield []\r\n    for divisor in range(min_divisor, max_divisor + 1):\r\n    if n % divisor == 0:\r\n    for product in products(n / / divisor, divisor, max_divisor):\r\n    yield product + [divisor]\r\n\r\n    def eq_dice(set):\r\n    product = np . prod(set)\r\n    lista = list(products(product, 3, min(product - 1, 20)))\r\n    return len(lista) - 1 if len(set) > 1 else len(lista)\r\n",
  "5bc7bb444be9774f100000c3": "class VersionManager:\r\n\r\n    def __init__(self, version=None):\r\n    if not version:\r\n        version = '0.0.1'\r\n    self . __memory = []\r\n    try:\r\n    arr = [* map(int, version . split('.')[: 3])] + [0, 0, 0]\r\n    except:\r\n    raise Exception(\"Error occured while parsing version!\")\r\n    del arr[3:]\r\n    self . __version = arr if any(arr) else [0, 0, 1]\r\n\r\n    def release(self):\r\n    return '.' . join(map(str, self . __version))\r\n\r\n    def rollback(self):\r\n    if not self . __memory:\r\n        raise Exception(\"Cannot rollback!\")\r\n    self . __version = self . __memory . pop()\r\n    return self\r\n    def __update(self, i):\r\n    self . __memory . append([* self . __version])\r\n    self . __version[i] += 1\r\n    self . __version[i + 1:] = [0] * (len(self . __version) - 1 - i)\r\n    return self\r\n    def major(self): return self . __update(0)\r\n    def minor(self): return self . __update(1)\r\n    def patch(self): return self . __update(2)\r\n",
  "5bc8c9db40ecc7f792002308": "from math import gcd\n\n\ndef can_measure(a, b, c):\n    return not (a < c > b or c % gcd(a, b))\n",
  "5bcac5a01cbff756e900003e": "def first_tooth(lst):\r\n    gums = lst[: 1] + lst + lst[- 1:]\r\n    diff = [gums[i + 1] * 2 - gums[i] - gums[i + 2] for i in range(len(lst))]\r\n    m = max(diff)\r\n    return diff . index(m) if diff . count(m) == 1 else - 1\r\n",
  "584e936ae82520a397000027": "from collections import Counter\nfrom math import factorial as fact\n\n\ndef proc_arrII(arr):\n    c = Counter(arr)\n    l = min(c . values())\n    p = len(c) * * l\n    return [p] if len(c) < l else [p, p - fact(len(c)) / / fact(len(c) - l), int('' . join(sorted(c . keys(), reverse=True)[: l]))]\n",
  "5bc73331797b005d18000255": "def draw_spider(leg_size, body_size, mouth, eye):\r\n    lleg = ['', '^', '/\\\\', '/\u2572', '\u2571\u2572'][leg_size]\r\n    rleg = ['', '^', '/\\\\', '\u2571\\\\', '\u2571\u2572'][leg_size]\r\n    lbody = '(' * body_size\r\n    rbody = ')' * body_size\r\n    eye *= 2 * * (body_size - 1)\r\n    return f' { lleg }{ lbody }{ eye }{ mouth }{ eye }{ rbody }{ rleg } '\r\n",
  "5bc5c0f8eba26e792400012a": "DIGITS = \"\"\" \n *************************************************************************** \n * * \n * **** ** **** **** ** ** ****** ** ****** **** **** * \n * ** ** *** ** ** ** ** ** ** ** ** ** ** ** ** ** ** * \n * ** ** * ** ** ** ** ** ***** **** ** **** ** ** * \n * ** ** ** ** ** ***** ** ** ** ** **** **** * \n * ** ** ** ** ** ** ** ** ** ** ** ** ** ** * \n * **** ****** ****** **** ** ***** **** ** **** ** * \n * * \n *************************************************************************** \n \"\"\" . strip(). splitlines()\n\n\ndef print_number(number, char):\n    ns = [* map(int, format(number, '05'))]\n    return '\\n' . join(\n        ds[: 2] + '' . join(ds[n * 7 + 2: n * 7 + 9] for n in ns) + ds[- 3:]\n        for ds in DIGITS\n    ). replace('*', char)\n",
  "5bc5c064eba26ef6ed000158": "def silent_thief(module_name):\r\n    return globals()['_' '_builtins_' '_']['_' '_imp' 'ort_' '_'](module_name)\r\n",
  "5bc555bb62a4cec849000047": "def find(a, b, n):\r\n    strng = str(a) + str(b)\r\n    # there are 10 and 4 long loops\r\n    if (n > 20):\r\n        n = n % 20 + 20\r\n    while len(strng) <= n:\r\n    next_ch = int(strng[- 1]) + int(strng[- 2])\r\n    strng = strng + str(next_ch)\r\n    return int(strng[n])\r\n",
  "59df2f8f08c6cec835000012": "def meeting(s):\r\n    return '' . join(sorted('({1}, {0})' . format(* (x . split(':'))) for x in s . upper(). split(';')))\r\n",
  "5bc2c8e230031558900000b5": "from math import factorial, comb\n\n\ndef rooks(n, k):\n    return factorial(k) * comb(n, k) * * 2\n",
  "55f0a7d8c44c6f1438000013": "from itertools import combinations\r\n\r\n\r\ndef find_biggTriang(listPoints):\r\n    def area(a, b, c): return 0.5 * abs(b[0] * c[1] - b[1] *\r\n                                        c[0] - a[0] * c[1] + a[1] * c[0] + a[0] * b[1] - a[1] * b[0])\r\n    triangls = [[[a, b, c], area(a, b, c)]\r\n                for a, b, c in combinations(map(list, listPoints), 3)]\r\n\r\n    np, mp, rp = len(listPoints), len(\r\n        triangls), sum(a != 0 for _, a in triangls)\r\n    mxt, mxa = max(triangls, key=lambda x: x[1])\r\n    mxtt = [t for t, a in triangls if a == mxa]\r\n\r\n    return [np, mp, rp, mxt if len(mxtt) == 1 else mxtt, mxa]\r\n",
  "56546460730f15790b000075": "def det(matrix: list) - > int:\n    if len(matrix) == 1:\n        return matrix[0][0]\n    return sum((- 1) * * i * matrix[0][i] * det([row[: i] + row[i + 1:] for row in matrix[1:]]) for i in range(len(matrix)))\n\n    def classify_conic(A: int, B: int, C: int, D: int, E: int, F: int) - > str:\n    M = det([[2 * A, B, D], [B, 2 * C, E], [D, E, 2 * F]])\n    N = det([[B, 2 * A], [2 * C, B]])\n    S = A + C\n    if N < 0:  # elliptic\n    if M == 0:\n        return 'A degenerated ellipse: One point'\n    if M * S < 0:\n        return 'A real ellipse'\n    if M * S > 0:\n        return 'An imaginary ellipse'\n    if N > 0:  # hyperbolic\n    if M == 0:\n        return 'A degenerated hyperbola: two intersecting lines'\n    if M != 0:\n        return 'A real hyperbola'\n    if N == 0:  # parabolic\n    if M != 0:\n        return 'A real parabola'\n    delta = D * * 2 - 4 * A * F\n    if delta == 0:\n        return 'A degenerated parabola: two coinciding lines'\n    if delta > 0:\n        return 'A degenerated parabola: two parallel lines'\n    if delta < 0:\n        return 'A degenerated parabola: two imaginary lines'\n",
  "5bc052f93f43de7054000188": "from fnmatch import fnmatch\n\n\ndef solve(a, b):\n    return fnmatch(b, a)\n",
  "5bc027fccd4ec86c840000b7": "def solve(n):\r\n    if n < 10:\r\n    return n\r\n    a = int((len(str(n)) - 1) * '9')\r\n    b = n - a\r\n    return sum([int(i) for i in (list(str(a)) + list(str(b)))])\r\n",
  "5bbecf840441ca6d6a000126": "def fixed_points_perms(n, k):\r\n    if k > n:\r\n    return 0\r\n    if k == n:\r\n    return 1\r\n    if k == 0:\r\n    def subf(n): return 1 if n == 0 else n * subf(n - 1) + (- 1) * * n\r\n    return subf(n)\r\n    return fixed_points_perms(n - 1, k - 1) * n / / k\r\n",
  "5b61e9306d0db7d097000632": "MAX_BALL = 2 + 1800\r\nDP, lst = [None], [0, 1]\r\nfor _ in range(MAX_BALL):\r\n    DP . append([sum(lst), * max((v, i) for i, v in enumerate(lst))])\r\n    lst . append(0)\r\n    lst = [v * i + lst[i - 1] for i, v in enumerate(lst)]\r\n\r\n    combs_non_empty_boxesII = DP . __getitem__\r\n",
  "5b5f7f7607a266914200007c": "# Stirling numbers of second kind\n# http://mathworld.wolfram.com/StirlingNumberoftheSecondKind.html\n# S(n,k)=1/(k!)sum_(i=0)^k(-1)^i(k; i)(k-i)^n\nfrom math import factorial as fact\n\n\ndef combs_non_empty_boxes(n, k):\n    if k < 0 or k > n:\n        return 'It cannot be possible!'\n    return sum([1, - 1][i % 2] * (k - i) * * n * fact(k) / / (fact(k - i) * fact(i)) for i in range(k + 1)) / / fact(k)\n",
  "5bbd279c8f8bbd5ee500000f": "def find_screen_height(width, ratio):\r\n    a, b = map(int, ratio . split(\":\"))\r\n    return f\" { width } x { int ( width / a * b )} \"\r\n",
  "5bbad1082ce5333f8b000006": "def stack_height_3d(layers):\r\n    return 1 + (layers - 1) * (2 / 3) * * 0.5 if layers else 0\r\n",
  "56f6380a690784f96e00045d": "def is_prime(n):\r\n    return n == 2 or n % 2 != 0 and all(n % k != 0 for k in xrange(3, root(n) + 1, 2))\r\n\r\n    def root(p):\r\n    return int(p * * 0.5)\r\n\r\n    def statement1(s):\r\n    return not (s % 2 == 0 or is_prime(s - 2))\r\n\r\n    def statement2(p):\r\n    return sum(statement1(i + p / i) for i in xrange(2, root(p) + 1) if p % i == 0) == 1\r\n    def statement3(s):\r\n    return sum(statement2(i * (s - i)) for i in xrange(2, s / 2 + 1)) == 1\r\n    def is_solution(a, b):\r\n    return statement1(a + b) and statement2(a * b) and statement3(a + b)\r\n",
  "5bb493932ce53339dc0000c2": "def stack_height_3d(layers):\r\n    return layers and 1 + (layers - 1) / 2 * * 0.5\r\n",
  "5a20eeccee1aae3cbc000090": "from itertools import chain, combinations, accumulate\nfrom heapq import heappush, heappop\n\n\ndef slide_puzzle(arr):\n        \n    def moveTargetTo(iX, i0, grid, target=None, lowLim=None):\n        \"\"\" iX:     index in the grid of the position to work on\n            i0:     blank index\n            grid:   current grid state\n            target: value to place at iX\n            lowLim: value index under which the tiles cannot be/go (mostly optimization to avoid searching for inde'xes from the beginning)\n        \"\"\"\n        if target is None: target = iX+1                                                # Default VALUE of the tile to move\n        if lowLim is None: lowLim = iX                                                  # Default minimal index under\n\n        iT       = grid.index(target, lowLim)                                           # Current position of the target tile\n        xyX, xyT = divmod(iX,S), divmod(iT,S)                                           # Coords converted to (x,y) format\n        dV,dH    = [b-a for a,b in zip(xyT,xyX)]                                        # Moves to do to reach the iX position, in (x,y) format\n        sV,sH    = S * ((dV>0)-(dV<0)), (dH>0)-(dH<0)                                   # \"Amount to move\", step by step, in each direction\n        \n        paths = [ list(accumulate([iT] + [sH]*abs(dH) + [sV]*abs(dV))),                 # Build the two possible direct paths (dH->dV or dV->dH)\n                  list(accumulate([iT] + [sV]*abs(dV) + [sH]*abs(dH))) ]                \n        path  = next(filter(lambda p: not set(p) & forbid, paths))                      # Peek the first one that is fully allowed (at least one always exists)\n\n        for iT,iTnext in zip(path, path[1:]):\n            forbid.add(iT)                                                              # Set up the constraint\n            i0, grid = moveBlank(i0, iTnext, grid, lowLim)\n            forbid.remove(iT)                                                           # Relax\"-relax... don't do it...\"\n            i0, grid = gridSwapper(i0, iT, grid)                                        # Final swap of blank and target\n            movesToParadise.append(target)                                              # Register the moves needed\n\n        forbid.add(iX)                                                                  # Archive iX as \"definitively\" done\n        return i0, grid\n    \n        \n    def conquerCorner(i0, grid, i1, i2, lowLim):\n        v1, v2   = i1+1, i2+1,                                                          # Target values\n        delta    = i2-i1                                                                # Step in idexes between i1 and i2\n        delta2nd = S if delta == 1 else 1                                               # Step in idexes in the orthogonal direction\n        shifted2 = i2+delta2nd                                                          # Temporary targeted index\n\n        i0, grid = moveTargetTo(i2, i0, grid, target=v1, lowLim=lowLim)                 # Place v1 at i2 for now\n        forbid.remove(i2)                                                               # Unlock to avoid impossible moves\n\n        i0, grid = moveTargetTo(shifted2, i0, grid, target=v2, lowLim=lowLim)           # Place v2 next to v1, in the orthogonal direction\n        forbid.remove(shifted2)                                                         # Unlock the temporary point\n        \n        i0, grid = moveBlank(i0, i1+2*delta2nd, grid, lowLim)                           # Try to move the blank away first (avoid to move v1 and v2 if they are correct)\n        i0, grid = moveBlank(i0, i1, grid, lowLim)                                      # Move the blank at the ideal position for final 2x2 rotation\n        \n        if grid[i2] == v1 and grid[shifted2] == v2:                                     # The 3 tiles are still placed as expected/hoped for (blank IS): solve directly\n            movesToParadise.extend([v1,v2])\n            for i in (i2,shifted2):                                                     # Makes the two actual swaps in the grid\n                i0, grid = gridSwapper(i0, i, grid)\n        \n        else:                                                                           # Occasionally, something might go \"wrong\" (v1 or v2 moved again), so resolve instead a 3x2 subgrid with A*, to get the 2 target tiles at the right place (note, at this point, we are sure that the 3 tiles are in the subgrid)\n            subGrid_3x2     = {i1 + a*delta + b*delta2nd for a in range(2) for b in range(3)}   # Grid to work on, in the appropriate orientation\n            blocking        = set(range(lowLim+2, linS)) - subGrid_3x2 - forbid                 # Tiles to block (only those that are still free at this point and not in the subgrid)\n            (_,it1),(_,it2) = sorted((grid[i],i) for i in subGrid_3x2 if grid[i] in (v1,v2))    # Retrieve the index of each target\n            cost            = manhattan(it1, i1) + manhattan(it2, i2)                           # Cost based on the positions of v1 and v2 only\n\n            def heuristic(cost, i, i0, grid):                                                   # Function updating the cost for each swap in A*\n                delta1 = manhattan(i0, i1) - manhattan(i, i1) if grid[i] == v1 else 0\n                delta2 = manhattan(i0, i2) - manhattan(i, i2) if grid[i] == v2 else 0\n                c = cost + delta1 + delta2\n                return c\n            \n            forbid.update(blocking)                                                             # \"Gendarmerie nationale, vos papiers siouplait...\"\n            i0, grid, seq = modifiedAStar(grid, i0, heuristic, cost, forbid)                    # Move the blank to the right position (just \"ahead\" of the target)\n            forbid.difference_update(blocking)                                                  # Relax...\n            movesToParadise.extend(seq)\n\n        forbid.update({i1,i2})                                                          # Block the two tiles that have been placed\n        return i0, grid\n        \n        \n    def moveBlank(i0, to, grid, lowLim):\n        cost      = manhattan(i0, to)                                                   # Cost only related to the distance between the blank and the targeted position\n        heuristic = lambda _,i0,__,___: manhattan(i0, to)                               \n        i0, grid, seq = modifiedAStar(grid, i0, heuristic, cost, forbid)                # Move the blank to the correct position (just \"ahead\" of the target)\n        movesToParadise.extend(seq)                                                     # Archive the moves\n        return i0, grid\n    \n\n    def manhattan(i0, to): return sum( abs(b-a) for a,b in zip(divmod(i0,S),divmod(to,S)) )             # Distance between indexes\n    def manhattan2(i, v):  return sum( abs(b-a) for a,b in zip(divmod(i,S), divmod((v-1)%linS,S)) )     # Distance current index of v/expected position of v\n    \n    \n    #-----------------------------------------------------------------------------------------\n    \n\n    grid   = tuple(chain.from_iterable(arr))                                            # Linearized\n    S,linS = len(arr), len(arr)**2                                                      # Dimensions (square / linear)\n    i0     = grid.index(0)                                                              # Initial position\n    \n    \n    \"\"\" Check doability \"\"\"\n    nInv  = sum(a*b and a>b for a,b in combinations(chain.from_iterable(arr), 2))       # Number of inversions\n    r0Bot = S - grid.index(0) // S                                                      # Row containing the 0 (1-indexed, from bottom)\n\n    if S%2 and nInv%2 or not S%2 and not (nInv%2 ^ r0Bot%2): return None                # Unsolvable!\n    \n\n    \"\"\" Divide and conquer, up to 3x2 rectangle remaining \"\"\"\n    forbid          = set()                                                             # MUTATED: Archive all the indexes already done ON THE LEFT part (no tneeded for the upper part)\n    movesToParadise = []                                                                # MUTATED: Moves applied to solve the puzzle\n    \n    for z in range(S-2):                                                                # Up to the two last rows... (z moving on the diagonal):\n        for y in range(z, S-2):                                                         #   Complete the current top line, until 2 squares are remaining (or 3 if that's the second to last row)\n            iX       = z*S + y\n            i0, grid = moveTargetTo(iX, i0, grid)\n        i0, grid = conquerCorner(i0, grid, iX+1, iX+2, iX+1)                            #   Places those two values at the end of the row z\n        \n        lim = S*(z+1)\n        for x in range(z+1,S-2):                                                        #   Left column, going down, leaving the two last free.\n            iX       = x*S + z\n            i0, grid = moveTargetTo(iX, i0, grid, lowLim=lim)                           #   Complete the current first column, until 2 squares remains\n        if z < S-3:                                                                     #   Place the two last squares on the column, unless they are for the last 3x2 grid (\"z == S-3\")\n            i1, i2   = iX+S, iX+2*S\n            i0, grid = conquerCorner(i0, grid, i1, i2, lowLim=lim)                      #   Places those two tiles\n            \n\n    \"\"\" Solve the 3x2 remaining grid with A* \"\"\"\n    lowLim = linS-S-3                                                                   # Last tile completed + 1\n    cost   = sum( manhattan2(i, grid[i]) for i in range(linS))                          # Initial cost\n    \n    def heuristic(cost, i, i0, grid): \n        a,b,c,d = (manhattan2(i0, grid[i]), manhattan2(i, grid[i0]),                    # Costs in the candidate grid\n                   manhattan2(i0, grid[i0]), manhattan2(i, grid[i]) )                   # Costs in the original grid\n        return cost+a+b-c-d\n    \n    i0, grid, seq = modifiedAStar(grid, i0, heuristic, cost, forbid)\n    movesToParadise.extend(seq)\n    \n    return movesToParadise\n  \n\n\ndef display(grid, msg='',force=False):\n    if DEBUG or force: \n        linS, S = len(grid), int(len(grid)**.5)\n        if msg: print(msg)\n        print('\\n'.join(' '.join(map('{: >2}'.format, grid[i:i+S])) for i in range(0,linS,S)).replace(' 0',' X'))\n        print('-'*S*2)\n\n\ndef gridSwapper(i0, other, grid):\n    a, b     = (i0,other) if i0<other else (other,i0)\n    nextGrid = grid[:a] + (grid[b],) + grid[a+1:b] + (grid[a],) + grid[b+1:]\n    return other, nextGrid\n    \n    \ndef modifiedAStar(grid, i0, heuristic, cost, forbid):\n    \"\"\" \"A*\", but exit as soon as the end condition (cost==0) is reached, even if not \n        the shortest path. Returns the moves needed to to this final situation.\n    \n        grid:      linear version of the puzzle (as tuple).\n        i0:        position of the blank at the beginning.\n        heuristic: function that computes the update the cost for each candidate grid.\n                   Call in the form: f(cost, i, i0, grid).\n        cost:      initial cost, has to reach 0 when the final configuration is reached.\n        forbid:    Set of forbidden positions (as linearized indexes). This set is copied\n                   right at the beginning to keep the source faithful.\n\n        @RETURN:   tuple: (i0 at the end,\n                           Final grid state (tuple),\n                           sequence of moves to reach that state)\n    \"\"\"\n    S     = int(len(grid)**.5)\n    linS  = S**2\n    MOVES = (S, -S, 1, -1)                                                  # (down, up, right, left)\n    q     = [(cost, grid, i0, 1j, (-1,))]                                   # (cost, current state (as tuple), i0, last move, ans ('-1' is dummy))\n    seens = set()\n    forbidPos = set(forbid)                                                 # Use a copy\n    \n    while q and q[0][0]:\n        cost, grid, i0, last, moves = heappop(q)\n        seens.add(grid)\n        \n        for m in MOVES:\n            i = i0+m\n            if (m == -last or m==1 and i0%S==S-1 or m==-1 and not i0%S      # Skip if: going back (opposite of the last move) or \"wrapping\" two rows ([i][-1] <-> [i+1][0])...\n                  or not (0 <= i < linS) or i in forbidPos):                # ... or not inside the correct area or in the forbidden positions)\n                continue\n            \n            _,cnd = gridSwapper(i0, i, grid)                                # Build the candidate (making the swap)\n            if cnd not in seens:                                            # Skip if already found\n                cndCost = heuristic(cost, i, i0, grid)\n                heappush(q, (cndCost, cnd, i, m, moves+(grid[i],)) )\n    if q:\n        return q[0][2], q[0][1], q[0][-1][1:]                               # Outputs (without the initial -1 in the moves, used to simplify/fasten the executions)\n    else:\n        raise Exception(display(grid) or \"Aha... That's not going well... (A* ran out of possibilities!)\")",
  "56797325703d8b34a4000014": "import math\n\n\ndef approx_fraction(target: float, rel_err_pct: float, eps: float = 1e-10) - > list[str, int] | str:\n    if math . isclose(round(target), target, rel_tol=eps):\n    return f'There is no need to have a fraction for { round ( target )} '\n    if target < 0:\n    a, b = approx_fraction(- target, rel_err_pct)\n    return [f'- { a } ', b]\n    rel_err_pct /= 100\n    i = 0\n    n = d = q = 1\n    while not math . isclose(q, target, rel_tol=rel_err_pct):\n    if q < target:\n        n += 1\n    else:\n        d += 1\n    q = n / d\n    i += 1\n    return [f' { n } / { d } ', i]\n",
  "5b204d1d9212cb6ef3000111": "def riders(stations, lost):\r\n    stations = stations[: lost - 1] + stations[lost - 2:]\r\n    rider, dist = 1, 0\r\n    for i, d in enumerate(stations):\r\n    rider += (dist + d > 100) + (i == lost - 2)\r\n    dist = dist * (dist + d <= 100 and i != lost - 2) + d\r\n    return rider\r\n",
  "5bbb8887484fcd36fb0020ca": "def catch_sign_change(lst):\n    count = 0\n    for i in range(1, len(lst)):\n    if lst[i] < 0 and lst[i - 1] >= 0:\n        count += 1\n    if lst[i] >= 0 and lst[i - 1] < 0:\n        count += 1\n    return count\n",
  "57be4f2e87e4483c800002ee": "def correct_order(orders):\r\n    result = []\r\n    for o in orders:\r\n    for t in range(5, 20):\r\n    for s in range(t + 1, t + 4):\r\n    if round((t + .98) * o[\"tire\"] + (s + .79) * o[\"steeringWheel\"], 2) == o[\"totalPrice\"]:\r\n    result . append({\"tire\": 4, \"steeringWheel\": 1,\r\n                    \"totalPrice\": round((t + .98) * 4 + (s + .79), 2)})\r\n    break\r\n    else:\r\n    continue\r\n    break\r\n    return result\r\n",
  "5bb804397274c772b40000ca": "def stack_height_2d(layers):\r\n    return round((1 + 3 * * 0.5 * (layers - 1) / 2), 3) if layers > 0 else 0\r\n",
  "5661cde807c4e28efa0000d0": "def crazy_formula(n):\r\n    while n > 9:\r\n    a = list(map(int, str(n)))\r\n    if not len(a) % 2:\r\n        a . pop()\r\n    if a[len(a) / / 2] % 2:\r\n        a[len(a) / / 2] *= - 1\r\n    elif a[- 1] % 2:\r\n        a[0] * *= 2\r\n    else:\r\n        a[- 1] *= - 1\r\n    n = abs(sum(a))\r\n    return n\r\n",
  "5bb5e174528b2908930005b5": "def find_last(n, m):\n    num = 0\n    for i in range(2, n + 1):\n        num = (num + m) % i\n    return num + 1, n * (n + 1) + m * (m - 2) - n * m\n",
  "5b74e28e69826c336e00002a": "def subsets(collection):\r\n    if len(collection) == 1:\r\n    yield [collection]\r\n    return\r\n    first = collection[0]\r\n    for smaller in subsets(collection[1:]):\r\n    yield [first] + smaller\r\n    for n, subset in enumerate(smaller):\r\n    yield smaller[: n] + [first + subset] + smaller[n + 1:]\r\n\r\n    def bucket_digit_distributions_total_sum(n):\r\n    return sum(sum(map(int, sub)) for sub in subsets(str(n))) - n\r\n    def find(n, z):\r\n    f_nf = bucket_digit_distributions_total_sum(n) + z\r\n    while 1:\r\n    n += 1\r\n    if bucket_digit_distributions_total_sum(n) > f_nf:\r\n    return n\r\n",
  "5bb50eb68f8bbdb4b300021d": "from collections import Counter\r\n\r\n\r\ndef distribute_evenly(lst):\r\n    count, result = Counter(lst), []\r\n    while count:\r\n    result . extend(count)\r\n    count -= Counter(count . keys())\r\n    return result\r\n",
  "5bb3a707945bd500450001cb": "def hackermann(m, n, f):\r\n    stack = []\r\n    stack . append(m)\r\n\r\n    while stack:\r\n    m = stack . pop()\r\n    if m <= 0:\r\n    n = n + f\r\n    elif n <= 0:\r\n    n = 1\r\n    stack . append(m - f)\r\n    else:\r\n    n = n - f\r\n    stack . append(m - f)\r\n    stack . append(m)\r\n    return n\r\n",
  "5bb3e299484fcd5dbb002912": "def pyramid(n):\n    i = 1\n    while i <= n:\n    n = n - i\n    i += 1\n    return i - 1\n",
  "5ae8e14c1839f14b2c00007a": "def make_spanning_tree(edges, t):\r\n    edges = sorted(edges, key=lambda x: x[1], reverse=t == 'max')\r\n    span, vert = [], {}\r\n\r\n    for edge in edges:\r\n    ((a, b), _), (subA, subB) = edge, map(vert . get, edge[0])\r\n\r\n    if a == b or subA is not None and subA is subB:\r\n    continue\r\n    if subA and subB:\r\n    subA |= subB\r\n    for v in subB:\r\n        vert[v] = subA\r\n    else:\r\n    subSpan = subA or subB or set()\r\n    for v in (a, b):\r\n    subSpan . add(v)\r\n    vert[v] = subSpan\r\n    span . append(edge)\r\n\r\n    return span\r\n",
  "5bb0c58f484fcd170700063d": "def pillars(num_pill, dist, width):\r\n    return dist * 100 * (num_pill - 1) + width * (num_pill - 2) * (num_pill > 1)\r\n",
  "5b9a6d77d16ffeea92000102": "def ferry_loading(length, loads):\r\n    n, (l, r) = 0, ([t for t, side in loads if side == s]\r\n                    for s in ['left', 'right'])\r\n    while l or r:\r\n    n += 1\r\n    loaded = 0\r\n    while l and loaded + l[0] <= length * 100:\r\n    loaded += l . pop(0)\r\n    l, r = r, l\r\n    return n\r\n",
  "5ac616ccbc72620a6a000096": "from collections import deque\r\nd = {'U': (- 1, 0), 'D': (1, 0), 'L': (0, - 1), 'R': (0, 1)}\r\n\r\n\r\ndef snake_collision(field, moves):\r\n    field = [list(x) for x in field]\r\n    moves = ['R'] + moves . split()\r\n    current_snake = deque([(0, 0), (0, 1), (0, 2)])\r\n    HEIGHT, WIDTH = 13, 21\r\n    cur_head, step = (0, 2), 0\r\n    for token in moves:\r\n    if token . isalpha():\r\n    facing = d[token]\r\n    else:\r\n    x, y = cur_head\r\n    dx, dy = facing\r\n    for i in range(1, int(token) + 1):\r\n    xx = x + (dx * i)\r\n    yy = y + (dy * i)\r\n\r\n    if not (0 <= xx < HEIGHT and 0 <= yy < WIDTH) or (xx, yy) in current_snake:\r\n    return current_snake . pop(), step + 1\r\n    if field[xx][yy] == '$':\r\n    field[xx][yy] = '-'\r\n    else:\r\n    current_snake . popleft()\r\n\r\n    cur_head = (xx, yy)\r\n    current_snake . append(cur_head)\r\n    step += 1\r\n    return cur_head, step\r\n",
  "5b09cd44ee196bf290000082": "from itertools import chain, cycle, islice\r\n\r\n\r\ndef chain_lightning(monsters, coordinates, spellpower):\r\n    r, c = coordinates\r\n    ms = chain . from_iterable(\r\n        row[slice_] for row, slice_ in zip(\r\n            islice(monsters, r, None),\r\n            chain([slice(c, None)], cycle(\r\n                [slice(None, None, - 1), slice(None)]))\r\n        )\r\n    )\r\n    ms = (m for m in ms if m and m['resistance'] < 100)\r\n    killed = [[], []]\r\n    for i, m in enumerate(islice(ms, 4)):\r\n    q = min((25 * spellpower * (100 - m['resistance']) / (2 * * i)) / / (m['hitpoints'] * 100), m['number'])\r\n    if q:\r\n    killed[m['owner'] != 'player']. append(f' { int ( q )} { m [ \"type\" ]} s')\r\n    return killed\r\n",
  "59f44c7bd4b36946fd000052": "from collections import Counter\nERRORS = 'uwxz'\n\n\ndef hist(s):\n    cnts = Counter(s)\n    return '\\r' . join(f' { c } { cnts [ c ]: < 6 }{ \"*\" * cnts [ c ]} ' for c in ERRORS if cnts[c])\n",
  "5b114e854de8651b6b000123": "from math import ceil\r\n\r\n\r\ndef who_would_win(mon1, mon2):\r\n    mon1['allhit'] = mon1['hitpoints'] * mon1['number']\r\n    mon2['allhit'] = mon2['hitpoints'] * mon2['number']\r\n    while True:\r\n    mon2['allhit'] = mon2['allhit'] - mon1['number'] * mon1['damage']\r\n    mon2['number'] = ceil(mon2['allhit'] / mon2['hitpoints'])\r\n    if not mon2['number'] > 0:\r\n        return f\" { mon1 [ 'number' ]} { mon1 [ 'type' ]} (s) won\"\r\n    mon1['allhit'] = mon1['allhit'] - mon2['number'] * mon2['damage']\r\n    mon1['number'] = ceil(mon1['allhit'] / mon1['hitpoints'])\r\n    if not mon1['number'] > 0:\r\n        return f\" { mon2 [ 'number' ]} { mon2 [ 'type' ]} (s) won\"\r\n",
  "5b4bccfabeb865730d000062": "PTS = [\"0\", \"15\", \"30\", \"40\", \"AD\"]\n\n\ndef formatScores(who, pts, games):\n    iScore = min(3, pts[who]) + (pts[who] > 3 and pts[who]\n                                 > pts[who ^ 1])  # Take care of \"AD\"\n    return [str(games[who]), PTS[iScore]]\n\n    def wimbledon(balls):\n    games, pts = [0, 0], [0, 0]  # Games score / \"in game\" score\n    server, who, isServ = 0, 0, 1  # Server index, player index, is first service?\n    for i, isIn in enumerate(balls, 1):\n    if not isIn and isServ:\n    isServ = 0\n    continue  # Missing first service, keep current player\n    isServ = isIn ^ 1  # Next move will be or not a first service?\n    who ^= 1  # Permute players (before counting)\n    # Last player missed or isIn and last ball: count the points\n    if not isIn or isIn and i == len(balls):\n    if isIn:\n        who ^= 1  # If \"is in\", this is the last ball and the current player wins the points\n    pts[who] += 1  # Update point of winner\n    # Game won: upadte games, pts and change server\n    if pts[who] > 3 and pts[who] - pts[who ^ 1] > 1:\n    server ^= 1\n    games[who] += 1\n    pts = [0, 0]\n\n    who = server  # New service to the \"current\" server\n    return [formatScores(i, pts, games) for i in range(2)]\n",
  "5af304892c5061951e0000ce": "def bingo(card, numbers):\r\n\r\n    # rows count, columns count, diag counts\r\n    rc, cc, dc = [0] * 5, [0] * 5, [1] * 2\r\n    rc[2] = cc[2] = 1  # preaffect 'FREE SPACE'\r\n    s = set(numbers)\r\n\r\n    for x, line in enumerate(card[1:]):\r\n    for y, (c, n) in enumerate(zip(card[0], line)):\r\n    tile = f' { c }{ n } '\r\n    if tile in s:\r\n    rc[x] += 1\r\n    cc[y] += 1\r\n    if x == y:\r\n        dc[0] += 1  # main diag\r\n    if x + y == 4:\r\n        dc[1] += 1  # secundary diag\r\n    return 5 in rc + cc + dc\r\n",
  "5b7d7ce57a0c9d86c700014b": "from heapq import *\r\n\r\n\r\ndef add_all(lst):\r\n\r\n    heapify(lst)\r\n    total = 0\r\n    while len(lst) > 1:\r\n    s = heappop(lst) + heappop(lst)\r\n    total += s\r\n    heappush(lst, s)\r\n\r\n    return total\r\n",
  "5953c6f8af7ac14fd4000021": "def shorterest_time(n, m, speeds):\r\n    if n == 0:\r\n    return 0\r\n    a, b, c, d = speeds\r\n    return min(\r\n        n * d,\r\n        abs(n - m) * d + b * 2 + c + m * a,\r\n        abs(n - m) * a + b * 2 + c + n * a\r\n    )\r\n",
  "5b7c80094a6aca207000004d": "from itertools import cycle\r\nROOT = {'fib': [0, 0, 0, 1],\r\n        'jac': [0, 0, 0, 1],\r\n        'pad': [0, 1, 0, 0],\r\n        'pel': [0, 0, 0, 1],\r\n        'tet': [0, 0, 0, 1],\r\n        'tri': [0, 0, 0, 1]}\r\nGEN = {'fib': lambda a: a[- 1] + a[- 2],\r\n       'jac': lambda a: a[- 1] + 2 * a[- 2],\r\n       'pad': lambda a: a[- 2] + a[- 3],\r\n       'pel': lambda a: 2 * a[- 1] + a[- 2],\r\n       'tet': lambda a: a[- 1] + a[- 2] + a[- 3] + a[- 4],\r\n       'tri': lambda a: a[- 1] + a[- 2] + a[- 3]}\r\n\r\n\r\ndef zozonacci(pattern, n):\r\n    if not pattern or not n:\r\n        return []\r\n\r\n    lst = ROOT[pattern[0]][:]\r\n    cycl = cycle(map(GEN . get, pattern))\r\n\r\n    for f, _ in zip(cycl, range(n - 4)):\r\n        lst . append(f(lst))\r\n\r\n    return lst[: n]\r\n",
  "56d5078e945d0d5d35001b74": "def least_bribes(bribes):\r\n    mem = {}\r\n    def s(n1, n2):\r\n    if n1 >= n2:\r\n        return 0\r\n    if (n1, n2) in mem:\r\n        return mem[n1, n2]\r\n    r = min(bribes[i] + max(s(n1, i), s(i + 1, n2)) for i in range(n1, n2))\r\n    mem[n1, n2] = r\r\n    return r\r\n    return s(0, len(bribes))\r\n",
  "56f2f3dfe40b70a005001389": "class SHA1:\r\n    def __init__(self):\r\n    self . message = []\r\n    self . H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]\r\n    self . K = [0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6]\r\n    self . F = [lambda b, c, d: (b & c) | ((~ b) & d),\r\n                lambda b, c, d: b ^ c ^ d,\r\n                lambda b, c, d: (b & c) | (b & d) | (c & d),\r\n                lambda b, c, d: b ^ c ^ d]\r\n\r\n    def update(self, message):\r\n    self . message . extend(SHA1 . to_bits(message))\r\n\r\n    def digest(self):\r\n    chunks = SHA1 . pre_process(self . message)\r\n    for chunk in chunks:\r\n    self . process_chunk(chunk)\r\n    return str . encode('' . join(hex(h)[2:]. zfill(8) for h in self . H))\r\n\r\n    def to_bits(bytes):\r\n    bits = []\r\n    for b in bytes:\r\n    bits . extend(int(x) for x in bin(b)[2:]. zfill(8))\r\n    return bits\r\n    def pre_process(message):\r\n    original_message_length = len(message)\r\n    message . append(1)\r\n    message . extend([0] * ((448 - len(message) % 512) % 512))\r\n    size = SHA1 . to_bits([original_message_length])\r\n    message . extend([0] * (64 - len(size)) + size)\r\n    chunks = [message[i: i + 512] for i in range(0, len(message), 512)]\r\n    return chunks\r\n    def left_rotate(n, m):\r\n    return (n << m | n >> (32 - m)) % 2 * * 32\r\n    def process_chunk(self, chunk):\r\n    a, b, c, d, e = self . H\r\n    W = [chunk[i: i + 32] for i in range(0, 512, 32)]\r\n    W = list(map(lambda x: int('' . join(map(str, x)), 2), W))\r\n    for i in range(16, 80):\r\n    W . append(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])\r\n    W[i] = SHA1 . left_rotate(W[i], 1)\r\n\r\n    for i in range(80):\r\n    temp = e + self . F[i / / 20](b, c, d) + SHA1 . left_rotate(a, 5) + W[i] + self . K[i / / 20]\r\n    e = d\r\n    d = c\r\n    c = SHA1 . left_rotate(b, 30)\r\n    b = a\r\n    a = temp % 2 * * 32\r\n    self . H = [(self . H[i] + [a, b, c, d, e][i]) % (2 * * 32) for i in range(5)]\r\n",
  "59eb1e4a0863c7ff7e000008": "from functools import lru_cache\r\nfrom operator import and_, or_, xor\r\nFUNCS = {'|': or_, '&': and_, '^': xor}\r\n\r\n\r\ndef solve(s, ops):\r\n\r\n    @ lru_cache(None)\r\n    def evaluate(s, ops):\r\n    c = [0, 0]\r\n    if not ops:\r\n    c[s == 't'] += 1\r\n    else:\r\n    for i in range(len(ops)):\r\n    for v, n in enumerate(evaluate(s[: i + 1], ops[: i])):\r\n    for w, m in enumerate(evaluate(s[i + 1:], ops[i + 1:])):\r\n    c[FUNCS[ops[i]](v, w)] += n * m\r\n    return c\r\n    return evaluate(s, ops)[True]\r\n",
  "582b59f45ad9526ae6000249": "def phone_number(phone_numbers):\r\n    return len({num[: i] for num in phone_numbers for i in range(1, len(num) + 1)})\r\n",
  "5b62f8a5b17883e037000136": "def quidditch_scoreboard(teams, actions):\r\n\t teams = {i: 0 for i in teams . split(' vs ')}\r\n\t for i in actions . split(', '):\r\n\t\t team, action = i . split(': ')\r\n\t\t if 'goal' in action:\r\n\t\t\t teams[team] += 10\r\n elif 'foul' in action :\r\n\t\t\t teams [ team ] -= 30 \r\n elif 'Snitch' in action :\r\n\t\t\t teams [ team ] += 150 \r\n break \r\n return ', ' . join ( '{}: {}' . format ( i , teams [ i ]) for i in teams )",
  "58e8561f06db4d4cc600008c": "def score(sub_gen): return lambda n: sum(int('' . join(sub))\r\n                                         for length in range(1, len(str(n)) + 1) for sub in sub_gen(str(n), length))\r\n\r\n\r\nscore1 = score(__import__('itertools'). combinations)\r\nscore2 = score(lambda s, r: (s[i: i + r] for i in range(len(s) - r + 1)))\r\n\r\n\r\ndef divs(n): return set . union(* ({d, n / / d} for d in range(1, int(n * * .5) + 1) if not n % d)) - {1, n}\r\n\r\n\r\ndef find_int_inrange(a, b):\r\n    div_range = [0]\r\n    for n in range(a, b + 1):\r\n    common_divisors = divs(score1(n)) & divs(score2(n))\r\n    if len(common_divisors) > div_range[0]:\r\n        div_range = [len(common_divisors)]\r\n    if len(common_divisors) == div_range[0]:\r\n        div_range . append(n)\r\n    return div_range\r\n",
  "5b442a063da310049b000047": "from string import ascii_lowercase, ascii_uppercase\r\nchar_to_index = {c: i for i, c in enumerate(ascii_uppercase + ascii_lowercase)}\r\n\r\n\r\n# assumes a space character isn't used to represent a player\r\ndef who_is_winner(moves, connect_size, size):\r\n    board, winner = [[' ' for i in range(size)] for j in range(size)], ''\r\n    def check_for_winner(i, j):\r\n    char = board[i][j]\r\n    def count_length(delta_x, delta_y):\r\n    x, y, count = i + delta_x, j + delta_y, 0\r\n    while 0 <= x < size and 0 <= y < size and board[x][y] == char:\r\n    x, y, count = x + delta_x, y + delta_y, count + 1\r\n    return count\r\n    search_pairs = (((- 1, 0), (1, 0)), ((0, 1), (0, - 1)),\r\n                    ((1, 1), (- 1, - 1)), ((- 1, 1), (1, - 1)))\r\n    for a, b in search_pairs:\r\n    if count_length(a[0], a[1]) + 1 + count_length(b[0], b[1]) >= connect_size:\r\n        return char\r\n    return ''\r\n    for m in moves:\r\n    char, player = m . split('_')\r\n    i = char_to_index[char]\r\n    j = board[i]. index(' ')\r\n    board[i][j] = player\r\n    winner = check_for_winner(i, j)\r\n    if winner:\r\n        break\r\n    return winner if winner else \"Draw\"\r\n",
  "5ba47374b18e382069000052": "from bisect import bisect_left\nfrom math import sqrt\n\n\ndef min_remove(xs):\n    xs = sorted(xs)\n    return min(bisect_left(xs, sqrt(x)) + nr for nr, x in enumerate(reversed(xs)))\n",
  "5b483e70a4bc16eda40000f9": "def longest_bouncy_list(arr):\r\n    sub, maxSub = [], []\r\n    for v in arr:\r\n    if not sub or v != sub[- 1] and (len(sub) == 1 or (sub[- 1] - sub[- 2]) * (sub[- 1] - v) > 0):\r\n    sub . append(v)\r\n    else:\r\n    sub = sub[- 1:] + [v] if v != sub[- 1] else [v]\r\n\r\n    if len(sub) > len(maxSub):\r\n        maxSub = sub\r\n    return maxSub\r\n",
  "596d93bd9b6a5df4de000049": "def string_hash(s):\r\n    a = sum(ord(c) for c in s)\r\n    b = sum(ord(b) - ord(a) for a, b in zip(s, s[1:]))\r\n    c = (a | b) & (~ a << 2)\r\n    return c ^ (32 * (s . count(\" \") + 1))\r\n",
  "5b9e29dc1d5ed219910000a7": "def subcuboids(x, y, z):\r\n    return x * y * z * (x + 1) * (y + 1) * (z + 1) / / 8\r\n",
  "5b258cf6d74b5b7105000035": "from collections import defaultdict\n\n\ndef find_most_adjacent(grid):\n\n    seeds, seens, N = defaultdict(list), set(), len(grid)\n\n    for x, row in enumerate(grid):\n    for y, v in enumerate(row):\n\n    if (x, y) in seens:\n        continue  # Already filled, go to the next\n    seeds[v]. append(0)  # Initiate the new seed count\n    bag = {(x, y)}  # New flood-fill seed\n    while bag:\n    seens |= bag  # Archive\n    seeds[v][- 1] += len(bag)  # Update domain count\n    bag = {(xx, yy) for xx, yy in ((x + dx, y + dy) for x, y in bag  # Get neighbours\n                                   for dx, dy in [(0, 1), (0, - 1), (1, 0), (- 1, 0)])\n           if 0 <= xx < N and 0 <= yy < N  # Neighbours in the grid...\n           and v == grid[xx][yy] and (xx, yy) not in seens}  # ...with the seed value and not already filled\n    # Seek for the highest count of the lowest seed integer\n    return max(((k, max(lst)) for k, lst in seeds . items()), key=lambda t: (t[1], - t[0]))\n",
  "59d727d40e8c9dd2dd00009f": "import re\r\nPATTERN = re . compile(r'([\\d.]+)[^\\w\\n]*([a-zA-Z]+)[^\\w\\n]*([\\d.]+)')\r\n\r\n\r\ndef balance(book):\r\n    balance, lst, (b, s) = 0, [], book . split('\\n', 1)\r\n    iBal = balance = float(next(re . finditer(r'[\\d.]+', b)). group())\r\n\r\n    lst . append(\"Original Balance: {:.2f}\" . format(balance))\r\n    for num, item, amount in PATTERN . findall(s):\r\n    amount = float(amount)\r\n    balance -= amount\r\n    lst . append(\"{} {} {:.2f} Balance {:.2f}\" . format(\r\n        num, item, amount, balance))\r\n\r\n    lst . append(\"Total expense {:.2f}\\r\\nAverage expense {:.2f}\" . format(\r\n        iBal - balance, (iBal - balance) / (len(lst) - 1)))\r\n    return '\\r\\n' . join(lst)\r\n",
  "5b40b666dfb4291ad9000049": "from cmath import rect, polar\r\nfrom math import degrees, radians\r\n\r\n\r\ndef solve(a, b, c, alpha, beta, gamma):\r\n    dist, angle = polar(rect(a, radians(alpha)) + rect(b,\r\n                        radians(beta + 90)) + rect(c, radians(gamma + 180)))\r\n    degree, temp = divmod(degrees(angle) * 60, 60)\r\n    minute, temp = divmod(temp * 60, 60)\r\n    return [round(dist), degree, minute, int(temp)]\r\n",
  "59d9d8cb27ee005972000045": "import xml . etree . ElementTree as ET\r\n\r\n\r\ndef catalog(s, article):\r\n    root = ET . fromstring('<cat>' + s + '</cat>')\r\n\r\n    resp = []\r\n\r\n    for child in root:\r\n    name = child . find('name'). text\r\n    price = child . find('prx'). text\r\n    quantity = child . find('qty'). text\r\n    if article in name:\r\n    resp . append(name + ' > prx: $' + price + ' qty: ' + quantity)\r\n    if resp:\r\n    return '\\r\\n' . join(resp)\r\n    else:\r\n    return 'Nothing'\r\n",
  "5b0737c724c0686bf8000172": "def create_report(names):\r\n    result = {}\r\n\r\n    for name in names:\r\n    if name . startswith(\"Labrador Duck\"):\r\n    return [\"Disqualified data\"]\r\n\r\n    name = name . upper(). replace(\"-\", \" \"). split()\r\n    count = int(name . pop())\r\n\r\n    if len(name) == 1:\r\n        code = name[0][: 6]\r\n    elif len(name) == 2:\r\n        code = name[0][: 3] + name[1][: 3]\r\n    elif len(name) == 3:\r\n        code = name[0][: 2] + name[1][: 2] + name[2][: 2]\r\n    elif len(name) == 4:\r\n        code = name[0][0] + name[1][0] + name[2][: 2] + name[3][: 2]\r\n\r\n    if code in result:\r\n        result[code] += count\r\n    else:\r\n        result[code] = count\r\n    return sum([[name, result[name]] for name in sorted(result)], [])\r\n",
  "59de1e2fe50813a046000124": "import re\r\n\r\n\r\ndef change(data, new_program, new_version):\r\n    try:\r\n    curr_phone = re . search(\r\n        r'^Phone\\: (\\+1-\\d{3}-\\d{3}-\\d{4})$', data, re . M). group(1)\r\n    curr_version = re . search(\r\n        r'^Version\\: (\\d+\\.\\d+)$', data, re . M). group(1)\r\n    except:\r\n    return 'ERROR: VERSION or PHONE'\r\n    return 'Program: {} Author: g964 Phone: +1-503-555-0090 Date: 2019-01-01 Version: {}' . format(new_program, new_version if curr_version != '2.0' else curr_version)\r\n",
  "5baa25f3246d071df90002b7": "def segments(m, arr):\r\n    return [i for i in range(m + 1) if not any(a <= i <= b for a, b in arr)]\r\n",
  "5ba38ba180824a86850000f7": "def solve(arr):\r\n    re = []\r\n    for i in arr[:: - 1]:\r\n    if i not in re:\r\n    re . append(i)\r\n    return re[:: - 1]\r\n",
  "5b3cdb419c9a75664e00013e": "from bisect import bisect\r\n a = [0]\r\n   for n in range(1, 150):\r\n        a . append((a[- 1] + 1) * n)\r\n    total_var = lambda n , c : [bisect (a , n ), a [len (c )]]",
  "5b4a9158f1d553b3be0000c0": "import numpy as np\r\n\r\n\r\ndef cramer_solver(* args):\r\n    m, v = map(np . array, args)\r\n\r\n    if set(m . shape) != {len(v)}:\r\n        return \"Check entries\"\r\n    det = round(np . linalg . det(m))\r\n    subDets = []\r\n    for y in range(len(v)):\r\n    stored = list(m[:, y])\r\n    m[:, y] = v\r\n    subDets . append(round(np . linalg . det(m)))\r\n    m[:, y] = stored\r\n    return (\"Indeterminate or Unsolvable\" if set(subDets) == {0} else\r\n            \"Unsolvable\" if 0 in subDets else\r\n            [det] + subDets)\r\n",
  "5b713d7187c59b53e60000b0": "def sum_part(n):\r\n    m, p, q, r, s = 1, 1, 1, 0, n\r\n    while n > 9:\r\n    n, d = divmod(n, 10)\r\n    r += d * p\r\n    p *= 10\r\n    if d:\r\n        m = 1\r\n    else:\r\n        m *= 2\r\n    s += q * n + m * memo[r]\r\n    q *= 2\r\n    return s\r\n    from collections import defaultdict\r\n    qualified = defaultdict(list)\r\n    memo = {n: n for n in range(10)}\r\n    for n in range(10, 10 * * 6):\r\n    memo[n] = sum_part(n)\r\n    if memo[n] > n:\r\n    k, r = divmod(n, memo[n] - n)\r\n    if not r:\r\n        qualified[k]. append(memo[n] - n)\r\n\r\n    from bisect import bisect\r\n    def next_higher(n, k):\r\n    return qualified[k][bisect(qualified[k], n + 1)]\r\n",
  "59c6f43c2963ecf6bf002252": "from preloaded import Node\n\n\ndef swap_pairs(head):\n    if head == None or head . next == None:\n    return head\n    A, B, C = head, head . next, head . next . next\n    B . next = A\n    A . next = swap_pairs(C)\n\n    return B\n",
  "569df0bc5565b243d500002b": "from math import lcm\r\n\r\n\r\ndef find_us(n1, n2, k, prime_factors, digits):\r\n\r\n    step, digits, end = 1, '' . join(map(str, digits)), 1 + n1 + k * n2\r\n    for p in prime_factors:\r\n    step = lcm(step, p)\r\n    while n1 % step:\r\n    n1 += 1\r\n    return [i for i in range(n1, end, step) if all(j in str(i) for j in digits)]\r\n",
  "57d99f6bbfcdc5b3b0000286": "from itertools import combinations\r\n\r\n\r\ndef isRect(a, b, c):\r\n    X, Y, Z = sorted(sum((q - p) * * 2 for p, q in zip(p1, p2)) for p1, p2 in [(a, b), (a, c), (b, c)])\r\n    return X + Y == Z\r\n    def count_rect_triang(points):\r\n    return sum(isRect(* c) for c in combinations(set(map(tuple, points)), 3))\r\n",
  "569f6ad962ff1dd52f00000d": "def sel_quot(a, m, s=0): return sorted((n / d, (n, d)) for d, n in __import__('itertools'). combinations(\n    sorted(set(a)), 2) if n % d == 0 and n / d >= m and (not s or n / d % 2 == (s[1] == \"d\")))\n",
  "5b4dee5d05f04bba43000138": "def f(n):\r\n    dr = sum(map(int, str(n)))\r\n    deep = sum(d * d for d in map(int, str(dr)))\r\n    return (- dr - deep, n)\r\n\r\n    def sorted_comm_by_digs(arr1, arr2):\r\n    return sorted(set(arr1) & set(arr2), key=f)\r\n",
  "5b1e2c04553292dacd00009e": "from gmpy2 import is_prime as ip\r\n\r\n\r\ndef ok(w):\r\n    a, b = w\r\n    return any(ip(ord(j) + b) for j in a)\r\n    def prime_word(a):\r\n    return [1 if ok(i) else 0 for i in a]\r\n",
  "5b8ea6bbcc7c0335f80001a9": "from collections import Counter\r\nfrom math import gcd\r\n\r\n\r\ndef find_prob(balls_set, event):\r\n    cntr = Counter(balls_set)\r\n    nm, dn, ln = 1, 1, len(balls_set)\r\n\r\n    for vtn in map(ABBREVIATIONS . get, event):\r\n    nm *= cntr[vtn]\r\n    dn *= ln\r\n    cntr[vtn] -= 1\r\n    ln -= 1\r\n    g = gcd(nm, dn)\r\n    return [nm / / g, dn / / g] if nm else ['Impossible']\r\n",
  "5ba178be875de960a6000187": "def find_lowest_int(k1):\r\n    k2, n = k1 + 1, 1\r\n    def digits(n):\r\n    return sorted(str(n))\r\n\r\n    while digits(n * k1) != digits(n * k2):\r\n    n += 1\r\n    return n\r\n",
  "5ba068642ab67b95da00011d": "def micro_world(bacteria, k):\r\n    return sum(1 for e in bacteria if not [j for j in bacteria if e < j <= e + k])\r\n",
  "5a93754d0025e98fde000048": "from itertools import permutations\r\n\r\n\r\ndef play_flou(game_map):\r\n    flou = Flou(parse_grid(game_map))\r\n    moves = flou . solve()\r\n    return format_moves(moves) if moves else False\r\n    def format_moves(moves):\r\n    dirs = {1: 'Right', 1j: 'Down', - 1: 'Left', - 1j: 'Up'}\r\n    return [[int(pos . imag), int(pos . real), dirs[dir_]] for pos, dir_ in moves]\r\n\r\n    def parse_grid(game_map):\r\n    map_ = game_map . splitlines()\r\n    return [[int(map_[y][x] == 'B') for x in range(1, len(map_[0]) - 1)] for y in range(1, len(map_) - 1)]\r\n\r\n    class Flou:\r\n    def __init__(self, map_):\r\n    self . map_ = map_\r\n    self . set_grid()\r\n    self . rotations = {1: 1j, 1j: - 1, - 1: - 1j, - 1j: 1}\r\n\r\n    def solve(self):\r\n    all_blocks = permutations(self . blocks)\r\n    for blocks in all_blocks:\r\n    solved = self . dfs(blocks, 0, ())\r\n    if solved:\r\n    return solved\r\n    return False\r\n    def dfs(self, blocks, i, all_moves):\r\n    if i == len(blocks):\r\n    return all_moves if all(v for v in self . grid . values()) else False\r\n    block = blocks[i]\r\n    for move in self . rotations:\r\n    if self . valid_move(move, block):\r\n    moves = self . get_moves(move, block)\r\n    valid_moves = self . dfs(blocks, i + 1, all_moves + ((block, move),))\r\n    if valid_moves:\r\n    return valid_moves\r\n    else:\r\n    self . set_moves(moves, 0)\r\n    return False\r\n    def get_moves(self, move, block):\r\n    moves = []\r\n    running = True\r\n    while running:\r\n    block += move\r\n    moves . append(block)\r\n    self . grid[block] = 1\r\n    if not self . valid_move(move, block):\r\n    next_move = self . rotations[move]\r\n    if self . valid_move(next_move, block):\r\n    move = next_move\r\n    else:\r\n    running = False\r\n    return moves\r\n    def set_moves(self, moves, val):\r\n    for move in moves:\r\n    self . grid[move] = val\r\n    def valid_move(self, move, block):\r\n    return not self . grid . get(block + move, 1)\r\n\r\n    def set_grid(self):\r\n    self . blocks = []\r\n    self . grid = {}\r\n    for y, row in enumerate(self . map_):\r\n    for x, sq in enumerate(row):\r\n    pos = x + 1j * y\r\n    self . grid[pos] = sq\r\n    if sq:\r\n    self . blocks . append(pos)\r\n",
  "5ba0adafd6b09fd23c000255": "def run(tricks):\r\n\r\n    def score(attempt):\r\n    total_points = 0\r\n    total_probability = 1\r\n    for trick in tricks:\r\n    points = trick[\"points\"]\r\n    mult_base = trick[\"mult_base\"]\r\n    quantity = attempt[trick[\"name\"]]\r\n    probability = trick[\"probability\"]\r\n    total_points += points * (mult_base * * quantity - 1) / (mult_base - 1)\r\n    total_probability *= probability * * quantity\r\n    return total_points * total_probability\r\n    def best(attempt):\r\n    return max([{k: max(0, v + i) if k == trick else v for k, v in attempt . items()} for trick in attempt for i in (1, - 1)], key=score)\r\n\r\n    current_attempt = {trick[\"name\"]: 0 for trick in tricks}\r\n    next_attempt = best(current_attempt)\r\n    while True:\r\n    if score(next_attempt) > score(current_attempt):\r\n    current_attempt = next_attempt\r\n    next_attempt = best(current_attempt)\r\n    else:\r\n    return {k: v for k, v in current_attempt . items() if v}\r\n",
  "5b8dc84b8ce20454bd00002e": "def is_tune(notes):\r\n    return bool(notes) and any(\r\n        all((n + i) % 12 in {0, 2, 4, 5, 7, 9, 11} for n in notes)\r\n        for i in range(12)\r\n    )\r\n",
  "5b9cf881d6b09fc9ee0002b1": "from math import sqrt, ceil\n# 1st group spends in the hotel s days,\n# 2nd group - s + 1 days,\n# 3rd group - s + 2 days,\n# ...,\n# nth group - s + n - 1 days.\n#\n# The total number of days for n groups: n * (s + s + n - 1) / 2\n# (by the formula of arithmetic series).\n# Let d be the last day of the nth group. Then\n# n * (s + s + n - 1) / 2 = d,\n# n**2 + (2*s-1)*n - 2*d = 0,\n# The only possible root of this quadratic equation equals\n# 1/2 * (-p + sqrt(p**2 - 4*q), where p = 2*s - 1, q = 2*d.\n# Thus, n = (1 - 2*s + sqrt((2*s - 1)**2 + 8*d)) / 2.\n# But if d is not the last day of the group n, then n will be fractional,\n# and we have to round it up (get the ceiling of n).\n\n\ndef group_size(s, d):\n    n = ceil((1 - 2 * s + sqrt((2 * s - 1) * * 2 + 8 * d)) / 2)\n    return s + n - 1\n",
  "5a96064cfd57777828000187": "from itertools import count\r\n\r\n\r\nclass Bulb (set):\r\n    def __init__(self, x, y): super(). __init__(); self . pos = x, y\r\n    def __hash__(self): return hash(self . pos)\r\n    def __eq__(self, o): return self . pos == o . pos\r\n    def __str__(self): return \"({},{})\" . format(* self . pos)\r\n\r\n    def switch_bulbs(s):\r\n\r\n    def findNeighs(x, y):\r\n    for dx, dy in moves:\r\n    for n in count(1):\r\n    i, j = pos = x + n * dx, y + n * dy\r\n    if not (0 <= i < X and 0 <= j < Y):\r\n        break\r\n    if pos in bulbs:\r\n        yield bulbs[pos]\r\n        break\r\n\r\n    def solveDFS():\r\n    if len(path) == len(bulbs):\r\n        return 1\r\n    cnds = set(path[- 1] if path else bulbs . values())\r\n    while cnds:\r\n    b = min(cnds, key=len)\r\n    if not b and len(path) != len(bulbs) - 1:\r\n        break\r\n    cnds . discard(b)\r\n    path . append(b)\r\n    for neigh in b:\r\n        neigh . discard(b)\r\n    if solveDFS():\r\n        return 1\r\n    for neigh in b:\r\n        neigh . add(b)\r\n    path . pop()\r\n\r\n    # ---------------------------------------------------------------\r\n    moves = [(dx, dy) for dx in range(- 1, 2)\r\n             for dy in range(- 1, 2) if dx or dy]\r\n    board = list(map(list, re . sub(r'[-+|]+', '', s). strip(). splitlines()))\r\n    X, Y = len(board), len(board[0])\r\n    bulbs = {(x, y): Bulb(x, y) for x, r in enumerate(board)\r\n             for y, c in enumerate(r) if c == 'B'}\r\n    for b in bulbs . values():\r\n    b . update(findNeighs(* b . pos))\r\n\r\n    path = []\r\n    return solveDFS() and [b . pos for b in path]\r\n",
  "5b5ce2176d0db7331f0000c0": "from math import acos, pi, sqrt\r\n\r\n\r\ndef area(r, R):\r\n    # http://mathworld.wolfram.com/Circle-CircleIntersection.html\r\n    return (\r\n        r * * 2 * acos(r / 2 / R)\r\n        + R * * 2 * acos(1 - r * r / 2 / R / R)\r\n        - sqrt(r * r * (R + R - r) * (R + R + r)) / 2\r\n    )\r\n\r\n    def get_rope_length(diameter, ratio):\r\n    if ratio == 1:\r\n    return diameter\r\n    elif ratio * diameter == 0:\r\n    return 0\r\n    R = diameter / 2\r\n    wanted = pi * R * R * ratio\r\n    lo, hi = 0, diameter + 1\r\n    while lo < hi - 1:\r\n    m = (lo + hi) / / 2\r\n    a = area(m, R)\r\n    if a < wanted:\r\n    lo = m\r\n    else:\r\n    hi = m\r\n    return lo\r\n",
  "5b1fa8d92ae7540e700000f0": "TABLE = str . maketrans('0123456789', '9876543210')\r\n\r\n\r\ndef code(* args):\r\n    return sum(map(lambda n: int(str(n). translate(TABLE)), args))\r\n",
  "59f4a0acbee84576800000af": "from statistics import mean\nfrom itertools import combinations\n\n\ndef pos_average(s):\n    return mean(a == b for combo in combinations(s . split(', '), 2) for a, b in zip(* combo)) * 100.\n",
  "5562aa03004710f3ab0001d5": "def connected_values(mat, val, coord):\r\n    if mat[coord[0]][coord[1]] != val:\r\n        return set()\r\n\r\n    Q, seen = [coord], {coord}\r\n\r\n    while Q:\r\n    r, c = Q . pop()\r\n    for i, j in ((0, 1), (1, 0), (0, - 1), (- 1, 0), (1, 1), (1, - 1), (- 1, 1), (- 1, - 1)):\r\n    if (0 <= r + i <= len(mat) - 1) and (0 <= c + j <= len(mat[0]) - 1) and \\\r\n            mat[r + i][c + j] == val and (r + i, c + j) not in seen:\r\n    Q . append((r + i, c + j))\r\n    seen . add((r + i, c + j))\r\n\r\n    return seen\r\n",
  "5b254b2225c2bb99c500008d": "def promenade(choices):\r\n\r\n    def compute(): return l + r, m + s\r\n    l, m, r, s = 1, 0, 0, 1\r\n    for c in choices:\r\n    if c == 'L':\r\n        l, m = compute()\r\n    else:\r\n        r, s = compute()\r\n\r\n    return compute()\r\n",
  "577f57d7e555335c0d0003a9": "PRODUCT_STRING = \" Product: {} Value: {:>6}\"\nTOTAL_STRING = \"Total:{:>32}\"\nGROUP_STRING = \"\"\"Group: {} \n {} \n Group total:{:>22} \n \"\"\"\n\n\ndef generate_report(records):\n    ansLst, cGrp, cProd, cTot = [], 0, 0, 0\n    grpLst, records = [], list(records)\n\n    for (prod, grp, val), (nextProd, nextGrp, _) in zip(records, list(records[1:]) + [(\"\", \"\", 0)]):\n\n    cGrp += val\n    cProd += val\n    cTot += val\n    if (prod, grp) != (nextProd, nextGrp):  # Change of product or group after this one\n    grpLst += [PRODUCT_STRING . format(prod, cProd)]\n    cProd = 0\n    if grp != nextGrp:  # end of a group after this one\n    ansLst += [GROUP_STRING . format(grp, '\\n' . join(grpLst), cGrp)]\n    grpLst, cGrp, cProd = [], 0, 0\n    ansLst += [TOTAL_STRING . format(cTot)]\n    ans = '\\n' . join(ansLst)\n    return ans\n",
  "5b76a34ff71e5de9db0000f2": "from datetime import datetime\r\n\r\n\r\ndef solve(arr):\r\n    dts = [datetime(2000, 1, 1, * map(int, x . split(':')))\r\n           for x in sorted(arr)]\r\n    delta = max(int((b - a). total_seconds() - 60)\r\n                for a, b in zip(dts, dts[1:] + [dts[0]. replace(day=2)]))\r\n    return '{:02}:{:02}' . format(* divmod(delta / / 60, 60))\r\n",
  "5b2c2c95b6989da552000120": "import re\r\nH, W = 6, 8\r\nKEYBOARD = \"abcde123fghij456klmno789pqrst.@0uvwxyz_/* \"\r\nMAP = {c: (i / / W, i % W) for i, c in enumerate(KEYBOARD)}\r\n\r\n\r\ndef manhattan(* pts):\r\n    dxy = [abs(z2 - z1) for z1, z2 in zip(* pts)]\r\n    return 1 + sum(min(dz, Z - dz) for dz, Z in zip(dxy, (H, W)))\r\n\r\n    def toggle(m):\r\n    ups, end = m . groups()\r\n    # Toggle Shift ON if uppercase presents, and then OFF if lowercase after (or end of the string)\r\n    return f'* { ups . lower ()} * { end } '\r\n\r\n    def tv_remote(words):\r\n     # Strip any useless toggle OFF at the end\r\n    reWords = re . sub(r'([A-Z][^a-z]*)([a-z]?)', toggle, words). rstrip('*')\r\n    return sum(manhattan(MAP[was], MAP[curr]) for was, curr in zip('a' + reWords, reWords))\r\n",
  "5b277e94b6989dd1d9000009": "import re\r\n\r\n\r\ndef tv_remote(words):\r\n    letters = {c: (x, y)\r\n               for y, row in enumerate((\r\n                   \"abcde123\",\r\n                   \"fghij456\",\r\n                   \"klmno789\",\r\n                   \"pqrst.@0\",\r\n                   \"uvwxyz_/\",\r\n                   \"\u21e7 \"))\r\n               for x, c in enumerate(row)}\r\n    words = re . sub(r'((?:^|[a-z])[^A-Z]*)([A-Z])', r'\\1\u21e7\\2', words)\r\n    words = re . sub(r'([A-Z][^a-z]*)([a-z])', r'\\1\u21e7\\2', words)\r\n    words = words . lower()\r\n    return sum(\r\n        abs(letters[c1][0] - letters[c2][0]) +\r\n        abs(letters[c1][1] - letters[c2][1]) + 1\r\n        for c1, c2 in zip(\"a\" + words, words))\r\n",
  "5b165654c8be0d17f40000a3": "def solve(n):\r\n    moves = []\r\n    for a, b in [\"25\", \"75\", \"50\", \"00\"]:\r\n    s = str(n)[:: - 1]\r\n    x = s . find(a)\r\n    y = s . find(b, x + 1 if a == \"0\" else 0)\r\n    if x == - 1 or y == - 1:\r\n    continue\r\n    moves . append(x + y - (x > y) - (a == b))\r\n    s = s . replace(a, \"\", 1). replace(b, \"\", 1)\r\n    l = len(s . rstrip(\"0\"))\r\n    if l:\r\n    moves[- 1] = moves[- 1] + (len(s) - l)\r\n    elif s:\r\n    moves . pop()\r\n    return min(moves, default=- 1)\r\n",
  "5b6b67a5ecd0979e5b00000e": "from collections import Counter\r\n\r\n\r\ndef mystery_range(s, n):\r\n    counts = Counter(s)\r\n    for num in range(1, 100):\r\n    if counts == Counter('' . join(map(str, range(num, num + n)))):\r\n    if all(str(i) in s for i in range(num, num + n)):\r\n    return [num, num + n - 1]\r\n",
  "5b6fcd9668cb2e282d00000f": "from string import ascii_uppercase, ascii_lowercase\n s, D = \"#+:. \", {}\n   for i, c in enumerate(s):\n        D[c] = s[i:]\n    for c in ascii_uppercase:\n        D [c] = c + c . lower () + s\n    for c in ascii_lowercase:\n        D[c] = c + s\n\n    def generation_loss (orig, copy):\n    return len (orig ) == len (copy ) and all (y in D . get (x , x ) for x , y in zip (orig , copy ))",
  "5b7d2cca7a2013f79f000129": "from heapq import *\r\n\r\n\r\ndef lemming_battle(battlefield, green, blue):\r\n    hg, hb = ([- v for v in lst] for lst in (green, blue))\r\n    heapify(hg)\r\n    heapify(hb)\r\n\r\n    while hb and hg:\r\n    tmp_b, tmp_g = [], []\r\n    for _ in range(min(battlefield, len(hg), len(hb))):\r\n    cmp = heappop(hg) - heappop(hb)\r\n    if cmp < 0:\r\n        tmp_g . append(cmp)\r\n    elif cmp > 0:\r\n        tmp_b . append(- cmp)\r\n    for lem in tmp_b:\r\n        heappush(hb, lem)\r\n    for lem in tmp_g:\r\n        heappush(hg, lem)\r\n\r\n    winner, lst = (\"Green\", hg) if hg else (\"Blue\", hb)\r\n    survivors = ' ' . join(str(- v) for v in sorted(lst))\r\n\r\n    return (\"Green and Blue died\" if not hg and not hb else\r\n            f\" { winner } wins: { survivors } \")\r\n",
  "5b997b066c77d521880001bd": "def all_permuted(n):\r\n    a, b = 0, 1\r\n    for i in range(1, n):\r\n        a, b = b, (i + 1) * (a + b)\r\n    return a\r\n",
  "5aa3e2b0373c2e4b420009af": "def tops(msg):\r\n    n = len(msg)\r\n    res, i, j, k = \"\", 2, 2, 7\r\n    while i < n:\r\n    res = msg[i: i + j] + res\r\n    i, j, k = i + k, j + 1, k + 4\r\n    return res\r\n",
  "5b983dcd660b1227d00002c9": "INITIAL = [0, 4, 10, 20, 35, 56, 83, 116, 155, 198, 244, 292]\r\n\r\n\r\ndef solve(n):\r\n    return INITIAL[n] if n < 12 else 292 + (49 * (n - 11))\r\n",
  "5b2cd515553292a4ff0000c2": "from itertools import count, permutations\r\n\r\n\r\ndef next_perfectsq_perm(limit_below, k):\r\n    for n in count(int(limit_below * * .5) + 1):\r\n    s = str(n * * 2)\r\n    if '0' not in s:\r\n    sq_set = {x for x in (int('' . join(p)) for p in permutations(s)) if (x * * .5). is_integer()}\r\n    if len(sq_set) == k:\r\n    return max(sq_set)\r\n",
  "5b94d7eb1d5ed297680000ca": "DIRS = {'Left': 'Right', 'Right': 'Left'}\r\n\r\n\r\ndef solve(arr):\r\n    lst, prevDir = [], 'Begin'\r\n    for cmd in arr[:: - 1]:\r\n    d, r = cmd . split(' on ')\r\n    follow = DIRS . get(prevDir, prevDir)\r\n    prevDir = d\r\n    lst . append(f' { follow } on { r } ')\r\n    return lst\r\n",
  "5b93636ba28ce032600000b7": "def solve(count, ball_number):\n    \"\"\" \n    Return the position of the `ball_number` after the game with `count` balls \n    :param count: Number of balls \n    :type count: int \n    :param ball_number: Number of ball to be found in the end \n    :type ball_number: int \n    :return: Return the index of the ball `ball_number` at the end of the game \n    :rtype: int \n    \"\"\"\n    assert isinstance(count, int)\n    assert isinstance(ball_number, int)\n\n    balls = list(range(count))\n    for idx in range(count):\n    balls = balls[: idx] + balls[idx:][:: - 1]\n    return balls . index(ball_number)\n",
  "5b93fecd8463745630001d05": "from math import ceil\n\n\ndef snail(column, day, night):\n    return max(ceil((column - night) / (day - night)), 1)\n",
  "5b93f268563417c7ed0001bd": "def ever(n):\r\n    s = str(n)\r\n    C = [s . count('3'), s . count('5'), s . count('8')]\r\n    if sum(C) == len(s) and sorted(C) == C:\r\n    return True\r\n    return False\r\n    D = {i for i in range(1000000) if ever(i)}\r\n\r\n    def solve(a, b):\r\n    return len({e for e in D if e >= a and e <= b})\r\n",
  "5b7dfd8cbfae24e5f200004d": "tbl = str . maketrans('\u258d ', '10')\r\n\r\n\r\ndef read_barcode(barcode):\r\n    txt = barcode . translate(tbl)\r\n    l = (LEFT_HAND['' . join(xs)]\r\n         for xs in zip(* [iter(txt[3: 7 * 6 + 3])] * 7))\r\n    r = (RIGHT_HAND['' . join(xs)]\r\n         for xs in zip(* [iter(txt[- 7 * 6 - 3: - 3])] * 7))\r\n    return '{} {}{}{}{}{} {}{}{}{}{} {}' . format(* l, * r)\r\n",
  "55f4ad47ada1dd22f1000088": "import re\r\nL_DIGITS = {\r\n    \"0001101\": \"0\",\r\n    \"0011001\": \"1\",\r\n    \"0010011\": \"2\",\r\n    \"0111101\": \"3\",\r\n    \"0100011\": \"4\",\r\n    \"0110001\": \"5\",\r\n    \"0101111\": \"6\",\r\n    \"0111011\": \"7\",\r\n    \"0110111\": \"8\",\r\n    \"0001011\": \"9\"}\r\n\r\n\r\ndef barcode_scanner(barcode):\r\n    leftized = barcode[3: 45] + barcode[50: -\r\n                                        3]. translate(str . maketrans(\"01\", \"10\"))\r\n    return re . sub('|' . join(L_DIGITS . keys()), lambda m: L_DIGITS[m . group(0)], leftized)\r\n",
  "58477f76ad2567b465000153": "from collections import deque\r\nfrom itertools import chain\r\nblueprint = [* map('' . join, zip(* '''\\ \r\n + + \r\n +o o+ \r\n + u + \r\n + ~ + \r\n | \r\n +-o-+ \r\n /| o |\\\\ \r\n +-o-+ \r\n ''' . splitlines()))]\r\n\r\n\r\ndef person(leg):\r\n    yield from (col + ('I' . rjust(leg, '|') if i in (2, 4) else ' ' * leg) for i, col in enumerate(blueprint))\r\n\r\n    def arms(x, y):\r\n    mini = min(x or y, y or x) + 1\r\n    if x:\r\n    if y:\r\n        yield from ('\\\\' . ljust(i) for i in range(x + 1, y + 1, - 1))\r\n    yield f\"_ { ' ' * mini } \"\r\n    if y:\r\n    yield f\"_ { ' ' * mini } \"\r\n    if x:\r\n        yield from ('/' . ljust(i) for i in range(x + 2, y + 2))\r\n\r\n    def pattern(legs):\r\n    q = deque()\r\n    for i, x in enumerate(sorted(legs, reverse=True)):\r\n    (deque . append, deque . appendleft)[i & 1](q, x)\r\n\r\n    it, res = iter(q), []\r\n    res . append(arms(None, next(it)))\r\n    for x, y in zip(q, chain(it, [None])):\r\n    res . append(person(x))\r\n    res . append(arms(x, y))\r\n\r\n    max_size = max(legs) + 8\r\n    return '\\n' . join(map('' . join, zip(* (x . rjust(max_size) for x in chain . from_iterable(res)))))\r\n",
  "58281843cea5349c9f000110": "from itertools import cycle\r\nfrom math import sqrt\r\n\r\n\r\ndef make_triangle(start, end):\r\n    rows = sqrt(8 * (end - start) + 9) / 2 - .5\r\n    if not rows . is_integer():\r\n    return ''\r\n    rows = int(rows)\r\n    row, col, value = - 1, - 1, start\r\n    directions = cycle([(1, 0), (0, - 1), (- 1, 1)])\r\n    triangle = [[''] * n for n in range(1, rows + 1)]\r\n\r\n    for times in range(rows, 0, - 1):\r\n    cur_dir = next(directions)\r\n\r\n    for _ in range(times):\r\n    row += cur_dir[0]\r\n    col += cur_dir[1]\r\n\r\n    triangle[row][col] = str(value % 10)\r\n    value += 1\r\n    return \"\\n\" . join(' ' * (rows - i - 1) + ' ' . join(r) for i, r in enumerate(triangle))\r\n",
  "5b65c47cbedf7b69ab00066e": "def build_trie(* words):\r\n    root = {}\r\n    for word in words:\r\n    branch = root\r\n    length = len(word)\r\n    for i in range(1, length + 1):\r\n    length -= 1\r\n    key = word[: i]\r\n    if key not in branch:\r\n    branch[key] = None\r\n    if length and not branch[key]:\r\n    branch[key] = {}\r\n    branch = branch[key]\r\n    return root\r\n",
  "5b8c055336332fce3d00000e": "S, SS, SUM = [0], {0}, [0]\r\n\r\n\r\ndef rec(n):\r\n    while len(S) <= n:\r\n    v = S[- 1] - len(S)\r\n    if v <= 0 or v in SS:\r\n        v += 2 * len(S)\r\n    S . append(v)\r\n    SS . add(v)\r\n    SUM . append(SUM[- 1] + v)\r\n    return SUM[n - 1]\r\n",
  "5b8be3ae36332f341e00015e": "from itertools import permutations\n\n\ndef solve(s, k):\n    return sum(not v % k for v in map(int, map('' . join, permutations(s . split(), 2))))\n",
  "5b883cdecc7c03c0fa00015a": "def f(u): return [sum(map(ord, u)) * i % 256 for i in [1, 2, 3, 4]]\n",
  "5b853229cfde412a470000d0": "def twice_as_old(dad_years_old, son_years_old):\r\n    return abs(dad_years_old - 2 * son_years_old)\r\n",
  "5b83c1c44a6acac33400009a": "def solve(st, k):\r\n    length = len(st) - k\r\n    return max(int(st[i: i + length]) for i in range(k + 1))\r\n",
  "5b3e3ca99c9a75a62400016d": "import re\r\n\r\n\r\ndef mid_endian(n):\r\n    h = hex(n)[2:]. upper()\r\n    r = re . findall('..', '0' * (len(h) % 2) + h)\r\n    return \"\" . join(r[1:: 2][:: - 1] + r[0:: 2])\r\n",
  "5b432bdf82417e3f39000195": "from itertools import cycle\r\n\r\n\r\nclass Pong:\r\n    def __init__(self, max_score):\r\n    self . max_score = max_score\r\n    self . scores = {1: 0, 2: 0}\r\n    self . players = cycle((1, 2))\r\n\r\n    def game_over(self):\r\n    return any(score >= self . max_score for score in self . scores . values())\r\n\r\n    def play(self, ball_pos, player_pos):\r\n    if self . game_over():\r\n    return \"Game Over!\"\r\n    player = next(self . players)\r\n    if abs(ball_pos - player_pos) <= 3:\r\n    return \"Player {} has hit the ball!\" . format(player)\r\n    else:\r\n    self . scores[player] += 1\r\n    if self . scores[player] == self . max_score:\r\n    return \"Player {} has won the game!\" . format(next(self . players))\r\n    else:\r\n    return \"Player {} has missed the ball!\" . format(player)\r\n",
  "5b84d6d6b2f82f34d00000d7": "import itertools\nimport operator\n\n\ndef triangle(row):\n    # Explanation of approach:\n    # We associate each of the 3 colours/characters with a unique code: 0, 1, or 2.\n    # With this encoding and the rules given,\n    # we see that a pair of neighbours in one row will give rise in the next row\n    # to a colour whose code is the negated sum of the two neighbours' codes, reduced modulo 3.\n    # Applying this repeatedly starting with a row of length m + 1,\n    # we find that the code of the colour at the bottom tip of the triangle\n    # is just the dot product of the mth row (zero-indexing, always) of Pascal's triangle\n    # with the codes of the initial row of colours,\n    # the result negated if m is odd, and reduced modulo 3.\n    # Working modulo 3, Lucas's Theorem says that (m choose n),\n    # the nth value/coefficient in the mth row of Pascal's triangle,\n    # is congruent to the product of all (m_i choose n_i),\n    # where m_i and n_i are the ith base-3 digits of m and n, respectively,\n    # and (m_i choose n_i) is taken to be zero if m_i < n_i.\n    # Therefore nonzero coefficients appear precisely\n    # when each base-3 digit of n is no greater than the corresponding base-3 digit of m.\n    # Now, for such a coefficient, the factor (m_i choose n_i) is 2 if m_i == 2 and n_i == 1.\n    # Otherwise, the factor is 1.\n    # Therefore, for such a coefficient, if k denotes the number of pairs of corresponding base-3 digits of m and n\n    # that are equal to 2 and 1, respectively,\n    # then the coefficient is congruent to 2**k, which reduces to 1 if k is even or 2 if k is odd.\n    # We map our three colours/characters to our three codes.\n    colours = 'RGB'\n    code_for_colour = {colour: code for code, colour in enumerate(colours)}\n\n    # We determine m and its base-3 digit sequence (starting with the least significant digit).\n    m = len(row) - 1\n    m_base_3_digits = []\n    q = m\n    while q:\n    q, r = divmod(q, 3)\n    m_base_3_digits . append(r)\n\n    # For later use, we locate all 2s in the base-3 digit sequence of m.\n    positions_of_2s_in_m_base_3_digits = tuple(\n        position for position, digit in enumerate(m_base_3_digits) if digit == 2)\n\n    # We collect the first powers of 3, so that we can later quickly compute a number from its base-3 digit sequence.\n    # (Note: The only difference between my solution for the \"Insane Coloured Triangles\" kata and this one occurs here.\n    # Unlike the current kata, that one allowed use of Python 3.8, where itertools.accumulate's initial parameter first appeared.)\n    powers_of_3 = (1, * itertools . accumulate(itertools . repeat(3,\n                   len(m_base_3_digits) - 1), operator . mul))\n\n    # We will progressively compute the dot product of the vector of coefficients of the mth row of Pascal's triangle\n    # with the vector of codes of colours in the given initial row, reducing modulo 3.\n    reduced_dot_product = 0\n    # We need only consider the nonzero coefficients in the mth row of Pascal's triangle,\n    # so we visit all sequences of base-3 digits whose elements are no greater than the corresponding base-3 digits of m.\n    for n_base_3_digits in itertools . product(* (range(m_base_3_digit + 1) for m_base_3_digit in m_base_3_digits)):\n        # From the base-3 digit sequence we are now visiting, we compute the associated value of n.\n        # (m choose n) is nonzero.\n    n = sum(map(operator . mul, n_base_3_digits, powers_of_3))\n    # We look up the code of the colour at the nth position in the given initial row.\n    nth_code_in_row = code_for_colour[row[n]]\n    # Only nonzero codes will result in nonzero contributions to our dot product.\n    if nth_code_in_row:\n        # We determine the value of (m choose n) reduced modulo 3,\n        # multiply by the corresponding colour code in the given initial row,\n        # and update our partial reduced dot product.\n    nth_coefficient = sum(\n        n_base_3_digits[position] == 1 for position in positions_of_2s_in_m_base_3_digits) % 2 + 1\n    reduced_dot_product = (reduced_dot_product +\n                           nth_coefficient * nth_code_in_row) % 3\n    # If m is even, the dot product is congruent to the code of the colour at the bottom tip of the triangle,\n    # while for odd m, the negated dot product is congruent to the desired code.\n    # We thus determine the final code and return the associated colour character.\n    return colours[(- reduced_dot_product) % 3 if m % 2 else reduced_dot_product]\n",
  "5b47ba689c9a7591e70001a3": "def genNeigh(isNeum, arr, coords, d, var=0, idx=()):\r\n    depth = len(idx)\r\n    x = coords[depth]\r\n\r\n    if not (0 <= x < len(arr)):\r\n        raise IndexError()\r\n\r\n    low, up = - d + isNeum * var, d - isNeum * var + 1\r\n    for j in range(max(0, low + x), min(up + x, len(arr))):\r\n    indexes = idx + (j,)\r\n    if 0 <= j < len(arr) and indexes != coords:\r\n    if depth < len(coords) - 1:\r\n    yield from genNeigh(isNeum, arr[j], coords, d, var + abs(j - x), indexes)\r\n    else:\r\n    yield arr[j]\r\n\r\n    def get_neighbourhood(typ, arr, coords, d=1):\r\n    try:\r\n    return list(genNeigh(typ == 'von_neumann', arr, coords, d))\r\n    except IndexError:\r\n    return []\r\n",
  "5b756dc4049416c24f000762": "def match_probability(p, q):\n    # 4 Ways to Win:\n    # 1st = 4 - 0\n    # 2nd = 4 - 1\n    # 3rd = 4 - 2\n    # 4th = two in a row during \"overtime\" after 3-3\n    # Chance of p winning 4 - 0\n    prob_1 = p * * 4\n    # Chance of p winning 4 - 1\n    prob_2 = (4 * p * * 4 * (1 - p))\n\n    # Chance of p winning 4 - 2\n    prob_3 = (10 * p * * 4 * (1 - p) * * 2)\n\n    # Chance of p winning \"overtime\"\n    num = (20 * p * * 5 * (1 - p) * * 3)\n    denom = (1 - 2 * p * (1 - p))\n    prob_4 = num / denom\n    # Total chance of p winning\n    chance = prob_1 + prob_2 + prob_3 + prob_4\n    return chance, 1 - chance\n",
  "5618716a738b95cee8000062": "from bisect import bisect_right as bisect\r\nRES = [[] for _ in range(11)]\r\n\r\nfor c in range(1, 1001):\r\n    c3 = c * * 3\r\n    nSol = sum(((c3 - a * * 2) * * .5). is_integer() for a in range(1, int((c3 / / 2) * * .5 + 1)))\r\n    if 0 < nSol < 11:\r\n        RES[nSol]. append(c)\r\n\r\n    def find_abc_sumsqcube(c_max, nSol):\r\n    return RES[nSol][: bisect(RES[nSol], c_max)]\r\n",
  "5b4070144d7d8bbfe7000001": "def numericals(s):\r\n    dictio = {}\r\n    t = \"\"\r\n    for i in s:\r\n    dictio[i] = dictio . get(i, 0) + 1\r\n    t += str(dictio[i])\r\n    return t\r\n",
  "5b5736abf1d553f844000050": "def possible_positions(p):\r\n    r, c = ord(p[0]) - 96, int(p[1])\r\n    moves = [(- 2, - 1), (- 2, 1), (- 1, - 2), (- 1, 2),\r\n             (1, - 2), (1, 2), (2, - 1), (2, 1)]\r\n    return ['' . join((chr(r + i + 96), str(c + j))) for i, j in moves if 1 <= r + i <= 8 and 1 <= c + j <= 8]\r\n",
  "5b6711e86d0db7519a000112": "@ help_me\nclass _:\n    pass\n",
  "5b5097324a317afc740000fe": "def binary_cleaner(seq):\r\n    res = ([], [])\r\n    for i, x in enumerate(seq):\r\n    if x < 2:\r\n        res[0]. append(x)\r\n    else:\r\n        res[1]. append(i)\r\n    return res\r\n",
  "5b5e0c0d83d64866bc00001d": "def sayMeOperations(stringNumbers):\r\n    nums = [int(i) for i in stringNumbers . split()]\r\n\r\n    return ', ' . join({\r\n        a * b: 'multiplication',\r\n        a - b: 'subtraction',\r\n        a + b: 'addition',\r\n    }. get(c, 'division') for a, b, c in zip(nums, nums[1:], nums[2:]))\r\n",
  "5b6db1acb118141f6b000060": "def recycle(a):\r\n    bins = {\"paper\": [], \"glass\": [], \"organic\": [], \"plastic\": []}\r\n    for i in a:\r\n    bins[i[\"material\"]]. append(i[\"type\"])\r\n    if \"secondMaterial\" in i:\r\n    bins[i[\"secondMaterial\"]]. append(i[\"type\"])\r\n    return tuple(bins . values())\r\n",
  "5b817c2a0ce070ace8002be0": "def display_board(board, width):\r\n    board = [c . center(3) for c in board]\r\n    rows = [\"|\" . join(board[n: n + width])\r\n            for n in range(0, len(board), width)]\r\n    return (\"\\n\" + \"-\" * (4 * width - 1) + \"\\n\"). join(rows)\r\n",
  "5b4fd549bdd074f9a200005f": "def find_number(a): return int(str(l := a[0] + a[1] - a[n] >> 1 if ~ - (n := int((2 * len(a)) * * .5)) else (a[0] > 9) * 9) + '' . join(str(d - l) for d in a[: n]))\n",
  "5b49cc5a578c6ab6b200004c": "def round(flash_pile, turtle_pile):\r\n    faceup_pile = []\r\n    while turtle_pile:\r\n    for pile in flash_pile, turtle_pile:\r\n    faceup_pile . append(pile . pop(0))\r\n    if len(faceup_pile) >= 2 and faceup_pile[- 1] == faceup_pile[- 2]:\r\n    flash_pile . extend(faceup_pile)\r\n    return True\r\n    def snap(flash_pile, turtle_pile):\r\n    for i in range(26):\r\n    if not round(flash_pile, turtle_pile):\r\n    return i\r\n",
  "5b33452ab6989d2407000100": "def count_pal(n):\r\n    # No recursion; direct calculation:\r\n    return [9 * 10 * * ((n - 1) / / 2), 10 * * (n / / 2) * (13 - 9 * (- 1) * * n) / / 2 - 2]\r\n",
  "5b33e9c291c746b102000290": "import numpy as np\r\n\r\n\r\ndef hyperrectangularity_properties(arr):\r\n    try:\r\n    return np . array(arr, np . int32). shape\r\n    except:\r\n    return None\r\n",
  "5b33fee525c2bb5753000168": "NEIGHBOURHOOD = {\"von_neumann\": sum, \"moore\": max}\r\n\r\n\r\ndef closer_cells(n_type, distance, x, y, z):\r\n    return ((x + u, y + v, z + w)\r\n            for u in range(- distance, distance + 1) for v in range(- distance, distance + 1) for w in range(- distance, distance + 1)\r\n            if 0 < NEIGHBOURHOOD[n_type](map(abs, (u, v, w))) <= distance)\r\n\r\n    def get_3Dneighbourhood(n_type, arr, coordinates, distance=1):\r\n    def is_inside(x, y, z):\r\n    return 0 <= x < len(arr) and 0 <= y < len(arr[0]) and 0 <= z < len(arr[0][0])\r\n\r\n    return [] if not is_inside(* coordinates) else [arr[x][y][z]\r\n                                                    for x, y, z in closer_cells(n_type, distance, * coordinates)\r\n                                                    if is_inside(x, y, z)]\r\n",
  "5b315b8ca454c8c5b40003a2": "def get_neighbourhood(t, a, c, d=1):\r\n    r, t = [], t == \"von_neumann\"\r\n    x, y = c\r\n    if x < len(a) and y < len(a[0]):\r\n    for i in range(- d, d + 1):\r\n    for j in range(- d + abs(i) * t, d - abs(i) * t + 1):\r\n    try:\r\n    if x + i >= 0 and y + j >= 0 and (i or j):\r\n        r . append(a[x + i][y + j])\r\n    except:\r\n        pass\r\n    return r\r\n",
  "5b3e609cd58499284100007a": "from functools import reduce\r\n\r\n\r\ndef product_sans_n(nums):\r\n    z = nums . count(0)\r\n    if z > 1:\r\n        return [0] * len(nums)\r\n\r\n    p = reduce(int . __mul__, (v for v in nums if v))\r\n    return [not v and p for v in nums] if z else [p / / v for v in nums]\r\n",
  "5b6183066d0db7bfac0000bb": "import re\r\nfrom itertools import accumulate\r\npatterns = [\r\n    (re . compile('.*' . join('bug'), flags=re . I), 'Roma'),\r\n    (re . compile('.*' . join('boom'), flags=re . I), 'Maxim'),\r\n    (re . compile('.*' . join('edits'), flags=re . I), 'Danik'),\r\n]\r\n\r\n\r\ndef memesorting(meme):\r\n    return next((who for m in accumulate(meme) for pattern, who in patterns if pattern . search(m)), 'Vlad')\r\n",
  "5b559899f7e38620ef000803": "def miss_nums_finder(arr):\r\n    mx = max(arr)\r\n    s = set(arr)\r\n    return [x for x in range(1, mx) if x not in s]\r\n",
  "5b7ea71db90cc0f17c000a5a": "def solution(M1, M2, m1, m2, V, T):\r\n    return (m1 / M1 + m2 / M2) * 0.082 * (T + 273.15) / V\r\n",
  "5b7176768adeae9bc9000056": "def index_equals_value(arr):\r\n    lo, hi = 0, len(arr)\r\n    while lo < hi:\r\n    mid = lo + hi >> 1\r\n    if arr[mid] >= mid:\r\n    hi = mid\r\n    else:\r\n    lo = mid + 1\r\n    return lo if lo < len(arr) and arr[lo] == lo else - 1\r\n",
  "5b77b030f0aa5c9114000024": "def solve(arr):\r\n    res = []\r\n    for first in (arr[0] - 1, arr[0], arr[0] + 1):\r\n    for second in (arr[1] - 1, arr[1], arr[1] + 1):\r\n    val, step, count = second, second - \\\r\n        first, abs(arr[0] - first) + abs(arr[1] - second)\r\n    for current in arr[2:]:\r\n    val += step\r\n    if abs(val - current) > 1:\r\n        break\r\n    count += abs(val - current)\r\n    else:\r\n    res . append(count)\r\n    return min(res, default=- 1)\r\n",
  "5b7bd90ef643c4df7400015d": "def solve(st):\r\n    return all(True if ord(x) - ord(y) in [- 2, 0, 2] else False for x, y in zip(st, st[:: - 1]))\r\n",
  "5b7bae02402fb702ce000159": "def solve(a):\r\n    for i in a:\r\n    li = [i]\r\n    while 1:\r\n    if li[- 1] % 3 == 0 and li[- 1] / / 3 in a:\r\n        li . append(li[- 1] / / 3)\r\n    elif li[- 1] * 2 in a:\r\n        li . append(li[- 1] * 2)\r\n    else:\r\n        break\r\n    if len(li) == len(a):\r\n        return li\r\n",
  "5b1b27c8f60e99a467000041": "from collections import Counter\r\n\r\n\r\ndef anagram_difference(* words):\r\n    c1, c2 = map(Counter, words)\r\n    c1 . subtract(c2)\r\n    return sum(map(abs, c1 . values()))\r\n",
  "5b55c49d4a317adff500015f": "def points(R):\n    from math import sqrt\n    point = sum(int(sqrt(R * R - x * x)) for x in range(0, R + 1)) * 4 + 1\n    return point\n",
  "5b74532131ef05150d000109": "def calculate_distance(r): return round(r * (8 / 3) * * .5, 4) * (r > 0)\n",
  "5b39e91ee7a2c103300018b3": "from itertools import groupby\n\n\ndef remove_consecutive_duplicates(s):\n    return ' ' . join(k for k, _ in groupby(s . split()))\n",
  "5b3e1dca3da310a4390000f3": "def work_needed(project_minutes, freelancers):\r\n    available_minutes = sum(\r\n        hours * 60 + minutes for hours, minutes in freelancers)\r\n    workload_minutes = project_minutes - available_minutes\r\n    if workload_minutes <= 0:\r\n    return 'Easy Money!'\r\n    else:\r\n    hours, minutes = divmod(workload_minutes, 60)\r\n    return 'I need to work {} hour(s) and {} minute(s)' . format(hours, minutes)\r\n",
  "5b68c7029756802aa2000176": "from math import log\n\n\ndef logs(x, a, b):\n    # Your code here\n    return log(a * b, x)\n",
  "5b2be37991c7460d17000009": "INSTRUCTIONS = {\"0F12\": int . __add__,\r\n                \"B7A2\": int . __sub__, \"C3D9\": int . __mul__}\r\n\r\n\r\ndef communication_module(packet):\r\n    header, inst, d1, d2, footer = (packet[i: i + 4] for i in range(0, 20, 4))\r\n    res = max(0, min(9999, INSTRUCTIONS[inst](int(d1), int(d2))))\r\n\r\n    return f\" { header } FFFF { res : 0 > 4 } 0000 { footer } \"\r\n",
  "5b609ebc8f47bd595e000627": "units = {\"kg\": 1, \"g\": 1e-3, \"mg\": 1e-6, \"\u03bcg\": 1e-9, \"lb\": 0.453592,\r\n         \"m\": 1, \"cm\": 1e-2, \"mm\": 1e-3, \"\u03bcm\": 1e-6, \"ft\": 0.3048,\r\n         \"G\": 6.67e-11}\r\n\r\n\r\ndef solution(v, u):\r\n    m1, m2, r = (v[i] * units[u[i]] for i in range(3))\r\n    return units[\"G\"] * m1 * m2 / r * * 2\r\n",
  "56df605f2ebcd54c4d000335": "def interpret_as_int32(a):\r\n    s = b\"\" . join(a)\r\n    return [int . from_bytes(s[i: i + 4], \"big\", signed=True) for i in range(0, len(s) / / 4 * 4, 4)]\r\n",
  "5b6c220fa0a661fbf200005d": "def scoreboard(string):\r\n    scores = {'nil': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\r\n              'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\r\n    return [scores[x] for x in string . split() if x in scores]\r\n",
  "5b2e5a02a454c82fb9000048": "def get_neighbourhood(typ, arr, coordinates):\r\n\r\n    def isInside(x, y): return 0 <= x < len(arr) and 0 <= y < len(arr[0])\r\n\r\n    x, y = coordinates\r\n    if not isInside(x, y):\r\n        return []\r\n\r\n    neigh = ([(dx, dy) for dx in range(- 1, 2) for dy in range(- 1, 2) if (dx, dy) != (0, 0)]\r\n             if typ == 'moore' else [(0, 1), (0, - 1), (1, 0), (- 1, 0)])\r\n\r\n    return [arr[a][b] for a, b in ((x + dx, y + dy) for dx, dy in neigh) if isInside(a, b)]\r\n",
  "5b2e60742ae7543f9d00005d": "class CircularList ():\r\n    def __init__(self, * args):\r\n    if not args:\r\n    raise Exception(\"missing required args\")\r\n    self . n = len(args)\r\n    self . lst = args\r\n    self . i = None\r\n    def next(self):\r\n    if self . i is None:\r\n    self . i = - 1\r\n    self . i = (self . i + 1) % self . n\r\n    return self . lst[self . i]\r\n\r\n    def prev(self):\r\n    if self . i is None:\r\n    self . i = 0\r\n    self . i = (self . i - 1) % self . n\r\n    return self . lst[self . i]\r\n",
  "5b2f6ad842b27ea689000082": "def is_smooth(n):\r\n    smooth = {\r\n        2: \"power of 2\",\r\n        3: \"3-smooth\",\r\n        5: \"Hamming number\",\r\n        7: \"humble number\"\r\n    }\r\n    for k in smooth:\r\n    while n % k == 0:\r\n    n / /= k\r\n    if n == 1:\r\n    return smooth[k]\r\n    return \"non-smooth\"\r\n",
  "5b6d065a1db5ce9b4c00003c": "from math import hypot\n\n\ndef dropzone(fire, dropzones):\n    return min(dropzones, key=lambda p: hypot(p[0] - fire[0], p[1] - fire[1]))\n",
  "5b358a1e228d316283001892": "from collections import Counter\n\n\ndef get_strings(city):\n    return \",\" . join(f\" { char } : { '*' * count } \" for char, count in Counter(city . replace(\" \", \"\"). lower()). items())\n",
  "5b662d286d0db722bd000013": "def redacted(doc1, doc2):\r\n    return len(doc1) == len(doc2) and all((c1 == 'X' and c2 != '\\n') or c1 == c2 for c1, c2 in zip(doc1, doc2))\r\n",
  "5b64334ab1788374fb0000c8": "def solution(first, last):\r\n    try:\r\n    return first()\r\n    finally:\r\n    last()\r\n",
  "5b4e474305f04bea11000148": "from itertools import combinations\n\n\ndef digits(num):\n    return list(map(sum, combinations(map(int, str(num)), 2)))\n",
  "5b5e0ef007a26632c400002a": "def elements_sum(arr, d=0):\r\n    return sum(r[i] if i < len(r) else d for i, r in enumerate(reversed(arr)))\r\n",
  "5b56e42805f04b1780000073": "from itertools import combinations\n\n\ndef furthestDistance(arr):\n    return round(max(sum((y - x) * * 2 for x, y in zip(* comb)) * * .5 for comb in combinations(arr, 2)), 2)\n",
  "5b37a50642b27ebf2e000010": "import re\n\n\ndef sum_of_a_beach(beach):\n    return len(re . findall('Sand|Water|Fish|Sun', beach, re . IGNORECASE))\n",
  "5b5604e26dc79e6832000101": "def invert_hash(dictionary):\r\n    return {v: k for k, v in dictionary . items()}\r\n",
  "5b538734beb8654d6b00016d": "def queue(queuers, pos):\r\n    return sum(min(queuer, queuers[pos] - (place > pos)) for place, queuer in enumerate(queuers))\r\n",
  "5b4e779c578c6a898e0005c5": "def draw_stairs(n):\r\n    return '\\n' . join(' ' * i + 'I' for i in range(n))\r\n",
  "5b6b128783d648c4c4000129": "from math import prod\n\n\ndef smallest_product(a):\n    return min(map(prod, a))\n",
  "5b6375f707a2664ada00002a": "from collections import defaultdict\r\n\r\n\r\ndef who_is_online(friends):\r\n    d = defaultdict(list)\r\n    for user in friends:\r\n    status = 'away' if user['status'] == 'online' and user['last_activity'] > 10 else user['status']\r\n    d[status]. append(user['username'])\r\n    return d\r\n",
  "5b6ee22ac5cc71833f0010d7": "def kaprekar_split(n):\r\n    s = str(n * * 2)\r\n    for i in range(len(s)):\r\n    if int(s[: i] or 0) + int(s[i:] or 0) == n:\r\n    return i\r\n    return - 1\r\n",
  "5b64d2cd83d64828ce000039": "import re\r\n\r\n\r\ndef is_matched(read):\r\n    total = sum([int(num) for num in re . findall(r'\\d+', read[0])])\r\n\r\n    if read[0] == str(len(read[1])) + 'M':\r\n    return True\r\n    elif len(read[1]) != total:\r\n    return 'Invalid cigar'\r\n    else:\r\n    return False\r\n",
  "5b707fbc8adeaee7ac00000c": "from math import cos, radians, sin, atan2, degrees, hypot\r\n\r\n\r\ndef solution(f1, f2, theta):\r\n    r = radians(theta)\r\n    x = f1 + f2 * cos(r)\r\n    y = f2 * sin(r)\r\n    return hypot(x, y), degrees(atan2(y, x))\r\n",
  "5b715fd11db5ce5912000019": "from functools import reduce\n\n\ndef cup_and_balls(b, arr):\n    return reduce(lambda x, y: y[1] if x == y[0] else y[0] if x == y[1] else x, arr, b)\n",
  "5b71af678adeae41df00008c": "def shortest_distance(a, b, c):\r\n    a, b, c = sorted([a, b, c])\r\n    return ((a + b) * * 2 + c * * 2) * * 0.5\r\n",
  "5b73fe9fb3d9776fbf00009e": "def sum_of_differences(arr):\r\n    return max(arr) - min(arr) if arr else 0\r\n",
  "5b728f801db5cec7320000c7": "def solve(st, k):\r\n    for l in sorted(st)[: k]:\r\n    st = st . replace(l, '', 1)\r\n    return st\r\n",
  "5b752a42b11814b09c00005d": "def solve(a, b):\r\n    ''' \r\n    Used the % operator instead of repeated subtraction of a - 2*b or b - 2*a \r\n    Because as long as a > 2*b, the repeated subtraction has to be done and it will \r\n    eventually give a % 2*b. Repeated subtration in recursion has the problem of \r\n    exceeding the recursion depth, so this approach is better \r\n    '''\r\n    if a == 0 or b == 0:\r\n    return [a, b]\r\n    elif a >= 2 * b:\r\n    return solve(a % (2 * b), b)\r\n    elif b >= 2 * a:\r\n    return solve(a, b % (2 * a))\r\n    else:\r\n    return [a, b]\r\n",
  "5b23d98da97f02a5f4000a4c": "def dollar_to_speech(value):\n    if \"-\" in value:\n    return \"No negative numbers are allowed!\"\n    d, c = (int(n) for n in value . replace(\"$\", \"\"). split(\".\"))\n    dollars = \"{} dollar{}\" . format(\n        str(d), \"s\" if d != 1 else \"\") if d or not c else \"\"\n    link = \" and \" if (d and c) else \"\"\n    cents = \"{} cent{}\" . format(str(c), \"s\" if c != 1 else \"\") if c else \"\"\n    return \"{}{}{}.\" . format(dollars, link, cents)\n",
  "5b216555a454c8eaa2000019": "from itertools import groupby\nfrom functools import reduce\n\n\ndef highest_prod(matrix, isH=1):\n    return max([reduce(int . __mul__, g) for row in matrix\n                for k, g in map(lambda t: (t[0], list(t[1])), groupby(row, key=bool))\n                if k and len(g) > 1]\n               + [highest_prod(zip(* matrix), 0) if isH else 0])\n",
  "5b2117eea454c89d4400005f": "def L(n, a, b, inc):\r\n    lst = []\r\n    for _ in range(n):\r\n    lst . append(a)\r\n    a, b = b, a + b + inc\r\n    return lst\r\n",
  "5b203de891c7469b520000b4": "import re\r\n\r\n\r\ndef player_manager(players):\r\n    return players and [{'player': who, 'contact': int(num)}\r\n                        for who, num in re . findall(r'(.+?), (\\d+)(?:, )?', players)] or []\r\n",
  "5b18e9e06aefb52e1d0001e9": "def riders(stations):\r\n    riders, travelled = 1, 0\r\n    for dist in stations:\r\n    if travelled + dist > 100:\r\n    riders += 1\r\n    travelled = dist\r\n    else:\r\n    travelled += dist\r\n    return riders\r\n",
  "5b1b48cc647c7e7c56000083": "from collections import Counter\r\nfrom functools import reduce\r\nfrom operator import and_\r\n\r\n\r\ndef anagram_difference(words):\r\n    cWords = list(map(Counter, words))\r\n    required = reduce(and_, cWords)\r\n\r\n    return sum(sum((c - required). values()) for c in cWords)\r\n",
  "5b1cce03777ab73442000134": "from math import log\n\n\ndef compare(* numbers):\n    return max(numbers, key=lambda n: n[1] * log(n[0]))\n",
  "5b19f34c7664aacf020000ec": "def leaderboard_climb(arr, kara):\r\n    scores = sorted(set(arr), reverse=True)\r\n    position = len(scores)\r\n    ranks = []\r\n\r\n    for checkpoint in kara:\r\n    while position >= 1 and checkpoint >= scores[position - 1]:\r\n    position -= 1\r\n    ranks . append(position + 1)\r\n\r\n    return ranks\r\n",
  "5b1d1812b6989d61bd00004f": "def find_nth_occurrence(substring, string, occurrence=1):\r\n    idx = - 1\r\n    for i in range(occurrence):\r\n    idx = string . find(substring, idx + 1)\r\n    if idx == - 1:\r\n        return - 1\r\n    return idx\r\n",
  "5b1d0685da48c294e3001b31": "import numpy as np\r\n\r\n\r\ndef distance(player, relocation, quotients, radius):\r\n    y_movement = player[1] - relocation[1] / quotients[1]\r\n    x_movement = player[0] - relocation[0] / quotients[0]\r\n\r\n    distance_p_center = np . sqrt(y_movement * * 2 + x_movement * * 2)\r\n    distance_to_cross = distance_p_center * radius / np . sqrt(quotients[0] * * 2 * x_movement * * 2 + quotients[1] * * 2 * y_movement * * 2)\r\n    d = distance_p_center - distance_to_cross\r\n    if d < 0:\r\n    return (0)\r\n    else:\r\n    return d\r\n",
  "5b1cd19fcd206af728000056": "def solve(m):\n    '''U = x + 2*x^2 + 3*x^3 + ... + n*x^n \n    x*U = x^2 + 2*x^3 + 3*x^4 + ... + (n-1)*x^n + n*x^(n+1) \n    (1-x)*U = x + x^2 + x^3 + ... + x^n - n*x^(n+1) \n    x*(1-x^n) \n    (1-x)*U = --------- - n*x^(n+1) \n    1-x \n    x*(1-x^n) n*x^(n+1) x - x^(n+1) - n*x^(n+1) + n*x^(n+2) \n    U = --------- - ---------- = ----------------------------------- = \n    (1-x)^2 1-x (1-x)^2 \n    x - (n+1)*x^(n+1) + n*x^(n+2) x \n    = ----------------------------- = (n goes to infinity) = ------- \n    (1-x)^2 (1-x)^2 \n    x \n    ------- -> m, then x = m*(1-x)^2 = m - 2*m*x + m*x^2 \n    (1-x)^2 \n    m*x^2 - (2*m + 1)*x + m = 0 \n    D = (-2*m - 1)^2 - 4*m^2 = 4*m^2 +4*m + 1 - 4*m^2 = 4*m + 1 \n    -(-2*m - 1) + (4*m + 1)^0.5 -(-2*m - 1) - (4*m + 1)^0.5 \n    x1, x2 = ---------------------------, --------------------------- \n    2*m 2*m \n    2*m + 1 - (4*m + 1)^0.5 \n    x1 is always greater than 1 or equals to 1, then x = ----------------------- \n    2*m'''\n    return (2 * m + 1 - (4 * m + 1) * * 0.5) / (2 * m)\n",
  "5b190aa7803388ec97000054": "from itertools import accumulate\n\n\ndef tram(stops, descending, onboarding):\n    return max(accumulate(o - d for d, o in zip(descending[: stops], onboarding)))\n",
  "5b1956a7803388baae00003a": "import re\n\n\ndef toUnderScore(name):\n    return re . sub(\"(?<=[^_-])_?(?=[A-Z])|(?<=[^\\\\d_])_?(?=\\\\d)\", \"_\", name)\n",
  "5b180e9fedaa564a7000009a": "def solve(s):\r\n    upper = 0\r\n    lower = 0\r\n    for char in s:\r\n    if char . islower():\r\n    lower += 1\r\n    else:\r\n    upper += 1\r\n    if upper == lower or lower > upper:\r\n    return s . lower()\r\n    else:\r\n    return s . upper()\r\n",
  "5b16490986b6d336c900007d": "def my_languages(results):\r\n    return sorted((l for l, r in results . items() if r >= 60), reverse=True, key=results . get)\r\n",
  "55fbb7063097cf0b6b000032": "def part_const(n, k, num):\r\n    return part(n, k) - part(n - (num or n), k - 1)\r\n\r\n    def part(n, k):\r\n    return 1 if k in (1, n) else sum(part(n - k, i) for i in range(1, min(n - k, k) + 1))\r\n",
  "56e93159f6c72164b700062b": "PRIME_SUMS = [(0, 0), (2, 2), (3, 5), (5, 10), (7, 17),\r\n              (11, 28), (13, 41), (17, 58), (19, 77), (23, 100)]\r\n\r\n\r\ndef is_prime(n: int) - > bool:\r\n    sqrt = int(n * * .5)\r\n    for i in range(1, len(PRIME_SUMS)):\r\n    p = PRIME_SUMS[i][0]\r\n    if p > sqrt:\r\n    return n > 1\r\n    if n % p == 0:\r\n    return False\r\n    return True\r\n    def get_sum_index(n: int) - > int:\r\n    left, right = 0, len(PRIME_SUMS) - 1\r\n    while left < right:\r\n    mid = (left + right) >> 1\r\n    if PRIME_SUMS[mid][0] >= n:\r\n    right = mid\r\n    else:\r\n    left = mid + 1\r\n    return right\r\n    def prime_maxlength_chain(n: int) - > list[int]:\r\n    if PRIME_SUMS[- 1][1] >= n:\r\n    idx = get_sum_index(n)\r\n    else:\r\n    p, s = PRIME_SUMS[- 1]\r\n    while s < n:\r\n    p += 2\r\n    if is_prime(p):\r\n    s += p\r\n    PRIME_SUMS . append((p, s))\r\n    idx = len(PRIME_SUMS) - 1\r\n    res = []\r\n    for i in range(idx):\r\n    for j in reversed(range(i + 1)):\r\n    diff = PRIME_SUMS[idx - j][1] - PRIME_SUMS[i - j][1]\r\n    if diff < n and is_prime(diff):\r\n    res . append(diff)\r\n    if res:\r\n    return res\r\n    return res\r\n",
  "5b16bbd2c8c47ec58300016e": "\"\"\"\r\ncode to generate arr (takes ~18s so is precomputed):\r\n\r\nfrom math import log2, ceil\r\nfrom bisect import bisect_right\r\n\r\ndef find_terms(lower_bound, length, curr_sum, curr_prod, curr_min):\r\n # searches for terms that are >= lower_bound such that sum(terms) + curr_sum = prod(terms) * curr_prod. the number of terms is 'length'\r\n if length == 1:\r\n last_term = curr_sum / ((curr_prod - 1) or 1)\r\n if last_term.is_integer() and curr_sum + last_term < curr_min: \r\n curr_min = curr_sum + int(last_term)\r\n return curr_min, (last_term <= lower_bound)\r\n curr_term = lower_bound\r\n while True:\r\n new_sum = curr_sum + curr_term\r\n new_prod = curr_prod * curr_term\r\n if new_prod >= new_sum or new_sum >= curr_min or new_prod >= curr_min: break\r\n curr_min, flag = find_terms(curr_term, length - 1, new_sum, new_prod, curr_min)\r\n if flag:\r\n # the flag was a signal from the recursive call that this value of curr_term \r\n # is the maximum it could be, so don't increment it any more\r\n break\r\n curr_term += 1\r\n return curr_min, (curr_term == lower_bound)\r\n\r\npow_2s = [2**x for x in range(int(ceil(log2(12000))))]\r\n\r\ndef min_productsum(k):\r\n # returns the minimal product sum number for a set of size k\r\n curr_min = 2*k\r\n for num_of_ones in range(k-bisect_right(pow_2s, k), k-1):\r\n curr_min, flag = find_terms(2, k - num_of_ones, num_of_ones, 1, curr_min)\r\n return curr_min\r\n\r\narr = [min_productsum(k) for k in range(2, 12000+1)]\r\n\r\nsince the array is long, write it to a text file, use Ctrl A to select all of it, then paste it\r\n\r\nto_print = 'arr = [' + ', '.join(map(str, arr)) + ']'\r\nf = open('productsum_array.txt', 'w')\r\nf.write(to_print)\r\n\r\none could also precompute the return values of product_sum(n)\r\n\"\"\"\r\narr = [4, 6, 8, 8, 12, 12, 12, 15, 16, 16, 16, 18, 20, 24, 24, 24, 24, 24, 28, 27, 32, 30, 48, 32, 32, 32, 36, 36, 36, 42, 40, 40, 48, 48, 48, 45, 48, 48, 48, 48, 48, 54, 60, 54, 56, 54, 60, 63, 60, 60, 60, 63, 64, 64, 64, 64, 64, 70, 72, 72, 72, 72, 72, 72, 84, 80, 80, 81, 80, 80, 80, 81, 84, 88, 96, 90, 96, 90, 108, 90, 96, 96, 96, 96, 96, 96, 96, 96, 100, 110, 112, 105, 108, 108, 108, 117, 108, 108, 108, 112, 112, 120, 120, 120, 120, 120, 120, 120, 120, 120, 152, 125, 228, 126, 128, 128, 128, 128, 128, 128, 140, 144, 140, 135, 156, 140, 140, 144, 144, 144, 144, 144, 144, 144, 144, 150, 156, 150, 156, 162, 192, 160, 168, 160, 160, 160, 176, 160, 160, 160, 176, 162, 168, 168, 168, 168, 176, 184, 176, 175, 176, 180, 180, 180, 180, 190, 180, 180, 180, 192, 192, 189, 348, 192, 192, 189, 192, 192, 192, 192, 192, 192, 192, 200, 216, 216, 200, 200, 208, 208, 208, 210, 216, 210, 216, 210, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 224, 224, 240, 224, 224, 224, 248, 234, 240, 234, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 264, 252, 243, 252, 252, 252, 250, 252, 252, 252, 260, 256, 256, 256, 256, 256, 256, 256, 264, 272, 270, 272, 270, 280, 270, 288, 270, 312, 270, 280, 280, 280, 280, 288, 288, 280, 280, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 300, 297, 300, 306, 300, 306, 300, 300, 300, 308, 308, 312, 312, 312, 312, 312, 320, 315, 320, 320, 324, 315, 320, 324, 320, 320, 320, 320, 320, 320, 320, 330, 324, 324, 324, 336, 336, 336, 336, 342, 336, 336, 336, 336, 336, 343, 352, 352, 396, 350, 384, 350, 352, 351, 360, 350, 352, 352, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 468, 378, 380, 375, 408, 378, 380, 384, 392, 378, 384, 375, 384, 378, 384, 378, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 392, 392, 396, 396, 396, 405, 420, 400, 400, 405, 400, 400, 400, 405, 420, 432, 420, 405, 416, 416, 420, 416, 416, 416, 420, 425, 420, 432, 420, 420, 420, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 440, 448, 441, 448, 450, 448, 448, 448, 448, 448, 448, 448, 448, 448, 450, 468, 504, 588, 462, 484, 462, 888, 468, 468, 480, 468, 468, 468, 476, 476, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 500, 486, 504, 486, 528, 486, 504, 495, 500, 504, 504, 504, 500, 504, 504, 500, 500, 504, 504, 504, 504, 504, 512, 525, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 528, 528, 528, 540, 528, 525, 528, 528, 528, 540, 540, 540, 540, 539, 540, 540, 540, 540, 540, 540, 540, 546, 540, 540, 540, 575, 576, 550, 560, 560, 588, 560, 560, 567, 560, 560, 560, 560, 560, 570, 560, 560, 560, 572, 572, 567, 576, 576, 576, 567, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 594, 600, 595, 588, 588, 588, 594, 600, 594, 600, 594, 600, 600, 600, 600, 600, 600, 600, 600, 600, 600, 612, 612, 612, 616, 624, 616, 624, 624, 616, 616, 624, 624, 624, 630, 624, 624, 624, 624, 624, 630, 644, 625, 648, 630, 640, 630, 640, 630, 640, 640, 640, 648, 640, 640, 640, 640, 640, 640, 640, 640, 640, 640, 648, 648, 648, 648, 648, 648, 648, 648, 660, 672, 660, 660, 660, 672, 680, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 684, 675, 696, 696, 720, 700, 720, 686, 700, 693, 720, 700, 720, 693, 700, 720, 700, 702, 700, 702, 700, 702, 720, 700, 700, 704, 704, 704, 704, 714, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 729, 748, 750, 780, 729, 768, 750, 756, 729, 756, 748, 748, 756, 756, 750, 756, 756, 756, 750, 756, 756, 756, 750, 756, 750, 756, 750, 756, 756, 756, 768, 756, 756, 756, 768, 768, 768, 768, 768, 768, 768, 768, 768, 768, 768, 768, 768, 768, 768, 768, 780, 780, 784, 784, 792, 784, 792, 784, 784, 784, 798, 792, 792, 792, 792, 792, 792, 800, 810, 800, 800, 840, 800, 800, 800, 840, 800, 800, 800, 816, 810, 816, 810, 816, 810, 816, 810, 828, 810, 828, 828, 828, 832, 832, 832, 840, 825, 832, 840, 840, 832, 832, 832, 832, 832, 832, 840, 840, 840, 840, 840, 840, 840, 840, 840, 840, 840, 884, 864, 864, 855, 864, 858, 864, 858, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 864, 880, 882, 896, 875, 880, 882, 880, 880, 880, 882, 896, 882, 896, 912, 896, 891, 900, 896, 896, 891, 896, 896, 896, 896, 896, 896, 896, 896, 896, 896, 900, 900, 900, 910, 912, 918, 920, 918, 924, 918, 924, 918, 924, 924, 924, 936, 936, 931, 924, 924, 924, 935, 960, 950, 936, 936, 936, 952, 936, 936, 936, 936, 936, 936, 960, 950, 952, 945, 960, 950, 960, 945, 952, 952, 960, 945, 960, 960, 960, 960, 960, 960, 960, 960, 960, 960, 960, 960, 960, 960, 960, 960, 960, 960, 960, 972, 972, 972, 972, 972, 972, 972, 972, 990, 972, 972, 972, 980, 980, 990, 1000, 1000, 1164, 990, 1000, 990, 1008, 990, 1000, 1000, 1008, 1008, 1008, 1000, 1008, 1008, 1000, 1000, 1008, 1008, 1000, 1000, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1020, 1020, 1026, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1040, 1040, 1050, 1040, 1040, 1040, 1050, 1056, 1056, 1080, 1050, 1056, 1050, 1056, 1050, 1064, 1050, 1056, 1050, 1056, 1056, 1056, 1056, 1056, 1056, 1080, 1071, 1080, 1080, 1080, 1071, 1080, 1080, 1080, 1078, 1080, 1080, 1080, 1080, 1080, 1078, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1092, 1092, 1092, 1188, 1100, 1104, 1104, 1104, 1100, 1120, 1116, 1100, 1100, 1120, 1120, 1122, 1152, 1120, 1120, 1134, 1120, 1125, 1120, 1120, 1120, 1122, 1120, 1120, 1140, 1120, 1120, 1120, 1120, 1120, 1472, 1120, 1120, 1120, 1140, 1134, 1140, 1125, 1140, 1134, 1140, 1134, 1140, 1134, 1152, 1134, 1144, 1134, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1184, 1176, 1200, 1170, 1176, 1170, 1188, 1170, 1188, 1176, 1176, 1176, 1188, 1176, 1176, 1176, 1176, 1176, 1188, 1215, 1200, 1188, 1188, 1188, 1188, 1200, 1188, 1188, 1188, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1216, 1216, 1215, 1216, 1216, 1216, 1215, 1224, 1232, 1224, 1215, 1224, 1224, 1224, 1215, 1232, 1240, 1248, 1225, 1232, 1242, 1232, 1242, 1232, 1232, 1232, 1242, 1248, 1248, 1248, 1248, 1248, 1260, 1260, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1260, 1260, 1260, 1250, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1275, 1260, 1260, 1260, 1320, 1280, 1280, 1296, 1274, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1344, 1344, 1344, 1323, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1350, 1360, 1350, 1360, 1350, 1360, 1375, 1368, 1368, 1368, 1365, 1368, 1368, 1380, 1377, 1372, 1392, 1380, 1377, 1380, 1372, 1372, 1375, 1392, 1386, 1392, 1392, 1392, 1386, 1400, 1386, 1440, 1386, 1400, 1386, 1400, 1400, 1404, 1400, 1400, 1458, 1404, 1400, 1428, 1400, 1400, 1400, 1400, 1400, 1404, 1408, 1400, 1400, 1404, 1408, 1408, 1408, 1408, 1408, 1408, 1408, 1464, 1430, 1428, 1428, 1428, 1425, 1440, 1430, 1428, 1428, 1428, 1430, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1452, 1458, 1456, 1482, 1456, 1456, 1456, 1458, 1472, 1458, 1508, 1458, 1472, 1458, 1472, 1458, 1472, 1458, 1488, 1470, 1488, 1470, 1488, 1470, 1488, 1485, 1508, 1500, 1496, 1485, 1500, 1500, 1500, 1485, 1500, 1496, 1500, 1485, 1496, 1496, 1500, 1521, 1512, 1500, 1500, 1512, 1512, 1500, 1500, 1500, 1500, 1512, 1500, 1512, 1500, 1500, 1500, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1536, 1536, 1548, 1530, 1536, 1530, 1536, 1530, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1560, 1560, 1560, 1566, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1568, 1568, 1584, 1568, 1568, 1568, 1568, 1568, 1584, 1568, 1568, 1568, 1584, 1575, 1584, 1584, 1584, 1575, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1596, 1596, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1620, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1620, 1640, 1620, 1620, 1620, 1620, 1617, 1620, 1620, 1620, 1620, 1620, 1620, 1620, 1620, 1620, 1632, 1620, 1620, 1620, 1632, 1632, 1632, 1672, 1638, 1680, 1638, 1656, 1638, 1680, 1650, 1656, 1650, 1656, 1650, 1656, 1656, 1656, 1650, 1656, 1650, 1664, 1650, 1664, 1664, 1664, 1664, 1664, 1674, 1680, 1664, 1680, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1701, 1700, 1694, 1716, 1701, 1700, 1710, 1740, 1700, 1700, 1710, 1716, 1701, 1716, 1710, 1716, 1701, 1740, 1710, 1728, 1701, 1728, 1728, 1716, 1716, 1716, 1728, 1728, 1715, 1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728, 1760, 1760, 1800, 1760, 1755, 1764, 1760, 1760, 1750, 1760, 1750, 1760, 1755, 1760, 1750, 1764, 1755, 1764, 1760, 1760, 1760, 1764, 1760, 1760, 1760, 1764, 1782, 1764, 1764, 1764, 1782, 1792, 1782, 1800, 1782, 1792, 1782, 1792, 1782, 1792, 1782, 1792, 1782, 1792, 1782, 1800, 1782, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1820, 1840, 1824, 1815, 1820, 1824, 1820, 1824, 1824, 1820, 1820, 1824, 1824, 1824, 1836, 1836, 1840, 1848, 1848, 1836, 1836, 1836, 1836, 1840, 1836, 1836, 1836, 1860, 1848, 1848, 1848, 1848, 1856, 1848, 1848, 1848, 1856, 1848, 1848, 1848, 1848, 1848, 1872, 1863, 1920, 1862, 1872, 1863, 1872, 1870, 1872, 1872, 1872, 1870, 1872, 1872, 1920, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1890, 1900, 1890, 1900, 1875, 1904, 1890, 2016, 1890, 1904, 1890, 1900, 1890, 1920, 1890, 1900, 1890, 1980, 1890, 1900, 1890, 1904, 1920, 1904, 1904, 1904, 1920, 1920, 1920, 1920, 1920, 1920, 1911, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1936, 1944, 1936, 1936, 1936, 1944, 1944, 1944, 1944, 1944, 1944, 1944, 1944, 1944, 1944, 1944, 1944, 1944, 1944, 1944, 1944, 1944, 1944, 1944, 1980, 1980, 1960, 1960, 1960, 1960, 1980, 1976, 1960, 1960, 1976, 1976, 1980, 1980, 1980, 1980, 1980, 1998, 1980, 1980, 1980, 1980, 1980, 1980, 1980, 1989, 1980, 1980, 1980, 2002, 2016, 2000, 2000, 1995, 2000, 2000, 2000, 2015, 2000, 2000, 2000, 2000, 2016, 2000, 2000, 2016, 2016, 2000, 2000, 2016, 2000, 2000, 2000, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2040, 2040, 2040, 2025, 2040, 2040, 2040, 2025, 2040, 2040, 2040, 2040, 2040, 2040, 2064, 2070, 2048, 2052, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2112, 2070, 2088, 2079, 2080, 2080, 2080, 2079, 2080, 2080, 2080, 2088, 2088, 2080, 2088, 2079, 2080, 2080, 2100, 2079, 2080, 2080, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2208, 2100, 2100, 2100, 2112, 2100, 2100, 2100, 2100, 2100, 2106, 2100, 2106, 2100, 2100, 2100, 2106, 2112, 2106, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2142, 2128, 2125, 2128, 2128, 2128, 2142, 2160, 2142, 2160, 2142, 2160, 2160, 2160, 2142, 2160, 2142, 2160, 2142, 2160, 2142, 2156, 2145, 2160, 2160, 2156, 2160, 2156, 2160, 2160, 2160, 2156, 2160, 2160, 2160, 2160, 2156, 2156, 2160, 2160, 2160, 2160, 2160, 2160, 2160, 2160, 2160, 2160, 2160, 2160, 2160, 2160, 2176, 2176, 2176, 2176, 2176, 2176, 2176, 2184, 2184, 2200, 2184, 2184, 2184, 2184, 2184, 2200, 2200, 2232, 2187, 2200, 2214, 2200, 2187, 2220, 2200, 2208, 2187, 2200, 2200, 2208, 2205, 2200, 2200, 2236, 2205, 2232, 2232, 2280, 2205, 2232, 2232, 2232, 2223, 2232, 2232, 2232, 2232, 2232, 2232, 2240, 2240, 2240, 2240, 2240, 2240, 2244, 2240, 2240, 2240, 2268, 2240, 2268, 2240, 2240, 2240, 2240, 2240, 2240, 2240, 2240, 2240, 2240, 2240, 2240, 2240, 2240, 2240, 2240, 2250, 2268, 2280, 2268, 2250, 2268, 2250, 2268, 2250, 2268, 2268, 2268, 2277, 2268, 2268, 2268, 2268, 2268, 2268, 2268, 2268, 2268, 2268, 2268, 2275, 2268, 2268, 2268, 2280, 2304, 2300, 2304, 2295, 2288, 2304, 2288, 2288, 2288, 2304, 2300, 2295, 2304, 2300, 2300, 2295, 2304, 2304, 2304, 2304, 2304, 2304, 2304, 2304, 2304, 2304, 2304, 2304, 2304, 2304, 2304, 2304, 2304, 2304, 2304, 2304, 2304, 2304, 2304, 2340, 2340, 2350, 2340, 2352, 2340, 2688, 2368, 2340, 2340, 2340, 2340, 2340, 2340, 2352, 2340, 2340, 2340, 2340, 2340, 2340, 2340, 2352, 2340, 2340, 2340, 2376, 2352, 2352, 2352, 2352, 2352, 2352, 2352, 2352, 2352, 2366, 2352, 2352, 2352, 2352, 2352, 2366, 2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376, 2375, 2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376, 2376, 2400, 2394, 2400, 2394, 2400, 2394, 2400, 2394, 2400, 2400, 2400, 2400, 2400, 2400, 2400, 2400, 2400, 2400, 2400, 2400, 2400, 2400, 2400, 2400, 2400, 2400, 2400, 2400, 2432, 2430, 2432, 2430, 2420, 2430, 2432, 2420, 2420, 2430, 2432, 2436, 2436, 2430, 2448, 2430, 2432, 2430, 2432, 2430, 2432, 2430, 2448, 2430, 2448, 2430, 2448, 2430, 2464, 2430, 2448, 2448, 2448, 2448, 2448, 2448, 2448, 2448, 2448, 2450, 2464, 2464, 2480, 2450, 2484, 2464, 2464, 2457, 2480, 2464, 2464, 2464, 2464, 2464, 2480, 2464, 2464, 2464, 2496, 2475, 2496, 2484, 2484, 2475, 2484, 2496, 2484, 2475, 2484, 2508, 2496, 2496, 2496, 2496, 2496, 2496, 2496, 2496, 2496, 2496, 2500, 2496, 2496, 2496, 2496, 2496, 2496, 2496, 2496, 2496, 2496, 2520, 2500, 2520, 2520, 2500, 2500, 2520, 2520, 2520, 2520, 2520, 2520, 2520, 2520, 2520, 2520, 2520, 2520, 2520, 2520, 2520, 2520, 2520, 2520, 2520, 2520, 2520, 2548, 2535, 2592, 2550, 2560, 2610, 2548, 2550, 2560, 2541, 2560, 2550, 2548, 2560, 2576, 2550, 2560, 2548, 2548, 2550, 2576, 2560, 2560, 2574, 2560, 2560, 2560, 2560, 2560, 2560, 2560, 2560, 2560, 2560, 2560, 2560, 2560, 2560, 2560, 2560, 2560, 2560, 2560, 2560, 2592, 2592, 2592, 2592, 2592, 2592, 2592, 2592, 2592, 2592, 2592, 2592, 2592, 2592, 2592, 2592, 2592, 2592, 2592, 2592, 2592, 2592, 2592, 2592, 2592, 2592, 2592, 2592, 2592, 2592, 2592, 2592, 2640, 2625, 2640, 2640, 2664, 2618, 2640, 2640, 2640, 2625, 2768, 2646, 2640, 2625, 2640, 2640, 2640, 2625, 2640, 2640, 2640, 2640, 2640, 2640, 2640, 2625, 2640, 2640, 2640, 2640, 2640, 2640, 2640, 2640, 2640, 2640, 2640, 2640, 2640, 2640, 2640, 2646, 2700, 2646, 2660, 2646, 2660, 2646, 2688, 2660, 2660, 2662, 2688, 2673, 2688, 2688, 2688, 2688, 2688, 2688, 2688, 2688, 2700, 2688, 2688, 2673, 2688, 2688, 2688, 2673, 2688, 2688, 2688, 2673, 2688, 2688, 2688, 2688, 2688, 2688, 2688, 2688, 2688, 2688, 2688, 2688, 2688, 2688, 2688, 2688, 2688, 2688, 2688, 2688, 2700, 2700, 2700, 2700, 2700, 2700, 2700, 2720, 2700, 2700, 2700, 2728, 2744, 2720, 2736, 2720, 2720, 2720, 2736, 2720, 2720, 2720, 2736, 2730, 2736, 2730, 2752, 2730, 2736, 2730, 2736, 2730, 2736, 2736, 2736, 2736, 2736, 2744, 2820, 2754, 2760, 2772, 2744, 2744, 2760, 2744, 2760, 2754, 2744, 2744, 2760, 2754, 2760, 2750, 2760, 2754, 2772, 2772, 2772, 2805, 2772, 2800, 2772, 2772, 2772, 2790, 2772, 2783, 2772, 2772, 2772, 2772, 2772, 2784, 2772, 2772, 2772, 2790, 2880, 2800, 2800, 2800, 2800, 2800, 2800, 2800, 2800, 2793, 2800, 2800, 2800, 2800, 2800, 2808, 2800, 2800, 2808, 2800, 2800, 2800, 2800, 2800, 2800, 2800, 2800, 2808, 2800, 2800, 2800, 2808, 2808, 2808, 2808, 2808, 2816, 2816, 2816, 2856, 2816, 2816, 2816, 2816, 2816, 2816, 2816, 2850, 2856, 2835, 2880, 2850, 2880, 2835, 2856, 2856, 2856, 2835, 2856, 2856, 2856, 2835, 2880, 2870, 2856, 2835, 2860, 2850, 2860, 2850, 2856, 2856, 2880, 2856, 2856, 2856, 2856, 2856, 2880, 2860, 2860, 2873, 2880, 2880, 2880, 2880, 2880, 2880, 2880, 2875, 2880, 2880, 2880, 2880, 2880, 2880, 2880, 2880, 2880, 2880, 2880, 2880, 2880, 2880, 2880, 2880, 2880, 2880, 2880, 2880, 2880, 2880, 2880, 2880, 2880, 2904, 2904, 2904, 2912, 2912, 2904, 2912, 2916, 2904, 2904, 2904, 2904, 2904, 2916, 2912, 2912, 2912, 2912, 2912, 2916, 2912, 2912, 2912, 2916, 2916, 2916, 2916, 2916, 2916, 2916, 2916, 2916, 2988, 2916, 2916, 2916, 2944, 2940, 2952, 2940, 2940, 2940, 2944, 2940, 2940, 2940, 2940, 2940, 2944, 2940, 2970, 2940, 2940, 2940, 2970, 3072, 2964, 3040, 2970, 2976, 2970, 2964, 2964, 2964, 2970, 2976, 2976, 2976, 2970, 2976, 2970, 2976, 2970, 3040, 2970, 2992, 2970, 3000, 2970, 2992, 2970, 2992, 2970, 3024, 2990, 2992, 2997, 3000, 3000, 3000, 3000, 2992, 3000, 2992, 2992, 2992, 3000, 3000, 3000, 3000, 3000, 3000, 3016, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3024, 3024, 3024, 3024, 3024, 3024, 3024, 3024, 3024, 3024, 3024, 3024, 3024, 3024, 3024, 3024, 3024, 3024, 3024, 3024, 3024, 3024, 3024, 3024, 3024, 3040, 3060, 3040, 3040, 3040, 3060, 3072, 3060, 3060, 3060, 3060, 3080, 3060, 3060, 3072, 3060, 3060, 3060, 3060, 3060, 3060, 3060, 3072, 3060, 3060, 3060, 3078, 3072, 3072, 3072, 3072, 3072, 3072, 3072, 3072, 3072, 3072, 3072, 3072, 3072, 3072, 3072, 3072, 3072, 3072, 3072, 3072, 3072, 3072, 3072, 3072, 3072, 3087, 3108, 3120, 3120, 3087, 3120, 3132, 3120, 3105, 3120, 3120, 3120, 3105, 3120, 3120, 3120, 3120, 3120, 3120, 3120, 3120, 3120, 3120, 3120, 3120, 3120, 3120, 3120, 3120, 3120, 3120, 3120, 3120, 3120, 3120, 3120, 3120, 3120, 3136, 3168, 3135, 3136, 3146, 3136, 3125, 3136, 3136, 3136, 3150, 3136, 3136, 3136, 3136, 3136, 3136, 3136, 3136, 3136, 3150, 3168, 3150, 3168, 3150, 3168, 3150, 3168, 3150, 3168, 3150, 3168, 3150, 3168, 3159, 3168, 3168, 3168, 3159, 3168, 3168, 3168, 3168, 3168, 3168, 3168, 3168, 3168, 3168, 3168, 3168, 3192, 3192, 3200, 3200, 3200, 3192, 3192, 3185, 3200, 3192, 3192, 3192, 3192, 3192, 3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200, 3220, 3230, 3240, 3234, 3240, 3230, 3240, 3240, 3240, 3240, 3240, 3234, 3240, 3234, 3240, 3240, 3240, 3234, 3240, 3240, 3240, 3234, 3240, 3234, 3240, 3240, 3240, 3240, 3240, 3240, 3240, 3240, 3240, 3240, 3240, 3240, 3240, 3240, 3240, 3240, 3276, 3264, 3264, 3264, 3276, 3264, 3264, 3264, 3264, 3264, 3264, 3264, 3264, 3264, 3264, 3267, 3276, 3348, 3276, 3276, 3276, 3276, 3276, 3315, 3276, 3276, 3276, 3311, 3300, 3300, 3300, 3300, 3300, 3312, 3300, 3300, 3300, 3328, 3300, 3300, 3300, 3312, 3300, 3300, 3300, 3300, 3300, 3312, 3300, 3312, 3300, 3300, 3300, 3312, 3312, 3312, 3312, 3330, 3328, 3328, 3328, 3402, 3328, 3348, 3328, 3328, 3328, 3325, 3328, 3328, 3328, 3328, 3344, 3328, 3328, 3332, 3328, 3328, 3328, 3328, 3328, 3328, 3328, 3348, 3344, 3344, 3344, 3360, 3360, 3360, 3360, 3360, 3360, 3360, 3360, 3360, 3360, 3360, 3360, 3360, 3360, 3360, 3360, 3360, 3360, 3360, 3360, 3360, 3360, 3360, 3360, 3360, 3360, 3360, 3360, 3360, 3360, 3360, 3388, 3375, 3380, 3416, 3420, 3375, 3380, 3402, 3420, 3375, 3388, 3402, 3400, 3375, 3432, 3388, 3388, 3402, 3420, 3402, 3420, 3400, 3420, 3402, 3400, 3400, 3420, 3402, 3400, 3400, 3420, 3402, 3420, 3402, 3456, 3402, 3420, 3402, 3420, 3402, 3420, 3402, 3420, 3420, 3420, 3440, 3420, 3420, 3420, 3432, 3432, 3432, 3456, 3456, 3432, 3450, 3456, 3430, 3432, 3430, 3432, 3432, 3456, 3430, 3456, 3450, 3456, 3456, 3456, 3450, 3456, 3450, 3456, 3450, 3456, 3456, 3456, 3456, 3456, 3456, 3456, 3456, 3456, 3456, 3456, 3456, 3456, 3456, 3456, 3456, 3456, 3456, 3456, 3456, 3456, 3456, 3456, 3456, 3456, 3456, 3528, 3500, 3564, 3534, 3500, 3496, 3528, 3500, 3496, 3496, 3500, 3500, 3500, 3515, 3500, 3510, 3500, 3500, 3552, 3500, 3500, 3510, 3528, 3500, 3520, 3520, 3500, 3510, 3500, 3519, 3500, 3510, 3500, 3510, 3528, 3500, 3500, 3510, 3520, 3510, 3520, 3510, 3520, 3510, 3520, 3520, 3520, 3520, 3520, 3528, 3520, 3520, 3520, 3520, 3520, 3520, 3520, 3528, 3528, 3528, 3528, 3528, 3528, 3528, 3528, 3528, 3564, 3564, 3564, 3564, 3564, 3564, 3588, 3549, 3564, 3564, 3564, 3584, 3564, 3564, 3564, 3570, 3564, 3570, 3564, 3570, 3564, 3600, 3564, 3564, 3564, 3564, 3564, 3564, 3564, 3564, 3564, 3570, 3564, 3564, 3564, 3575, 3584, 3584, 3584, 3584, 3584, 3584, 3584, 3584, 3584, 3584, 3584, 3584, 3584, 3584, 3584, 3584, 3584, 3584, 3584, 3584, 3584, 3584, 3584, 3584, 3600, 3600, 3600, 3600, 3600, 3600, 3600, 3600, 3600, 3600, 3600, 3600, 3600, 3600, 3600, 3625, 3648, 3640, 3660, 3645, 3640, 3640, 3640, 3630, 3648, 3630, 3640, 3640, 3648, 3630, 3648, 3630, 3640, 3630, 3648, 3640, 3672, 3672, 3640, 3640, 3640, 3640, 3672, 3645, 3640, 3640, 3648, 3645, 3648, 3648, 3648, 3645, 3648, 3672, 3672, 3645, 3672, 3672, 3672, 3645, 3672, 3672, 3680, 3672, 3672, 3672, 3672, 3675, 3672, 3672, 3672, 3672, 3672, 3672, 3672, 3672, 3672, 3672, 3680, 3680, 3696, 3696, 3696, 3675, 3696, 3696, 3696, 3696, 3696, 3720, 3696, 3696, 3696, 3696, 3696, 3696, 3696, 3696, 3696, 3705, 3696, 3696, 3696, 3696, 3696, 3712, 3712, 3712, 3720, 3720, 3720, 3720, 3740, 3718, 3744, 3744, 3724, 3726, 3740, 3726, 3744, 3724, 3724, 3726, 3740, 3726, 3744, 3744, 3740, 3744, 3744, 3751, 3744, 3744, 3740, 3744, 3744, 3740, 3740, 3744, 3744, 3744, 3744, 3744, 3744, 3744, 3744, 3744, 3744, 3744, 3744, 3744, 3744, 3744, 3780, 3762, 3780, 3750, 3780, 3750, 3780, 3750, 3780, 3780, 3780, 3780, 3780, 3780, 3780, 3780, 3780, 3780, 3780, 3780, 3780, 3773, 3780, 3780, 3780, 3780, 3780, 3780, 3780, 3780, 3780, 3780, 3780, 3780, 3780, 3808, 3780, 3780, 3780, 3800, 3808, 3808, 3800, 3800, 3840, 3840, 3800, 3800, 3840, 3808, 3808, 3808, 3808, 3808, 3840, 3808, 3808, 3808, 3840, 3822, 3828, 3828, 3828, 3840, 3840, 3822, 3840, 3840, 3840, 3822, 3840, 3822, 3840, 3825, 3840, 3840, 3840, 3840, 3840, 3840, 3840, 3840, 3840, 3840, 3840, 3840, 3840, 3840, 3840, 3840, 3840, 3840, 3840, 3840, 3840, 3840, 3840, 3840, 3840, 3840, 3840, 3840, 3840, 3864, 3864, 3861, 3864, 3864, 3920, 3861, 3888, 3872, 3872, 3872, 3876, 3888, 3888, 3887, 3872, 3872, 3888, 3872, 3872, 3872, 3888, 3888, 3888, 3888, 3888, 3888, 3888, 3888, 3888, 3888, 3888, 3888, 3888, 3888, 3888, 3888, 3888, 3888, 3888, 3888, 3888, 3888, 3888, 3888, 3888, 3888, 3888, 3900, 3900, 3915, 3936, 3948, 3920, 3920, 3936, 3936, 3920, 3933, 3920, 3920, 3920, 3920, 3920, 3948, 3920, 3920, 3920, 3920, 3920, 3944, 3920, 3920, 3920, 3960, 3952, 3960, 3960, 3952, 3952, 3952, 3960, 3969, 3960, 3960, 3960, 3960, 3952, 3960, 3952, 3952, 3952, 3960, 3960, 3960, 3960, 3960, 3960, 3960, 3960, 3960, 3960, 3960, 3960, 3960, 3960, 3960, 3960, 3960, 3960, 3960, 3960, 3960, 3996, 3969, 4000, 3978, 4020, 3969, 3996, 3990, 3996, 3969, 3996, 3990, 3996, 3990, 4000, 3990, 4000, 3990, 4004, 3990, 4032, 3993, 4000, 4000, 4004, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4004, 4000, 4000, 4032, 4000, 4000, 4000, 4032, 4000, 4000, 4000, 4032, 4032, 4032, 4032, 4032, 4025, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4050, 4080, 4050, 4056, 4050, 4080, 4050, 4056, 4050, 4056, 4050, 4080, 4050, 4080, 4050, 4080, 4050, 4080, 4080, 4080, 4080, 4080, 4080, 4080, 4080, 4080, 4080, 4080, 4080, 4080, 4080, 4080, 4080, 4080, 4080, 4080, 4080, 4080, 4096, 4096, 4095, 4096, 4104, 4096, 4095, 4096, 4104, 4096, 4095, 4104, 4096, 4096, 4095, 4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096, 4125, 4116, 4116, 4116, 4158, 4160, 4140, 4116, 4116, 4116, 4140, 4140, 4131, 4140, 4140, 4140, 4125, 4140, 4140, 4140, 4131, 4140, 4140, 4140, 4158, 4176, 4158, 4160, 4158, 4160, 4158, 4200, 4200, 4160, 4158, 4160, 4158, 4160, 4158, 4160, 4158, 4160, 4160, 4176, 4158, 4160, 4158, 4160, 4158, 4160, 4158, 4160, 4160, 4160, 4176, 4176, 4185, 4180, 4218, 4200, 4180, 4180, 4200, 4200, 4200, 4200, 4200, 4200, 4199, 4200, 4200, 4200, 4200, 4200, 4200, 4200, 4200, 4200, 4200, 4200, 4200, 4200, 4200, 4200, 4200, 4200, 4200, 4200, 4200, 4200, 4200, 4200, 4200, 4200, 4200, 4200, 4200, 4212, 4212, 4212, 4212, 4212, 4224, 4212, 4212, 4212, 4224, 4224, 4224, 4224, 4224, 4224, 4224, 4224, 4224, 4224, 4224, 4224, 4224, 4224, 4224, 4300, 4256, 4256, 4256, 4256, 4284, 4284, 4277, 4288, 4288, 4256, 4250, 4284, 4256, 4256, 4250, 4256, 4256, 4284, 4256, 4256, 4256, 4284, 4275, 4284, 4300, 4300, 4284, 4284, 4300, 4284, 4275, 4284, 4290, 4284, 4275, 4284, 4284, 4284, 4275, 4284, 4300, 4284, 4284, 4284, 4284, 4284, 4290, 4284, 4284, 4284, 4290, 4312, 4290, 4320, 4290, 4312, 4320, 4320, 4312, 4320, 4320, 4312, 4320, 4320, 4312, 4320, 4320, 4320, 4312, 4312, 4312, 4320, 4320, 4312, 4312, 4320, 4312, 4320, 4320, 4312, 4312, 4320, 4320, 4320, 4320, 4320, 4320, 4320, 4320, 4320, 4320, 4320, 4320, 4320, 4320, 4320, 4320, 4320, 4320, 4352, 4350, 4352, 4347, 4352, 4350, 4352, 4347, 4368, 4352, 4352, 4352, 4356, 4352, 4352, 4368, 4352, 4352, 4352, 4352, 4352, 4352, 4352, 4356, 4356, 4368, 4368, 4368, 4368, 4368, 4368, 4368, 4368, 4374, 4368, 4368, 4368, 4368, 4368, 4374, 4400, 4374, 4400, 4374, 4440, 4374, 4400, 4374, 5808, 4374, 4416, 4374, 4400, 4374, 4400, 4400, 4400, 4400, 4400, 4400, 4420, 4400, 4400, 4400, 4400, 4410, 4440, 4400, 4400, 4410, 4400, 4400, 4400, 4410, 4416, 4410, 4416, 4410, 4416, 4410, 4416, 4410, 4440, 4410, 4440, 4440, 4440, 4440, 4440, 4440, 4464, 4455, 4488, 4446, 4480, 4455, 4472, 4472, 4480, 4455, 4464, 4446, 4464, 4446, 4464, 4446, 4464, 4455, 4464, 4464, 4480, 4464, 4464, 4464, 4464, 4455, 4464, 4464, 4464, 4455, 4464, 4480, 4480, 4455, 4480, 4480, 4500, 4455, 4480, 4480, 4480, 4480, 4480, 4480, 4480, 4488, 4480, 4480, 4480, 4480, 4480, 4480, 4480, 4480, 4480, 4480, 4480, 4480, 4480, 4480, 4480, 4480, 4480, 4480, 4480, 4480, 4480, 4480, 4500, 4500, 4500, 4500, 4500, 4500, 4500, 4508, 4500, 4500, 4500, 4500, 4500, 4500, 4500, 4524, 4500, 4500, 4500, 4536, 4536, 4536, 4536, 4536, 4536, 4536, 4536, 4536, 4536, 4536, 4536, 4536, 4536, 4536, 4536, 4536, 4536, 4536, 4536, 4536, 4536, 4536, 4536, 4536, 4536, 4536, 4536, 4536, 4536, 4536, 4536, 4536, 4536, 4536, 4536, 4536, 4560, 4560, 4560, 4550, 4560, 4560, 4560, 4560, 4560, 4560, 4560, 4560, 4560, 4563, 4608, 4576, 4576, 4576, 4576, 4576, 4592, 4590, 4592, 4590, 4576, 4576, 4608, 4576, 4576, 4576, 4600, 4590, 4608, 4590, 4600, 4590, 4608, 4590, 4608, 4590, 4608, 4590, 4600, 4590, 4608, 4608, 4600, 4600, 4608, 4608, 4608, 4608, 4608, 4608, 4608, 4608, 4608, 4608, 4608, 4608, 4608, 4608, 4608, 4608, 4608, 4608, 4608, 4608, 4608, 4608, 4608, 4608, 4608, 4608, 4608, 4608, 4620, 4640, 4640, 4640, 4680, 4640, 4640, 4640, 4680, 4641, 4680, 4650, 4680, 4650, 4680, 4662, 4680, 4662, 4752, 4662, 4680, 4680, 4680, 4746, 4680, 4655, 4680, 4680, 4680, 4675, 4680, 4680, 4680, 4680, 4680, 4680, 4680, 4680, 4680, 4680, 4680, 4680, 4680, 4680, 4680, 4675, 4680, 4680, 4680, 4680, 4680, 4680, 4680, 4680, 4680, 4680, 4680, 4680, 4680, 4680, 4680, 4680, 4704, 4698, 4704, 4698, 4704, 4704, 4704, 4704, 4704, 4704, 4704, 4704, 4704, 4704, 4704, 4704, 4704, 4704, 4704, 4704, 4704, 4704, 4704, 4704, 4704, 4704, 4704, 4704, 4752, 4736, 4732, 4725, 4736, 4736, 4736, 4725, 4732, 4752, 4752, 4725, 4752, 4732, 4732, 4725, 4752, 4750, 4752, 4725, 4752, 4752, 4752, 4752, 4752, 4752, 4752, 4752, 4752, 4750, 4752, 4752, 4752, 4750, 4752, 4752, 4752, 4752, 4752, 4752, 4752, 4752, 4752, 4752, 4752, 4752, 4752, 4784, 4784, 4784, 4788, 4797, 4788, 4788, 4788, 4785, 4784, 4800, 4784, 4784, 4784, 4800, 4788, 4800, 4788, 4788, 4788, 4788, 4788, 4800, 4788, 4788, 4788, 4800, 4800, 4800, 4800, 4800, 4800, 4800, 4800, 4800, 4800, 4800, 4800, 4800, 4800, 4800, 4800, 4800, 4800, 4800, 4800, 4800, 4800, 4800, 4800, 4800, 4800, 4851, 4860, 4830, 4836, 4830, 4836, 4830, 4872, 4830, 4860, 4830, 4860, 4845, 4860, 4840, 4840, 4851, 4840, 4840, 4860, 4845, 4860, 4860, 4840, 4840, 4860, 4860, 4840, 4840, 4860, 4860, 4860, 4860, 4860, 4860, 4860, 4851, 4860, 4860, 4860, 4851, 4860, 4860, 4860, 4860, 4860, 4860, 4860, 4860, 4860, 4860, 4860, 4860, 4860, 4860, 4860, 4875, 4860, 4860, 4860, 4896, 4896, 4896, 4896, 4875, 4896, 4896, 4896, 4896, 4896, 4896, 4896, 4896, 4896, 4896, 4896, 4896, 4896, 4896, 4896, 4896, 4896, 4896, 4896, 4896, 4896, 4896, 4900, 4914, 4900, 4914, 4928, 4900, 4900, 4914, 4928, 4930, 4940, 4914, 4968, 4914, 4928, 4914, 4928, 4914, 4928, 4928, 4928, 4968, 4928, 4928, 4928, 4950, 4928, 4928, 4928, 4928, 4928, 4928, 4928, 4928, 4928, 4950, 4960, 4950, 4960, 4950, 4992, 4950, 4968, 4950, 4960, 4950, 4968, 4950, 4960, 4960, 5040, 4950, 4968, 4950, 4968, 4950, 4968, 4968, 4968, 4968, 4968, 4968, 4968, 4968, 4968, 4968, 4992, 4992, 4992, 4992, 4992, 4992, 4992, 4992, 4992, 4992, 4992, 4992, 4992, 4992, 4992, 4992, 4992, 4992, 4992, 4992, 4992, 4992, 4992, 4992, 4992, 4992, 4992, 4992, 4992, 4992, 4992, 4992, 4992, 4992, 5016, 5000, 5040, 5022, 5000, 5000, 5040, 5016, 5000, 5000, 5016, 5016, 5040, 5040, 5040, 5040, 5040, 5040, 5040, 5040, 5040, 5040, 5040, 5040, 5040, 5040, 5040, 5040, 5040, 5040, 5040, 5040, 5040, 5040, 5040, 5040, 5040, 5040, 5040, 5040, 5040, 5040, 5040, 5040, 5040, 5040, 5040, 5040, 5040, 5040, 5040, 5082, 5088, 5088, 5088, 5070, 5088, 5088, 5100, 5070, 5096, 5075, 5100, 5070, 5100, 5070, 5096, 5070, 5100, 5082, 5124, 5082, 5096, 5096, 5100, 5082, 5100, 5100, 5096, 5082, 5100, 5082, 5100, 5100, 5096, 5096, 5104, 5100, 5100, 5103, 5096, 5096, 5100, 5096, 5100, 5120, 5096, 5096, 5100, 5100, 5100, 5103, 5120, 5120, 5120, 5103, 5120, 5120, 5120, 5103, 5120, 5120, 5120, 5103, 5120, 5120, 5120, 5120, 5120, 5120, 5120, 5120, 5120, 5120, 5120, 5120, 5120, 5120, 5120, 5120, 5120, 5120, 5120, 5120, 5120, 5160, 5148, 5145, 5148, 5152, 5152, 5145, 5152, 5148, 5148, 5152, 5148, 5148, 5148, 5145, 5180, 5184, 5184, 5175, 5168, 5184, 5168, 5168, 5168, 5180, 5180, 5175, 5184, 5184, 5184, 5175, 5184, 5184, 5184, 5175, 5184, 5184, 5184, 5184, 5184, 5184, 5184, 5184, 5184, 5184, 5184, 5184, 5184, 5184, 5184, 5184, 5184, 5184, 5184, 5184, 5184, 5184, 5184, 5184, 5184, 5184, 5184, 5184, 5184, 5200, 5200, 5220, 5200, 5200, 5200, 5220, 5220, 5280, 5220, 5220, 5220, 5236, 5280, 5239, 5236, 5250, 5264, 5225, 5248, 5250, 5236, 5244, 5280, 5248, 5236, 5248, 5244, 5244, 5244, 5236, 5236, 5250, 5264, 5250, 5264, 5250, 5264, 5250, 5280, 5250, 5280, 5250, 5280, 5250, 5280, 5250, 5280, 5270, 5280, 5250, 5280, 5250, 5280, 5250, 5280, 5250, 5280, 5250, 5280, 5278, 5292, 5265, 5280, 5280, 5280, 5265, 5280, 5280, 5280, 5265, 5280, 5280, 5280, 5280, 5280, 5280, 5280, 5280, 5280, 5280, 5280, 5280, 5280, 5280, 5280, 5280, 5280, 5280, 5292, 5292, 5292, 5486, 5292, 5292, 5292, 5292, 5292, 5304, 5292, 5292, 5292, 5313, 5400, 5328, 5320, 5328, 5328, 5320, 5328, 5328, 5320, 5320, 5320, 5320, 5360, 5376, 5320, 5320, 5376, 5324, 5324, 5346, 5368, 5346, 5376, 5346, 5412, 5346, 5376, 5346, 5376, 5346, 5424, 5346, 5376, 5346, 5376, 5346, 5376, 5346, 5376, 5346, 5376, 5346, 5376, 5346, 5376, 5346, 5376, 5346, 5376, 5346, 5376, 5346, 5376, 5376, 5376, 5376, 5376, 5376, 5376, 5376, 5376, 5376, 5376, 5376, 5376, 5376, 5376, 5376, 5376, 5376, 5376, 5376, 5376, 5376, 5376, 5376, 5376, 5376, 5376, 5376, 5376, 5376, 5376, 5376, 5376, 5376, 5376, 5400, 5400, 5390, 5400, 5400, 5400, 5400, 5400, 5400, 5400, 5400, 5400, 5400, 5400, 5400, 5400, 5400, 5400, 5400, 5400, 5400, 5400, 5400, 5440, 5440, 5460, 5440, 5440, 5439, 5440, 5460, 5440, 5434, 5440, 5544, 5440, 5440, 5440, 5440, 5440, 5440, 5440, 5440, 5460, 5440, 5440, 5460, 5440, 5440, 5440, 5440, 5440, 5440, 5440, 5460, 5460, 5445, 5460, 5472, 5460, 5460, 5460, 5472, 5460, 5460, 5460, 5460, 5460, 5472, 5460, 5472, 5460, 5460, 5460, 5472, 5472, 5472, 5472, 5472, 5472, 5472, 5472, 5472, 5472, 5472, 5488, 5488, 5488, 5504, 5500, 5504, 5504, 5488, 5488, 5488, 5488, 5520, 5508, 5488, 5488, 5508, 5488, 5500, 5488, 5488, 5488, 5544, 5500, 5520, 5508, 5508, 5500, 5508, 5508, 5500, 5500, 5508, 5508, 5520, 5508, 5508, 5508, 5520, 5520, 5520, 5520, 5520, 5520, 5525, 5544, 5544, 5544, 5544, 5544, 5544, 5568, 5544, 5544, 5544, 5544, 5544, 5544, 5544, 5544, 5544, 5544, 5544, 5544, 5544, 5544, 5544, 5544, 5544, 5544, 5544, 5544, 5544, 5544, 5544, 5544, 5544, 5600, 5566, 5568, 5568, 5568, 5568, 5568, 5568, 5568, 5568, 5568, 5580, 5580, 5580, 5580, 5589, 5580, 5580, 5580, 5577, 5600, 5600, 5600, 5600, 5600, 5586, 5600, 5589, 5616, 5586, 5600, 5586, 5600, 5600, 5600, 5589, 5600, 5600, 5600, 5600, 5600, 5600, 5600, 5600, 5600, 5600, 5600, 5600, 5600, 5600, 5600, 5600, 5600, 5600, 5600, 5600, 5616, 5600, 5600, 5600, 5616, 5616, 5616, 5616, 5616, 5616, 5616, 5616, 5616, 5616, 5616, 5616, 5616, 5632, 5664, 5625, 5632, 5632, 5632, 5625, 5632, 5632, 5632, 5625, 5632, 5632, 5632, 5632, 5632, 5632, 5632, 5632, 5684, 5670, 5712, 5670, 5676, 5670, 5676, 5670, 5712, 5670, 5740, 5670, 5700, 5670, 5700, 5670, 5684, 5670, 5712, 5670, 5700, 5670, 5684, 5670, 5712, 5670, 5700, 5670, 5684, 5670, 5700, 5670, 5712, 5670, 5700, 5670, 5700, 5670, 5700, 5700, 5700, 5712, 5712, 5700, 5700, 5720, 5712, 5700, 5700, 5700, 5700, 5712, 5700, 5712, 5700, 5700, 5700, 5712, 5712, 5712, 5712, 5712, 5712, 5712, 5712, 5720, 5712, 5712, 5712, 5712, 5712, 5742, 5720, 5720, 5740, 5742, 5720, 5720, 5760, 5733, 5760, 5742, 5760, 5742, 5760, 5742, 5760, 5733, 5760, 5760, 5760, 5733, 5760, 5760, 5760, 5760, 5760, 5750, 5760, 5760, 5760, 5750, 5760, 5760, 5760, 5760, 5760, 5760, 5760, 5760, 5760, 5760, 5760, 5760, 5760, 5760, 5760, 5760, 5760, 5760, 5760, 5760, 5760, 5760, 5760, 5760, 5760, 5760, 5760, 5760, 5760, 5760, 5840, 5840, 5796, 5775, 5796, 5808, 5796, 5800, 5796, 5796, 5796, 5796, 5796, 5814, 5796, 5796, 5796, 5814, 5808, 5808, 5832, 5832, 5808, 5808, 5808, 5808, 5808, 5814, 5808, 5808, 5808, 5824, 5808, 5808, 5808, 5808, 5808, 5824, 5824, 5832, 5824, 5824, 5824, 5824, 5824, 5832, 5824, 5824, 5824, 5824, 5824, 5824, 5824, 5824, 5824, 5832, 5832, 5832, 5832, 5832, 5832, 5832, 5832, 5832, 5832, 5832, 5832, 5832, 5832, 5832, 5832, 5832, 5880, 5880, 5880, 5850, 5880, 5850, 5880, 5850, 5880, 5880, 5880, 5880, 5888, 5880, 5880, 5880, 5880, 5880, 5880, 5880, 5880, 5880, 5880, 5880, 5880, 5880, 5880, 5880, 5880, 5880, 5880, 5880, 5880, 5880, 5880, 5880, 5880, 5880, 5880, 5880, 5880, 5880, 5920, 5916, 5920, 5922, 5920, 5922, 5916, 5916, 5916, 5920, 5920, 5920, 5936, 5920, 5920, 5920, 5940, 5940, 5940, 5928, 5928, 5915, 5940, 5940, 5940, 5940, 5928, 5940, 5940, 5928, 5928, 5928, 5928, 5928, 5940, 5950, 5940, 5929, 5940, 5978, 5940, 5940, 5940, 5940, 5940, 5940, 5940, 5940, 5940, 5940, 5940, 5940, 5940, 5940, 5940, 5950, 5940, 5940, 5940, 5950, 6000, 5984, 5984, 5984, 5980, 5985, 5984, 5980, 5980, 5967, 6000, 6000, 5984, 5967, 6000, 5984, 5980, 5984, 6000, 5980, 5980, 5984, 5984, 5984, 6000, 5985, 6000, 5994, 5984, 5984, 6000, 5984, 5984, 5984, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6048, 6032, 6048, 6032, 6032, 6032, 6045, 6048, 6048, 6048, 6048, 6048, 6048, 6048, 6045, 6048, 6048, 6048, 6048, 6048, 6048, 6048, 6048, 6048, 6048, 6048, 6048, 6048, 6048, 6048, 6048, 6048, 6048, 6048, 6048, 6048, 6048, 6048, 6048, 6048, 6048, 6048, 6048, 6048, 6048, 6048, 6048, 6048, 6048, 6072, 6072, 6072, 6072, 6120, 6075, 6080, 6080, 6080, 6075, 6084, 6080, 6080, 6075, 6080, 6080, 6080, 6075, 6080, 6080, 6080, 6075, 6084, 6120, 6120, 6075, 6120, 6120, 6120, 6120, 6120, 6136, 6120, 6118, 6144, 6120, 6120, 6120, 6120, 6118, 6120, 6120, 6144, 6120, 6120, 6120, 6120, 6138, 6120, 6120, 6120, 6120, 6120, 6120, 6120, 6120, 6120, 6120, 6120, 6120, 6120, 6120, 6144, 6150, 6144, 6144, 6144, 6144, 6144, 6125, 6144, 6144, 6144, 6144, 6144, 6144, 6144, 6144, 6144, 6144, 6144, 6144, 6144, 6144, 6144, 6144, 6144, 6144, 6144, 6144, 6144, 6144, 6144, 6144, 6144, 6144, 6144, 6144, 6144, 6144, 6160, 6171, 6160, 6160, 6160, 6174, 6192, 6174, 6188, 6174, 6192, 6200, 6204, 6174, 6188, 6174, 6216, 6174, 6216, 6174, 6188, 6210, 6200, 6200, 6216, 6210, 6200, 6200, 6240, 6216, 6216, 6216, 6240, 6210, 6216, 6210, 6216, 6210, 6232, 6210, 6240, 6210, 6240, 6210, 6240, 6210, 6240, 6240, 6240, 6237, 6240, 6240, 6240, 6240, 6240, 6240, 6240, 6237, 6240, 6240, 6240, 6237, 6240, 6240, 6240, 6237, 6240, 6240, 6240, 6237, 6240, 6240, 6240, 6237, 6240, 6240, 6240, 6237, 6240, 6240, 6240, 6237, 6240, 6240, 6240, 6240, 6264, 6264, 6264, 6264, 6264, 6264, 6264, 6250, 6264, 6264, 6272, 6250, 6272, 6270, 6272, 6270, 6272, 6270, 6272, 6272, 6272, 6272, 6272, 6272, 6272, 6272, 6272, 6272, 6272, 6272, 6272, 6272, 6272, 6272, 6272, 6272, 6300, 6300, 6300, 6292, 6292,\r\n       6300, 6300, 6300, 6300, 6300, 6300, 6300, 6300, 6300, 6300, 6318, 6300, 6300, 6300, 6300, 6300, 6300, 6300, 6336, 6300, 6300, 6300, 6336, 6336, 6318, 6336, 6318, 6336, 6318, 6336, 6318, 6336, 6318, 6336, 6318, 6336, 6318, 6336, 6336, 6336, 6336, 6336, 6336, 6336, 6336, 6336, 6336, 6336, 6336, 6336, 6336, 6336, 6336, 6336, 6336, 6336, 6336, 6336, 6370, 6384, 6400, 6384, 6375, 6380, 6380, 6384, 6405, 6380, 6392, 6384, 6370, 6384, 6384, 6380, 6384, 6384, 6370, 6380, 6370, 6384, 6396, 6384, 6370, 6384, 6384, 6384, 6375, 6384, 6384, 6384, 6510, 6384, 6384, 6384, 6384, 6384, 6400, 6400, 6400, 6400, 6400, 6400, 6417, 6400, 6400, 6400, 6400, 6400, 6400, 6400, 6400, 6400, 6400, 6400, 6400, 6400, 6400, 6400, 6400, 6400, 6400, 6400, 6400, 6400, 6400, 6400, 6426, 6440, 6426, 6480, 6448, 6448, 6426, 6440, 6426, 6468, 6426, 6468, 6426, 6440, 6440, 6440, 6435, 6448, 6468, 6440, 6435, 6468, 6460, 6480, 6475, 6468, 6468, 6480, 6480, 6468, 6480, 6460, 6480, 6480, 6460, 6460, 6468, 6468, 6468, 6468, 6475, 6468, 6480, 6480, 6468, 6468, 6480, 6468, 6480, 6468, 6468, 6468, 6480, 6480, 6480, 6468, 6468, 6468, 6480, 6480, 6480, 6480, 6480, 6480, 6480, 6480, 6480, 6480, 6480, 6480, 6480, 6480, 6480, 6480, 6480, 6480, 6480, 6480, 6480, 6480, 6510, 6500, 6510, 6528, 6525, 6500, 6528, 6536, 6500, 6500, 6528, 6528, 6525, 6528, 6528, 6528, 6517, 6528, 6528, 6528, 6525, 6528, 6528, 6528, 6528, 6528, 6528, 6528, 6528, 6528, 6528, 6528, 6528, 6528, 6528, 6528, 6528, 6528, 6528, 6552, 6534, 6552, 6534, 6552, 6545, 6552, 6552, 6552, 6552, 6552, 6552, 6552, 6552, 6552, 6552, 6552, 6552, 6552, 6552, 6552, 6552, 6552, 6552, 6600, 6561, 6600, 6600, 6600, 6561, 6600, 6600, 6600, 6561, 6600, 6608, 6600, 6561, 6600, 6600, 6600, 6561, 6600, 6624, 6624, 6600, 6600, 6600, 6600, 6591, 6600, 6600, 6600, 6600, 6600, 6600, 6600, 6600, 6600, 6600, 6600, 6600, 6600, 6600, 6600, 6600, 6600, 6600, 6600, 6600, 6600, 6600, 6600, 6600, 6624, 6624, 6624, 6615, 6624, 6624, 6624, 6615, 6624, 6624, 6624, 6615, 6624, 6624, 6624, 6615, 6656, 6630, 6656, 6656, 6656, 6650, 6688, 6650, 6660, 6678, 6660, 6656, 6660, 6656, 6656, 6656, 6656, 6650, 6656, 6650, 6656, 6656, 6664, 6650, 6656, 6656, 6656, 6655, 6656, 6656, 6656, 6696, 6656, 6656, 6656, 6656, 6656, 6656, 6656, 6656, 6656, 6656, 6688, 6688, 6696, 6696, 6720, 6688, 6720, 6688, 6688, 6688, 6696, 6720, 6696, 6696, 6688, 6688, 6696, 6688, 6688, 6688, 6696, 6696, 6720, 6720, 6720, 6720, 6720, 6720, 6720, 6720, 6720, 6720, 6720, 6720, 6720, 6720, 6720, 6720, 6720, 6720, 6720, 6720, 6720, 6720, 6720, 6720, 6720, 6720, 6720, 6720, 6720, 6720, 6720, 6720, 6720, 6720, 6720, 6720, 6720, 6720, 6720, 6720, 6720, 6720, 6720, 6720, 6720, 6750, 6760, 6750, 6768, 6750, 6768, 6750, 6768, 6750, 6768, 6750, 6768, 6750, 6760, 6760, 6776, 6750, 6784, 6750, 6784, 6750, 6760, 6750, 6804, 6750, 6760, 6750, 6804, 6750, 6800, 6804, 6804, 6816, 6776, 6776, 6804, 6786, 6776, 6776, 6804, 6776, 6820, 6800, 6776, 6776, 6800, 6825, 6804, 6800, 6800, 6804, 6800, 6800, 6800, 6804, 6800, 6800, 6804, 6800, 6804, 6800, 6800, 6804, 6804, 6800, 6800, 6804, 6800, 6800, 6800, 6804, 6804, 6804, 6804, 6804, 6804, 6804, 6804, 6804, 6804, 6840, 6804, 6804, 6804, 6840, 6840, 6825, 6860, 6840, 6840, 6831, 6840, 6840, 6840, 6825, 6840, 6840, 6840, 6840, 6840, 6840, 6840, 6840, 6840, 6840, 6840, 6840, 6840, 6840, 6860, 6864, 6864, 6864, 6864, 6860, 6864, 6864, 6864, 6864, 6864, 6860, 6860, 6864, 6860, 6880, 6864, 6864, 6860, 6888, 6860, 6864, 6864, 6860, 6860, 6885, 7020, 6912, 6900, 6912, 6900, 6900, 6900, 6885, 6912, 6912, 6900, 6875, 6900, 6902, 6912, 6885, 6900, 6912, 6912, 6885, 6900, 6900, 6900, 6912, 6900, 6912, 6900, 6900, 6900, 6912, 6912, 6912, 6912, 6912, 6912, 6912, 6912, 6912, 6912, 6912, 6912, 6912, 6912, 6912, 6912, 6912, 6912, 6912, 6912, 6912, 6912, 6912, 6912, 6912, 6912, 6912, 6912, 6912, 6912, 6912, 6912, 6930, 6960, 6930, 6944, 6930, 6960, 6930, 7896, 6960, 6960, 6960, 6960, 6960, 6960, 6960, 6960, 6960, 6960, 6960, 6960, 6960, 6960, 6960, 6960, 6996, 7008, 6975, 6992, 7008, 6996, 6975, 6992, 7000, 7020, 6975, 7020, 7000, 7020, 6992, 7000, 7000, 7000, 6993, 7000, 7020, 6992, 6993, 6992, 6992, 6992, 7011, 7000, 7000, 7040, 7000, 7000, 7000, 7000, 7000, 7000, 7000, 7000, 7038, 7000, 7000, 7020, 7000, 7000, 7000, 7020, 7000, 7020, 7000, 7000, 7000, 7000, 7000, 7020, 7040, 7000, 7000, 7020, 7020, 7020, 7020, 7020, 7020, 7020, 7020, 7020, 7020, 7020, 7020, 7020, 7038, 7020, 7020, 7020, 7040, 7040, 7056, 7040, 7040, 7040, 7040, 7040, 7040, 7040, 7040, 7040, 7040, 7040, 7040, 7040, 7040, 7040, 7040, 7040, 7040, 7040, 7040, 7056, 7056, 7056, 7056, 7056, 7056, 7056, 7056, 7056, 7056, 7056, 7056, 7056, 7056, 7056, 7056, 7056, 7072, 7072, 7072, 7128, 7098, 7104, 7084, 7084, 7106, 7140, 7104, 7104, 7104, 7128, 7104, 7104, 7098, 7104, 7104, 7104, 7104, 7104, 7098, 7104, 7105, 7140, 7098, 7128, 7098, 7128, 7128, 7128, 7125, 7128, 7150, 7128, 7128, 7128, 7128, 7128, 7125, 7128, 7128, 7128, 7128, 7128, 7128, 7128, 7125, 7128, 7128, 7128, 7128, 7128, 7128, 7128, 7125, 7128, 7128, 7128, 7128, 7128, 7128, 7128, 7128, 7128, 7128, 7128, 7128, 7128, 7128, 7140, 7140, 7140, 7168, 7176, 7161, 7176, 7150, 7168, 7182, 7168, 7150, 7168, 7168, 7168, 7176, 7168, 7168, 7168, 7168, 7168, 7168, 7168, 7168, 7168, 7168, 7168, 7168, 7168, 7168, 7168, 7168, 7168, 7168, 7168, 7168, 7168, 7168, 7168, 7168, 7168, 7168, 7168, 7168, 7168, 7200, 7200, 7200, 7200, 7200, 7200, 7200, 7200, 7200, 7200, 7200, 7200, 7200, 7200, 7200, 7200, 7200, 7200, 7200, 7200, 7200, 7200, 7200, 7200, 7200, 7200, 7200, 7200, 7200, 7200, 7200, 7280, 7225, 7280, 7280, 7296, 7245, 7252, 7254, 7260, 7250, 7296, 7254, 7252, 7245, 7260, 7260, 7260, 7245, 7252, 7254, 7260, 7245, 7280, 7254, 7260, 7245, 7260, 7260, 7260, 7280, 7260, 7290, 7280, 7280, 7260, 7260, 7260, 7290, 7260, 7260, 7260, 7260, 7260, 7290, 7260, 7280, 7260, 7260, 7260, 7290, 7280, 7280, 7280, 7280, 7280, 7296, 7280, 7280, 7280, 7280, 7280, 7290, 7280, 7280, 7280, 7280, 7280, 7290, 7280, 7280, 7280, 7290, 7296, 7290, 7296, 7290, 7296, 7290, 7296, 7290, 7296, 7290, 7296, 7290, 7296, 7290, 7332, 7290, 7344, 7290, 7344, 7326, 7392, 7315, 7344, 7344, 7344, 7344, 7344, 7344, 7344, 7344, 7344, 7344, 7344, 7344, 7344, 7344, 7360, 7344, 7344, 7344, 7344, 7344, 7344, 7344, 7344, 7344, 7344, 7344, 7344, 7344, 7344, 7344, 7344, 7344, 7344, 7344, 7344, 7344, 7344, 7344, 7344, 7344, 7344, 7350, 7360, 7350, 7360, 7350, 7360, 7350, 7360, 7350, 7360, 7371, 7380, 7392, 7392, 7371, 7392, 7392, 7392, 7371, 7392, 7392, 7392, 7371, 7392, 7392, 7392, 7371, 7392, 7392, 7392, 7392, 7392, 7392, 7392, 7392, 7424, 7392, 7392, 7392, 7392, 7392, 7392, 7392, 7392, 7392, 7392, 7392, 7392, 7392, 7392, 7392, 7440, 7410, 7452, 7410, 7440, 7424, 7424, 7424, 7436, 7424, 7424, 7425, 7424, 7424, 7424, 7424, 7424, 7424, 7424, 7425, 7436, 7440, 7440, 7425, 7440, 7440, 7440, 7425, 7440, 7436, 7436, 7425, 7488, 7448, 7452, 7488, 7452, 7480, 7448, 7448, 7548, 7448, 7452, 7452, 7448, 7448, 7452, 7475, 7452, 7452, 7452, 7480, 7488, 7488, 7480, 7488, 7488, 7480, 7488, 7488, 7480, 7480, 7500, 7475, 7480, 7488, 7480, 7480, 7488, 7488, 7488, 7488, 7480, 7480, 7488, 7488, 7480, 7480, 7488, 7488, 7488, 7488, 7488, 7488, 7488, 7488, 7488, 7488, 7488, 7488, 7488, 7488, 7488, 7488, 7488, 7488, 7488, 7500, 7500, 7514, 7524, 7500, 7500, 7500, 7500, 7544, 7500, 7560, 7500, 7500, 7500, 7540, 7540, 7524, 7552, 7524, 7524, 7552, 7524, 7524, 7524, 7548, 7548, 7533, 7540, 7560, 7560, 7560, 7560, 7560, 7560, 7560, 7560, 7560, 7560, 7560, 7560, 7546, 7560, 7560, 7560, 7546, 7560, 7560, 7560, 7560, 7560, 7546, 7560, 7560, 7560, 7560, 7560, 7560, 7560, 7560, 7560, 7560, 7560, 7560, 7560, 7560, 7560, 7560, 7560, 7560, 7560, 7560, 7560, 7560, 7560, 7560, 7616, 7590, 7600, 7650, 7616, 7590, 7600, 7590, 7600, 7590, 7600, 7600, 7600, 7614, 7600, 7600, 7616, 7600, 7632, 7600, 7600, 7632, 7616, 7600, 7600, 7616, 7600, 7600, 7600, 7616, 7616, 7605, 7700, 7656, 7616, 7616, 7616, 7644, 7616, 7616, 7616, 7616, 7616, 7616, 7616, 7616, 7616, 7623, 7668, 7644, 7644, 7623, 7680, 7656, 7656, 7644, 7644, 7650, 7680, 7650, 7644, 7644, 7644, 7650, 7656, 7680, 7644, 7644, 7644, 7650, 7656, 7650, 7644, 7644, 7644, 7650, 7680, 7650, 7680, 7650, 7680, 7680, 7680, 7680, 7680, 7680, 7680, 7680, 7680, 7680, 7680, 7680, 7680, 7680, 7680, 7680, 7680, 7680, 7680, 7680, 7680, 7680, 7680, 7680, 7680, 7680, 7680, 7680, 7680, 7680, 7680, 7680, 7680, 7680, 7680, 7680, 7680, 7680, 7680, 7680, 7680, 7680, 7680, 7680, 7700, 7722, 7700, 7722, 7700, 7722, 7728, 7700, 7700, 7728, 7728, 7722, 7728, 7722, 7728, 7722, 7728, 7722, 7728, 7728, 7728, 7722, 7728, 7722, 7728, 7722, 7728, 7722, 7728, 7752, 7744, 7735, 7744, 7770, 7776, 7776, 7776, 7744, 7744, 7770, 7744, 7744, 7744, 7752, 7744, 7752, 7752, 7744, 7744, 7744, 7744, 7744, 7744, 7770, 7776, 7770, 7776, 7776, 7776, 7776, 7776, 7774, 7776, 7776, 7776, 7776, 7776, 7776, 7776, 7776, 7776, 7776, 7776, 7776, 7776, 7776, 7776, 7776, 7776, 7776, 7776, 7776, 7776, 7776, 7776, 7776, 7776, 7776, 7776, 7776, 7776, 7776, 7776, 7776, 7776, 7776, 7800, 7800, 7800, 7800, 7800, 7800, 7800, 7800, 7800, 7800, 7800, 7800, 7800, 7800, 7820, 7840, 7840, 7830, 7872, 7830, 7840, 7830, 7840, 7830, 7840, 7830, 7840, 7830, 7840, 7830, 7884, 7840, 7840, 7840, 7840, 7854, 7872, 7840, 7840, 7875, 7840, 7840, 7840, 7840, 7840, 7840, 7840, 7840, 7904, 7840, 7840, 7840, 7840, 7840, 7872, 7840, 7840, 7840, 7872, 7866, 7872, 7872, 7872, 7875, 7896, 7896, 7904, 7865, 7920, 7896, 7896, 7875, 7920, 7896, 7888, 7875, 7888, 7888, 7888, 7875, 7920, 7904, 7912, 7875, 7904, 7904, 7920, 7875, 7904, 7904, 7920, 7875, 7920, 7904, 7904, 7904, 7904, 7920, 7920, 7920, 7920, 7920, 7904, 7904, 7920, 7904, 7904, 7904, 7920, 7920, 7920, 7920, 7920, 7920, 7920, 7920, 7920, 7920, 7920, 7920, 7920, 7920, 7920, 7920, 7920, 7920, 7920, 7920, 7920, 7920, 7920, 7920, 7920, 7920, 7920, 7920, 7920, 7938, 7992, 7938, 7956, 7938, 7956, 7938, 7956, 7938, 7956, 7938, 7956, 7938, 7980, 7938, 7980, 7938, 7980, 7938, 7956, 7990, 7956, 7956, 7956, 7980, 7980, 7992, 7980, 7992, 7980, 7975, 7980, 8000, 7980, 7986, 7980, 7980, 7980, 7995, 7980, 7980, 7980, 7980, 7980, 7986, 7980, 7992, 7980, 7980, 7980, 8000, 8000, 7986, 8000, 7986, 8000, 8000, 8000, 8000, 8000, 8008, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8050, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8056, 8064, 8019, 8064, 8064, 8064, 8019, 8064, 8050, 8064, 8019, 8064, 8064, 8060, 8019, 8064, 8060, 8060, 8064, 8064, 8064, 8064, 8064, 8064, 8050, 8060, 8050, 8064, 8060, 8060, 8050, 8064, 8064, 8064, 8064, 8064, 8064, 8064, 8064, 8064, 8064, 8064, 8064, 8064, 8064, 8064, 8064, 8064, 8064, 8064, 8064, 8064, 8064, 8064, 8064, 8064, 8064, 8064, 8064, 8064, 8064, 8064, 8064, 8064, 8064, 8096, 8085, 8100, 8092, 8092, 8100, 8096, 8096, 8100, 8085, 8096, 8096, 8100, 8100, 8100, 8100, 8100, 8100, 8100, 8100, 8100, 8100, 8100, 8100, 8100, 8100, 8100, 8100, 8100, 8100, 8100, 8112, 8100, 8100, 8100, 8160, 8140, 8151, 8160, 8140, 8140, 8151, 8160, 8160, 8160, 8160, 8160, 8160, 8160, 8125, 8160, 8160, 8160, 8160, 8160, 8160, 8160, 8160, 8160, 8160, 8160, 8151, 8160, 8160, 8160, 8160, 8160, 8160, 8160, 8160, 8160, 8160, 8160, 8160, 8160, 8160, 8160, 8160, 8160, 8160, 8160, 8160, 8160, 8160, 8160, 8160, 8208, 8184, 8184, 8184, 8184, 8184, 8192, 8190, 8192, 8190, 8192, 8192, 8192, 8190, 8192, 8190, 8192, 8190, 8192, 8190, 8208, 8190, 8192, 8190, 8208, 8190, 8192, 8190, 8192, 8190, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192, 8208, 8250, 8320, 8250, 8232, 8232, 8260, 8250, 8232, 8228, 8228, 8232, 8280, 8232, 8256, 8232, 8232, 8232, 8256, 8250, 8256, 8232, 8232, 8232, 8256, 8232, 8232, 8232, 8232, 8232, 8272, 8262, 8272, 8250, 8280, 8250, 8280, 8250, 8280, 8262, 8280, 8250, 8280, 8250, 8280, 8250, 8316, 8262, 8316, 8262, 8280, 8262, 8280, 8262, 8280, 8262, 8280, 8280, 8280, 8280, 8280, 8280, 8280, 8280, 8280, 8280, 8280, 8280, 8316, 8316, 8316, 8316, 8320, 8316, 8316, 8320, 8316, 8316, 8316, 8316, 8316, 8316, 8316, 8316, 8316, 8316, 8316, 8316, 8316, 8316, 8316, 8316, 8316, 8316, 8316, 8316, 8316, 8320, 8316, 8316, 8316, 8316, 8316, 8320, 8316, 8316, 8316, 8316, 8316, 8320, 8316, 8316, 8316, 8320, 8320, 8320, 8320, 8320, 8424, 8352, 8352, 8352, 8352, 8352, 8352, 8349, 8352, 8352, 8352, 8352, 8352, 8352, 8352, 8352, 8352, 8352, 8400, 8370, 8372, 8370, 8360, 8360, 8400, 8370, 8360, 8360, 8400, 8370, 8400, 8370, 8372, 8400, 8400, 8379, 8400, 8398, 8400, 8400, 8400, 8398, 8400, 8379, 8400, 8400, 8400, 8379, 8400, 8400, 8400, 8400, 8400, 8398, 8400, 8400, 8400, 8400, 8400, 8400, 8400, 8400, 8400, 8400, 8400, 8400, 8400, 8400, 8400, 8400, 8400, 8400, 8400, 8400, 8400, 8400, 8400, 8400, 8400, 8400, 8400, 8400, 8400, 8415, 8424, 8424, 8424, 8424, 8448, 8424, 8424, 8424, 8424, 8448, 8424, 8424, 8424, 8424, 8424, 8424, 8424, 8424, 8424, 8424, 8448, 8448, 8448, 8448, 8448, 8448, 8448, 8448, 8448, 8448, 8448, 8448, 8448, 8448, 8448, 8448, 8448, 8448, 8448, 8448, 8448, 8448, 8448, 8448, 8448, 8448, 8448, 8470, 8496, 8528, 8512, 8470, 8500, 8470, 8512, 8505, 8500, 8470, 8520, 8500, 8532, 8510, 8512, 8505, 8532, 8510, 8544, 8505, 8500, 8526, 8512, 8500, 8500, 8514, 8512, 8500, 8512, 8512, 8512, 8505, 8500, 8512, 8512, 8505, 8500, 8540, 8528, 8500, 8500, 8512, 8512, 8505, 8512, 8512, 8512, 8505, 8512, 8512, 8512, 8505, 8512, 8526, 8568, 8505, 8568, 8568, 8568, 8550, 8568, 8550, 8576, 8547, 8568, 8568, 8580, 8550, 8556, 8550, 8556, 8550, 8576, 8550, 8568, 8568, 8568, 8550, 8568, 8550, 8568, 8550, 8580, 8568, 8580, 8550, 8568, 8550, 8568, 8550, 8568, 8568, 8568, 8568, 8568, 8568, 8568, 8568, 8568, 8568, 8568, 8568, 8568, 8568, 8568, 8568, 8568, 8568, 8568, 8568, 8580, 8580, 8580, 8580, 8580, 8610, 8580, 8600, 8580, 8575, 8580, 8610, 8624, 8602, 8640, 8610, 8640, 8610, 8624, 8640, 8624, 8624, 8624, 8624, 8640, 8613, 8624, 8624, 8640, 8613, 8640, 8640, 8640, 8624, 8640, 8640, 8624, 8619, 8624, 8624, 8640, 8624, 8624, 8640, 8624, 8624, 8624, 8624, 8624, 8625, 8640, 8624, 8624, 8640, 8624, 8640, 8624, 8624, 8624, 8640, 8640, 8640, 8640, 8640, 8640, 8640, 8640, 8640, 8640, 8640, 8640, 8640, 8640, 8640, 8640, 8640, 8640, 8640, 8640, 8640, 8640, 8640, 8640, 8640, 8640, 8694, 8704, 8670, 8700, 8670, 8680, 8670, 8680, 8680, 8700, 8694, 8680, 8680, 8700, 8694, 8712, 8704, 8700, 8694, 8700, 8694, 8712, 8694, 8700, 8694, 8704, 8700, 8700, 8694, 8700, 8694, 8700, 8694, 8700, 8694, 8700, 8704, 8704, 8704, 8704, 8712, 8704, 8704, 8704, 8745, 8704, 8704, 8704, 8704, 8704, 8704, 8704, 8704, 8704, 8704, 8712, 8712, 8712, 8712, 8712, 8712, 8736, 8736, 8736, 8736, 8736, 8736, 8736, 8736, 8736, 8736, 8736, 8736, 8736, 8736, 8736, 8736, 8736, 8736, 8736, 8736, 8736, 8736, 8736, 8736, 8736, 8736, 8748, 8748, 8748, 8778, 8748, 8748, 8748, 8748, 8748, 8748, 8748, 8748, 8748, 8748, 8748, 8748, 8748, 8775, 8748, 8748, 8748, 8775, 8816, 8778, 8800, 8775, 8788, 8778, 8800, 8775, 8800, 8820, 8800, 8775, 8800, 8800, 8816, 8775, 8788, 8800, 8820, 8800, 8800, 8816, 8800, 8800, 8800, 8800, 8800, 8800, 8800, 8800, 8800, 8800, 8800, 8800, 8800, 8800, 8820, 8800, 8800, 8800, 8820, 8800, 8800, 8800, 8820, 8820, 8820, 8820, 8820, 8820, 8820, 8820, 8820, 8832, 8820, 8820, 8820, 8820, 8820, 8820, 8820, 8832, 8820, 8820, 8820, 8832, 8832, 8832, 8856, 8856, 8840, 8840, 8856, 8856, 8880, 8874, 8928, 8880, 8880, 8855, 8880, 8880, 8880, 8925, 8892, 8880, 8880, 8874, 8880, 8874, 8880, 8874, 8880, 8880, 8880, 8880, 8880, 8880, 8880, 8880, 8880, 8904, 8892, 8904, 8892, 8904, 8892, 8904, 8892, 8910, 8892, 8910, 8928, 8910, 8928, 8892, 8928, 8892, 8892, 8928, 8892, 8892, 8892, 8910, 8928, 8910, 8928, 8910, 8964, 8910, 8928, 8910, 8928, 8910, 8964, 8910, 8928, 8910, 8960, 8910, 8928, 8910, 8928, 8910, 8928, 8910, 8928, 8910, 8928, 8910, 8928, 8910, 8928, 8910, 8928, 8928, 8960, 8960, 8960, 8925, 8960, 8960, 8960, 8954, 8976, 8960, 8960, 8970, 8960, 8960, 8960, 8960, 8960, 8960, 8960, 8960, 8960, 8960, 8960, 8960, 8960, 8960, 8960, 8960, 8960, 8960, 8960, 8960, 8960, 8960, 8960, 8960, 8960, 8960, 8960, 8960, 8960, 8960, 8960, 8960, 8960, 8960, 8960, 8960, 8960, 8960, 8960, 8960, 8960, 8976, 8976, 8991, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9000, 9072, 9044, 9044, 9048, 9044, 9072, 9072, 9048, 9048, 9048, 9072, 9061, 9072, 9072, 9044, 9072, 9072, 9048, 9048, 9044, 9044, 9048, 9072, 9072, 9072, 9072, 9072, 9072, 9072, 9072, 9072, 9065, 9072, 9072, 9072, 9072, 9072, 9072, 9072, 9072, 9072, 9072, 9072, 9072, 9072, 9072, 9072, 9072, 9072, 9072, 9072, 9072, 9072, 9072, 9072, 9072, 9072, 9072, 9072, 9072, 9072, 9072, 9072, 9072, 9072, 9072, 9072, 9072, 9072, 9072, 9072, 9072, 9072, 9100, 9100, 9114, 9108, 9100, 9100, 9120, 9100, 9108, 9100, 9108, 9100, 9114, 9100, 9108, 9108, 9100, 9100, 9120, 9120, 9120, 9120, 9120, 9120, 9120, 9120, 9120, 9120, 9120, 9120, 9120, 9120, 9120, 9120, 9120, 9120, 9120, 9152, 9126, 9240, 9126, 9180, 9180, 9152, 9180, 9152, 9152, 9152, 9152, 9180, 9180, 9176, 9152, 9152, 9152, 9152, 9152, 9152, 9152, 9152, 9180, 9152, 9177, 9180, 9152, 9152, 9152, 9152, 9152, 9152, 9163, 9180, 9184, 9180, 9177, 9180, 9180, 9180, 9184, 9180, 9180, 9180, 9180, 9180, 9180, 9180, 9180, 9180, 9180, 9180, 9180, 9180, 9180, 9180, 9200, 9180, 9180, 9180, 9200, 9216, 9196, 9196, 9200, 9200, 9216, 9216, 9200, 9200, 9216, 9200, 9200, 9200, 9216, 9216, 9216, 9216, 9216, 9216, 9216, 9216, 9216, 9216, 9216, 9216, 9216, 9216, 9216, 9216, 9216, 9216, 9216, 9216, 9216, 9216, 9216, 9216, 9216, 9216, 9216, 9216, 9216, 9216, 9216, 9216, 9216, 9216, 9216, 9216, 9234, 9240, 9234, 9240, 9240, 9240, 9240, 9240, 9240, 9240, 9240, 9240, 9240, 9280, 9261, 9280, 9288, 9300, 9261, 9360, 9288, 9288, 9261, 9288, 9280, 9280, 9280, 9280, 9280, 9288, 9261, 9280, 9288, 9280, 9261, 9280, 9280, 9280, 9280, 9280, 9282, 9324, 9282, 9300, 9324, 9328, 9300, 9300, 9300, 9300, 9315, 9300, 9360, 9300, 9295, 9300, 9338, 9328, 9315, 9324, 9324, 9324, 9344, 9324, 9360, 9324, 9310, 9324, 9310, 9324, 9315, 9324, 9310, 9324, 9315, 9360, 9348, 9360, 9315, 9360, 9350, 9348, 9348, 9348, 9360, 9360, 9350, 9360, 9360, 9360, 9360, 9360, 9360, 9360, 9360, 9360, 9350, 9360, 9360, 9360, 9360, 9360, 9350, 9360, 9360, 9360, 9360, 9360, 9350, 9360, 9360, 9360, 9350, 9360, 9360, 9360, 9360, 9360, 9360, 9360, 9360, 9360, 9360, 9360, 9360, 9360, 9360, 9360, 9360, 9360, 9360, 9360, 9360, 9360, 9375, 9384, 9384, 9384, 9384, 9396, 9400, 9396, 9375, 9396, 9396, 9408, 9396, 9396, 9396, 9396, 9375, 9396, 9408, 9396, 9396, 9396, 9408, 9408, 9405, 9408, 9408, 9408, 9405, 9408, 9408, 9408, 9405, 9408, 9408, 9408, 9408, 9408, 9408, 9408, 9408, 9408, 9408, 9408, 9408, 9408, 9408, 9408, 9408, 9408, 9408, 9408, 9450, 9472, 9438, 9460, 9438, 9464, 9450, 9500, 9450, 9460, 9450, 9464, 9438, 9460, 9438, 9504, 9450, 9472, 9450, 9504, 9450, 9500, 9450, 9464, 9450, 9540, 9450, 9472, 9450, 9464, 9450, 9472, 9450, 9472, 9450, 9464, 9450, 9472, 9450, 9472, 9450, 9464, 9464, 9504, 9477, 9500, 9486, 9504, 9504, 9504, 9500, 9504, 9477, 9504, 9504, 9504, 9477, 9500, 9504, 9500, 9477, 9500, 9500, 9500, 9477, 9504, 9500, 9504, 9504, 9504, 9504, 9500, 9504, 9504, 9504, 9500, 9504, 9504, 9500, 9500, 9504, 9504, 9504, 9504, 9504, 9504, 9504, 9504, 9504, 9504, 9504, 9504, 9504, 9504, 9504, 9520, 9520, 9520, 9558, 9520, 9520, 9520, 9558, 9568, 9537, 9548, 9568, 9568, 9570, 9576, 9548, 9548, 9555, 9576, 9568, 9576, 9568, 9568, 9568, 9576, 9576, 9576, 9576, 9576, 9555, 9576, 9568, 9568, 9555, 9568, 9576, 9576, 9570, 9576, 9570, 9568, 9555, 9576, 9568, 9568, 9568, 9576, 9576, 9576, 9576, 9576, 9576, 9576, 9576, 9576, 9576, 9576, 9576, 9576, 9576, 9576, 9576, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9600, 9696, 9657, 9660, 9696, 9660, 9633, 9660, 9702, 9660, 9639, 9660, 9672, 9660, 9625, 9660, 9660, 9660, 9639, 9660, 9702, 9720, 9639, 9672, 9672, 9660, 9639, 9660, 9660, 9660, 9672, 9660, 9660, 9660, 9660, 9660, 9680, 9660, 9672, 9660, 9660, 9660, 9672, 9720, 9690, 9680, 9680, 9720, 9680, 9680, 9690, 9728, 9702, 9720, 9680, 9680, 9680, 9720, 9680, 9680, 9702, 9680, 9690, 9720, 9680, 9680, 9690, 9680, 9680, 9680, 9702, 9720, 9702, 9720, 9702, 9720, 9720, 9720, 9702, 9720, 9702, 9720, 9702, 9720, 9720, 9720, 9702, 9720, 9702, 9720, 9702, 9720, 9702, 9720, 9720, 9720, 9720, 9720, 9720, 9720, 9720, 9720, 9720, 9720, 9720, 9720, 9720, 9720, 9720, 9720, 9720, 9720, 9720, 9720, 9720, 9720, 9720, 9720, 9720, 9720, 9720, 9744, 9747, 9768, 9750, 9792, 9765, 9768, 9750, 9776, 9765, 9768, 9750, 9768, 9765, 9792, 9750, 9792, 9750, 9792, 9750, 9792, 9792, 9792, 9792, 9792, 9775, 9792, 9792, 9792, 9792, 9792, 9792, 9792, 9792, 9792, 9792, 9792, 9792, 9792, 9792, 9792, 9792, 9792, 9792, 9792, 9792, 9792, 9792, 9792, 9792, 9792, 9792, 9792, 9792, 9792, 9792, 9792, 9792, 9792, 9792, 9792, 9792, 9792, 9800, 9828, 9800, 9800, 9800, 9800, 9800, 9828, 9840, 9800, 9800, 9828, 9828, 9828, 9828, 9828, 9828, 9828, 9828, 9828, 9840, 9828, 9828, 9828, 9828, 9828, 9856, 9828, 9828, 9828, 9828, 9828, 9870, 9828, 9828, 9828, 9856, 9856, 9870, 9856, 9856, 9900, 9856, 9856, 9856, 9856, 9856, 9856, 9856, 9856, 9856, 9856, 9856, 9856, 9856, 9856, 9856, 9856, 9856, 9856, 9856, 9856, 9856, 9856, 9856, 9856, 9856, 9900, 9900, 9900, 9900, 9880, 9880, 9900, 9900, 9880, 9880, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9922, 9900, 9900, 9900, 9900, 9900, 9936, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9918, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9933, 9900, 9900, 9900, 9920, 9920, 9920, 9920, 9936, 9936, 9936, 9936, 9936, 9936, 9990, 9936, 9936, 9936, 9936, 9936, 9936, 9936, 9936, 9936, 9936, 9936, 9936, 9936, 9936, 9936, 9936, 9936, 9945, 9984, 9984, 9984, 9945, 9984, 9984, 9984, 9963, 9984, 9996, 9984, 9975, 9984, 9984, 9984, 9984, 9984, 9982, 9984, 9975, 9984, 9984, 9984, 9975, 9984, 9984, 9984, 9975, 9984, 9984, 9984, 9984, 9984, 9984, 9984, 9975, 9984, 9984, 9984, 9984, 9984, 9984, 9984, 9984, 9984, 9984, 9984, 9984, 9984, 9984, 9984, 9984, 9984, 9984, 9984, 9984, 9984, 9996, 9996, 10010, 10000, 10000, 10000, 10000, 10032, 10000, 10000, 10010, 10032, 10000, 10000, 10010, 10000, 10000, 10000, 10032, 10044, 10044, 10032, 10032, 10032, 10032, 10032, 10045, 10032, 10032, 10032, 10044, 10032, 10032, 10032, 10032, 10032, 10044, 10044, 10062, 10044, 10044, 10044, 10080, 10064, 10064, 10064, 10075, 10080, 10080, 10080, 10080, 10080, 10080, 10080, 10080, 10080, 10080, 10080, 10080, 10080, 10080, 10080, 10075, 10080, 10080, 10080, 10080, 10080, 10080, 10080, 10080, 10080, 10080, 10080, 10080, 10080, 10080, 10080, 10080, 10080, 10080, 10080, 10080, 10080, 10080, 10080, 10080, 10080, 10080, 10080, 10080, 10080, 10080, 10080, 10080, 10080, 10080, 10080, 10080, 10164, 10098, 10108, 10098, 10152, 10120, 10120, 10125, 10120, 10120, 10140, 10115, 10140, 10152, 10120, 10120, 10152, 10150, 10120, 10120, 10164, 10140, 10140, 10125, 10140, 10292, 10140, 10125, 10152, 10150, 10140, 10125, 10140, 10140, 10140, 10125, 10164, 10140, 10140, 10125, 10140, 10150, 10140, 10125, 10140, 10140, 10140, 10176, 10176, 10176, 10164, 10164, 10164, 10164, 10176, 10192, 10164, 10200, 10200, 10164, 10164, 10200, 10164, 10206, 10164, 10164, 10164, 10179, 10200, 10200, 10164, 10164, 10164, 10200, 10200, 10200, 10200, 10192, 10192, 10206, 10200, 10200, 10192, 10192, 10192, 10200, 10192, 10200, 10200, 10192, 10192, 10192, 10192, 10200, 10200, 10192, 10192, 10200, 10192, 10200, 10192, 10192, 10192, 10200, 10200, 10200, 10200, 10200, 10200, 10200, 10260, 10206, 10248, 10206, 10248, 10206, 10240, 10206, 10240, 10206, 10240, 10206, 10240, 10206, 10240, 10206, 10240, 10240, 10240, 10240, 10240, 10240, 10240, 10240, 10240, 10240, 10240, 10240, 10240, 10240, 10240, 10240, 10240, 10240, 10240, 10240, 10240, 10240, 10240, 10240, 10240, 10240, 10240, 10240, 10240, 10240, 10240, 10240, 10240, 10240, 10240, 10240, 10240, 10240, 10260, 10290, 10260, 10260, 10260, 10296, 10296, 10290, 10296, 10290, 10296, 10304, 10296, 10290, 10296, 10290, 10296, 10290, 10296, 10285, 10296, 10290, 10296, 10290, 10296, 10290, 10296, 10290, 10296, 10296, 10296, 10290, 10296, 10290, 10296, 10290, 10296, 10290, 10296, 10290, 10296, 10296, 10304, 10304, 10304, 10336, 10332, 10332, 10332, 10332, 10332, 10336, 10332, 10332, 10332, 10336, 10368, 10360, 10368, 10350, 10336, 10350, 10360, 10350, 10368, 10368, 10336, 10336, 10368, 10336, 10336, 10336, 10360, 10350, 10368, 10353, 10368, 10350, 10360, 10350, 10360, 10350, 10368, 10368, 10360, 10350, 10368, 10350, 10368, 10350, 10368, 10368, 10368, 10368, 10368, 10368, 10368, 10368, 10368, 10368, 10368, 10368, 10368, 10368, 10368, 10368, 10368, 10368, 10368, 10368, 10368, 10368, 10368, 10368, 10368, 10368, 10368, 10368, 10368, 10368, 10368, 10368, 10368, 10368, 10368, 10368, 10368, 10368, 10400, 10400, 10416, 10395, 10400, 10400, 10400, 10395, 10400, 10400, 10400, 10395, 10400, 10400, 10416, 10395, 10400, 10400, 10416, 10400, 10400, 10400, 10440, 10440, 10440, 10440, 10488, 10488, 10472, 10440, 10440, 10440, 10440, 10450, 10440, 10440, 10440, 10440, 10440, 10440, 10440, 10440, 10440, 10440, 10440, 10440, 10440, 10440, 10472, 10450, 10496, 10469, 10472, 10488, 10472, 10450, 10500, 10472, 10500, 10450, 10488, 10472, 10500, 10494, 10472, 10488, 10472, 10465, 10496, 10478, 10488, 10488, 10472, 10472, 10500, 10512, 10472, 10472, 10500, 10472, 10500, 10496, 10472, 10472, 10500, 10488, 10488, 10488, 10488, 10488, 10496, 10496, 10496, 10496, 10496, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10500, 10528, 10500, 10500, 10500, 10528, 10500, 10500, 10500, 10500, 10500, 10530, 10500, 10530, 10500, 10500, 10500, 10530, 10556, 10530, 10560, 10530, 10540, 10530, 10560, 10540, 10540, 10530, 10556, 10530, 10560, 10530, 10560, 10530, 10556, 10530, 10560, 10530, 10560, 10530, 10556, 10530, 10560, 10530, 10560, 10556, 10556, 10557, 10560, 10560, 10560, 10557, 10560, 10560, 10560, 10560, 10560, 10560, 10560, 10560, 10560, 10560, 10560, 10560, 10560, 10560, 10560, 10560, 10560, 10560, 10560, 10560, 10560, 10560, 10560, 10560, 10560, 10584, 10584, 10584, 10584, 10584, 10584, 10584, 10584, 10584, 10584, 10584, 10584, 10584, 10584, 10584, 10584, 10584, 10584, 10584, 10584, 10584, 10584, 10584, 10584, 10584, 10656, 10626, 10608, 10608, 10608, 10650, 10608, 10608, 10608, 10608, 10608, 10626, 10640, 10625, 10656, 10626, 10640, 10656, 10640, 10626, 10640, 10626, 10640, 10710, 10640, 10640, 10640, 10656, 10656, 10625, 10640, 10640, 10656, 10640, 10640, 10656, 10640, 10640, 10640, 10640, 10640, 10648, 10640, 10640, 10640, 10647, 10656, 10648, 10692, 10647, 10648, 10648, 10672, 10672, 10672, 10692, 10692, 10692, 10692, 10692, 10692, 10693, 10692, 10710, 10692, 10692, 10692, 10692, 10720, 10710, 10692, 10692, 10692, 10692, 10692, 10692, 10692, 10692, 10692, 10692, 10692, 10692, 10692, 10710, 10692, 10692, 10692, 10710, 10692, 10710, 10692, 10692, 10692, 10710, 10692, 10692, 10692, 10692, 10692, 10692, 10692, 10692, 10692, 10710, 10692, 10692, 10692, 10710, 10752, 10710, 10752, 10710, 10752, 10710, 10752, 10710, 10752, 10752, 10752, 10752, 10752, 10725, 10752, 10752, 10752, 10752, 10752, 10750, 10752, 10725, 10752, 10750, 10752, 10752, 10752, 10752, 10752, 10752, 10752, 10752, 10752, 10752, 10752, 10752, 10752, 10752, 10752, 10752, 10752, 10752, 10752, 10752, 10752, 10752, 10752, 10752, 10752, 10752, 10752, 10752, 10752, 10752, 10752, 10752, 10752, 10752, 10752, 10752, 10752, 10752, 10752, 10752, 10780, 10773, 10780, 10780, 10780, 10773, 10780, 10800, 10800, 10800, 10780, 10800, 10780, 10800, 10800, 10780, 10780, 10800, 10800, 10800, 10800, 10800, 10800, 10800, 10800, 10800, 10800, 10800, 10800, 10800, 10800, 10800, 10800, 10800, 10800, 10800, 10800, 10800, 10800, 10800, 10800, 10800, 10800, 10800, 10800, 10800, 10800, 10816, 10816, 10816, 10816, 10830, 10880, 10829, 10880, 10846, 10880, 10857, 10908, 10868, 10868, 10902, 10868, 10850, 10880, 10850, 10880, 10880, 10868, 10850, 10912, 10880, 10868, 10875, 10880, 10880, 10920, 10880, 10868, 10878, 10868, 10875, 10920, 10880, 10880, 10878, 10880, 10880, 10880, 10868, 10868, 10878, 10880, 10880, 10920, 10880, 10880, 10875, 10880, 10880, 10880, 10880, 10880, 10880, 10880, 10880, 10880, 10890, 10880, 10880, 10880, 10880, 10880, 10880, 10880, 10880, 10880, 10880, 10920, 10912, 10912, 10890, 10944, 10890, 10920, 10890, 10912, 10912, 10920, 10912, 10912, 10912, 10920, 10920, 10920, 10920, 10920, 10920, 10920, 10920, 10920, 10920, 10920, 10920, 10920, 10920, 10920, 10920, 10920, 10920, 10920, 10920, 10920, 10920, 10920, 10920, 10920, 10920, 10944, 10944, 10944, 10935, 10944, 10944, 10944, 10935, 10944, 10944, 10944, 10935, 10944, 10944, 10944, 10935, 10944, 10944, 10944, 10935, 10944, 10944, 10944, 10935, 11000, 10962, 11016, 10962, 10976, 10998, 11000, 11000, 11016, 10976, 10976, 11025, 10976, 10982, 11008, 10976, 10976, 10976, 10976, 10976, 11016, 11016, 10976, 10976, 10976, 10976, 11000, 10976, 10976, 10976, 10976, 10976, 11008, 10976, 10976, 10976, 11000, 11000, 11008, 11000, 11000, 11000, 11016, 11000, 11000, 11000, 11000, 11000, 11016, 11000, 11016, 11016, 11000, 11000, 11016, 11011, 11000, 11000, 11016, 11016, 11016, 11040, 11016, 11016, 11016, 11016, 11016, 11016, 11016, 11016, 11016, 11016, 11040, 11040, 11040, 11025, 11040, 11040, 11040, 11025, 11040, 11040, 11040, 11025, 11040, 11040, 11040, 11040, 11040, 11040, 11088, 11050, 11088, 11070, 11088, 11050, 11088, 11070, 11088, 11070, 11088, 11070, 11088, 11088, 11088, 11088, 11088, 11088, 11088, 11088, 11088, 11088, 11088, 11088, 11088, 11088, 11088, 11088, 11088, 11088, 11088, 11088, 11088, 11088, 11088, 11088, 11088, 11088, 11088, 11088, 11088, 11088, 11088, 11088, 11088, 11088, 11088, 11088, 11088, 11088, 11088, 11088, 11088, 11088, 11088, 11088, 11088, 11130, 11132, 11136, 11132, 11115, 11136, 11136, 11136, 11115, 11160, 11152, 11152, 11115, 11132, 11136, 11136, 11136, 11160, 11154, 11136, 11136, 11136, 11132, 11132, 11136, 11136, 11136, 11136, 11136, 11136, 11136, 11136, 11136, 11136, 11136, 11172, 11160, 11160, 11160, 11160, 11154, 11160, 11154, 11160, 11160, 11160, 11160, 11160, 11160, 11160, 11154, 11160, 11154, 11160, 11160, 11172, 11178, 11200, 11178, 11200, 11172, 11172, 11232, 11220, 11178, 11172, 11172, 11172, 11178, 11200, 11178, 11172, 11172, 11172, 11178, 11200, 11178, 11200, 11178, 11200, 11178, 11220, 11200, 11200, 11223, 11200, 11200, 11200, 11200, 11200, 11200, 11200, 11200, 11200, 11200, 11200, 11200, 11200, 11200, 11200, 11200, 11200, 11200, 11200, 11200, 11200, 11200, 11200, 11200, 11200, 11200, 11200, 11200, 11200, 11200, 11200, 11232, 11220, 11232, 11220, 11220, 11220, 11232, 11232, 11232, 11232, 11232, 11232, 11232, 11232, 11232, 11232, 11232, 11232, 11232, 11232, 11232, 11232, 11232, 11232, 11232, 11232, 11232, 11232, 11232, 11264, 11250, 11264, 11250, 11264, 11280, 11264, 11250, 11264, 11250, 11280, 11250, 11264, 11264, 11280, 11250, 11264, 11250, 11264, 11250, 11264, 11264, 11264, 11264, 11264, 11264, 11264, 11264, 11264, 11264, 11264, 11264, 11264, 11264, 11264, 11286, 11340, 11286, 11316, 11286, 11316, 11286, 11340, 11319, 11328, 11310, 11328, 11328, 11328, 11310, 11328, 11305, 11328, 11310, 11340, 11322, 11340, 11340, 11340, 11319, 11340, 11340, 11340, 11339, 11340, 11340, 11340, 11319, 11340, 11340, 11340, 11340, 11340, 11340, 11340, 11340, 11340, 11340, 11340, 11319, 11340, 11340, 11340, 11340, 11340, 11340, 11340, 11340, 11340, 11340, 11340, 11340, 11340, 11340, 11340, 11340, 11340, 11340, 11340, 11340, 11340, 11340, 11340, 11340, 11340, 11340, 11340, 11385, 11340, 11340, 11340, 11368, 11400, 11396, 11368, 11368, 11396, 11400, 11400, 11375, 11400, 11424, 11396, 11400, 11400, 11400, 11396, 11385, 11400, 11400, 11424, 11385, 11396, 11400, 11400, 11375, 11400, 11400, 11400, 11400, 11400, 11400, 11400, 11400, 11400, 11424, 11400, 11400, 11400, 11400, 11400, 11400, 11400, 11400, 11400, 11400, 11400, 11400, 11400, 11400, 11424, 11424, 11424, 11424, 11424, 11424, 11424, 11424, 11424, 11424, 11448, 11424, 11424, 11424, 11424, 11424, 11424, 11424, 11424, 11424, 11424, 11424, 11424, 11424, 11424, 11424, 11440, 11440, 11440, 11440, 11440, 11466, 11440, 11480, 11480, 11440, 11440, 11466, 11440, 11440, 11440, 11466, 11484, 11466, 11480, 11502, 11520, 11480, 11484, 11466, 11480, 11466, 11480, 11466, 11500, 11466, 11480, 11466, 11484, 11475, 11484, 11466, 11520, 11466, 11492, 11466, 11484, 11466, 11484, 11484, 11484, 11475, 11500, 11520, 11500, 11475, 11520, 11500, 11500, 11492, 11492, 11500, 11520, 11495, 11520, 11520, 11500, 11520, 11520, 11520, 11500, 11520, 11520, 11500, 11500, 11520, 11520, 11520, 11520, 11520, 11520, 11520, 11520, 11520, 11520, 11520, 11520, 11520, 11520, 11520, 11520, 11520, 11520, 11520, 11520, 11520, 11520, 11520, 11520, 11520, 11520, 11520, 11520, 11520, 11520, 11520, 11520, 11520, 11520, 11520, 11520, 11520, 11520, 11520, 11520, 11550, 11552, 11550, 11560, 11550, 11552, 11550, 11592, 11550, 11616, 11550, 11560, 11550, 11592, 11550, 11560, 11550, 11592, 11550, 11592, 11583, 11592, 11592, 11592, 11583, 11592, 11592, 11600, 11583, 11592, 11592, 11592, 11594, 11592, 11592, 11600, 11592, 11592, 11592, 11592, 11583, 11592, 11592, 11592, 11583, 11592, 11592, 11592, 11583, 11592, 11592, 11592, 11592, 11600, 11600, 11600, 11616, 11616, 11616, 11616, 11616, 11616, 11616, 11616, 11616, 11616, 11616, 11616, 11616, 11664, 11616, 11616, 11616, 11616, 11616, 11648, 11616, 11616, 11616, 11616, 11616, 11616, 11616, 11616, 11616, 11648, 11648, 11648, 11648, 11648, 11664, 11648, 11648, 11664, 11648, 11648, 11648, 11648, 11648, 11648, 11648, 11648, 11648, 11648, 11648, 11648, 11648, 11648, 11648, 11648, 11648, 11648, 11648, 11648, 11648, 11648, 11648, 11648, 11648, 11664, 11664, 11664, 11662, 11664, 11664, 11664, 11664, 11664, 11664, 11664, 11664, 11664, 11664, 11664, 11664, 11664, 11664, 11664, 11664, 11664, 11664, 11664, 11664, 11664, 11700, 11700, 11700, 11700, 11700, 11700, 11718, 11700, 11700, 11700, 11700, 11700, 11700, 11700, 11704, 11700, 11700, 11700, 11700, 11700, 11700, 11700, 11718, 11700, 11700, 11700, 11718, 11760, 11730, 11760, 11760, 11760, 11730, 11760, 11730, 11760, 11730, 11760, 11750, 11760, 11760, 11760, 11750, 11760, 11745, 11760, 11760, 11760, 11745, 11760, 11760, 11760, 11745, 11760, 11760, 11760, 11745, 11760, 11760, 11760, 11760, 11760, 11760, 11760, 11760, 11760, 11760, 11760, 11760, 11760, 11760, 11760, 11760, 11760, 11760, 11760, 11760, 11760, 11760, 11760, 11760, 11760, 11760, 11760, 11760, 11760, 11760, 11760, 11760, 11760, 11776, 11776, 11776, 11776, 11776, 11776, 11776, 11808, 11808, 11808, 11799, 11808, 11808, 11808, 11799, 11808, 11808, 11808, 11808, 11808, 11808, 11832, 11840, 11840, 11844, 11840, 11825, 11832, 11832, 11840, 11875, 11840, 11830, 11844, 11844, 11844, 11880, 11832, 11840, 11844, 11832, 11832, 11832, 11832, 11830, 11844, 11840, 11840, 12000, 11840, 11830, 11840, 11830, 11840, 11840, 11840, 11830, 11856, 11880, 11856, 11856, 11856, 11856, 11856, 11872, 11856, 11856, 11856, 11856, 11856, 11856, 11880, 11880, 11856, 11856, 11856, 11858, 11856, 11856, 11856, 11856, 11856, 11880, 11880, 11880, 11880, 11858, 11880, 11880, 11880, 11880, 11880, 11880, 11880, 11880, 11880, 11880, 11880, 11880, 11880, 11880, 11880, 11875, 11880, 11880, 11880, 11880, 11880, 11880, 11880, 11880, 11880, 11880, 11880, 11880, 11880, 11880, 11880, 11880, 11900, 11904, 11900, 11904, 11900, 11904, 11900, 11904, 11984, 11900, 11900, 11907, 11956, 11934, 12096, 11907, 12000, 11934, 11956, 11907, 11960, 11934, 12000, 11907, 11956, 11934, 11960, 11907, 11968, 11934, 11968, 11968, 11988, 11970, 12000, 11934, 11960, 11934, 11960, 11934, 11988, 11934, 11968, 11968, 11988, 11960, 11968, 11968, 11960, 11960, 11968, 11968, 11968, 11970, 12000, 11970, 11960, 11960, 11968, 11970, 11960, 11960, 11968, 11968, 11968, 11970, 11968, 11968, 11968, 11970, 11968, 11970, 11988, 11968, 11968, 11968, 11968, 11968, 11968, 11970, 11988, 12000, 11988, 11979, 11988, 12000, 12200, 11979, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12060, 12060, 12040, 12040, 12096, 12054, 12096, 12064, 12064, 12064, 12084, 12054, 12096, 12096, 12064, 12054, 12096, 12054, 12096]\r\n\r\n\r\ndef productsum(n):\r\n    return sum(set(arr[:n-1]))\r\n",
  "5b162ed4c8c47ea2f5000023": "def solve(n):\r\n    x = str(n)\r\n    res = [x] + [str(int(x[: i]) - 1) + '9' * (len(x) - i)\r\n                 for i in range(1, len(x))]\r\n    return int(max(res, key=lambda x: (sum(map(int, x)), int(x))))\r\n",
  "591392af88a4994caa0000e0": "def f(n):\r\n    a, b = 0, 1\r\n    for _ in range(n):\r\n    a, b = b, a + b + 1\r\n    return a\r\n",
  "5b13530f828fab68820000c4": "from math import gcd\n\n\ndef para_to_rect(eqn1, eqn2):\n    a, b = eqn1 . split('= ')[1]. split('t ')\n    c, d = eqn2 . split('= ')[1]. split('t ')\n    if a in (\"\", \"-\"):\n        a += '1'\n    if c in (\"\", \"-\"):\n        c += '1'\n    a, b, c, d = map(eval, (a, b, c, d))\n    x = gcd(a, c)\n    e, f = c / / x, - a / / x\n    if e < 0:\n        e, f = - e, - f\n    return f\" { e if e > 1 else '' } x { '+-' [ f < 0 ]} { abs ( f ) if abs ( f ) > 1 else '' } y = { e * b + f * d } \"\n",
  "5b05a8dd91cc5739df0000aa": "def e(s, i=0):\r\n    l, o, r, i = 0, 0, '', i or iter(s + ' ')\r\n    for x in i:\r\n    if '(' == x:\r\n        r = e(s, i)\r\n    elif '/' < x or not r:\r\n        r += x\r\n    else:\r\n        r = float(r)\r\n        l, o, r = {'+': l + r, '-': l - r,\r\n                   '*': l * r, '/': l / r, 0: r}[o], x, ''\r\n    if ')' == x:\r\n        break\r\n    return l\r\n",
  "5b1027fe5b07a105f4000092": "from itertools import accumulate\nfrom operator import mul\n\n\ndef fa(iterable):\n    return sum(accumulate(range(2, sum(1 for _ in iterable) + 1), mul))\n",
  "5b0d67c1cb35dfa10b0022c7": "squares_needed = int . bit_length\n",
  "5b0c0ec907756ffcff00006e": "def quadratic(a, b, c):\r\n    return - c / b\r\n",
  "5b0a80ce84a30f4762000069": "class Dinglemouse (object):\n\n    def __init__(self):\n    self . name = None\n    self . sex = None\n    self . age = None\n    self . hell = 'Hello.'\n    def setAge(self, age):\n    if self . age == None:\n    self . hell = self . hell + ' I am {age}.'\n    self . age = age\n    return self\n    def setSex(self, sex):\n    if self . sex == None:\n    self . hell = self . hell + ' I am {sex}.'\n    self . sex = \"male\" if sex == 'M' else \"female\"\n    return self\n    def setName(self, name):\n    if self . name == None:\n    self . hell = self . hell + ' My name is {name}.'\n    self . name = name\n    return self\n    def hello(self):\n    return self . hell . format(age=self . age, sex=self . sex, name=self . name)\n",
  "5b097da6c3323ac067000036": "def solve(a, b):\r\n    alice = sum(i > j for i, j in zip(a, b))\r\n    bob = sum(j > i for i, j in zip(a, b))\r\n\r\n    if alice == bob:\r\n    words = 'that looks like a \"draw\"! Rock on!'\r\n    elif alice > bob:\r\n    words = 'Alice made \"Kurt\" proud!'\r\n    else:\r\n    words = 'Bob made \"Jeff\" proud!'\r\n    return '{}, {}: {}' . format(alice, bob, words)\r\n",
  "5b096efeaf15bef812000010": "def nth_floyd(n):\r\n    return ((1 + 8 * (n - 1)) * * 0.5 + 1) / / 2\r\n",
  "5b085335abe956c1ef000266": "FROM = \"abc def ghi jkl mno pqrs tuv wxyz\" . split()\r\nTO_NUM = \"222 333 444 555 666 7777 888 9999\" . split()\r\n\r\nTABLE_TO_NUM = str . maketrans(* map('' . join, (FROM, TO_NUM)))\r\nTABLE_TO_CHAR = str . maketrans(\r\n    * map(lambda lst: '' . join(x[0] for x in lst), (TO_NUM, FROM)))\r\n\r\n\r\ndef T9(words, seq):\r\n    return ([w for w in words if seq == w . lower(). translate(TABLE_TO_NUM)]\r\n            or [seq . translate(TABLE_TO_CHAR)])\r\n",
  "5b06c990908b7eea73000069": "import math\n\n\ndef f(z, eps):\n    if (abs(z) >= 1.0):\n        return - 1\n    return int(math . log(eps) / math . log(abs(z)))\n",
  "5b05867c87566a947a00001c": "from functools import reduce\r\nfrom operator import mul\r\n\r\n\r\ndef find_min_max_product(arr, k):\r\n    if k > len(arr):\r\n        return None\r\n    if k == 1:\r\n        return min(arr), max(arr)\r\n\r\n    if k == len(arr):\r\n    prod = reduce(mul, arr)\r\n    return prod, prod\r\n    arr = sorted(arr)\r\n    prods = []\r\n    for i in range(k + 1):\r\n    nums = arr[: k - i] + (arr[- i:] if i else [])\r\n    prods . append(reduce(mul, nums))\r\n\r\n    return min(prods), max(prods)\r\n",
  "5b04be641839f1a0ab000151": "def game(words):\r\n    if not words or not words[0]:\r\n    return []\r\n    for i in range(1, len(words)):\r\n    if not words[i] or words[i - 1][- 1] != words[i][0]:\r\n    return words[: i]\r\n    return words\r\n",
  "5b049d57de4c7f6a6c0001d7": "import re\n\n\ndef apparently(string):\n    return re . sub(r'(?<=\\b(and|but)\\b(?! apparently\\b))', ' apparently', string)\n",
  "5b043e3886d0752685000009": "def michael_pays(cost):\r\n    return round(cost if cost < 5 else max(cost * 2 / 3, cost - 10), 2)\r\n",
  "5b047875de4c7f9af800011b": "def sentence(ds):\r\n    return ' ' . join(v for _, v in sorted((int(k), v) for d in ds for k, v in d . items()))\r\n",
  "5b029d9dde4c7f01600001ad": "def controller(Q): return [[east, west, north, south][V]() for V in [\n    [0], [1], [2], [3], [2, 0], [3, 1], [2, 1], [3, 0]][Q]]\n",
  "5b02ae6aa2afd8f1b4001ba4": "from functools import reduce\n\n\ndef get_chance(n, x, a):\n    return round(reduce(lambda m, b: m * (1 - x / (n - b)), range(a), 1), 2)\n",
  "5aff237c578a14752d0035ae": "def predict_age(* ages):\r\n    return sum(a * a for a in ages) * * .5 / / 2\r\n",
  "5b01e9f73e971587e70001ab": "exec(\"t\\x72y:callme()\\nexcept:0\")\n",
  "5b01abb9de4c7f3c22000012": "def dis(p1, p2):\r\n    return ((p1['x'] - p2['x']) * * 2 + (p1['y'] - p2['y']) * * 2) * * 0.5\r\n    def ellipse_contains_point(f0, f1, l, p):\r\n    return dis(f0, p) + dis(f1, p) <= l\r\n",
  "5b0148133e9715bf6f000154": "def hi_all():\r\n    one = - ~ len([])\r\n    two = one + one\r\n    three = one + two\r\n    four = two * two\r\n    five = three + two\r\n    seven = four + three\r\n    eight = four * two\r\n    ten = pow(three, two) + one\r\n    hundred = ten * ten\r\n\r\n    H = chr((seven * ten) + two)\r\n    e = chr(hundred + one)\r\n    l = chr(hundred + eight)\r\n    o = chr(hundred + ten + one)\r\n    sp = chr(eight * four)\r\n    W = chr((eight * ten) + seven)\r\n    r = chr(hundred + ten + four)\r\n    d = chr(hundred)\r\n\r\n    return H + e + l + l + o + sp + W + o + r + l + d\r\n",
  "5b011461de4c7f8d78000052": "DEFAULT = 'unknown'\r\nCOLORS = {'black' + 'brown': 'dark brown',\r\n          'black' + 'white': 'grey',\r\n          'brown' + 'white': 'light brown'}\r\n\r\n\r\ndef bear_fur(bears):\r\n    b1, b2 = sorted(bears)\r\n    return b1 if b1 == b2 else COLORS . get(b1 + b2, DEFAULT)\r\n",
  "5afd81d0de4c7f45f4000239": "from functools import reduce\nfrom itertools import combinations\nfrom operator import mul\n\n\ndef find_min_max_product(arr, k):\n    if k <= len(arr):\n    prods = [reduce(mul, nums) for nums in combinations(arr, k)]\n    return min(prods), max(prods)\n",
  "5af96cea3e9715ec670001dd": "from math import sin, cos, radians, sqrt\r\n\r\n\r\nclass Projectile:\r\n    def __init__(self, h0, v0, a):\r\n    self . h = float(h0)\r\n    self . x = v0 * cos(radians(a))\r\n    self . y = v0 * sin(radians(a))\r\n\r\n    def height_eq(self):\r\n    return f'h(t) = -16.0t^2 + { round ( self . y , 3 )} t' + (self . h > 0) * f' + { round ( self . h , 3 )} '\r\n    def horiz_eq(self):\r\n    return f'x(t) = { round ( self . x , 3 )} t'\r\n    def height(self, t):\r\n    return round(- 16 * t * * 2 + self . y * t + self . h, 3)\r\n\r\n    def horiz(self, t):\r\n    return round(self . x * t, 3)\r\n\r\n    def landing(self):\r\n    t = (self . y + sqrt(self . y * * 2 + 64 * self . h)) / 32\r\n    return [round(self . x * t, 3), 0, round(t, 3)]\r\n",
  "5afa08f23e971553170001e0": "def count_squareable(n):\r\n    return n / / 4 + (n + 1) / / 2\r\n",
  "5af974846bf32304a2000e98": "from collections import Counter\r\n\r\n\r\ndef majority(arr):\r\n    mc = Counter(arr). most_common(2)\r\n    if arr and (len(mc) == 1 or mc[0][1] != mc[1][1]):\r\n    return mc[0][0]\r\n",
  "59b7b43b4f98a81b2d00000a": "class LazyInit (type):\r\n    def __call__(self, * args, * * kwargs):\r\n    varnames = list(self . __init__ . __code__ . co_varnames)[1:]\r\n    for i, name in enumerate(varnames):\r\n    setattr(self, name, args[i])\r\n    return self\r\n",
  "55fde83eeccc08d87d0000af": "def degree(p):\n    r, d = [p(i) for i in list(range(12))], 0\n    while r . count(r[0]) != len(r):\n        r, d = list(map(lambda i: r[i + 1] - r[i], list(range(11 - d)))), d + 1\n    return d\n",
  "5af823451839f1768f00009d": "import re\n\n\ndef build_inverted_index(coll, term, cS, eM):\n    return [i + 1 for i, x in enumerate(coll) if re . search(r\"{0}{1}{0}\" . format('\\\\b' if eM else '', term), x, flags=not cS and re . I)]\n",
  "5af5c18786d075cd5e00008b": "DIRECTION_UP, DIRECTION_LEFT, DIRECTION_DOWN, DIRECTION_RIGHT = range(1, 5)\r\n\r\n\r\nclass Table:\r\n    def __init__(self, data):\r\n    self . data = data\r\n    def walk(self, dir0, dir1):\r\n    horizontal = range(len(self . data[0]))[\r\n        :: - 1 if DIRECTION_LEFT in (dir0, dir1) else 1]\r\n    vertical = range(len(self . data))[\r\n        :: - 1 if DIRECTION_UP in (dir0, dir1) else 1]\r\n    if dir0 in (DIRECTION_LEFT, DIRECTION_RIGHT):\r\n    return (self . data[j][i] for j in vertical for i in horizontal)\r\n    else:\r\n    return (self . data[j][i] for i in horizontal for j in vertical)\r\n",
  "5af4119888214326b4000019": "def amidakuji(ar):\r\n    numbers = list(range(len(ar[0]) + 1))\r\n    for line in ar:\r\n    for i, swap in enumerate(line):\r\n    if swap == '1':\r\n    numbers[i], numbers[i + 1] = numbers[i + 1], numbers[i]\r\n    return numbers\r\n",
  "5af43416882143534300142c": "def is_leap_year(d, y):\r\n    return (d * y). is_integer()\r\n",
  "5af2b240d2ee2764420000a2": "def fn(x):\r\n    return (1 + (1 + 4 * x) * * 0.5) / 2\r\n",
  "5af27e3ed2ee278c2c0000e2": "from functools import reduce\r\nps = []\r\nfor i in range(22):\r\n    ps . append(reduce(lambda a, p: (a - p) * * 2, ps, i))\r\n\r\n    def pipi(n):\r\n    return ps[n]\r\n",
  "5af15a37de4c7f223e00012d": "def men_from_boys(arr):\r\n    men = []\r\n    boys = []\r\n    for i in sorted(set(arr)):\r\n    if i % 2 == 0:\r\n    men . append(i)\r\n    else:\r\n    boys . append(i)\r\n    return men + boys[:: - 1]\r\n",
  "5aefd0a686d075d5f3000091": "import math\r\n\r\n\r\ndef cooking_time(needed_power, minutes, seconds, power):\r\n    t = math . ceil((60 * minutes + seconds) *\r\n                    int(needed_power[: - 1]) / int(power[: - 1]))\r\n    return '%d minutes %d seconds' % (t / / 60, t - t / / 60 * 60)\r\n",
  "5aeed69804a92621a7000077": "def performant_smallest(xs, n):\r\n    ys = sorted(xs)\r\n    del ys[n:]\r\n    m = ys[- 1]\r\n    km = ys . count(m)\r\n    res = []\r\n    for x in xs:\r\n    if x <= m:\r\n    if x < m:\r\n    res . append(x)\r\n    elif km > 0:\r\n    res . append(x)\r\n    km -= 1\r\n    return res\r\n",
  "5ad6266b673f2f067b000004": "from itertools import product\n\n\ndef coin(n):\n    return list(map('' . join, product(* ([\"HT\"] * n))))\n",
  "5aee96e22c5061ee90000024": "def quadratic_gen(a, b, c, start=0, step=1):\r\n    x = start\r\n    while True:\r\n    yield [x, a * x * * 2 + b * x + c]\r\n    x += step\r\n",
  "5ae7e1522c5061beb7000051": "def kangaroo(k1, r1, k2, r2):\r\n    if r1 == r2:\r\n        return k1 == k2\r\n    cross, r = divmod(k1 - k2, r2 - r1)\r\n    return cross >= 0 and not r\r\n",
  "5aec1ed7de4c7f3517000079": "def first_n_smallest(arr, n):\r\n    lst = sorted(enumerate(arr), key=lambda it: it[1])[: n]\r\n    lst . sort(key=lambda it: it[0])\r\n    return [v for _, v in lst]\r\n",
  "5ae786ad68e644e861000075": "x = {}\r\nfor i in range(1000000):\r\n    x = {1: x}\r\n",
  "5ae840b8783bb4ef79000094": "from collections import defaultdict\r\n\r\n\r\ndef merge(* dicts):\r\n    d = defaultdict(list)\r\n    for dd in dicts:\r\n    for k, v in dd . items():\r\n    d[k]. append(v)\r\n    return d\r\n",
  "5ae7e3f068e6445bc8000046": "def next_happy_year(year):\r\n    year += 1\r\n    while len(set(str(year))) != 4:\r\n    year += 1\r\n    return year\r\n",
  "5ae71f8c2c5061059e000044": "def findX(n):\r\n    return n * * 2 * (3 * n - 2)\r\n",
  "5ae64f86783bb4722c0000d7": "def near_flatten(a):\r\n    r = []\r\n    for x in a:\r\n    if isinstance(x[0], int):\r\n        r . append(x)\r\n    else:\r\n        r . extend(near_flatten(x))\r\n    return sorted(r)\r\n",
  "5ae64f28d2ee274164000118": "def string_func(s, n):\r\n    l, s = [s], list(s)\r\n    while True:\r\n    s[:: 2], s[1:: 2] = s[: len(s) / / 2 - 1: - 1], s[: len(s) / / 2]\r\n    l . append('' . join(s))\r\n    if l[0] == l[- 1]:\r\n        del l[- 1]\r\n        break\r\n    return l[n % len(l)]\r\n",
  "5ae43ed6252e666a6b0000a4": "def jumbled_string(s, n):\r\n    iterations = [s]\r\n\r\n    while True:\r\n    s = s[:: 2] + s[1:: 2]\r\n    if s == iterations[0]:\r\n        break\r\n    iterations . append(s)\r\n\r\n    return iterations[n % len(iterations)]\r\n",
  "5ae326342f8cbc72220000d2": "def string_expansion(s):\r\n    m, n = '', 1\r\n    for j in s:\r\n    if j . isdigit():\r\n    n = int(j)\r\n    else:\r\n    m += j * n\r\n    return m\r\n",
  "5ae1dcde9c0e489ae00019fc": "def determine_base(f): return 2 * * f(2) * * - 1\n",
  "5adf5b6a2f10c6c4bc000200": "sum_dig = lambda n, D = {\r\n    str(d): d * d for d in range(10)}: sum(map(D . get, str(n)))\r\n\r\n\r\ndef is_happy(n): return n > 4 and is_happy(sum_dig(n)) or n == 1\r\n\r\n\r\nhappy_set = set(filter(is_happy, range(100)))\r\nfor n in range(100, 3 * 10 * * 5):\r\n    if sum_dig(n) in happy_set:\r\n        happy_set . add(n)\r\n\r\n    from bisect import bisect\r\n\r\n    def performant_numbers(n, happy_list=sorted(\r\n        happy_set)): return happy_list[: bisect(happy_list, n)]\r\n",
  "52f7892a747862fc9a0009a6": "def count_subsequences(needle, haystack):\r\n    count = [1] + [0] * len(needle)\r\n    for a in haystack:\r\n    count = [1] + [count[i] + count[i - 1] * (a == b)\r\n                   for i, b in enumerate(needle, 1)]\r\n    return count[- 1] % 10 * * 8\r\n",
  "5adadcb36edb07df5600092e": "def seven_wonders_science(* a):\r\n    return 7 * min(a) + sum(x * x for x in a)\r\n",
  "5adbc57f0774dbaa5600011b": "def fizz_buzz_reloaded(s, e, step, funcs):\r\n    return ' ' . join('' . join([n for n, f in funcs . items() if f(x)] or [str(x)])\r\n                      for x in range(s, e + step / / abs(step), step))\r\n",
  "5ad927c932d79e34fb000091": "def mem_alloc(banks):\r\n    seen = set()\r\n    while tuple(banks) not in seen:\r\n    seen . add(tuple(banks))\r\n    number = max(banks)\r\n    index = banks . index(number)\r\n    banks[index] = 0\r\n    while number:\r\n    index = (index + 1) % 16\r\n    banks[index] += 1\r\n    number -= 1\r\n    return len(seen)\r\n",
  "5ad86a0fcc0f9614e1000091": "def D(n): s = [' ' * i + '+' * (2 * (n - i) - 1)\n               for i in range(n)]; return '\\n' . join(['+' * n] + s[:: - 1] + s)\n",
  "58867e2e2d2177547500007f": "class IllegalArgumentError (Exception):\r\n    pass\r\n    # Won't work if we add the same edge but that's not asked\r\n    class Graph:\r\n    def __init__(self, v):\r\n    if v < 0:\r\n        raise IllegalArgumentError()\r\n    self . V = v\r\n    self . E = 0\r\n    self . adj = [[] for _ in range(v)]\r\n\r\n    def add_edge(self, v, w):\r\n    if not (0 <= v < self . V and 0 <= w < self . V):\r\n        raise IllegalArgumentError()\r\n    self . adj[v]. append(w)\r\n    self . adj[w]. append(v)\r\n    self . E += 1\r\n",
  "5ad6e5bdb0e8d46b4500201a": "def X(s): return s . count('1') & 1\n",
  "5ad29cd95e8240dd85000b54": "def friends(n):\r\n    return (n - 1 or 1). bit_length() - 1\r\n",
  "5ad1e412cc2be1dbfb000016": "def insert_missing_letters(s):\r\n    s, lst, found, inside = s . lower(), [], set(), set(s . upper())\r\n    for a in s:\r\n    lst . append(a if a in found else\r\n                 a + '' . join(c for c in map(chr, range(ord(a) - 31, 91)) if c not in inside))\r\n    found . add(a)\r\n\r\n    return '' . join(lst)\r\n",
  "5aba0a08379d20026e0000be": "def jeringonza(s):\r\n    for c in 'aeiou':\r\n        s = s . replace(c, c + 'p' + c)\r\n    for c in 'AEIOU':\r\n        s = s . replace(c, c + 'P' + c)\r\n    return s\r\n",
  "5acfab8d23c81836c90000eb": "import re\r\nimport math\r\n\r\n\r\ndef convert_recipe(recipe):\r\n\r\n    def repl(m):\r\n    ratio = 15 if m . group(2) == \"tbsp\" else 5\r\n    return m . group(0) + \" (%sg)\" % math . ceil(eval(m . group(1)) * ratio)\r\n\r\n    return re . sub(\"([0-9/]+) (tb?sp)\", repl, recipe)\r\n",
  "5ace2d9f307eb29430000092": "def modify_multiply(st, loc, num):\r\n    return '-' . join([st . split()[loc]] * num)\r\n",
  "5acf710f46b4cb00810001e2": "class Tree (object):\r\n    def __init__(self, trunks):\r\n    self . data = [trunks * 10 * * i for i in range(4)]\r\n\r\n    @ property\r\n    def trunks(self): return self . data[0]\r\n    @ property\r\n    def branches(self): return self . data[1]\r\n    @ property\r\n    def twigs(self): return self . data[2]\r\n    @ property\r\n    def leaves(self): return self . data[3]\r\n\r\n    def chop_trunk(self, n): self . cutcut(n, 0)\r\n    def chop_branch(self, n): self . cutcut(n, 1)\r\n    def chop_twig(self, n): self . cutcut(n, 2)\r\n    def chop_leaf(self, n): self . cutcut(n, 3)\r\n\r\n    def cutcut(self, n, here):\r\n    self . data = [v if i < here else max(0, v - n * 10 * * (i - here)) for i, v in enumerate(self . data)]\r\n\r\n    def describe(self):\r\n    return \"This tree has {} trunks, {} branches, {} twigs and {} leaves.\" . format(* self . data)\r\n",
  "5acc3634c6fde760ec0001f7": "def solve(nums, div):\r\n    return [x + x % div for x in nums]\r\n",
  "5acbc3b3481ebb23a400007d": "def CheckIfFlush(cards):\r\n    return len({c[- 1] for c in cards}) == 1\r\n",
  "5acc79efc6fde7838a0000a0": "from __future__ import annotations\nfrom typing import Optional\n\n\nclass Node:\n    def __init__(self, value: int, left: Optional[Node] = None, right: Optional[Node] = None):\n    self . value = value\n    self . left = left\n    self . right = right\n    def search(n: int, root: Optional[Node]) - > bool:\n    if not root:\n    return False\n    if root . value == n:\n    return True\n    return search(n, root . left) or search(n, root . right)\n",
  "5ac739ed3fdf73d3f0000048": "def Not(X): return X(false)(true)\r\n\r\n\r\ndef And(X): return lambda Y: X(Y)(false)\r\n\r\n\r\ndef Or(X): return lambda Y: X(true)(Y)\r\ndef Xor(X): return lambda Y: X(Not(Y))(Y)\r\n",
  "5aaae0f5fd8c069e8c00016e": "def compound_match(words, target):\r\n    for i in range(1, len(target) - 1):\r\n    t1 = target[: i]\r\n    t2 = target[i:]\r\n    if (t1 in words) and (t2 in words):\r\n    i1 = words . index(t1)\r\n    i2 = words . index(t2)\r\n    return ([t1, t2] if i1 < i2 else [t2, t1]) + [[i1, i2]]\r\n",
  "5ac69d572f317bdfc3000124": "def get_sequence(o, s, st=1023456789):\r\n    li = []\r\n    for i in range([st, o][o > 0 and o > st], 9876543211):\r\n    i = str(i)\r\n    if i[0] != '0' and len(set(i)) == 10:\r\n        li . append(int(i))\r\n    if len(li) == s:\r\n        break\r\n    return li\r\n",
  "5aca48db188ab3558e0030fa": "def calc_type(a, b, res):\r\n    return {a + b: \"addition\", a - b: \"subtraction\", a * b: \"multiplication\", a / b: \"division\"}[res]\r\n",
  "5ac94db76bde60383d000038": "def ulam_sequence(u, v, n):\n    lst, seq, ex, q = [], 1, 1, 1 << v | 1 << u  # Put u and v into queue\n    for _ in range(n):  # Repeat n times\n    w = q & - q  # Take the smallest candidate\n    l = w . bit_length() - 1  # and its value\n    s = seq << l  # Generate its sums with all previous values\n    seq |= w  # Append it afterwards to the sequence\n    lst . append(l)  # and to the list\n    ex |= s & q  # Update excluded values if any is already in queue\n    q |= s  # Put previous sums into queue\n    q &= ~ ex  # Remove excluded values from queue\n    return lst  # Return sequence list\n",
  "5ac95cb05624bac42e000005": "from collections import Counter\r\n\r\n\r\ndef bucketize(* a):\r\n    D = {}\r\n    for k, v in Counter(a). items():\r\n    D[v] = sorted(D . get(v, []) + [k])\r\n    return [D . get(i, None) for i in range(len(a) + 1)]\r\n",
  "5ac9662d58b03979d800000d": "compounds = {left + right for right in nouns for left in nouns | adjectives}\r\n\r\n\r\ndef part(word):\r\n    if word in nouns:\r\n        return \"common\"\r\n    if word in adjectives:\r\n        return \"adjective\"\r\n    if word in compounds:\r\n        return \"compound\"\r\n    return \"neither\"\r\n",
  "5ac53c71376b11df7e0001a9": "from math import log, ceil\n\n\ndef champernowne_digit(n):\n    if type(n) != int or n < 1:\n        return float('nan')\n\n    ln, diff = 0, n - 1\n    while diff > 9 * (ln + 1) * 10 * * ln:\n    diff -= 9 * (ln + 1) * 10 * * ln\n    ln += 1\n    return int(str(10 * * (ln) - 1 + ceil(diff / (ln + 1)))[(diff - 1) % (ln + 1)])\n",
  "5ac6932b2f317b96980000ca": "def min_value(digits):\r\n    return int(\"\" . join(map(str, sorted(set(digits)))))\r\n",
  "55baa55cf332e67eb000000a": "def nth_perm(n, d):\r\n    k = n - 1\r\n    digits = [str(i) for i in range(d)]\r\n    for i in [362880, 40320, 5040, 720, 120, 24, 6, 2, 1, 1][- d:]:\r\n    i, k = divmod(k, i)\r\n    digits . append(digits . pop(i))\r\n    return '' . join(digits)\r\n",
  "5ac54bcbb925d9b437000001": "from operator import mul\nfrom functools import reduce\n\n\ndef find_middle(s):\n    if not s or not isinstance(s, str):\n        return - 1\n    lstDig = [int(c) for c in s if c . isnumeric()]\n    if not lstDig:\n        return - 1\n    prod = str(reduce(mul, lstDig))\n    i = (len(prod) - 1) / / 2\n    return int(prod[i: - i or len(prod)])\n",
  "5ac5e9aa3853da25d9000102": "from itertools import zip_longest\n\n\ndef or_arrays(a1, a2, d=0):\n    return [x | y for x, y in zip_longest(a1, a2, fillvalue=d)]\n",
  "5ac49156376b11767f00060c": "from itertools import chain, zip_longest\r\n\r\n\r\ndef alternate_sort(l):\r\n    l = sorted(l, key=abs)\r\n    p, n = [n for n in l if n >= 0], [n for n in l if n < 0]\r\n    return [n for n in chain(* zip_longest(n, p)) if n is not None]\r\n",
  "5abd66a5ccfd1130b30000a9": "def row_weights(array):\r\n    return sum(array[:: 2]), sum(array[1:: 2])\r\n",
  "5abbb33396194245d5000161": "def solution(s): return chr(sum(map(ord, s . upper())) / / len(s))\n",
  "5aba780a6a176b029800041c": "def max_multiple(divisor, bound):\r\n    return bound - (bound % divisor)\r\n",
  "5ab7ee556a176b1043000047": "from math import ceil\n\n\ndef pay_cheese(arr):\n    return f'L { ceil ( sum ( arr ) / 100 ) * 35 } '\n",
  "5ab3be5f6a176bef4e00012d": "def hexdump(data):\r\n    return '\\n' . join('{:08x}: {:48} {}' . format(i,\r\n                                                   ' ' . join(\r\n                                                       map('{:02x}' . format, data[i: i + 16])),\r\n                                                   bytes(b if 32 <= b < 127 else ord(\r\n                                                       '.') for b in data[i: i + 16]). decode()\r\n                                                   ) for i in range(0, len(data), 16))\r\n\r\n    def dehex(text):\r\n    return bytes(int(b, 16) for line in text . splitlines() for b in line[10: 58]. split())\r\n",
  "5ab363ff6a176b29880000dd": "def hex_hash(code):\r\n    return sum(int(d) for c in code for d in hex(ord(c)) if d . isdigit())\r\n",
  "5ab1f8d38d28f67410000090": "def diagonal_sort(data):\r\n    if not data:\r\n        return data\r\n    p, lX, lY = 0, len(data), len(data[0])\r\n    lst = [[''] * lY for _ in range(lX)]\r\n\r\n    for z in range(lX + lY - 1):\r\n    x, y = min(lX - 1, z), max(0, z - lX + 1)\r\n    while 1:\r\n    lst[x][y] = data[p / / lY][p % lY]\r\n    x, y, p = x - 1, y + 1, p + 1\r\n    if x < 0 or y == lY:\r\n        break\r\n    return lst\r\n    diagonalSort = diagonal_sort\r\n",
  "5ab3495595df9ec78f0000b4": "def binary_to_string(binary):\r\n    return '' . join(chr(int(b, 2)) for b in binary[2:]. split('0b'))\r\n",
  "5ab23a9c1cec39668c000055": "date_validator = (\n    '((('\n    '(0[1-9]|1\\d|2[0-8])\\.(0[1-9]|1[012])|'  # 01-28 of any month\n    '(29|30)\\.(0[13-9]|1[012])|'  # 29-30 of months, except February\n    '(31\\.(0[13578]|1[02])))\\.'  # 31 of long months\n    '([1-9]\\d{3}|\\d{3}[1-9]))|'  # any year, except 0000\n    '(29\\.02\\.('  # leap day\n    '\\d\\d([2468][048]|[13579][26]|0[48])|'  # leap years (mod 4)\n    '([2468][048]|[13579][26]|0[48])00'  # leap years (mod 400)\n    ')))$')\n",
  "5aa99584fd5777ee9a0001f1": "def fat_fingers(s):\r\n    if not s:\r\n        return s\r\n    swap = [False]\r\n    return '' . join(c . swapcase() if swap[0] else c for c in s\r\n                     if c not in \"aA\" or swap . __setitem__(0, not swap[0]))\r\n",
  "5aa7a581fd8c06b552000177": "import random\r\n\r\n\r\ndef love_language(partner, weeks):\r\n    rst = [0, 0, 0, 0, 0]\r\n    for i in range(0, weeks * 7):\r\n    if (partner . response(LOVE_LANGUAGES[i % 5]) == 'positive'):\r\n    rst[i % 5] += 1\r\n    return LOVE_LANGUAGES[rst . index(max(rst))]\r\n",
  "5aa7ce59373c2e3ed30000cb": "def is_prime(n): return all(n % d for d in range(3, int(n * * .5) + 1, 2))\r\n\r\n\r\ndef primes_a_p(lower_limit, upper_limit):\r\n    a_p = []\r\n    for n in range(lower_limit | 1, upper_limit, 2):\r\n    for gap in range(30, (upper_limit - n) / / 5 + 1, 30):\r\n    sequence = [n + i * gap for i in range(6)]\r\n    if all(map(is_prime, sequence)):\r\n    a_p . append(sequence)\r\n    return a_p\r\n",
  "5aa69e68ba1bb5ecdf000557": "def longest_sequence(n):\n    l = r = s = 1\n    while s != 0 and s != n:\n    if s > n:\n    s -= l * l\n    l += 1\n    else:\n    r += 1\n    s += r * r\n    return range(l, r + 1) if s == n else []\n",
  "5aa417aa4a6b344e2200009d": "from heapq import *\r\n\r\n\r\ndef n_linear(ms, n):\r\n    lst = [1] * (n + 1)\r\n    q = [(1 + v, v, 1) for v in ms]\r\n    heapify(q)\r\n    for i in range(1, n + 1):\r\n    v, x, j = heappop(q)\r\n    lst[i] = v\r\n    heappush(q, (lst[j] * x + 1, x, j + 1))\r\n    while q[0][0] == lst[i]:\r\n    v, x, j = heappop(q)\r\n    heappush(q, (lst[j] * x + 1, x, j + 1))\r\n    return lst[n]\r\n",
  "5aa3af22ba1bb5209f000037": "import re\n\n\ndef solve(eq):\n    return '' . join(reversed(re . split(r'(\\W+)', eq)))\n",
  "5aa39ba75084d7cf45000008": "def solve(n):\n    a, b = '01'\n    for _ in range(n):\n        a, b = a + b, a\n    return a\n",
  "5aa20a964a6b34417c00008d": "def find_page_number(pages):\r\n    n, miss = 1, []\r\n    for i in pages:\r\n    if i != n:\r\n        miss . append(i)\r\n    else:\r\n        n += 1\r\n    return miss\r\n",
  "5a996f3d5084d73a7100040c": "def death_star(week, attack):\r\n    iron = sum(w[0] for w in week[: attack])\r\n    steel = sum(w[1] for w in week[: attack])\r\n    chromium = sum(w[2] for w in week[: attack])\r\n\r\n    if (iron >= 100 and steel >= 75 and chromium >= 50):\r\n    return 'The station is completed!'\r\n    else:\r\n    return f'The station is destroyed! It needed { max ( 0 , 100 - iron )} iron, { max ( 0 , 75 - steel )} steel and { max ( 0 , 50 - chromium )} chromium for completion.'\r\n",
  "5aa1bcda373c2eb596000112": "def max_tri_sum(numbers):\r\n    return sum(sorted(set(numbers))[- 3:])\r\n",
  "5aa1031a7c7a532be30000e5": "from itertools import product\r\nBOARD = set(map(\"\" . join, product(\"ABCDEFGH\", \"12345678\")))\r\n\r\n\r\ndef available_moves(position):\r\n    if isinstance(position, str) and position in BOARD:\r\n\r\n    return sorted(p for p in BOARD - {position}\r\n                  if abs(ord(p[0]) - ord(position[0])) == abs(int(p[1]) - int(position[1]))\r\n                  or position[0] == p[0]\r\n                  or p[1] == position[1])\r\n\r\n    return []\r\n",
  "56b2333e2542c2aadb000079": "def circular_permutations(n):\r\n    n = str(n)\r\n    return [int(n[i:] + n[: i]) for i in range(len(n))]\r\n\r\n    def is_prime(n):\r\n    return n > 1 and all(n % i != 0 for i in range(2, int(n * * 0.5) + 1))\r\n\r\n    def circular_prime(n):\r\n    return all(is_prime(x) for x in circular_permutations(n))\r\n",
  "5a9e86705ee396d6be000091": "def check_three_and_two(array):\r\n    return {array . count(x) for x in set(array)} == {2, 3}\r\n",
  "543b9113def6343e43000875": "def cantor(n: int) - > str:\r\n    if n == 1:\r\n    return '1/1'\r\n    else:\r\n    k = 1\r\n    while n > k:\r\n    n -= k\r\n    k += 1\r\n    if k % 2 == 0:\r\n    return str(n) + '/' + str(k - n + 1)\r\n    else:\r\n    return str(k - n + 1) + '/' + str(n)\r\n",
  "5a9dbc735ee396ef590001de": "from collections import namedtuple\r\nBot = namedtuple('Bot', ('name', 'make_move'))\r\n\r\n\r\ndef create_bot(x, y):\r\n    return Bot(\r\n        name='\ud83c\udfc6',\r\n        make_move=lambda on_table: (on_table - 1) % (y + 1) or 1)\r\n",
  "5a9d43ceba1bb52492000080": "def mcast_ip_to_mac(ip_string):\r\n    ip = ip_string . split(\".\")\r\n    return \"01:00:5E:%0.2X:%0.2X:%0.2X\" % (int(ip[1]) % 128, int(ip[2]), int(ip[3]))\r\n",
  "59953009d65a278783000062": "''' \n Let G be an unweighted graph with max_fn + 1 nodes, labeled from 0 to max_fn, \n and let there be an edge between two nodes A and B if A + B <= max_fn. \n Let A be the adjacency matrix representation of G, such that A[i][j] = 1 if there is an \n edge between node i and j, and A[i][j] = 0 otherwise. Then \n A[i][j] = {1 if i + j <= max_fn \n {0 otherwise \n \n Note that this is a triangular matrix. \n The Nth power of an unweighted adjacency matrix contains the number of paths of exactly \n N edges that connects two nodes. In other words, A^N[i][j] counts the number of ways to \n define a function G(N) such that G(1) = i and G(N + 1) = j and G(n) + G(n + 1) <= max_fn \n for all n in [1, N]. This means that the diagonal elements A^N[i][i] counts the number of \n definitions of F(n) where F(1) = i, with N = max_n. To find the number of definitions of F(n), \n we thus have to sum the diagonal elements of A^N, which is equivalent to computing its trace. \n '''\nimport numpy as np\nMOD = 12345787\n\n\ndef matmodpow(mat, b, m):\n    if b == 0:\n    return np . identity(mat . shape[0], dtype=np . int64)\n    ret = matmodpow(mat @ mat % m, b / / 2, m)\n    return ret @ mat % m if b % 2 else ret\n    def insane_cls(max_n, max_fn):\n    adj = np . flipud(np . tri(max_fn + 1, dtype=np . int64))\n    return np . trace(matmodpow(adj, max_n, MOD)) % MOD\n",
  "59951f21d65a27e95d00004f": "def circular_limited_sums(max_n, max_fn):\r\n    if max_n == 1:\r\n    return sum([1 for i in range(max_fn + 1) if i + i <= max_fn]) % 12345787\r\n    nexts = [list(filter(lambda x: i + x <= max_fn, range(max_fn + 1)))\r\n             for i in range(max_fn + 1)]\r\n    result = 0\r\n    for ii in range(max_fn + 1):\r\n    v = [[1 if e in nexts[ii] else 0 for e in range(max_fn + 1)]]\r\n    for _ in range(max_n - 2):\r\n    v . append([0 for i in range(max_fn + 1)])\r\n    for i, e in enumerate(v[- 2]):\r\n    for j in nexts[i]:\r\n    v[- 1][j] += e\r\n    result += sum([e for i, e in enumerate(v[- 1]) if i + ii <= max_fn])\r\n    return result % 12345787\r\n",
  "59b53be0bf10a4b39300001f": "import numpy as np\r\n\r\n\r\ndef permutation_free(n, l):\r\n    m = np . tril(np . ones((n, n), object), - 1) + \\\r\n        np . diagflat(range(n, 0, - 1))\r\n    return (np . matrix(np . vstack((m[1:], m[0, :: - 1]))) * * l)[0, 0] * n % 12345787\r\n",
  "59928e2889d6a01970000051": "import numpy as np\r\nfrom itertools import combinations\r\nmodulus = 12345787\r\n\r\n\r\ndef f(n, colors):\r\n    a = np . matrix([\r\n        [1, 0, 0, 0, 0],\r\n        [1, 0, 0, 0, 0],\r\n        [0, 1, 0, 0, 0],\r\n        [0, 0, 1, 0, 0],\r\n        [0, 0, 0, 1, 0]\r\n    ])\r\n    for color in colors:\r\n    a[0, color - 1] += 1\r\n    b = np . zeros((5, 1))\r\n    b[0, 0] = 1\r\n    # res = a^n * b % modulus\r\n    res = np . identity(5)\r\n    while n > 0:\r\n    if n % 2:\r\n    res = res . dot(a) % modulus\r\n    n / /= 2\r\n    a = a . dot(a) % modulus\r\n    return int(res . dot(b)[0])\r\n\r\n    def insane_tri_bicolor_tiling(n, r, g, b):\r\n    return sum(f(n, [a, b]) - f(n, [a]) - f(n, [b]) + 1 for a, b in combinations([r, g, b], 2) if n >= a + b) % modulus\r\n",
  "5993dcfca6a7632807000017": "\"\"\" \n def three_by_n_without_hole_missing_top(n): \n # the first column can be _11, _12 \n assert n%2 == 1 \n if n == 1: \n return 1 \n return three_by_n_without_hole_missing_top(n-2) \\ \n + three_by_n_without_hole(n-1) \n def three_by_n_without_hole(n): \n # the first column can be 112, 122, 123 \n # the first two cases are the same by symmetry \n assert n%2 == 0 \n if n == 0: \n return 1 \n return three_by_n_without_hole_missing_top(n-1)*2 \\ \n + three_by_n_without_hole(n-2) \n def three_by_n_with_hole_missing_top(n): \n # the first column can be _X1, _1X, _11, _12 \n # the second case is impossible because it would have to look like: \n # _225588... \n # 114477.... \n # X336699... \n # the fourth case is divided into two cases, \n # depending on whether the next column is X12 or 312 \n assert n%2 == 0 \n if n == 0: \n return 0 \n return three_by_n_without_hole_missing_top(n-1) \\ \n + three_by_n_with_hole(n-1) \\ \n + three_by_n_with_hole_missing_top(n-2) \\ \n + three_by_n_without_hole(n-2) \n def three_by_n_with_hole(n): \n # the first column can be X11, X12, 1X2, 11X, 12X, 112, 122, 123 \n # by symmetry: \n # case 4 = case 1 \n # case 5 = case 2 \n # case 7 = case 6 \n # note that case 3 is impossible because it would have to look like: \n # 114477.... \n # X225588... \n # 336699.... \n assert n%2 == 1 \n if n == 1: \n return 2 \n return three_by_n_without_hole(n-1)*2 \\ \n + three_by_n_without_hole_missing_top(n-2)*2 \\ \n + three_by_n_with_hole_missing_top(n-1)*2 \\ \n + three_by_n_with_hole(n-2) \n \"\"\"\n# naive algorithm\n\n\ndef mat_mul(A, B):\n    n = len(A)\n    # the top left entry is A[0][0]*B[0][0] + A[0][1]*B[1][0] + ...\n    return [[sum(A[i][k] * B[k][j] % 12345787 for k in range(n)) % 12345787 for j in range(n)] for i in range(n)]\n\n    # exponentiation by squaring\n    def mat_pow(A, k):\n    n = len(A)\n    res = [[0 + (i == j) for j in range(n)] for i in range(n)]  # A^0\n    while k:\n    if k % 2 == 1:\n    res = mat_mul(res, A)\n    A = mat_mul(A, A)\n    k / /= 2\n    return res\n    # let:\n    # A = three_by_n_without_hole_missing_top\n    # B = three_by_n_without_hole\n    # C = three_by_n_with_hole_missing_top\n    # D = three_by_n_with_hole\n    # initial cases:\n    # A[1] = 1\n    # B[0] = 1\n    # C[0] = 0\n    # D[1] = 2\n    # recursive formulas:\n    # A[n] = A[n-2] + B[n-1]\n    # B[n] = 2A[n-1] + B[n-2]\n    # C[n] = A[n-1] + B[n-2] + C[n-2] + D[n-1]\n    # D[n] = 2A[n-2] + 2B[n-1] + 2C[n-1] + D[n-2]\n    # adjust parity\n    # A[2k+1] = A[2(k-1)+1] + B[2k]\n    # B[2k] = 2A[2(k-1)+1] + B[2(k-1)]\n    # C[2k] = A[2(k-1)+1] + B[2(k-1)] + C[2(k-1)] + D[2(k-1)+1]\n    # D[2k+1] = 2A[2(k-1)+1] + 2B[2k] + 2C[2k] + D[2(k-1)+1]\n    # offset\n    # A[2k+1] = 3A[2(k-1)+1] + B[2(k-1)]\n    # B[2k] = 2A[2(k-1)+1] + B[2(k-1)]\n    # C[2k] = A[2(k-1)+1] B[2(k-1)] + C[2(k-1)] + D[2(k-1)+1]\n    # D[2k+1] = 8A[2(k-1)+1] + 4B[2(k-1)] + 2C[2(k-1)] + 3D[2(k-1)+1]\n    def three_by_n_without_hole(n):\n    res = mat_pow([[3, 1], [2, 1]], n / / 2)\n    return res[0][0]\n\n    def three_by_n_with_hole(n):\n    res = mat_pow([[3, 1, 0, 0], [2, 1, 0, 0], [1, 1, 1, 1], [8, 4, 2, 3]], n / / 2)\n    return (res[3][0] + res[3][1] + 2 * res[3][3]) % 12345787\n    def three_by_n(n):\n    if n % 2 == 1:\n    return three_by_n_with_hole(n)\n    return three_by_n_without_hole(n)\n",
  "5a995c2aba1bb57f660001fd": "def scrolling_text(text):\r\n    text = text . upper()\r\n    return [text[i:] + text[: i] for i in range(len(text))]\r\n",
  "5a9a70cf5084d74ff90000f7": "from math import sqrt\r\n\r\n\r\ndef is_prime(n):\r\n    if n < 2:\r\n        return False\r\n    for x in range(2, int(sqrt(n)) + 1):\r\n    if n % x == 0:\r\n        return False\r\n    return True\r\n    def all_dig_prime(n):\r\n    for d in str(n):\r\n    if d not in \"2357\":\r\n        return False\r\n    return True\r\n    def not_primes(a, b):\r\n    res = []\r\n    for i in range(a, b):\r\n    if all_dig_prime(i) and not is_prime(i):\r\n        res . append(i)\r\n    return res\r\n",
  "5a99a03e4a6b34bb3c000124": "def num_primorial(n):\n    primorial, x, n = 2, 3, n-1\n    while n:\n        if all(x % d for d in range(3, int(x ** .5) + 1, 2)):\n            primorial *= x\n            n -= 1\n        x += 2\n    return primorial",
  "5a9996fa8e503f2b4a002e7a": "def odd_not_prime(n):\r\n    return 1 + sum(any(not x % y for y in range(3, int(x * * .5) + 1, 2)) for x in range(1, n + 1, 2))\r\n",
  "5a99a1418e503ffb8300384c": "def make_new_list(l): return list(map(sum, zip(l, l[1:])))\n",
  "5a981424373c2e479c00017f": "def complexSum(l):\r\n    z = sum(complex(s . replace('i', 'j')) for s in l)\r\n    x, y = round(z . real), round(z . imag)\r\n    if y == 0:\r\n        return str(x)\r\n    sign = '-' if y < 0 else ('' if x == 0 else '+')\r\n    y = abs(y)\r\n    x = '' if x == 0 else str(x)\r\n    y = '' if y == 1 else str(y)\r\n    return '{}{}{}i' . format(x, sign, y)\r\n",
  "5a97387e5ee396e70a00016d": "def pofi(n):\r\n    return ['1', 'i', '-1', '-i'][n % 4]\r\n",
  "5a959662373c2e761d000183": "def ticker(text, width, tick):\n    tick %= len(text) + width\n    text = ' ' * width + text + ' ' * width\n    return text[tick: tick + width]\n",
  "58756f1054486312c5000a64": "import math\r\nangleGoal = [0, 72, 306, 270, 36, 108, 0, 234, 198, 144,\r\n             342, 180, 126, 18, 162, 324, 216, 288, 54, 252, 90]\r\ndistGoal = [0, 138, 166, 103]  # bullseye, single, double, triple\r\n\r\n\r\ndef get_coordinates(score):\r\n    if score >= 66:\r\n    theta = angleGoal[20]\r\n    depth = distGoal[3]\r\n    elif score == 50:\r\n    theta = 0\r\n    depth = 0\r\n    elif score / 2 == int(score / 2) and score < 41:\r\n    theta = angleGoal[score / / 2]\r\n    depth = distGoal[2]\r\n    elif 40 < score <= 60:\r\n    theta = angleGoal[score - 40]\r\n    depth = distGoal[1]\r\n    elif score == 63:\r\n    theta = angleGoal[11]\r\n    depth = distGoal[3]\r\n    elif score > 22:\r\n    theta = angleGoal[19]\r\n    depth = distGoal[1]\r\n    else:\r\n    theta = angleGoal[3]\r\n    depth = distGoal[1]\r\n    x = depth * math . cos(math . radians(theta))\r\n    y = depth * math . sin(math . radians(theta))\r\n    return x, y\r\n",
  "5a942c461a60f677730032df": "def solve(a, b):\r\n    if len(a) is 1:\r\n    return b . count(a)\r\n    index = [x for x in range(len(b) - 1) if b[x] is a[0]]\r\n    return sum(solve(a[1:], b[x + 1:]) for x in index)\r\n",
  "5a946d9fba1bb5135100007c": "def check_prime(number):\r\n    for i in range(2, number):\r\n    if number % i == 0:\r\n    return False\r\n    return True\r\n    def minimum_number(numbers):\r\n    suma = sum(numbers)\r\n    while check_prime(suma) != True:\r\n    suma = suma + 1\r\n    print(suma)\r\n    return suma - sum(numbers)\r\n",
  "5a941f3a4a6b34edf900006f": "def solve(xs):\r\n    m = 0\r\n    for x in sorted(xs):\r\n    if x > m + 1:\r\n    break\r\n    m += x\r\n    return m + 1\r\n",
  "5a941f4e1a60f6e8a70025fe": "def odd_ball(arr):\r\n    return arr . index(\"odd\") in arr\r\n",
  "5a9078e24a6b340b340000b8": "from itertools import count\nfrom gmpy2 import is_prime\n\n\ndef solve(n):\n    return next(b for a in count(0) for b in [n - a, n + a] if is_prime(b))\n",
  "5644a69f7849c9c097000073": "sq_cub_rev_prime = (None, 89, 271, 325, 328, 890, 1025, 1055, 1081, 1129, 1169, 1241, 2657, 2710, 3112, 3121, 3149, 3244, 3250, 3263, 3280, 3335, 3346, 3403, 4193, 4222, 4231, 4289, 4291, 5531, 5584, 5653, 5678, 5716, 5791, 5795, 5836, 5837, 8882, 8900, 8926, 8942, 9664, 9794, 9875, 9962, 10178, 10250, 10393, 10429, 10499, 10550, 10577, 10651, 10679, 10717, 10718, 10739, 10756, 10762, 10810, 10844, 10895, 10898, 10943, 10996, 11035, 11039, 11084, 11137, 11159, 11164, 11182, 11191, 11290, 11351, 11371, 11575, 11690, 11695, 11707, 11722, 11732, 11795, 11827, 11861, 11885, 12109, 12124, 12242, 12268, 12304, 12361, 12362, 12410, 12433, 12436, 12535, 19144, 19267, 19271, 19273, 19385, 19433, 19442, 19451, 19501, 19564, 19597, 19603, 19631, 19637, 19766, 19846, 19865, 19871, 19909, 19927, 26464,\n                    26491, 26570, 26579, 26621, 26704, 26944, 26965, 27001, 27029, 27052, 27100, 27101, 31120, 31210, 31223, 31237, 31261, 31327, 31331, 31351, 31463, 31469, 31490, 31534, 31561, 31657, 31726, 31739, 31784, 31807, 31883, 31928, 31978, 32066, 32072, 32213, 32255, 32308, 32431, 32440, 32446, 32500, 32539, 32564, 32573, 32630, 32656, 32708, 32749, 32759, 32800, 32888, 32969, 33059, 33254, 33325, 33338, 33350, 33404, 33460, 33475, 33509, 33568, 33575, 33701, 33833, 34030, 34112, 34159, 34163, 41351, 41429, 41473, 41501, 41608, 41639, 41839, 41879, 41930, 41933, 41992, 42029, 42089, 42103, 42121, 42179, 42220, 42235, 42310, 42326, 42385, 42463, 42466, 42524, 42575, 42607, 42682, 42782, 42839, 42890, 42910, 42982, 43045, 43049, 54986, 54991, 55073, 55310, 55492, 55589, 55598, 55603, 55651).__getitem__\n",
  "5a91e0793e9156ccb0003f6e": "from math import ceil\r\n\r\n\r\ndef matrixfy(s):\r\n    if not s:\r\n        return \"name must be at least one letter\"\r\n    x = ceil(len(s) * * .5)\r\n    it = iter(s . ljust(x * x, '.'))\r\n    return [[next(it) for _ in range(x)] for _ in range(x)]\r\n",
  "5a908da30025e995880000e3": "def solve(a, b):\r\n    primes = \"2357111317192329313741434753596167717379838997101103107109113127131137139149151157163167173179181191193197199211223227229233239241251257263269271277281283293307311313317331337347349353359367373379383389397401409419421431433439443449457461463467479487491499503509521523541547557563569571577587593599601607613617619631641643647653659661673677683691701709719727733739743751757761769773787797809811821823827829839853857859863877881883887907911919929937941947953967971977983991997100910131019102110311033103910491051106110631069108710911093109711031109111711231129115111531163117111811187119312011213121712231229123112371249125912771279128312891291129713011303130713191321132713611367137313811399140914231427142914331439144714511453145914711481148314871489149314991511152315311543154915531559156715711579158315971601160716091613161916211627163716571663166716691693169716991709172117231733174117471753175917771783178717891801181118231831184718611867187118731877187918891901190719131931193319491951197319791987199319971999200320112017202720292039205320632069208120832087208920992111211321292131213721412143215321612179220322072213222122372239224322512267226922732281228722932297230923112333233923412347235123572371237723812383238923932399241124172423243724412447245924672473247725032521253125392543254925512557257925912593260926172621263326472657265926632671267726832687268926932699270727112713271927292731274127492753276727772789279127972801280328192833283728432851285728612879288728972903290929172927293929532957296329692971299930013011301930233037304130493061306730793083308931093119312131373163316731693181318731913203320932173221322932513253325732593271329933013307331333193323332933313343334733593361337133733389339134073413343334493457346134633467346934913499351135173527352935333539354135473557355935713581358335933607361336173623363136373643365936713673367736913697370137093719372737333739376137673769377937933797380338213823383338473851385338633877388138893907391139173919392339293931394339473967398940014003400740134019402140274049405140574073407940914093409941114127412941334139415341574159417742014211421742194229423142414243425342594261427142734283428942974327433743394349435743634373439143974409442144234441444744514457446344814483449345074513451745194523454745494561456745834591459746034621463746394643464946514657466346734679469147034721472347294733475147594783478747894793479948014813481748314861487148774889490349094919493149334937494349514957496749694973498749934999500350095011502150235039505150595077508150875099510151075113511951475153516751715179518951975209522752315233523752615273527952815297530353095323533353475351538153875393539954075413541754195431543754415443544954715477547954835501550355075519552155275531555755635569557355815591562356395641564756515653565756595669568356895693570157115717573757415743574957795783579158015807581358215827583958435849585158575861586758695879588158975903592359275939595359815987600760116029603760436047605360676073607960896091610161136121613161336143615161636173619761996203621162176221622962476257626362696271627762876299630163116317632363296337634363536359636163676373637963896397642164276449645164696473648164916521652965476551655365636569657165776581659966076619663766536659666166736679668966916701670367096719673367376761676367796781679167936803682368276829683368416857686368696871688368996907691169176947694969596961696769716977698369916997700170137019702770397043705770697079710371097121712771297151715971777187719372077211721372197229723772437247725372837297730773097321733173337349735173697393741174177433745174577459747774817487748974997507751775237529753775417547754975597561757375777583758975917603760776217639764376497669767376817687769176997703771777237727774177537757775977897793781778237829784178537867787378777879788379017907791979277933793779497951796379938009801180178039805380598069808180878089809381018111811781238147816181678171817981918209821982218231823382378243826382698273828782918293829783118317832983538363836983778387838984198423842984318443844784618467850185138521852785378539854385638573858185978599860986238627862986418647866386698677868186898693869987078713871987318737874187478753876187798783880388078819882188318837883988498861886388678887889389238929893389418951896389698971899990019007901190139029904190439049905990679091910391099127913391379151915791619173918191879199920392099221922792399241925792779281928392939311931993239337934193439349937193779391939794039413941994219431943394379439946194639467947394799491949795119521953395399547955195879601961396199623962996319643964996619677967996899697971997219733973997439749976797699781978797919803981198179829983398399851985798599871988398879901990799239929993199419949996799731000710009100371003910061100671006910079100911009310099101031011110133101391014110151101591016310169101771018110193102111022310243102471025310259102671027110273102891030110303103131032110331103331033710343103571036910391103991042710429104331045310457104591046310477104871049910501105131052910531105591056710589105971060110607106131062710631106391065110657106631066710687106911070910711107231072910733107391075310771107811078910799108311083710847108531085910861108671088310889108911090310909109371093910949109571097310979109871099311003110271104711057110591106911071110831108711093111131111711119111311114911159111611117111173111771119711213112391124311251112571126111273112791128711299113111131711321113291135111353113691138311393113991141111423114371144311447114671147111483114891149111497115031151911527115491155111579115871159311597116171162111633116571167711681116891169911701117171171911731117431177711779117831178911801118071181311821118271183111833118391186311867118871189711903119091192311927119331193911941119531195911969119711198111987120071201112037120411204312049120711207312097121011210712109121131211912143121491215712161121631219712203122111222712239122411225112253122631226912277122811228912301123231232912343123471237312377123791239112401124091241312421124331243712451124571247312479124871249112497125031251112517125271253912541125471255312569125771258312589126011261112613126191263712641126471265312659126711268912697127031271312721127391274312757127631278112791127991280912821128231282912841128531288912893128991290712911129171291912923129411295312959129671297312979129831300113003130071300913033130371304313049130631309313099131031310913121131271314713151131591316313171131771318313187132171321913229132411324913259132671329113297133091331313327133311333713339133671338113397133991341113417134211344113451134571346313469134771348713499135131352313537135531356713577135911359713613136191362713633136491366913679136811368713691136931369713709137111372113723137291375113757137591376313781137891379913807138291383113841138591387313877138791388313901139031390713913139211393113933139631396713997139991400914011140291403314051140571407114081140831408714107141431414914153141591417314177141971420714221142431424914251142811429314303143211432314327143411434714369143871438914401144071441114419144231443114437144471444914461144791448914503145191453314537145431454914551145571456114563145911459314621146271462914633146391465314657146691468314699147131471714723147311473714741147471475314759147671477114779147831479714813148211482714831148431485114867148691487914887148911489714923149291493914947149511495714969149831501315017150311505315061150731507715083150911510115107151211513115137151391514915161151731518715193151991521715227152331524115259152631526915271152771528715289152991530715313153191532915331153491535915361153731537715383153911540115413154271543915443154511546115467154731549315497155111552715541155511555915569155811558315601156071561915629156411564315647156491566115667156711567915683157271573115733157371573915749157611576715773157871579115797158031580915817158231585915877158811588715889159011590715913159191592315937159591597115973159911600116007160331605716061160631606716069160731608716091160971610316111161271613916141161831618716189161931621716223162291623116249162531626716273163011631916333163391634916361163631636916381164111641716421164271643316447164511645316477164811648716493165191652916547165531656116567165731660316607166191663116633166491665116657166611667316691166931669916703167291674116747167591676316787168111682316829168311684316871168791688316889169011690316921169271693116937169431696316979169811698716993170111702117027170291703317041170471705317077170931709917107171171712317137171591716717183171891719117203172071720917231172391725717291172931729917317173211732717333173411735117359173771738317387173891739317401174171741917431174431744917467174711747717483174891749117497175091751917539175511756917573175791758117597175991760917623176271765717659176691768117683177071771317729177371774717749177611778317789177911780717827178371783917851178631788117891179031790917911179211792317929179391795717959179711797717981179871798918013180411804318047180491805918061180771808918097181191812118127181311813318143181491816918181181911819918211182171822318229182331825118253182571826918287182891830118307183111831318329183411835318367183711837918397184011841318427184331843918443184511845718461184811849318503185171852118523185391854118553185831858718593186171863718661186711867918691187011871318719187311874318749187571877318787187931879718803188391885918869188991891118913189171891918947189591897318979190011900919013190311903719051190691907319079190811908719121191391914119157191631918119183192071921119213192191923119237192491925919267192731928919301193091931919333193731937919381193871939119403194171942119423194271942919433194411944719457194631946919471194771948319489195011950719531195411954319553195591957119577195831959719603196091966119681196871969719699197091971719727197391975119753197591976319777197931980119813198191984119843198531986119867198891989119913199191992719937199491996119963199731997919991199931999720011200212002320029200472005120063200712008920101201072011320117201232012920143201472014920161201732017720183202012021920231202332024920261202692028720297203232032720333203412034720353203572035920369203892039320399204072041120431204412044320477204792048320507205092052120533205432054920551205632059320599206112062720639206412066320681206932070720717207192073120743207472074920753207592077120773207892080720809208492085720873208792088720897208992090320921209292093920947209592096320981209832100121011210132101721019210232103121059210612106721089211012110721121211392114321149211572116321169211792118721191211932121121221212272124721269212772128321313213172131921323213412134721377213792138321391213972140121407214192143321467214812148721491214932149921503215172152121523215292155721559215632156921577215872158921599216012161121613216172164721649216612167321683217012171321727217372173921751217572176721773217872179921803218172182121839218412185121859218632187121881218932191121929219372194321961219772199121997220032201322027220312203722039220512206322067220732207922091220932210922111221232212922133221472215322157221592217122189221932222922247222592227122273222772227922283222912230322307223432234922367223692238122391223972240922433224412244722453224692248122483225012251122531225412254322549225672257122573226132261922621226372263922643226512266922679226912269722699227092271722721227272273922741227512276922777227832278722807228112281722853228592286122871228772290122907229212293722943229612296322973229932300323011230172302123027230292303923041230532305723059230632307123081230872309923117231312314323159231672317323189231972320123203232092322723251232692327923291232932329723311233212332723333233392335723369233712339923417234312344723459234732349723509235312353723539235492355723561235632356723581235932359923603236092362323627236292363323663236692367123677236872368923719237412374323747237532376123767237732378923801238132381923827238312383323857238692387323879238872389323899239092391123917239292395723971239772398123993240012400724019240232402924043240492406124071240772408324091240972410324107241092411324121241332413724151241692417924181241972420324223242292423924247242512428124317243292433724359243712437324379243912440724413244192442124439244432446924473244812449924509245172452724533245472455124571245932461124623246312465924671246772468324691246972470924733247492476324767247812479324799248092482124841248472485124859248772488924907249172491924923249432495324967249712497724979249892501325031250332503725057250732508725097251112511725121251272514725153251632516925171251832518925219252292523725243252472525325261253012530325307253092532125339253432534925357253672537325391254092541125423254392544725453254572546325469254712552325537255412556125577255792558325589256012560325609256212563325639256432565725667256732567925693257032571725733257412574725759257632577125793257992580125819258412584725849258672587325889259032591325919259312593325939259432595125969259812599725999260032601726021260292604126053260832609926107261112611326119261412615326161261712617726183261892620326209262272623726249262512626126263262672629326297263092631726321263392634726357263712638726393263992640726417264232643126437264492645926479264892649726501265132653926557265612657326591265972662726633266412664726669266812668326687266932669926701267112671326717267232672926731267372675926777267832680126813268212683326839268492686126863268792688126891268932690326921269272694726951269532695926981269872699327011270172703127043270592706127067270732707727091271032710727109271272714327179271912719727211272392724127253272592727127277272812728327299273292733727361273672739727407274092742727431274372744927457274792748127487275092752727529275392754127551275812758327611276172763127647276532767327689276912769727701277332773727739277432774927751277632776727773277792779127793277992780327809278172782327827278472785127883278932790127917279192794127943279472795327961279672798327997280012801928027280312805128057280692808128087280972809928109281112812328151281632818128183282012821128219282292827728279282832828928297283072830928319283492835128387283932840328409284112842928433284392844728463284772849328499285132851728537285412854728549285592857128573285792859128597286032860728619286212862728631286432864928657286612866328669286872869728703287112872328729287512875328759287712878928793288072881328817288372884328859288672887128879289012890928921289272893328949289612897929009290172902129023290272903329059290632907729101291232912929131291372914729153291672917329179291912920129207292092922129231292432925129269292872929729303293112932729333293392934729363293832938729389293992940129411294232942929437294432945329473294832950129527295312953729567295692957329581295872959929611296292963329641296632966929671296832971729723297412975329759297612978929803298192983329837298512986329867298732987929881299172992129927299472995929983299893001130013300293004730059300713008930091300973010330109301133011930133301373013930161301693018130187301973020330211302233024130253302593026930271302933030730313303193032330341303473036730389303913040330427304313044930467304693049130493304973050930517305293053930553305573055930577305933063130637306433064930661306713067730689306973070330707307133072730757307633077330781308033080930817308293083930841308513085330859308693087130881308933091130931309373094130949309713097730983310133101931033310393105131063310693107931081310913112131123311393114731151311533115931177311813118331189311933121931223312313123731247312493125331259312673127131277313073131931321313273133331337313573137931387313913139331397314693147731481314893151131513315173153131541315433154731567315733158331601316073162731643316493165731663316673168731699317213172331727317293174131751317693177131793317993181731847318493185931873318833189131907319573196331973319813199132003320093202732029320513205732059320633206932077320833208932099321173211932141321433215932173321833218932191322033221332233322373225132257322613229732299323033230932321323233232732341323533235932363323693237132377323813240132411324133242332429324413244332467324793249132497325033250732531325333253732561325633256932573325793258732603326093261132621326333264732653326873269332707327133271732719327493277132779327833278932797328013280332831328333283932843328693288732909329113291732933329393294132957329693297132983329873299332999330133302333029330373304933053330713307333083330913310733113331193314933151331613317933181331913319933203332113322333247332873328933301333113331733329333313334333347333493335333359333773339133403334093341333427334573346133469334793348733493335033352133529335333354733563335693357733581335873358933599336013361333617336193362333629336373364133647336793370333713337213373933749337513375733767337693377333791337973380933811338273382933851338573386333871338893389333911339233393133937339413396133967339973401934031340333403934057340613412334127341293414134147341573415934171341833421134213342173423134253342593426134267342733428334297343013430334313343193432734337343513436134367343693438134403344213442934439344573446934471344833448734499345013451134513345193453734543345493458334589345913460334607346133463134649346513466734673346793468734693347033472134729347393474734757347593476334781348073481934841348433484734849348713487734883348973491334919349393494934961349633498135023350273505135053350593506935081350833508935099351073511135117351293514135149351533515935171352013522135227352513525735267352793528135291353113531735323353273533935353353633538135393354013540735419354233543735447354493546135491355073550935521355273553135533355373554335569355733559135593355973560335617356713567735729357313574735753357593577135797358013580335809358313583735839358513586335869358793589735899359113592335933359513596335969359773598335993359993600736011360133601736037360613606736073360833609736107361093613136137361513616136187361913620936217362293624136251362633626936277362933629936307363133631936341363433635336373363833638936433364513645736467364693647336479364933649736523365273652936541365513655936563365713658336587365993660736629366373664336653366713667736683366913669736709367133672136739367493676136767367793678136787367913679336809368213683336847368573687136877368873689936901369133691936923369293693136943369473697336979369973700337013370193702137039370493705737061370873709737117371233713937159371713718137189371993720137217372233724337253372733727737307373093731337321373373733937357373613736337369373793739737409374233744137447374633748337489374933750137507375113751737529375373754737549375613756737571375733757937589375913760737619376333764337649376573766337691376933769937717377473778137783377993781137813378313784737853378613787137879378893789737907379513795737963379673798737991379933799738011380393804738053380693808338113381193814938153381673817738183381893819738201382193823138237382393826138273382813828738299383033831738321383273832938333383513837138377383933843138447384493845338459384613850138543385573856138567385693859338603386093861138629386393865138653386693867138677386933869938707387113871338723387293873738747387493876738783387913880338821388333883938851388613886738873388913890338917389213892338933389533895938971389773899339019390233904139043390473907939089390973910339107391133911939133391393915739161391633918139191391993920939217392273922939233392393924139251392933930139313393173932339341393433935939367393713937339383393973940939419394393944339451394613949939503395093951139521395413955139563395693958139607396193962339631396593966739671396793970339709397193972739733397493976139769397793979139799398213982739829398393984139847398573986339869398773988339887399013992939937399533997139979399833998940009400134003140037400394006340087400934009940111401234012740129401514015340163401694017740189401934021340231402374024140253402774028340289403434035140357403614038740423404274042940433404594047140483404874049340499405074051940529405314054340559405774058340591405974060940627406374063940693406974069940709407394075140759407634077140787408014081340819408234082940841408474084940853408674087940883408974090340927409334093940949409614097340993410114101741023410394104741051410574107741081411134111741131411414114341149411614117741179411834118941201412034121341221412274123141233412434125741263412694128141299413334134141351413574138141387413894139941411414134144341453414674147941491415074151341519415214153941543415494157941593415974160341609416114161741621416274164141647416514165941669416814168741719417294173741759417614177141777418014180941813418434184941851418634187941887418934189741903419114192741941419474195341957419594196941981419834199942013420174201942023420434206142071420734208342089421014213142139421574216942179421814218742193421974220942221422234222742239422574228142283422934229942307423234233142337423494235942373423794239142397424034240742409424334243742443424514245742461424634246742473424874249142499425094253342557425694257142577425894261142641426434264942667426774268342689426974270142703427094271942727427374274342751427674277342787427934279742821428294283942841428534285942863428994290142923429294293742943429534296142967429794298943003430134301943037430494305143063430674309343103431174313343151431594317743189432014320743223432374326143271432834329143313433194332143331433914339743399434034341143427434414345143457434814348743499435174354143543435734357743579435914359743607436094361343627436334364943651436614366943691437114371743721437534375943777437814378343787437894379343801438534386743889438914391343933439434395143961439634396943973439874399143997440174402144027440294404144053440594407144087440894410144111441194412344129441314415944171441794418944201442034420744221442494425744263442674426944273442794428144293443514435744371443814438344389444174444944453444834449144497445014450744519445314453344537445434454944563445794458744617446214462344633446414464744651446574468344687446994470144711447294474144753447714477344777447894479744809448194483944843448514486744879448874489344909449174492744939449534495944963449714498344987450074501345053450614507745083451194512145127451314513745139451614517945181451914519745233452474525945263452814528945293453074531745319453294533745341453434536145377453894540345413454274543345439454814549145497455034552345533455414555345557455694558745589455994561345631456414565945667456734567745691456974570745737457514575745763457674577945817458214582345827458334584145853458634586945887458934594345949459534595945971459794598946021460274604946051460614607346091460934609946103461334614146147461534617146181461834618746199462194622946237462614627146273462794630146307463094632746337463494635146381463994641146439464414644746451464574647146477464894649946507465114652346549465594656746573465894659146601466194663346639466434664946663466794668146687466914670346723467274674746751467574676946771468074681146817468194682946831468534686146867468774688946901469194693346957469934699747017470414705147057470594708747093471114711947123471294713747143471474714947161471894720747221472374725147269472794728747293472974730347309473174733947351473534736347381473874738947407474174741947431474414745947491474974750147507475134752147527475334754347563475694758147591475994760947623476294763947653476574765947681476994770147711477134771747737477414774347777477794779147797478074780947819478374784347857478694788147903479114791747933479394794747951479634796947977479814801748023480294804948073480794809148109481194812148131481574816348179481874819348197482214823948247482594827148281482994831148313483374834148353483714838348397484074840948413484374844948463484734847948481484874849148497485234852748533485394854148563485714858948593486114861948623486474864948661486734867748679487314873348751487574876148767487794878148787487994880948817488214882348847488574885948869488714888348889489074894748953489734898948991490034900949019490314903349037490434905749069490814910349109491174912149123491394915749169491714917749193491994920149207492114922349253492614927749279492974930749331493334933949363493674936949391493934940949411494174942949433494514945949463494774948149499495234952949531495374954749549495594959749603496134962749633496394966349667496694968149697497114972749739497414974749757497834978749789498014980749811498234983149843498534987149877498914991949921499274993749939499434995749991499934999950021500235003350047500515005350069500775008750093501015011150119501235012950131501475015350159501775020750221502275023150261502635027350287502915031150321503295033350341503595036350377503835038750411504175042350441504595046150497505035051350527505395054350549505515058150587505915059350599506275064750651506715068350707507235074150753507675077350777507895082150833508395084950857508675087350891508935090950923509295095150957509695097150989509935100151031510435104751059510615107151109511315113351137511515115751169511935119751199512035121751229512395124151257512635128351287513075132951341513435134751349513615138351407514135141951421514275143151437514395144951461514735147951481514875150351511515175152151539515515156351577515815159351599516075161351631516375164751659516735167951683516915171351719517215174951767517695178751797518035181751827518295183951853518595186951871518935189951907519135192951941519495197151973519775199152009520215202752051520575206752069520815210352121521275214752153521635217752181521835218952201522235223752249522535225952267522895229152301523135232152361523635236952379523875239152433524535245752489525015251152517525295254152543525535256152567525715257952583526095262752631526395266752673526915269752709527115272152727527335274752757527695278352807528135281752837528595286152879528835288952901529035291952937529515295752963529675297352981529995300353017530475305153069530775308753089530935310153113531175312953147531495316153171531735318953197532015323153233532395326753269532795328153299533095332353327533535335953377533815340153407534115341953437534415345353479535035350753527535495355153569535915359353597536095361153617536235362953633536395365353657536815369353699537175371953731537595377353777537835379153813538195383153849538575386153881538875389153897538995391753923539275393953951539595398753993540015401154013540375404954059540835409154101541215413354139541515416354167541815419354217542515426954277542875429354311543195432354331543475436154367543715437754401544035440954413544195442154437544435444954469544935449754499545035451754521545395454154547545595456354577545815458354601546175462354629546315464754667546735467954709547135472154727547515476754773547795478754799548295483354851548695487754881549075491754919549415494954959549735497954983550015500955021550495505155057550615507355079551035510955117551275514755163551715520155207552135521755219552295524355249552595529155313553315533355337553395534355351553735538155399554115543955441554575546955487555015551155529555415554755579555895560355609556195562155631556335563955661556635566755673556815569155697557115571755721557335576355787557935579955807558135581755819558235582955837558435584955871558895589755901559035592155927559315593355949559675598755997560035600956039560415605356081560875609356099561015611356123561315614956167561715617956197562075620956237562395624956263562675626956299563115633356359563695637756383563935640156417564315643756443564535646756473564775647956489565015650356509565195652756531565335654356569565915659756599566115662956633566595666356671566815668756701567115671356731567375674756767567735677956783568075680956813568215682756843568575687356891568935689756909569115692156923569295694156951569575696356983569895699356999570375704157047570595707357077570895709757107571195713157139571435714957163571735717957191571935720357221572235724157251572595726957271572835728757301573295733157347573495736757373573835738957397574135742757457574675748757493575035752757529575575755957571575875759357601576375764157649576535766757679576895769757709577135771957727577315773757751577735778157787577915779357803578095782957839578475785357859578815789957901579175792357943579475797357977579915801358027580315804358049580575806158067580735809958109581115812958147581515815358169581715818958193581995820758211582175822958231582375824358271583095831358321583375836358367583695837958391583935840358411584175842758439584415845158453584775848158511585375854358549585675857358579586015860358613586315865758661586795868758693586995871158727587335874158757587635877158787587895883158889588975890158907589095891358921589375894358963589675897958991589975900959011590215902359029590515905359063590695907759083590935910759113591195912359141591495915959167591835919759207592095921959221592335923959243592635927359281593335934159351593575935959369593775938759393593995940759417594195944159443594475945359467594715947359497595095951359539595575956159567595815961159617596215962759629596515965959663596695967159693596995970759723597295974359747597535977159779597915979759809598335986359879598875992159929599515995759971599815999960013600176002960037600416007760083600896009160101601036010760127601336013960149601616016760169602096021760223602516025760259602716028960293603176033160337603436035360373603836039760413604276044360449604576049360497605096052160527605396058960601606076061160617606236063160637606476064960659606616067960689607036071960727607336073760757607616076360773607796079360811608216085960869608876088960899609016091360917609196092360937609436095360961610016100761027610316104361051610576109161099611216112961141611516115361169612116122361231612536126161283612916129761331613336133961343613576136361379613816140361409614176144161463614696147161483614876149361507615116151961543615476155361559615616158361603616096161361627616316163761643616516165761667616736168161687617036171761723617296175161757617816181361819618376184361861618716187961909619276193361949619616196761979619816198761991620036201162017620396204762053620576207162081620996211962129621316213762141621436217162189621916220162207622136221962233622736229762299623036231162323623276234762351623836240162417624236245962467624736247762483624976250162507625336253962549625636258162591625976260362617626276263362639626536265962683626876270162723627316274362753627616277362791628016281962827628516286162869628736289762903629216292762929629396296962971629816298362987629896302963031630596306763073630796309763103631136312763131631496317963197631996321163241632476327763281632996331163313633176333163337633476335363361633676337763389633916339763409634196342163439634436346363467634736348763493634996352163527635336354163559635776358763589635996360163607636116361763629636476364963659636676367163689636916369763703637096371963727637376374363761637736378163793637996380363809638236383963841638536385763863639016390763913639296394963977639976400764013640196403364037640636406764081640916410964123641516415364157641716418764189642176422364231642376427164279642836430164303643196432764333643736438164399644036443364439644516445364483644896449964513645536456764577645796459164601646096461364621646276463364661646636466764679646936470964717647476476364781647836479364811648176484964853648716487764879648916490164919649216492764937649516496964997650036501165027650296503365053650636507165089650996510165111651196512365129651416514765167651716517365179651836520365213652396525765267652696528765293653096532365327653536535765371653816539365407654136541965423654376544765449654796549765519655216553765539655436555165557655636557965581655876559965609656176562965633656476565165657656776568765699657016570765713657176571965729657316576165777657896580965827658316583765839658436585165867658816589965921659276592965951659576596365981659836599366029660376604166047660676607166083660896610366107661096613766161661696617366179661916622166239662716629366301663376634366347663596636166373663776638366403664136643166449664576646366467664916649966509665236652966533665416655366569665716658766593666016661766629666436665366683666976670166713667216673366739667496675166763667916679766809668216684166851668536686366877668836688966919669236693166943669476694966959669736697767003670216703367043670496705767061670736707967103671216712967139671416715367157671696718167187671896721167213672176721967231672476726167271672736728967307673396734367349673696739167399674096741167421674276742967433674476745367477674816748967493674996751167523675316753767547675596756767577675796758967601676076761967631676516767967699677096772367733677416775167757677596776367777677836778967801678076781967829678436785367867678836789167901679276793167933679396794367957679616796767979679876799368023680416805368059680716808768099681116811368141681476816168171682076820968213682196822768239682616827968281683116832968351683716838968399684376844368447684496847368477684836848968491685016850768521685316853968543685676858168597686116863368639686596866968683686876869968711687136872968737687436874968767687716877768791688136881968821688636887968881688916889768899689036890968917689276894768963689936900169011690196902969031690616906769073691096911969127691436914969151691636919169193691976920369221692336923969247692576925969263693136931769337693416937169379693836938969401694036942769431694396945769463694676947369481694916949369497694996953969557695936962369653696616967769691696976970969737697396976169763697676977969809698216982769829698336984769857698596987769899699116992969931699416995969991699977000170003700097001970039700517006170067700797009970111701177012170123701397014170157701637017770181701837019970201702077022370229702377024170249702717028970297703097031370321703277035170373703797038170393704237042970439704517045770459704817048770489705017050770529705377054970571705737058370589706077061970621706277063970657706637066770687707097071770729707537076970783707937082370841708437084970853708677087770879708917090170913709197092170937709497095170957709697097970981709917099770999710117102371039710597106971081710897111971129711437114771153711617116771171711917120971233712377124971257712617126371287712937131771327713297133371339713417134771353713597136371387713897139971411714137141971429714377144371453714717147371479714837150371527715377154971551715637156971593715977163371647716637167171693716997170771711717137171971741717617177771789718077180971821718377184371849718617186771879718817188771899719097191771933719417194771963719717198371987719937199972019720317204372047720537207372077720897209172101721037210972139721617216772169721737221172221722237222772229722517225372269722717227772287723077231372337723417235372367723797238372421724317246172467724697248172493724977250372533725477255172559725777261372617726237264372647726497266172671726737267972689727017270772719727277273372739727637276772797728177282372859728697287172883728897289372901729077291172923729317293772949729537295972973729777299773009730137301973037730397304373061730637307973091731217312773133731417318173189732377324373259732777329173303733097332773331733517336173363733697337973387734177342173433734537345973471734777348373517735237352973547735537356173571735837358973597736077360973613736377364373651736737367973681736937369973709737217372773751737577377173783738197382373847738497385973867738777388373897739077393973943739517396173973739997401774021740277404774051740717407774093740997410174131741437414974159741617416774177741897419774201742037420974219742317425774279742877429374297743117431774323743537435774363743777438174383744117441374419744417444974453744717448974507745097452174527745317455174561745677457374587745977460974611746237465374687746997470774713747177471974729747317474774759747617477174779747977482174827748317484374857748617486974873748877489174897749037492374929749337494174959750117501375017750297503775041750797508375109751337514975161751677516975181751937520975211752177522375227752397525375269752777528975307753237532975337753477535375367753777538975391754017540375407754317543775479755037551175521755277553375539755417555375557755717557775583756117561775619756297564175653756597567975683756897570375707757097572175731757437576775773757817578775793757977582175833758537586975883759137593175937759417596775979759837598975991759977600176003760317603976079760817609176099761037612376129761477615776159761637620776213762317624376249762537625976261762837628976303763337634376367763697637976387764037642176423764417646376471764817648776493765077651176519765377654176543765617657976597766037660776631766497665176667766737667976697767177673376753767577677176777767817680176819768297683176837768477687176873768837690776913769197694376949769617696376991770037701777023770297704177047770697708177093771017713777141771537716777171771917720177213772377723977243772497726177263772677726977279772917731777323773397734777351773597736977377773837741777419774317744777471774777747977489774917750977513775217752777543775497755177557775637756977573775877759177611776177762177641776477765977681776877768977699777117771377719777237773177743777477776177773777837779777801778137783977849778637786777893778997792977933779517796977977779837799978007780177803178041780497805978079781017812178137781397815778163781677817378179781917819378203782297823378241782597827778283783017830778311783177834178347783677840178427784377843978467784797848778497785097851178517785397854178553785697857178577785837859378607786237864378649786537869178697787077871378721787377877978781787877879178797788037880978823788397885378857788777888778889788937890178919789297894178977789797898979031790397904379063790877910379111791337913979147791517915379159791817918779193792017922979231792417925979273792797928379301793097931979333793377934979357793677937979393793977939979411794237942779433794517948179493795317953779549795597956179579795897960179609796137962179627796317963379657796697968779691796937969779699797577976979777798017981179813798177982379829798417984379847798617986779873798897990179903799077993979943799677997379979799877999779999800218003980051800718007780107801118014180147801498015380167801738017780191802078020980221802318023380239802518026380273802798028780309803178032980341803478036380369803878040780429804478044980471804738048980491805138052780537805578056780599806038061180621806278062980651806578066980671806778068180683806878070180713807378074780749807618077780779807838078980803808098081980831808338084980863808978090980911809178092380929809338095380963809898100181013810178101981023810318104181043810478104981071810778108381097811018111981131811578116381173811818119781199812038122381233812398128181283812938129981307813318134381349813538135981371813738140181409814218143981457814638150981517815278153381547815518155381559815638156981611816198162981637816478164981667816718167781689817018170381707817278173781749817618176981773817998181781839818478185381869818838189981901819198192981931819378194381953819678197181973820038200782009820138202182031820378203982051820678207382129821398214182153821638217182183821898219382207822178221982223822318223782241822618226782279823018230782339823498235182361823738238782393824218245782463824698247182483824878249382499825078252982531825498255982561825678257182591826018260982613826198263382651826578269982721827238272782729827578275982763827818278782793827998281182813828378284782883828898289182903829138293982963829818299783003830098302383047830598306383071830778308983093831018311783137831778320383207832198322183227832318323383243832578326783269832738329983311833398334183357833838338983399834018340783417834238343183437834438344983459834718347783497835378355783561835638357983591835978360983617836218363983641836538366383689837018371783719837378376183773837778379183813838338384383857838698387383891839038391183921839338393983969839838398784011840178404784053840598406184067840898412184127841318413784143841638417984181841918419984211842218422384229842398424784263842998430784313843178431984347843498437784389843918440184407844218443184437844438444984457844638446784481844998450384509845218452384533845518455984589846298463184649846538465984673846918469784701847138471984731847378475184761847878479384809848118482784857848598486984871849138491984947849618496784977849798499185009850218502785037850498506185081850878509185093851038510985121851338514785159851938519985201852138522385229852378524385247852598529785303853138533185333853618536385369853818541185427854298543985447854518545385469854878551385517855238553185549855718557785597856018560785619856218562785639856438566185667856698569185703857118571785733857518578185793858178581985829858318583785843858478585385889859038590985931859338599185999860118601786027860298606986077860838611186113861178613186137861438616186171861798618386197862018620986239862438624986257862638626986287862918629386297863118632386341863518635386357863698637186381863898639986413864238644186453864618646786477864918650186509865318653386539865618657386579865878659986627866298667786689866938671186719867298674386753867678677186783868138683786843868518685786861868698692386927869298693986951869598696986981869938701187013870378704187049870718708387103871078711987121871338714987151871798718187187872118722187223872518725387257872778728187293872998731387317873238733787359873838740387407874218742787433874438747387481874918750987511875178752387539875418754787553875578755987583875878758987613876238762987631876418764387649876718767987683876918769787701877198772187739877438775187767877938779787803878118783387853878698787787881878878791187917879318794387959879618797387977879918800188003880078801988037880698807988093881178812988169881778821188223882378824188259882618828988301883218832788337883398837988397884118842388427884638846988471884938849988513885238854788589885918860788609886438865188657886618866388667886818872188729887418874788771887898879388799888018880788811888138881788819888438885388861888678887388883888978890388919889378895188969889938899789003890098901789021890418905189057890698907189083890878910189107891138911989123891378915389189892038920989213892278923189237892618926989273892938930389317893298936389371893818938789393893998941389417894318944389449894598947789491895018951389519895218952789533895618956389567895918959789599896038961189627896338965389657896598966989671896818968989753897598976789779897838979789809898198982189833898398984989867898918989789899899098991789923899398995989963899778998389989900019000790011900179001990023900319005390059900679007190073900899010790121901279014990163901739018790191901979019990203902179022790239902479026390271902819028990313903539035990371903739037990397904019040390407904379043990469904739048190499905119052390527905299053390547905839059990617906199063190641906479065990677906799069790703907099073190749907879079390803908219082390833908419084790863908879090190907909119091790931909479097190977909899099791009910199103391079910819109791099911219112791129911399114191151911539115991163911839119391199912299123791243912499125391283912919129791303913099133191367913699137391381913879139391397914119142391433914539145791459914639149391499915139152991541915719157391577915839159191621916319163991673916919170391711917339175391757917719178191801918079181191813918239183791841918679187391909919219193991943919519195791961919679196991997920039200992033920419205192077920839210792111921199214392153921739217792179921899220392219922219222792233922379224392251922699229792311923179233392347923539235792363923699237792381923839238792399924019241392419924319245992461924679247992489925039250792551925579256792569925819259392623926279263992641926479265792669926719268192683926939269992707927179272392737927539276192767927799278992791928019280992821928319284992857928619286392867928939289992921929279294192951929579295992987929939300193047930539305993077930839308993097931039311393131931339313993151931699317993187931999322993239932419325193253932579326393281932839328793307933199332393329933379337193377933839340793419934279346393479934819348793491934939349793503935239352993553935579355993563935819360193607936299363793683937019370393719937399376193763937879380993811938279385193871938879388993893939019391193913939239393793941939499396793971939799398393997940079400994033940499405794063940799409994109941119411794121941519415394169942019420794219942299425394261942739429194307943099432194327943319434394349943519437994397943999442194427944339443994441944479446394477944839451394529945319454194543945479455994561945739458394597946039461394621946499465194687946939470994723947279474794771947779478194789947939481194819948239483794841948479484994873948899490394907949339494994951949619499394999950039500995021950279506395071950839508795089950939510195107951119513195143951539517795189951919520395213952199523195233952399525795261952679527395279952879531195317953279533995369953839539395401954139541995429954419544395461954679547195479954839550795527955319553995549955619556995581955979560395617956219562995633956519570195707957139571795723957319573795747957739578395789957919580195803958139581995857958699587395881958919591195917959239592995947959579595995971959879598996001960139601796043960539605996079960979613796149961579616796179961819619996211962219622396233962599626396269962819628996293963239632996331963379635396377964019641996431964439645196457964619646996479964879649396497965179652796553965579658196587965899660196643966619666796671966979670396731967379673996749967579676396769967799678796797967999682196823968279684796851968579689396907969119693196953969599697396979969899699797001970039700797021970399707397081971039711797127971519715797159971699717197177971879721397231972419725997283973019730397327973679736997373973799738197387973979742397429974419745397459974639749997501975119752397547975499755397561975719757797579975839760797609976139764997651976739768797711977299777197777977879778997813978299784197843978479784997859978619787197879978839791997927979319794397961979679797397987980099801198017980419804798057980819810198123981299814398179982079821398221982279825198257982699829798299983179832198323983279834798369983779838798389984079841198419984299844398453984599846798473984799849198507985199853398543985619856398573985979862198627986399864198663986699868998711987139871798729987319873798773987799880198807988099883798849988679886998873988879889398897988999890998911989279892998939989479895398963989819899398999990139901799023990419905399079990839908999103991099911999131991339913799139991499917399181991919922399233992419925199257992599927799289993179934799349993679937199377993919939799401994099943199439994699948799497995239952799529995519955999563995719957799581996079961199623996439966199667996799968999707997099971399719997219973399761997679978799793998099981799823998299983399839998599987199877998819990199907999239992999961999719998999991100003100019100043100049100057100069100103100109100129100151100153100169100183100189100193100207100213100237100267100271100279100291100297100313100333100343100357100361100363100379100391100393100403100411100417100447100459100469100483100493100501100511100517100519100523100537100547100549100559100591100609100613100621100649100669100673100693100699100703100733100741100747100769100787100799100801100811100823100829100847100853100907100913100927100931100937100943100957100981100987100999101009101021101027101051101063101081101089101107101111101113101117101119101141101149101159101161101173101183101197101203101207101209101221101267101273101279101281101287101293101323101333101341101347101359101363101377101383101399101411101419101429101449101467101477101483101489101501101503101513101527101531101533101537101561101573101581101599101603101611101627101641101653101663101681101693101701101719101723101737101741101747101749101771101789101797101807101833101837101839101863101869101873101879101891101917101921101929101939101957101963101977101987101999102001102013102019102023102031102043102059102061102071102077102079102101102103102107102121102139102149102161102181102191102197102199102203102217102229102233102241102251102253102259102293102299102301102317102329102337102359102367102397102407102409102433102437102451102461102481102497102499102503102523102533102539102547102551102559102563102587102593102607102611102643102647102653102667102673102677102679102701102761102763102769102793102797102811102829102841102859102871102877102881102911102913102929102931102953102967102983103001103007103043103049103067103069103079103087103091103093103099103123103141103171103177103183103217103231103237103289103291103307103319103333103349103357103387103391103393103399103409103421103423103451103457103471103483103511103529103549103553103561103567103573103577103583103591103613103619103643103651103657103669103681103687103699103703103723103769103787103801103811103813103837103841103843103867103889103903103913103919103951103963103967103969103979103981103991103993103997104003104009104021104033104047104053104059104087104089104107104113104119104123104147104149104161104173104179104183104207104231104233104239104243104281104287104297104309104311104323104327104347104369104381104383104393104399104417104459104471104473104479104491104513104527104537104543104549104551104561104579104593104597104623104639104651104659104677104681104683104693104701104707104711104717104723104729104743104759104761104773104779104789104801104803104827104831104849104851104869104879104891104911104917104933104947104953104959104971104987104999105019105023105031105037105071105097105107105137105143105167105173105199105211105227105229105239105251105253105263105269105277105319105323105331105337105341105359105361105367105373105379105389105397105401105407105437105449105467105491105499105503105509105517105527105529105533105541105557105563105601105607105613105619105649105653105667105673105683105691105701105727105733105751105761105767105769105817105829105863105871105883105899105907105913105929105943105953105967105971105977105983105997106013106019106031106033106087106103106109106121106123106129106163106181106187106189106207106213106217106219106243106261106273106277106279106291106297106303106307106319106321106331106349106357106363106367106373106391106397106411106417106427106433106441106451106453106487106501106531106537106541106543106591106619106621106627106637106649106657106661106663106669106681106693106699106703106721106727106739106747106751106753106759106781106783106787106801106823106853106859106861106867106871106877106903106907106921106937106949106957106961106963106979106993107021107033107053107057107069107071107077107089107099107101107119107123107137107171107183107197107201107209107227107243107251107269107273107279107309107323107339107347107351107357107377107441107449107453107467107473107507107509107563107581107599107603107609107621107641107647107671107687107693107699107713107717107719107741107747107761107773107777107791107827107837107839107843107857107867107873107881107897107903107923107927107941107951107971107981107999108007108011108013108023108037108041108061108079108089108107108109108127108131108139108161108179108187108191108193108203108211108217108223108233108247108263108271108287108289108293108301108343108347108359108377108379108401108413108421108439108457108461108463108497108499108503108517108529108533108541108553108557108571108587108631108637108643108649108677108707108709108727108739108751108761108769108791108793108799108803108821108827108863108869108877108881108883108887108893108907108917108923108929108943108947108949108959108961108967108971108991109001109013109037109049109063109073109097109103109111109121109133109139109141109147109159109169109171109199109201109211109229109253109267109279109297109303109313109321109331109357109363109367109379109387109391109397109423109433109441109451109453109469109471109481109507109517109519109537109541109547109567109579109583109589109597109609109619109621109639109661109663109673109717109721109741109751109789109793109807109819109829109831109841109843109847109849109859109873109883109891109897109903109913109919109937109943109961109987110017110023110039110051110059110063110069110083110119110129110161110183110221110233110237110251110261110269110273110281110291110311110321110323110339110359110419110431110437110441110459110477110479110491110501110503110527110533110543110557110563110567110569110573110581110587110597110603110609110623110629110641110647110651110681110711110729110731110749110753110771110777110807110813110819110821110849110863110879110881110899110909110917110921110923110927110933110939110947110951110969110977110989111029111031111043111049111053111091111103111109111119111121111127111143111149111187111191111211111217111227111229111253111263111269111271111301111317111323111337111341111347111373111409111427111431111439111443111467111487111491111493111497111509111521111533111539111577111581111593111599111611111623111637111641111653111659111667111697111721111731111733111751111767111773111779111781111791111799111821111827111829111833111847111857111863111869111871111893111913111919111949111953111959111973111977111997112019112031112061112067112069112087112097112103112111112121112129112139112153112163112181112199112207112213112223112237112241112247112249112253112261112279112289112291112297112303112327112331112337112339112349112361112363112397112403112429112459112481112501112507112543112559112571112573112577112583112589112601112603112621112643112657112663112687112691112741112757112759112771112787112799112807112831112843112859112877112901112909112913112919112921112927112939112951112967112979112997113011113017113021113023113027113039113041113051113063113081113083113089113093113111113117113123113131113143113147113149113153113159113161113167113171113173113177113189113209113213113227113233113279113287113327113329113341113357113359113363113371113381113383113417113437113453113467113489113497113501113513113537113539113557113567113591113621113623113647113657113683113717113719113723113731113749113759113761113777113779113783113797113809113819113837113843113891113899113903113909113921113933113947113957113963113969113983113989114001114013114031114041114043114067114073114077114083114089114113114143114157114161114167114193114197114199114203114217114221114229114259114269114277114281114299114311114319114329114343114371114377114407114419114451114467114473114479114487114493114547114553114571114577114593114599114601114613114617114641114643114649114659114661114671114679114689114691114713114743114749114757114761114769114773114781114797114799114809114827114833114847114859114883114889114901114913114941114967114973114997115001115013115019115021115057115061115067115079115099115117115123115127115133115151115153115163115183115201115211115223115237115249115259115279115301115303115309115319115321115327115331115337115343115361115363115399115421115429115459115469115471115499115513115523115547115553115561115571115589115597115601115603115613115631115637115657115663115679115693115727115733115741115751115757115763115769115771115777115781115783115793115807115811115823115831115837115849115853115859115861115873115877115879115883115891115901115903115931115933115963115979115981115987116009116027116041116047116089116099116101116107116113116131116141116159116167116177116189116191116201116239116243116257116269116273116279116293116329116341116351116359116371116381116387116411116423116437116443116447116461116471116483116491116507116531116533116537116539116549116579116593116639116657116663116681116687116689116707116719116731116741116747116789116791116797116803116819116827116833116849116867116881116903116911116923116927116929116933116953116959116969116981116989116993117017117023117037117041117043117053117071117101117109117119117127117133117163117167117191117193117203117209117223117239117241117251117259117269117281117307117319117329117331117353117361117371117373117389117413117427117431117437117443117497117499117503117511117517117529117539117541117563117571117577117617117619117643117659117671117673117679117701117703117709117721117727117731117751117757117763117773117779117787117797117809117811117833117839117841117851117877117881117883117889117899117911117917117937117959117973117977117979117989117991118033118037118043118051118057118061118081118093118127118147118163118169118171118189118211118213118219118247118249118253118259118273118277118297118343118361118369118373118387118399118409118411118423118429118453118457118463118471118493118529118543118549118571118583118589118603118619118621118633118661118669118673118681118687118691118709118717118739118747118751118757118787118799118801118819118831118843118861118873118891118897118901118903118907118913118927118931118967118973119027119033119039119047119057119069119083119087119089119099119101119107119129119131119159119173119179119183119191119227119233119237119243119267119291119293119297119299119311119321119359119363119389119417119419119429119447119489119503119513119533119549119551119557119563119569119591119611119617119627119633119653119657119659119671119677119687119689119699119701119723119737119747119759119771119773119783119797119809119813119827119831119839119849119851119869119881119891119921119923119929119953119963119971119981119983119993120011120017120041120047120049120067120077120079120091120097120103120121120157120163120167120181120193120199120209120223120233120247120277120283120293120299120319120331120349120371120383120391120397120401120413120427120431120473120503120511120539120551120557120563120569120577120587120607120619120623120641120647120661120671120677120689120691120709120713120721120737120739120749120763120767120779120811120817120823120829120833120847120851120863120871120877120889120899120907120917120919120929120937120941120943120947120977120997121001121007121013121019121021121039121061121063121067121081121123121139121151121157121169121171121181121189121229121259121267121271121283121291121309121313121321121327121333121343121349121351121357121367121369121379121403121421121439121441121447121453121469121487121493121501121507121523121531121547121553121559121571121577121579121591121607121609121621121631121633121637121661121687121697121711121721121727121763121787121789121843121853121867121883121889121909121921121931121937121949121951121963121967121993121997122011122021122027122029122033122039122041122051122053122069122081122099122117122131122147122149122167122173122201122203122207122209122219122231122251122263122267122273122279122299122321122323122327122347122363122387122389122393122399122401122443122449122453122471122477122489122497122501122503122509122527122533122557122561122579122597122599122609122611122651122653122663122693122701122719122741122743122753122761122777122789122819122827122833122839122849122861122867122869122887122891122921122929122939122953122957122963122971123001123007123017123031123049123059123077123083123091123113123121123127123143123169123191123203123209123217123229123239123259123269123289123307123311123323123341123373123377123379123397123401123407123419123427123433123439123449123457123479123491123493123499123503123517123527123547123551123553123581123583123593123601123619123631123637123653123661123667123677123701123707123719123727123731123733123737123757123787123791123803123817123821123829123833123853123863123887123911123923123931123941123953123973123979123983123989123997124001124021124067124087124097124121124123124133124139124147124153124171124181124183124193124199124213124231124247124249124277124291124297124301124303124309124337124339124343124349124351124363124367124427124429124433124447124459124471124477124489124493124513124529124541124543124561124567124577124601124633124643124669124673124679124693124699124703124717124721124739124753124759124769124771124777124781124783124793124799124819124823124847124853124897124907124909124919124951124979124981124987124991125003125017125029125053125063125093125101125107125113125117125119125131125141125149125183125197125201125207125219125221125231125243125261125269125287125299125303125311125329125339125353125371125383125387125399125407125423125429125441125453125471125497125507125509125527125539125551125591125597125617125621125627125639125641125651125659125669125683125687125693125707125711125717125731125737125743125753125777125789125791125803125813125821125863125887125897125899125921125927125929125933125941125959125963126001126011126013126019126023126031126037126041126047126067126079126097126107126127126131126143126151126173126199126211126223126227126229126233126241126257126271126307126311126317126323126337126341126349126359126397126421126433126443126457126461126473126481126487126491126493126499126517126541126547126551126583126601126611126613126631126641126653126683126691126703126713126719126733126739126743126751126757126761126781126823126827126839126851126857126859126913126923126943126949126961126967126989127031127033127037127051127079127081127103127123127133127139127157127163127189127207127217127219127241127247127249127261127271127277127289127291127297127301127321127331127343127363127373127399127403127423127447127453127481127487127493127507127529127541127549127579127583127591127597127601127607127609127637127643127649127657127663127669127679127681127691127703127709127711127717127727127733127739127747127763127781127807127817127819127837127843127849127859127867127873127877127913127921127931127951127973127979127997128021128033128047128053128099128111128113128119128147128153128159128173128189128201128203128213128221128237128239128257128273128287128291128311128321128327128339128341128347128351128377128389128393128399128411128413128431128437128449128461128467128473128477128483128489128509128519128521128549128551128563128591128599128603128621128629128657128659128663128669128677128683128693128717128747128749128761128767128813128819128831128833128837128857128861128873128879128903128923128939128941128951128959128969128971128981128983128987128993129001129011129023129037129049129061129083129089129097129113129119129121129127129169129187129193129197129209129221129223129229129263129277129281129287129289129293129313129341129347129361129379129401129403129419129439129443129449129457129461129469129491129497129499129509129517129527129529129533129539129553129581129587129589129593129607129629129631129641129643129671129707129719129733129737129749129757129763129769129793129803129841129853129887129893129901129917129919129937129953129959129967129971130003130021130027130043130051130057130069130073130079130087130099130121130127130147130171130183130199130201130211130223130241130253130259130261130267130279130303130307130337130343130349130363130367130369130379130399130409130411130423130439130447130457130469130477130483130489130513130517130523130531130547130553130579130589130619130621130631130633130639130643130649130651130657130681130687130693130699130729130769130783130787130807130811130817130829130841130843130859130873130927130957130969130973130981130987131009131011131023131041131059131063131071131101131111131113131129131143131149131171131203131213131221131231131249131251131267131293131297131303131311131317131321131357131363131371131381131413131431131437131441131447131449131477131479131489131497131501131507131519131543131561131581131591131611131617131627131639131641131671131687131701131707131711131713131731131743131749131759131771131777131779131783131797131837131839131849131861131891131893131899131909131927131933131939131941131947131959131969132001132019132047132049132059132071132103132109132113132137132151132157132169132173132199132229132233132241132247132257132263132283132287132299132313132329132331132347132361132367132371132383132403132409132421132437132439132469132491132499132511132523132527132529132533132541132547132589132607132611132619132623132631132637132647132661132667132679132689132697132701132707132709132721132739132749132751132757132761132763132817132833132851132857132859132863132887132893132911132929132947132949132953132961132967132971132989133013133033133039133051133069133073133087133097133103133109133117133121133153133157133169133183133187133201133213133241133253133261133271133277133279133283133303133319133321133327133337133349133351133379133387133391133403133417133439133447133451133481133493133499133519133541133543133559133571133583133597133631133633133649133657133669133673133691133697133709133711133717133723133733133769133781133801133811133813133831133843133853133873133877133919133949133963133967133979133981133993133999134033134039134047134053134059134077134081134087134089134093134129134153134161134171134177134191134207134213134219134227134243134257134263134269134287134291134293134327134333134339134341134353134359134363134369134371134399134401134417134437134443134471134489134503134507134513134581134587134591134593134597134609134639134669134677134681134683134699134707134731134741134753134777134789134807134837134839134851134857134867134873134887134909134917134921134923134947134951134989134999135007135017135019135029135043135049135059135077135089135101135119135131135151135173135181135193135197135209135211135221135241135257135271135277135281135283135301135319135329135347135349135353135367135389135391135403135409135427135431135433135449135461135463135467135469135479135497135511135533135559135571135581135589135593135599135601135607135613135617135623135637135647135649135661135671135697135701135719135721135727135731135743135757135781135787135799135829135841135851135859135887135893135899135911135913135929135937135977135979136013136027136033136043136057136067136069136093136099136111136133136139136163136177136189136193136207136217136223136237136247136261136273136277136303136309136319136327136333136337136343136351136361136373136379136393136397136399136403136417136421136429136447136453136463136471136481136483136501136511136519136523136531136537136541136547136559136573136601136603136607136621136649136651136657136691136693136709136711136727136733136739136751136753136769136777136811136813136841136849136859136861136879136883136889136897136943136949136951136963136973136979136987136991136993136999137029137077137087137089137117137119137131137143137147137153137177137183137191137197137201137209137219137239137251137273137279137303137321137339137341137353137359137363137369137383137387137393137399137413137437137443137447137453137477137483137491137507137519137537137567137573137587137593137597137623137633137639137653137659137699137707137713137723137737137743137771137777137791137803137827137831137849137867137869137873137909137911137927137933137941137947137957137983137993137999138007138041138053138059138071138077138079138101138107138113138139138143138157138163138179138181138191138197138209138239138241138247138251138283138289138311138319138323138337138349138371138373138389138401138403138407138427138433138449138451138461138469138493138497138511138517138547138559138563138569138571138577138581138587138599138617138629138637138641138647138661138679138683138727138731138739138763138793138797138799138821138829138841138863138869138883138889138893138899138917138923138937138959138967138977139021139033139067139079139091139109139121139123139133139169139177139187139199139201139241139267139273139291139297139301139303139309139313139333139339139343139361139367139369139387139393139397139409139423139429139439139457139459139483139487139493139501139511139537139547139571139589139591139597139609139619139627139661139663139681139697139703139709139721139729139739139747139753139759139787139801139813139831139837139861139871139883139891139901139907139921139939139943139967139969139981139987139991139999140009140053140057140069140071140111140123140143140159140167140171140177140191140197140207140221140227140237140249140263140269140281140297140317140321140333140339140351140363140381140401140407140411140417140419140423140443140449140453140473140477140521140527140533140549140551140557140587140593140603140611140617140627140629140639140659140663140677140681140683140689140717140729140731140741140759140761140773140779140797140813140827140831140837140839140863140867140869140891140893140897140909140929140939140977140983140989141023141041141061141067141073141079141101141107141121141131141157141161141179141181141199141209141221141223141233141241141257141263141269141277141283141301141307141311141319141353141359141371141397141403141413141439141443141461141481141497141499141509141511141529141539141551141587141601141613141619141623141629141637141649141653141667141671141677141679141689141697141707141709141719141731141761141767141769141773141793141803141811141829141833141851141853141863141871141907141917141931141937141941141959141961141971141991142007142019142031142039142049142057142061142067142097142099142111142123142151142157142159142169142183142189142193142211142217142223142231142237142271142297142319142327142357142369142381142391142403142421142427142433142453142469142501142529142537142543142547142553142559142567142573142589142591142601142607142609142619142657142673142697142699142711142733142757142759142771142787142789142799142811142837142841142867142871142873142897142903142907142939142949142963142969142973142979142981142993143053143063143093143107143111143113143137143141143159143177143197143239143243143249143257143261143263143281143287143291143329143333143357143387143401143413143419143443143461143467143477143483143489143501143503143509143513143519143527143537143551143567143569143573143593143609143617143629143651143653143669143677143687143699143711143719143729143743143779143791143797143807143813143821143827143831143833143873143879143881143909143947143953143971143977143981143999144013144031144037144061144071144073144103144139144161144163144167144169144173144203144223144241144247144253144259144271144289144299144307144311144323144341144349144379144383144407144409144413144427144439144451144461144479144481144497144511144539144541144563144569144577144583144589144593144611144629144659144667144671144701144709144719144731144737144751144757144763144773144779144791144817144829144839144847144883144887144889144899144917144931144941144961144967144973144983145007145009145021145031145037145043145063145069145091145109145121145133145139145177145193145207145213145219145253145259145267145283145289145303145307145349145361145381145391145399145417145423145433145441145451145459145463145471145477145487145501145511145513145517145531145543145547145549145577145589145601145603145633145637145643145661145679145681145687145703145709145721145723145753145757145759145771145777145799145807145819145823145829145861145879145897145903145931145933145949145963145967145969145987145991146009146011146021146023146033146051146057146059146063146077146093146099146117146141146161146173146191146197146203146213146221146239146249146273146291146297146299146309146317146323146347146359146369146381146383146389146407146417146423146437146449146477146513146519146521146527146539146543146563146581146603146609146617146639146647146669146677146681146683146701146719146743146749146767146777146801146807146819146833146837146843146849146857146891146893146917146921146933146941146953146977146983146987146989147011147029147031147047147073147083147089147097147107147137147139147151147163147179147197147209147211147221147227147229147253147263147283147289147293147299147311147319147331147341147347147353147377147391147397147401147409147419147449147451147457147481147487147503147517147541147547147551147557147571147583147607147613147617147629147647147661147671147673147689147703147709147727147739147743147761147769147773147779147787147793147799147811147827147853147859147863147881147919147937147949147977147997148013148021148061148063148073148079148091148123148139148147148151148153148157148171148193148199148201148207148229148243148249148279148301148303148331148339148361148367148381148387148399148403148411148429148439148457148469148471148483148501148513148517148531148537148549148573148579148609148627148633148639148663148667148669148691148693148711148721148723148727148747148763148781148783148793148817148829148853148859148861148867148873148891148913148921148927148931148933148949148957148961148991148997149011149021149027149033149053149057149059149069149077149087149099149101149111149113149119149143149153149159149161149173149183149197149213149239149249149251149257149269149287149297149309149323149333149341149351149371149377149381149393149399149411149417149419149423149441149459149489149491149497149503149519149521149531149533149543149551149561149563149579149603149623149627149629149689149711149713149717149729149731149749149759149767149771149791149803149827149837149839149861149867149873149893149899149909149911149921149939149953149969149971149993150001150011150041150053150061150067150077150083150089150091150097150107150131150151150169150193150197150203150209150211150217150221150223150239150247150287150299150301150323150329150343150373150377150379150383150401150407150413150427150431150439150473150497150503150517150523150533150551150559150571150583150587150589150607150611150617150649150659150697150707150721150743150767150769150779150791150797150827150833150847150869150881150883150889150893150901150907150919150929150959150961150967150979150989150991151007151009151013151027151049151051151057151091151121151141151153151157151163151169151171151189151201151213151237151241151243151247151253151273151279151289151303151337151339151343151357151379151381151391151397151423151429151433151451151471151477151483151499151507151517151523151531151537151549151553151561151573151579151597151603151607151609151631151637151643151651151667151673151681151687151693151703151717151729151733151769151771151783151787151799151813151817151841151847151849151871151883151897151901151903151909151937151939151967151969152003152017152027152029152039152041152063152077152081152083152093152111152123152147152183152189152197152203152213152219152231152239152249152267152287152293152297152311152363152377152381152389152393152407152417152419152423152429152441152443152459152461152501152519152531152533152539152563152567152597152599152617152623152629152639152641152657152671152681152717152723152729152753152767152777152783152791152809152819152821152833152837152839152843152851152857152879152897152899152909152939152941152947152953152959152981152989152993153001153059153067153071153073153077153089153107153113153133153137153151153191153247153259153269153271153277153281153287153313153319153337153343153353153359153371153379153407153409153421153427153437153443153449153457153469153487153499153509153511153521153523153529153533153557153563153589153607153611153623153641153649153689153701153719153733153739153743153749153757153763153817153841153871153877153887153889153911153913153929153941153947153949153953153991153997154001154027154043154057154061154067154073154079154081154087154097154111154127154153154157154159154181154183154211154213154229154243154247154267154277154279154291154303154313154321154333154339154351154369154373154387154409154417154423154439154459154487154493154501154523154543154571154573154579154589154591154613154619154621154643154667154669154681154691154699154723154727154733154747154753154769154787154789154799154807154823154841154849154871154873154877154883154897154927154933154937154943154981154991155003155009155017155027155047155069155081155083155087155119155137155153155161155167155171155191155201155203155209155219155231155251155269155291155299155303155317155327155333155371155377155381155383155387155399155413155423155443155453155461155473155501155509155521155537155539155557155569155579155581155593155599155609155621155627155653155657155663155671155689155693155699155707155717155719155723155731155741155747155773155777155783155797155801155809155821155833155849155851155861155863155887155891155893155921156007156011156019156041156059156061156071156089156109156119156127156131156139156151156157156217156227156229156241156253156257156259156269156307156319156329156347156353156361156371156419156421156437156467156487156491156493156511156521156539156577156589156593156601156619156623156631156641156659156671156677156679156683156691156703156707156719156727156733156749156781156797156799156817156823156833156841156887156899156901156913156941156943156967156971156979157007157013157019157037157049157051157057157061157081157103157109157127157133157141157163157177157181157189157207157211157217157219157229157231157243157247157253157259157271157273157277157279157291157303157307157321157327157349157351157363157393157411157427157429157433157457157477157483157489157513157519157523157543157559157561157571157579157627157637157639157649157667157669157679157721157733157739157747157769157771157793157799157813157823157831157837157841157867157877157889157897157901157907157931157933157951157991157999158003158009158017158029158047158071158077158113158129158141158143158161158189158201158209158227158231158233158243158261158269158293158303158329158341158351158357158359158363158371158393158407158419158429158443158449158489158507158519158527158537158551158563158567158573158581158591158597158611158617158621158633158647158657158663158699158731158747158749158759158761158771158777158791158803158843158849158863158867158881158909158923158927158941158959158981158993159013159017159023159059159073159079159097159113159119159157159161159167159169159179159191159193159199159209159223159227159233159287159293159311159319159337159347159349159361159389159403159407159421159431159437159457159463159469159473159491159499159503159521159539159541159553159563159569159571159589159617159623159629159631159667159671159673159683159697159701159707159721159737159739159763159769159773159779159787159791159793159799159811159833159839159853159857159869159871159899159911159931159937159977159979160001160009160019160031160033160049160073160079160081160087160091160093160117160141160159160163160169160183160201160207160217160231160243160253160309160313160319160343160357160367160373160387160397160403160409160423160441160453160481160483160499160507160541160553160579160583160591160603160619160621160627160637160639160649160651160663160669160681160687160697160709160711160723160739160751160753160757160781160789160807160813160817160829160841160861160877160879160883160903160907160933160967160969160981160997161009161017161033161039161047161053161059161071161087161093161123161137161141161149161159161167161201161221161233161237161263161267161281161303161309161323161333161339161341161363161377161387161407161411161453161459161461161471161503161507161521161527161531161543161561161563161569161573161591161599161611161627161639161641161659161683161717161729161731161741161743161753161761161771161773161779161783161807161831161839161869161873161879161881161911161921161923161947161957161969161971161977161983161999162007162011162017162053162059162079162091162109162119162143162209162221162229162251162257162263162269162277162287162289162293162343162359162389162391162413162419162439162451162457162473162493162499162517162523162527162529162553162557162563162577162593162601162611162623162629162641162649162671162677162683162691162703162709162713162727162731162739162749162751162779162787162791162821162823162829162839162847162853162859162881162889162901162907162917162937162947162971162973162989162997163003163019163021163027163061163063163109163117163127163129163147163151163169163171163181163193163199163211163223163243163249163259163307163309163321163327163337163351163363163367163393163403163409163411163417163433163469163477163481163483163487163517163543163561163567163573163601163613163621163627163633163637163643163661163673163679163697163729163733163741163753163771163781163789163811163819163841163847163853163859163861163871163883163901163909163927163973163979163981163987163991163993163997164011164023164039164051164057164071164089164093164113164117164147164149164173164183164191164201164209164231164233164239164249164251164267164279164291164299164309164321164341164357164363164371164377164387164413164419164429164431164443164447164449164471164477164503164513164531164569164581164587164599164617164621164623164627164653164663164677164683164701164707164729164743164767164771164789164809164821164831164837164839164881164893164911164953164963164987164999165001165037165041165047165049165059165079165083165089165103165133165161165173165181165203165211165229165233165247165287165293165311165313165317165331165343165349165367165379165383165391165397165437165443165449165457165463165469165479165511165523165527165533165541165551165553165559165569165587165589165601165611165617165653165667165673165701165703165707165709165713165719165721165749165779165799165811165817165829165833165857165877165883165887165901165931165941165947165961165983166013166021166027166031166043166063166081166099166147166151166157166169166183166189166207166219166237166247166259166273166289166297166301166303166319166349166351166357166363166393166399166403166409166417166429166457166471166487166541166561166567166571166597166601166603166609166613166619166627166631166643166657166667166669166679166693166703166723166739166741166781166783166799166807166823166841166843166847166849166853166861166867166871166909166919166931166949166967166973166979166987167009167017167021167023167033167039167047167051167071167077167081167087167099167107167113167117167119167149167159167173167177167191167197167213167221167249167261167267167269167309167311167317167329167339167341167381167393167407167413167423167429167437167441167443167449167471167483167491167521167537167543167593167597167611167621167623167627167633167641167663167677167683167711167729167747167759167771167777167779167801167809167861167863167873167879167887167891167899167911167917167953167971167987168013168023168029168037168043168067168071168083168089168109168127168143168151168193168197168211168227168247168253168263168269168277168281168293168323168331168347168353168391168409168433168449168451168457168463168481168491168499168523168527168533168541168559168599168601168617168629168631168643168673168677168697168713168719168731168737168743168761168769168781168803168851168863168869168887168893168899168901168913168937168943168977168991169003169007169009169019169049169063169067169069169079169093169097169111169129169151169159169177169181169199169217169219169241169243169249169259169283169307169313169319169321169327169339169343169361169369169373169399169409169427169457169471169483169489169493169501169523169531169553169567169583169591169607169627169633169639169649169657169661169667169681169691169693169709169733169751169753169769169777169783169789169817169823169831169837169843169859169889169891169909169913169919169933169937169943169951169957169987169991170003170021170029170047170057170063170081170099170101170111170123170141170167170179170189170197170207170213170227170231170239170243170249170263170267170279170293170299170327170341170347170351170353170363170369170371170383170389170393170413170441170447170473170483170497170503170509170537170539170551170557170579170603170609170627170633170641170647170669170689170701170707170711170741170749170759170761170767170773170777170801170809170813170827170837170843170851170857170873170881170887170899170921170927170953170957170971171007171023171029171043171047171049171053171077171079171091171103171131171161171163171167171169171179171203171233171251171253171263171271171293171299171317171329171341171383171401171403171427171439171449171467171469171473171481171491171517171529171539171541171553171559171571171583171617171629171637171641171653171659171671171673171679171697171707171713171719171733171757171761171763171793171799171803171811171823171827171851171863171869171877171881171889171917171923171929171937171947172001172009172021172027172031172049172069172079172093172097172127172147172153172157172169172171172181172199172213172217172219172223172243172259172279172283172297172307172313172321172331172343172351172357172373172399172411172421172423172427172433172439172441172489172507172517172519172541172553172561172573172583172589172597172603172607172619172633172643172649172657172663172673172681172687172709172717172721172741172751172759172787172801172807172829172849172853172859172867172871172877172883172933172969172973172981172987172993172999173021173023173039173053173059173081173087173099173137173141173149173177173183173189173191173207173209173219173249173263173267173273173291173293173297173309173347173357173359173429173431173473173483173491173497173501173531173539173543173549173561173573173599173617173629173647173651173659173669173671173683173687173699173707173713173729173741173743173773173777173779173783173807173819173827173839173851173861173867173891173897173909173917173923173933173969173977173981173993174007174017174019174047174049174061174067174071174077174079174091174101174121174137174143174149174157174169174197174221174241174257174259174263174281174289174299174311174329174331174337174347174367174389174407174413174431174443174457174467174469174481174487174491174527174533174569174571174583174599174613174617174631174637174649174653174659174673174679174703174721174737174749174761174763174767174773174799174821174829174851174859174877174893174901174907174917174929174931174943174959174989174991175003175013175039175061175067175069175079175081175103175129175141175211175229175261175267175277175291175303175309175327175333175349175361175391175393175403175411175433175447175453175463175481175493175499175519175523175543175573175601175621175631175633175649175663175673175687175691175699175709175723175727175753175757175759175781175783175811175829175837175843175853175859175873175891175897175909175919175937175939175949175961175963175979175991175993176017176021176023176041176047176051176053176063176081176087176089176123176129176153176159176161176179176191176201176207176213176221176227176237176243176261176299176303176317176321176327176329176333176347176353176357176369176383176389176401176413176417176419176431176459176461176467176489176497176503176507176509176521176531176537176549176551176557176573176591176597176599176609176611176629176641176651176677176699176711176713176741176747176753176777176779176789176791176797176807176809176819176849176857176887176899176903176921176923176927176933176951176977176983176989177007177011177013177019177043177091177101177109177113177127177131177167177173177209177211177217177223177239177257177269177283177301177319177323177337177347177379177383177409177421177427177431177433177467177473177481177487177493177511177533177539177553177589177601177623177647177677177679177691177739177743177761177763177787177791177797177811177823177839177841177883177887177889177893177907177913177917177929177943177949177953177967177979178001178021178037178039178067178069178091178093178103178117178127178141178151178169178183178187178207178223178231178247178249178259178261178289178301178307178327178333178349178351178361178393178397178403178417178439178441178447178469178481178487178489178501178513178531178537178559178561178567178571178597178601178603178609178613178621178627178639178643178681178691178693178697178753178757178781178793178799178807178813178817178819178831178853178859178873178877178889178897178903178907178909178921178931178933178939178951178973178987179021179029179033179041179051179057179083179089179099179107179111179119179143179161179167179173179203179209179213179233179243179261179269179281179287179317179321179327179351179357179369179381179383179393179407179411179429179437179441179453179461179471179479179483179497179519179527179533179549179563179573179579179581179591179593179603179623179633179651179657179659179671179687179689179693179717179719179737179743179749179779179801179807179813179819179821179827179833179849179897179899179903179909179917179923179939179947179951179953179957179969179981179989179999180001180007180023180043180053180071180073180077180097180137180161180179180181180211180221180233180239180241180247180259180263180281180287180289180307180311180317180331180337180347180361180371180379180391180413180419180437180463180473180491180497180503180511180533180539180541180547180563180569180617180623180629180647180667180679180701180731180749180751180773180779180793180797180799180811180847180871180883180907180949180959181001181003181019181031181039181061181063181081181087181123181141181157181183181193181199181201181211181213181219181243181253181273181277181283181297181301181303181361181387181397181399181409181421181439181457181459181499181501181513181523181537181549181553181603181607181609181619181639181667181669181693181711181717181721181729181739181751181757181759181763181777181787181789181813181837181871181873181889181891181903181913181919181927181931181943181957181967181981181997182009182011182027182029182041182047182057182059182089182099182101182107182111182123182129182131182141182159182167182177182179182201182209182233182239182243182261182279182297182309182333182339182341182353182387182389182417182423182431182443182453182467182471182473182489182503182509182519182537182549182561182579182587182593182599182603182617182627182639182641182653182657182659182681182687182701182711182713182747182773182779182789182803182813182821182839182851182857182867182887182893182899182921182927182929182933182953182957182969182981182999183023183037183041183047183059183067183089183091183119183151183167183191183203183247183259183263183283183289183299183301183307183317183319183329183343183349183361183373183377183383183389183397183437183439183451183461183473183479183487183497183499183503183509183511183523183527183569183571183577183581183587183593183611183637183661183683183691183697183707183709183713183761183763183797183809183823183829183871183877183881183907183917183919183943183949183959183971183973183979184003184007184013184031184039184043184057184073184081184087184111184117184133184153184157184181184187184189184199184211184231184241184259184271184273184279184291184309184321184333184337184351184369184409184417184441184447184463184477184487184489184511184517184523184553184559184567184571184577184607184609184627184631184633184649184651184669184687184693184703184711184721184727184733184753184777184823184829184831184837184843184859184879184901184903184913184949184957184967184969184993184997184999185021185027185051185057185063185069185071185077185089185099185123185131185137185149185153185161185167185177185183185189185221185233185243185267185291185299185303185309185323185327185359185363185369185371185401185429185441185467185477185483185491185519185527185531185533185539185543185551185557185567185569185593185599185621185641185651185677185681185683185693185699185707185711185723185737185747185749185753185767185789185797185813185819185821185831185833185849185869185873185893185897185903185917185923185947185951185957185959185971185987185993186007186013186019186023186037186041186049186071186097186103186107186113186119186149186157186161186163186187186191186211186227186229186239186247186253186259186271186283186299186301186311186317186343186377186379186391186397186419186437186451186469186479186481186551186569186581186583186587186601186619186629186647186649186653186671186679186689186701186707186709186727186733186743186757186761186763186773186793186799186841186859186869186871186877186883186889186917186947186959187003187009187027187043187049187067187069187073187081187091187111187123187127187129187133187139187141187163187171187177187181187189187193187211187217187219187223187237187273187277187303187337187339187349187361187367187373187379187387187393187409187417187423187433187441187463187469187471187477187507187513187531187547187559187573187597187631187633187637187639187651187661187669187687187699187711187721187751187763187787187793187823187843187861187871187877187883187897187907187909187921187927187931187951187963187973187987188011188017188021188029188107188137188143188147188159188171188179188189188197188249188261188273188281188291188299188303188311188317188323188333188351188359188369188389188401188407188417188431188437188443188459188473188483188491188519188527188533188563188579188603188609188621188633188653188677188681188687188693188701188707188711188719188729188753188767188779188791188801188827188831188833188843188857188861188863188869188891188911188927188933188939188941188953188957188983188999189011189017189019189041189043189061189067189127189139189149189151189169189187189199189223189229189239189251189253189257189271189307189311189337189347189349189353189361189377189389189391189401189407189421189433189437189439189463189467189473189479189491189493189509189517189523189529189547189559189583189593189599189613189617189619189643189653189661189671189691189697189701189713189733189743189757189767189797189799189817189823189851189853189859189877189881189887189901189913189929189947189949189961189967189977189983189989189997190027190031190051190063190093190097190121190129190147190159190181190207190243190249190261190271190283190297190301190313190321190331190339190357190367190369190387190391190403190409190471190507190523190529190537190543190573190577190579190583190591190607190613190633190639190649190657190667190669190699190709190711190717190753190759190763190769190783190787190793190807190811190823190829190837190843190871190889190891190901190909190913190921190979190997191021191027191033191039191047191057191071191089191099191119191123191137191141191143191161191173191189191227191231191237191249191251191281191297191299191339191341191353191413191441191447191449191453191459191461191467191473191491191497191507191509191519191531191533191537191551191561191563191579191599191621191627191657191669191671191677191689191693191699191707191717191747191749191773191783191791191801191803191827191831191833191837191861191899191903191911191929191953191969191977191999192007192013192029192037192043192047192053192091192097192103192113192121192133192149192161192173192187192191192193192229192233192239192251192259192263192271192307192317192319192323192341192343192347192373192377192383192391192407192431192461192463192497192499192529192539192547192553192557192571192581192583192587192601192611192613192617192629192631192637192667192677192697192737192743192749192757192767192781192791192799192811192817192833192847192853192859192877192883192887192889192917192923192931192949192961192971192977192979192991193003193009193013193031193043193051193057193073193093193133193139193147193153193163193181193183193189193201193243193247193261193283193301193327193337193357193367193373193379193381193387193393193423193433193441193447193451193463193469193493193507193513193541193549193559193573193577193597193601193603193607193619193649193663193679193703193723193727193741193751193757193763193771193789193793193799193811193813193841193847193859193861193871193873193877193883193891193937193939193943193951193957193979193993194003194017194027194057194069194071194083194087194093194101194113194119194141194149194167194179194197194203194239194263194267194269194309194323194353194371194377194413194431194443194471194479194483194507194521194527194543194569194581194591194609194647194653194659194671194681194683194687194707194713194717194723194729194749194767194771194809194813194819194827194839194861194863194867194869194891194899194911194917194933194963194977194981194989195023195029195043195047195049195053195071195077195089195103195121195127195131195137195157195161195163195193195197195203195229195241195253195259195271195277195281195311195319195329195341195343195353195359195389195401195407195413195427195443195457195469195479195493195497195511195527195539195541195581195593195599195659195677195691195697195709195731195733195737195739195743195751195761195781195787195791195809195817195863195869195883195887195893195907195913195919195929195931195967195971195973195977195991195997196003196033196039196043196051196073196081196087196111196117196139196159196169196171196177196181196187196193196201196247196271196277196279196291196303196307196331196337196379196387196429196439196453196459196477196499196501196519196523196541196543196549196561196579196583196597196613196643196657196661196663196681196687196699196709196717196727196739196751196769196771196799196817196831196837196853196871196873196879196901196907196919196927196961196991196993197003197009197023197033197059197063197077197083197089197101197117197123197137197147197159197161197203197207197221197233197243197257197261197269197273197279197293197297197299197311197339197341197347197359197369197371197381197383197389197419197423197441197453197479197507197521197539197551197567197569197573197597197599197609197621197641197647197651197677197683197689197699197711197713197741197753197759197767197773197779197803197807197831197837197887197891197893197909197921197927197933197947197957197959197963197969197971198013198017198031198043198047198073198083198091198097198109198127198139198173198179198193198197198221198223198241198251198257198259198277198281198301198313198323198337198347198349198377198391198397198409198413198427198437198439198461198463198469198479198491198503198529198533198553198571198589198593198599198613198623198637198641198647198659198673198689198701198719198733198761198769198811198817198823198827198829198833198839198841198851198859198899198901198929198937198941198943198953198959198967198971198977198997199021199033199037199039199049199081199103199109199151199153199181199193199207199211199247199261199267199289199313199321199337199343199357199373199379199399199403199411199417199429199447199453199457199483199487199489199499199501199523199559199567199583199601199603199621199637199657199669199673199679199687199697199721199729199739199741199751199753199777199783199799199807199811199813199819199831199853199873199877199889199909199921199931199933199961199967199999200003200009200017200023200029200033200041200063200087200117200131200153200159200171200177200183200191200201200227200231200237200257200273200293200297200323200329200341200351200357200363200371200381200383200401200407200437200443200461200467200483200513200569200573200579200587200591200597200609200639200657200671200689200699200713200723200731200771200779200789200797200807200843200861200867200869200881200891200899200903200909200927200929200971200983200987200989201007201011201031201037201049201073201101201107201119201121201139201151201163201167201193201203201209201211201233201247201251201281201287201307201329201337201359201389201401201403201413201437201449201451201473201491201493201497201499201511201517201547201557201577201581201589201599201611201623201629201653201661201667201673201683201701201709201731201743201757201767201769201781201787201791201797201809201821201823201827201829201833201847201881201889201893201907201911201919201923201937201947201953201961201973201979201997202001202021202031202049202061202063202067202087202099202109202121202127202129202183202187202201202219202231202243202277202289202291202309202327202339202343202357202361202381202387202393202403202409202441202471202481202493202519202529202549202567202577202591202613202621202627202637202639202661202667202679202693202717202729202733202747202751202753202757202777202799202817202823202841202859202877202879202889202907202921202931202933202949202967202973202981202987202999203011203017203023203039203051203057203117203141203173203183203207203209203213203221203227203233203249203279203293203309203311203317203321203323203339203341203351203353203363203381203383203387203393203417203419203429203431203449203459203461203531203549203563203569203579203591203617203627203641203653203657203659203663203669203713203761203767203771203773203789203807203809203821203843203857203869203873203897203909203911203921203947203953203969203971203977203989203999204007204013204019204023204047204059204067204101204107204133204137204143204151204161204163204173204233204251204299204301204311204319204329204331204353204359204361204367204371204377204397204427204431204437204439204443204461204481204487204509204511204517204521204557204563204583204587204599204601204613204623204641204667204679204707204719204733204749204751204781204791204793204797204803204821204857204859204871204887204913204917204923204931204947204973204979204983205019205031205033205043205063205069205081205097205103205111205129205133205141205151205157205171205187205201205211205213205223205237205253205267205297205307205319205327205339205357205391205397205399205417205421205423205427205433205441205453205463205477205483205487205493205507205519205529205537205549205553205559205589205603205607205619205627205633205651205657205661205663205703205721205759205763205783205817205823205837205847205879205883205913205937205949205951205957205963205967205981205991205993206009206021206027206033206039206047206051206069206077206081206083206123206153206177206179206183206191206197206203206209206221206233206237206249206251206263206273206279206281206291206299206303206341206347206351206369206383206399206407206411206413206419206447206461206467206477206483206489206501206519206527206543206551206593206597206603206623206627206639206641206651206699206749206779206783206803206807206813206819206821206827206879206887206897206909206911206917206923206933206939206951206953206993207013207017207029207037207041207061207073207079207113207121207127207139207169207187207191207197207199207227207239207241207257207269207287207293207301207307207329207331207341207343207367207371207377207401207409207433207443207457207463207469207479207481207491207497207509207511207517207521207523207541207547207551207563207569207589207593207619207629207643207653207661207671207673207679207709207719207721207743207763207769207797207799207811207821207833207847207869207877207923207931207941207947207953207967207971207973207997208001208003208009208037208049208057208067208073208099208111208121208129208139208141208147208189208207208213208217208223208231208253208261208277208279208283208291208309208319208333208337208367208379208387208391208393208409208433208441208457208459208463208469208489208493208499208501208511208513208519208529208553208577208589208591208609208627208631208657208667208673208687208697208699208721208729208739208759208787208799208807208837208843208877208889208891208907208927208931208933208961208963208991208993208997209021209029209039209063209071209089209123209147209159209173209179209189209201209203209213209221209227209233209249209257209263209267209269209299209311209317209327209333209347209353209357209359209371209381209393209401209431209441209449209459209471209477209497209519209533209543209549209563209567209569209579209581209597209621209623209639209647209659209669209687209701209707209717209719209743209767209771209789209801209809209813209819209821209837209851209857209861209887209917209927209929209939209953209959209971209977209983209987210011210019210031210037210053210071210097210101210109210113210127210131210139210143210157210169210173210187210191210193210209210229210233210241210247210257210263210277210283210299210317210319210323210347210359210361210391210401210403210407210421210437210461210467210481210487210491210499210523210527210533210557210599210601210619210631210643210659210671210709210713210719210731210739210761210773210803210809210811210823210827210839210853210857210869210901210907210911210913210923210929210943210961210967211007211039211049211051211061211063211067211073211093211097211129211151211153211177211187211193211199211213211217211219211229211231211241211247211271211283211291211297211313211319211333211339211349211369211373211403211427211433211441211457211469211493211499211501211507211543211559211571211573211583211597211619211639211643211657211661211663211681211691211693211711211723211727211741211747211777211781211789211801211811211817211859211867211873211877211879211889211891211927211931211933211943211949211969211979211997212029212039212057212081212099212117212123212131212141212161212167212183212203212207212209212227212239212243212281212293212297212353212369212383212411212419212423212437212447212453212461212467212479212501212507212557212561212573212579212587212593212627212633212651212669212671212677212683212701212777212791212801212827212837212843212851212867212869212873212881212897212903212909212917212923212969212981212987212999213019213023213029213043213067213079213091213097213119213131213133213139213149213173213181213193213203213209213217213223213229213247213253213263213281213287213289213307213319213329213337213349213359213361213383213391213397213407213449213461213467213481213491213523213533213539213553213557213589213599213611213613213623213637213641213649213659213713213721213727213737213751213791213799213821213827213833213847213859213881213887213901213919213929213943213947213949213953213973213977213989214003214007214009214021214031214033214043214051214063214069214087214091214129214133214141214147214163214177214189214211214213214219214237214243214259214283214297214309214351214363214373214381214391214399214433214439214451214457214463214469214481214483214499214507214517214519214531214541214559214561214589214603214607214631214639214651214657214663214667214673214691214723214729214733214741214759214763214771214783214787214789214807214811214817214831214849214853214867214883214891214913214939214943214967214987214993215051215063215077215087215123215141215143215153215161215179215183215191215197215239215249215261215273215279215297215309215317215329215351215353215359215381215389215393215399215417215443215447215459215461215471215483215497215503215507215521215531215563215573215587215617215653215659215681215687215689215693215723215737215753215767215771215797215801215827215833215843215851215857215863215893215899215909215921215927215939215953215959215981215983216023216037216061216071216091216103216107216113216119216127216133216149216157216173216179216211216217216233216259216263216289216317216319216329216347216371216373216379216397216401216421216431216451216481216493216509216523216551216553216569216571216577216607216617216641216647216649216653216661216679216703216719216731216743216751216757216761216779216781216787216791216803216829216841216851216859216877216899216901216911216917216919216947216967216973216991217001217003217027217033217057217069217081217111217117217121217157217163217169217199217201217207217219217223217229217241217253217271217307217309217313217319217333217337217339217351217361217363217367217369217387217397217409217411217421217429217439217457217463217489217499217517217519217559217561217573217577217579217619217643217661217667217681217687217691217697217717217727217733217739217747217771217781217793217823217829217849217859217901217907217909217933217937217969217979217981218003218021218047218069218077218081218083218087218107218111218117218131218137218143218149218171218191218213218227218233218249218279218287218357218363218371218381218389218401218417218419218423218437218447218453218459218461218479218509218513218521218527218531218549218551218579218591218599218611218623218627218629218641218651218657218677218681218711218717218719218723218737218749218761218783218797218809218819218833218839218843218849218857218873218887218923218941218947218963218969218971218987218989218993219001219017219019219031219041219053219059219071219083219091219097219103219119219133219143219169219187219217219223219251219277219281219293219301219311219313219353219361219371219377219389219407219409219433219437219451219463219467219491219503219517219523219529219533219547219577219587219599219607219613219619219629219647219649219677219679219683219689219707219721219727219731219749219757219761219763219767219787219797219799219809219823219829219839219847219851219871219881219889219911219917219931219937219941219943219953219959219971219977219979219983220009220013220019220021220057220063220123220141220147220151220163220169220177220189220217220243220279220291220301220307220327220333220351220357220361220369220373220391220399220403220411220421220447220469220471220511220513220529220537220543220553220559220573220579220589220613220663220667220673220681220687220699220709220721220747220757220771220783220789220793220807220811220841220859220861220873220877220879220889220897220901220903220907220919220931220933220939220973221021221047221059221069221071221077221083221087221093221101221159221171221173221197221201221203221209221219221227221233221239221251221261221281221303221311221317221327221393221399221401221411221413221447221453221461221471221477221489221497221509221537221539221549221567221581221587221603221621221623221653221657221659221671221677221707221713221717221719221723221729221737221747221773221797221807221813221827221831221849221873221891221909221941221951221953221957221987221989221999222007222011222023222029222041222043222059222067222073222107222109222113222127222137222149222151222161222163222193222197222199222247222269222289222293222311222317222323222329222337222347222349222361222367222379222389222403222419222437222461222493222499222511222527222533222553222557222587222601222613222619222643222647222659222679222707222713222731222773222779222787222791222793222799222823222839222841222857222863222877222883222913222919222931222941222947222953222967222977222979222991223007223009223019223037223049223051223061223063223087223099223103223129223133223151223207223211223217223219223229223241223243223247223253223259223273223277223283223291223303223313223319223331223337223339223361223367223381223403223423223429223439223441223463223469223481223493223507223529223543223547223549223577223589223621223633223637223667223679223681223697223711223747223753223757223759223781223823223829223831223837223841223843223849223903223919223921223939223963223969223999224011224027224033224041224047224057224069224071224101224113224129224131224149224153224171224177224197224201224209224221224233224239224251224261224267224291224299224303224309224317224327224351224359224363224401224423224429224443224449224461224467224473224491224501224513224527224563224569224579224591224603224611224617224629224633224669224677224683224699224711224717224729224737224743224759224771224797224813224831224863224869224881224891224897224909224911224921224929224947224951224969224977224993225023225037225061225067225077225079225089225109225119225133225143225149225157225161225163225167225217225221225223225227225241225257225263225287225289225299225307225341225343225347225349225353225371225373225383225427225431225457225461225479225493225499225503225509225523225527225529225569225581225583225601225611225613225619225629225637225671225683225689225697225721225733225749225751225767225769225779225781225809225821225829225839225859225871225889225919225931225941225943225949225961225977225983225989226001226007226013226027226063226087226099226103226123226129226133226141226169226183226189226199226201226217226231226241226267226283226307226313226337226357226367226379226381226397226409226427226433226451226453226463226483226487226511226531226547226549226553226571226601226609226621226631226637226643226649226657226663226669226691226697226741226753226769226777226783226789226799226813226817226819226823226843226871226901226903226907226913226937226943226991227011227027227053227081227089227093227111227113227131227147227153227159227167227177227189227191227207227219227231227233227251227257227267227281227299227303227363227371227377227387227393227399227407227419227431227453227459227467227471227473227489227497227501227519227531227533227537227561227567227569227581227593227597227603227609227611227627227629227651227653227663227671227693227699227707227719227729227743227789227797227827227849227869227873227893227947227951227977227989227993228013228023228049228061228077228097228103228113228127228131228139228181228197228199228203228211228223228233228251228257228281228299228301228307228311228331228337228341228353228359228383228409228419228421228427228443228451228457228461228469228479228509228511228517228521228523228539228559228577228581228587228593228601228611228617228619228637228647228677228707228713228731228733228737228751228757228773228793228797228799228829228841228847228853228859228869228881228883228887228901228911228913228923228929228953228959228961228983228989229003229027229037229081229093229123229127229133229139229153229157229171229181229189229199229213229217229223229237229247229249229253229261229267229283229309229321229343229351229373229393229399229403229409229423229433229459229469229487229499229507229519229529229547229549229553229561229583229589229591229601229613229627229631229637229639229681229693229699229703229711229717229727229739229751229753229759229763229769229771229777229781229799229813229819229837229841229847229849229897229903229937229939229949229961229963229979229981230003230017230047230059230063230077230081230089230101230107230117230123230137230143230149230189230203230213230221230227230233230239230257230273230281230291230303230309230311230327230339230341230353230357230369230383230387230389230393230431230449230453230467230471230479230501230507230539230551230561230563230567230597230611230647230653230663230683230693230719230729230743230761230767230771230773230779230807230819230827230833230849230861230863230873230891230929230933230939230941230959230969230977230999231001231017231019231031231041231053231067231079231107231109231131231169231197231223231241231269231271231277231289231293231299231317231323231331231347231349231359231367231379231409231419231431231433231443231461231463231479231481231493231503231529231533231547231551231559231563231571231589231599231607231611231613231631231643231661231677231701231709231719231779231799231809231821231823231827231839231841231859231871231877231893231901231919231923231943231947231961231967232003232007232013232049232051232073232079232081232091232103232109232117232129232153232171232187232189232207232217232259232303232307232333232357232363232367232381232391232409232411232417232433232439232451232457232459232487232499232513232523232549232567232571232591232597232607232621232633232643232663232669232681232699232709232711232741232751232753232777232801232811232819232823232847232853232861232871232877232891232901232907232919232937232961232963232987233021233069233071233083233113233117233141233143233159233161233173233183233201233221233231233239233251233267233279233293233297233323233327233329233341233347233353233357233371233407233417233419233423233437233477233489233509233549233551233557233591233599233609233617233621233641233663233669233683233687233689233693233713233743233747233759233777233837233851233861233879233881233911233917233921233923233939233941233969233983233993234007234029234043234067234083234089234103234121234131234139234149234161234167234181234187234191234193234197234203234211234217234239234259234271234281234287234293234317234319234323234331234341234343234361234383234431234457234461234463234467234473234499234511234527234529234539234541234547234571234587234589234599234613234629234653234659234673234683234713234721234727234733234743234749234769234781234791234799234803234809234811234833234847234851234863234869234893234907234917234931234947234959234961234967234977234979234989235003235007235009235013235043235051235057235069235091235099235111235117235159235171235177235181235199235211235231235241235243235273235289235307235309235337235349235369235397235439235441235447235483235489235493235513235519235523235537235541235553235559235577235591235601235607235621235661235663235673235679235699235723235747235751235783235787235789235793235811235813235849235871235877235889235891235901235919235927235951235967235979235997236017236021236053236063236069236077236087236107236111236129236143236153236167236207236209236219236231236261236287236293236297236323236329236333236339236377236381236387236399236407236429236449236461236471236477236479236503236507236519236527236549236563236573236609236627236641236653236659236681236699236701236707236713236723236729236737236749236771236773236779236783236807236813236867236869236879236881236891236893236897236909236917236947236981236983236993237011237019237043237053237067237071237073237089237091237137237143237151237157237161237163237173237179237203237217237233237257237271237277237283237287237301237313237319237331237343237361237373237379237401237409237467237487237509237547237563237571237581237607237619237631237673237683237689237691237701237707237733237737237749237763237767237781237791237821237851237857237859237877237883237901237911237929237959237967237971237973237977237997238001238009238019238031238037238039238079238081238093238099238103238109238141238151238157238159238163238171238181238201238207238213238223238229238237238247238261238267238291238307238313238321238331238339238361238363238369238373238397238417238423238439238451238463238471238477238481238499238519238529238531238547238573238591238627238639238649238657238673238681238691238703238709238723238727238729238747238759238781238789238801238829238837238841238853238859238877238879238883238897238919238921238939238943238949238967238991239017239023239027239053239069239081239087239119239137239147239167239171239179239201239231239233239237239243239251239263239273239287239297239329239333239347239357239383239387239389239417239423239429239431239441239461239489239509239521239527239531239539239543239557239567239579239587239597239611239623239633239641239671239689239699239711239713239731239737239753239779239783239803239807239831239843239849239851239857239873239879239893239929239933239947239957239963239977239999240007240011240017240041240043240047240049240059240073240089240101240109240113240131240139240151240169240173240197240203240209240257240259240263240271240283240287240319240341240347240349240353240371240379240421240433240437240473240479240491240503240509240517240551240571240587240589240599240607240623240631240641240659240677240701240707240719240727240733240739240743240763240769240797240811240829240841240853240859240869240881240883240893240899240913240943240953240959240967240997241013241027241037241049241051241061241067241069241079241093241117241127241141241169241177241183241207241229241249241253241259241261241271241291241303241313241321241327241333241337241343241361241363241391241393241421241429241441241453241463241469241489241511241513241517241537241543241559241561241567241589241597241601241603241639241643241651241663241667241679241687241691241711241727241739241771241781241783241793241807241811241817241823241847241861241867241873241877241883241903241907241919241921241931241939241951241963241973241979241981241993242009242057242059242069242083242093242101242119242129242147242161242171242173242197242201242227242243242257242261242273242279242309242329242357242371242377242393242399242413242419242441242447242449242453242467242479242483242491242509242519242521242533242551242591242603242617242621242629242633242639242647242659242677242681242689242713242729242731242747242773242779242789242797242807242813242819242863242867242873242887242911242923242927242971242989242999243011243031243073243077243091243101243109243119243121243137243149243157243161243167243197243203243209243227243233243239243259243263243301243311243343243367243391243401243403243421243431243433243437243461243469243473243479243487243517243521243527243533243539243553243577243583243587243589243613243623243631243643243647243671243673243701243703243707243709243769243781243787243799243809243829243839243851243857243863243871243889243911243917243931243953243973243989244003244009244021244033244043244087244091244109244121244129244141244147244157244159244177244199244217244219244243244247244253244261244291244297244301244303244313244333244339244351244357244367244379244381244393244399244403244411244423244429244451244457244463244471244481244493244507244529244547244553244561244567244583244589244597244603244619244633244637244639244667244669244687244691244703244711244721244733244747244753244759244781244787244813244837244841244843244859244861244873244877244889244897244901244939244943244957244997245023245029245033245039245071245083245087245107245129245131245149245171245173245177245183245209245251245257245261245269245279245291245299245317245321245339245383245389245407245411245417245419245437245471245473245477245501245513245519245521245527245533245561245563245587245591245593245621245627245629245639245653245671245681245683245711245719245723245741245747245753245759245771245783245789245821245849245851245863245881245897245899245909245911245941245963245977245981245983245989246011246017246049246073246097246119246121246131246133246151246167246173246187246193246203246209246217246223246241246247246251246271246277246289246317246319246329246343246349246361246371246391246403246439246469246473246497246509246511246523246527246539246557246569246577246599246607246611246613246637246641246643246661246683246689246707246709246713246731246739246769246773246781246787246793246803246809246811246817246833246839246889246899246907246913246919246923246929246931246937246941246947246971246979247001247007247031247067247069247073247087247099247141247183247193247201247223247229247241247249247259247279247301247309247337247339247343247363247369247381247391247393247409247421247433247439247451247463247501247519247529247531247547247553247579247591247601247603247607247609247613247633247649247651247691247693247697247711247717247729247739247759247769247771247781247799247811247813247829247847247853247873247879247889247901247913247939247943247957247991247993247997247999248021248033248041248051248057248063248071248077248089248099248117248119248137248141248161248167248177248179248189248201248203248231248243248257248267248291248293248299248309248317248323248351248357248371248389248401248407248431248441248447248461248473248477248483248509248533248537248543248569248579248587248593248597248609248621248627248639248641248657248683248701248707248719248723248737248749248753248779248783248789248797248813248821248827248839248851248861248867248869248879248887248891248893248903248909248971248981248987249017249037249059249079249089249097249103249107249127249131249133249143249181249187249199249211249217249229249233249253249257249287249311249317249329249341249367249377249383249397249419249421249427249433249437249439249449249463249497249499249503249517249521249533249539249541249563249583249589249593249607249647249659249671249677249703249721249727249737249749249763249779249797249811249827249833249853249857249859249863249871249881249911249923249943249947249967249971249973249989250007250013250027250031250037250043250049250051250057250073250091250109250123250147250153250169250199250253250259250267250279250301250307250343250361250403250409250423250433250441250451250489250499250501250543250583250619250643250673250681250687250693250703250709250721250727250739250741250751250753250777250787250793250799250807250813250829250837250841250853250867250871250889250919250949250951250963250967250969250979250993251003251033251051251057251059251063251071251081251087251099251117251143251149251159251171251177251179251191251197251201251203251219251221251231251233251257251261251263251287251291251297251323251347251353251359251387251393251417251429251431251437251443251467251473251477251483251491251501251513251519251527251533251539251543251561251567251609251611251621251623251639251653251663251677251701251707251737251761251789251791251809251831251833251843251857251861251879251887251893251897251903251917251939251941251947251969251971251983252001252013252017252029252037252079252101252139252143252151252157252163252169252173252181252193252209252223252233252253252277252283252289252293252313252319252323252341252359252383252391252401252409252419252431252443252449252457252463252481252509252533252541252559252583252589252607252611252617252641252667252691252709252713252727252731252737252761252767252779252817252823252827252829252869252877252881252887252893252899252911252913252919252937252949252971252979252983253003253013253049253063253081253103253109253133253153253157253159253229253243253247253273253307253321253343253349253361253367253369253381253387253417253423253427253433253439253447253469253481253493253501253507253531253537253543253553253567253573253601253607253609253613253633253637253639253651253661253679253681253703253717253733253741253751253763253769253777253787253789253801253811253819253823253853253867253871253879253901253907253909253919253937253949253951253969253987253993253999254003254021254027254039254041254047254053254071254083254119254141254147254161254179254197254207254209254213254249254257254279254281254291254299254329254369254377254383254389254407254413254437254447254461254489254491254519254537254557254593254623254627254647254659254663254699254713254729254731254741254747254753254773254777254783254791254803254827254831254833254857254869254873254879254887254899254911254927254929254941254959254963254971254977254987254993255007255019255023255043255049255053255071255077255083255097255107255121255127255133255137255149255173255179255181255191255193255197255209255217255239255247255251255253255259255313255329255349255361255371255383255413255419255443255457255467255469255473255487255499255503255511255517255523255551255571255587255589255613255617255637255641255649255653255659255667255679255709255713255733255743255757255763255767255803255839255841255847255851255859255869255877255887255907255917255919255923255947255961255971255973255977255989256019256021256031256033256049256057256079256093256117256121256129256133256147256163256169256181256187256189256199256211256219256279256301256307256313256337256349256363256369256391256393256423256441256469256471256483256489256493256499256517256541256561256567256577256579256589256603256609256639256643256651256661256687256699256721256723256757256771256799256801256813256831256873256877256889256901256903256931256939256957256967256981257003257017257053257069257077257093257099257107257123257141257161257171257177257189257219257221257239257249257263257273257281257287257293257297257311257321257339257351257353257371257381257399257401257407257437257443257447257459257473257489257497257501257503257519257539257561257591257611257627257639257657257671257687257689257707257711257713257717257731257783257791257797257837257857257861257863257867257869257879257893257903257921257947257953257981257987257989257993258019258023258031258061258067258101258107258109258113258119258127258131258143258157258161258173258197258211258233258241258253258277258283258299258317258319258329258331258337258353258373258389258403258407258413258421258437258443258449258469258487258491258499258521258527258539258551258563258569258581258607258611258613258617258623258631258637258659258673258677258691258697258703258707258721258733258737258743258763258779258787258803258809258827258847258871258887258917258919258949258959258967258971258977258983258991259001259009259019259033259099259121259123259151259157259159259163259169259177259183259201259211259213259219259229259271259277259309259321259339259379259381259387259397259411259421259429259451259453259459259499259507259517259531259537259547259577259583259603259619259621259627259631259639259643259657259667259681259691259697259717259723259733259751259771259781259783259801259813259823259829259837259841259867259907259933259937259943259949259967259991259993260003260009260011260017260023260047260081260089260111260137260171260179260189260191260201260207260209260213260231260263260269260317260329260339260363260387260399260411260413260417260419260441260453260461260467260483260489260527260539260543260549260551260569260573260581260587260609260629260647260651260671260677260713260717260723260747260753260761260773260791260807260809260849260857260861260863260873260879260893260921260941260951260959260969260983260987260999261011261013261017261031261043261059261061261071261077261089261101261127261167261169261223261229261241261251261271261281261301261323261329261337261347261353261379261389261407261427261431261433261439261451261463261467261509261523261529261557261563261577261581261587261593261601261619261631261637261641261643261673261697261707261713261721261739261757261761261773261787261791261799261823261847261881261887261917261959261971261973261977261983262007262027262049262051262069262079262103262109262111262121262127262133262139262147262151262153262187262193262217262231262237262253262261262271262303262313262321262331262337262349262351262369262387262391262399262411262433262459262469262489262501262511262513262519262541262543262553262567262583262597262621262627262643262649262651262657262681262693262697262709262723262733262739262741262747262781262783262807262819262853262877262883262897262901262909262937262949262957262981263009263023263047263063263071263077263083263089263101263111263119263129263167263171263183263191263201263209263213263227263239263257263267263269263273263287263293263303263323263369263383263387263399263401263411263423263429263437263443263489263491263503263513263519263521263533263537263561263567263573263591263597263609263611263621263647263651263657263677263723263729263737263759263761263803263819263821263827263843263849263863263867263869263881263899263909263911263927263933263941263951263953263957263983264007264013264029264031264053264059264071264083264091264101264113264127264133264137264139264167264169264179264211264221264263264269264283264289264301264323264331264343264349264353264359264371264391264403264437264443264463264487264527264529264553264559264577264581264599264601264619264631264637264643264659264697264731264739264743264749264757264763264769264779264787264791264793264811264827264829264839264871264881264889264893264899264919264931264949264959264961264977264991264997265003265007265021265037265079265091265093265117265123265129265141265151265157265163265169265193265207265231265241265247265249265261265271265273265277265313265333265337265339265381265399265403265417265423265427265451265459265471265483265493265511265513265541265543265547265561265567265571265579265607265613265619265621265703265709265711265717265729265739265747265757265781265787265807265813265819265831265841265847265861265871265873265883265891265921265957265961265987266003266009266023266027266029266047266051266053266059266081266083266089266093266099266111266117266129266137266153266159266177266183266221266239266261266269266281266291266293266297266333266351266353266359266369266381266401266411266417266447266449266477266479266489266491266521266549266587266599266603266633266641266647266663266671266677266681266683266687266689266701266711266719266759266767266797266801266821266837266839266863266867266891266897266899266909266921266927266933266947266953266957266971266977266983266993266999267017267037267049267097267131267133267139267143267167267187267193267199267203267217267227267229267233267259267271267277267299267301267307267317267341267353267373267389267391267401267403267413267419267431267433267439267451267469267479267481267493267497267511267517267521267523267541267551267557267569267581267587267593267601267611267613267629267637267643267647267649267661267667267671267677267679267713267719267721267727267737267739267749267763267781267791267797267803267811267829267833267857267863267877267887267893267899267901267907267913267929267941267959267961268003268013268043268049268063268069268091268123268133268153268171268189268199268207268211268237268253268267268271268283268291268297268343268403268439268459268487268493268501268507268517268519268529268531268537268547268573268607268613268637268643268661268693268721268729268733268747268757268759268771268777268781268783268789268811268813268817268819268823268841268843268861268883268897268909268913268921268927268937268969268973268979268993268997268999269023269029269039269041269057269063269069269089269117269131269141269167269177269179269183269189269201269209269219269221269231269237269251269257269281269317269327269333269341269351269377269383269387269389269393269413269419269429269431269441269461269473269513269519269527269539269543269561269573269579269597269617269623269641269651269663269683269701269713269719269723269741269749269761269779269783269791269851269879269887269891269897269923269939269947269953269981269987270001270029270031270037270059270071270073270097270121270131270133270143270157270163270167270191270209270217270223270229270239270241270269270271270287270299270307270311270323270329270337270343270371270379270407270421270437270443270451270461270463270493270509270527270539270547270551270553270563270577270583270587270593270601270619270631270653270659270667270679270689270701270709270719270737270749270761270763270791270797270799270821270833270841270859270899270913270923270931270937270953270961270967270973271003271013271021271027271043271057271067271079271097271109271127271129271163271169271177271181271211271217271231271241271253271261271273271277271279271289271333271351271357271363271367271393271409271429271451271463271471271483271489271499271501271517271549271553271571271573271597271603271619271637271639271651271657271693271703271723271729271753271769271771271787271807271811271829271841271849271853271861271867271879271897271903271919271927271939271967271969271981272003272009272011272029272039272053272059272093272131272141272171272179272183272189272191272201272203272227272231272249272257272263272267272269272287272299272317272329272333272341272347272351272353272359272369272381272383272399272407272411272417272423272449272453272477272507272533272537272539272549272563272567272581272603272621272651272659272683272693272717272719272737272759272761272771272777272807272809272813272863272879272887272903272911272917272927272933272959272971272981272983272989272999273001273029273043273047273059273061273067273073273083273107273113273127273131273149273157273181273187273193273233273253273269273271273281273283273289273311273313273323273349273359273367273433273457273473273503273517273521273527273551273569273601273613273617273629273641273643273653273697273709273719273727273739273773273787273797273803273821273827273857273881273899273901273913273919273929273941273943273967273971273979273997274007274019274033274061274069274081274093274103274117274121274123274139274147274163274171274177274187274199274201274213274223274237274243274259274271274277274283274301274333274349274357274361274403274423274441274451274453274457274471274489274517274529274579274583274591274609274627274661274667274679274693274697274709274711274723274739274751274777274783274787274811274817274829274831274837274843274847274853274861274867274871274889274909274931274943274951274957274961274973274993275003275027275039275047275053275059275083275087275129275131275147275153275159275161275167275183275201275207275227275251275263275269275299275309275321275323275339275357275371275389275393275399275419275423275447275449275453275459275461275489275491275503275521275531275543275549275573275579275581275591275593275599275623275641275651275657275669275677275699275711275719275729275741275767275773275783275813275827275837275881275897275911275917275921275923275929275939275941275963275969275981275987275999276007276011276019276037276041276043276047276049276079276083276091276113276137276151276173276181276187276191276209276229276239276247276251276257276277276293276319276323276337276343276347276359276371276373276389276401276439276443276449276461276467276487276499276503276517276527276553276557276581276587276589276593276599276623276629276637276671276673276707276721276739276763276767276779276781276817276821276823276827276833276839276847276869276883276901276907276917276919276929276949276953276961276977277003277007277021277051277063277073277087277097277099277157277163277169277177277183277213277217277223277231277247277259277261277273277279277297277301277309277331277363277373277411277421277427277429277483277493277499277513277531277547277549277567277577277579277597277601277603277637277639277643277657277663277687277691277703277741277747277751277757277787277789277793277813277829277847277859277883277889277891277897277903277919277961277993277999278017278029278041278051278063278071278087278111278119278123278143278147278149278177278191278207278209278219278227278233278237278261278269278279278321278329278347278353278363278387278393278413278437278459278479278489278491278497278501278503278543278549278557278561278563278581278591278609278611278617278623278627278639278651278671278687278689278701278717278741278743278753278767278801278807278809278813278819278827278843278849278867278879278881278891278903278909278911278917278947278981279001279007279023279029279047279073279109279119279121279127279131279137279143279173279179279187279203279211279221279269279311279317279329279337279353279397279407279413279421279431279443279451279479279481279511279523279541279551279553279557279571279577279583279593279607279613279619279637279641279649279659279679279689279707279709279731279751279761279767279779279817279823279847279857279863279883279913279919279941279949279967279977279991280001280009280013280031280037280061280069280097280099280103280121280129280139280183280187280199280207280219280223280229280243280249280253280277280297280303280321280327280337280339280351280373280409280411280451280463280487280499280507280513280537280541280547280549280561280583280589280591280597280603280607280613280627280639280673280681280697280699280703280711280717280729280751280759280769280771280811280817280837280843280859280871280879280883280897280909280913280921280927280933280939280949280957280963280967280979280997281023281033281053281063281069281081281117281131281153281159281167281189281191281207281227281233281243281249281251281273281279281291281297281317281321281327281339281353281357281363281381281419281423281429281431281509281527281531281539281549281551281557281563281579281581281609281621281623281627281641281647281651281653281663281669281683281717281719281737281747281761281767281777281783281791281797281803281807281833281837281839281849281857281867281887281893281921281923281927281933281947281959281971281989281993282001282011282019282053282059282071282089282091282097282101282103282127282143282157282167282221282229282239282241282253282281282287282299282307282311282313282349282377282383282389282391282407282409282413282427282439282461282481282487282493282559282563282571282577282589282599282617282661282671282677282679282683282691282697282703282707282713282767282769282773282797282809282827282833282847282851282869282881282889282907282911282913282917282959282973282977282991283001283007283009283027283051283079283093283097283099283111283117283121283133283139283159283163283181283183283193283207283211283267283277283289283303283369283397283403283411283447283463283487283489283501283511283519283541283553283571283573283579283583283601283607283609283631283637283639283669283687283697283721283741283763283769283771283793283799283807283813283817283831283837283859283861283873283909283937283949283957283961283979284003284023284041284051284057284059284083284093284111284117284129284131284149284153284159284161284173284191284201284227284231284233284237284243284261284267284269284293284311284341284357284369284377284387284407284413284423284429284447284467284477284483284489284507284509284521284527284539284551284561284573284587284591284593284623284633284651284657284659284681284689284701284707284723284729284731284737284741284743284747284749284759284777284783284803284807284813284819284831284833284839284857284881284897284899284917284927284957284969284989285007285023285031285049285071285079285091285101285113285119285121285139285151285161285179285191285199285221285227285251285281285283285287285289285301285317285343285377285421285433285451285457285463285469285473285497285517285521285533285539285553285557285559285569285599285611285613285629285631285641285643285661285667285673285697285707285709285721285731285749285757285763285767285773285781285823285827285839285841285871285937285949285953285977285979285983285997286001286009286019286043286049286061286063286073286103286129286163286171286199286243286249286289286301286333286367286369286381286393286397286411286421286427286453286457286459286469286477286483286487286493286499286513286519286541286543286547286553286589286591286609286613286619286633286651286673286687286697286703286711286721286733286751286753286763286771286777286789286801286813286831286859286873286927286973286981286987286999287003287047287057287059287087287093287099287107287117287137287141287149287159287167287173287179287191287219287233287237287239287251287257287269287279287281287291287297287321287327287333287341287347287383287387287393287437287449287491287501287503287537287549287557287579287597287611287629287669287671287681287689287701287731287747287783287789287801287813287821287849287851287857287863287867287873287887287921287933287939287977288007288023288049288053288061288077288089288109288137288179288181288191288199288203288209288227288241288247288257288283288293288307288313288317288349288359288361288383288389288403288413288427288433288461288467288481288493288499288527288529288539288551288559288571288577288583288647288649288653288661288679288683288689288697288731288733288751288767288773288803288817288823288833288839288851288853288877288907288913288929288931288947288973288979288989288991288997289001289019289021289031289033289039289049289063289067289099289103289109289111289127289129289139289141289151289169289171289181289189289193289213289241289243289249289253289273289283289291289297289309289319289343289349289361289369289381289397289417289423289439289453289463289469289477289489289511289543289559289573289577289589289603289607289637289643289657289669289717289721289727289733289741289759289763289771289789289837289841289843289847289853289859289871289889289897289937289951289957289967289973289987289999290011290021290023290027290033290039290041290047290057290083290107290113290119290137290141290161290183290189290201290209290219290233290243290249290317290327290347290351290359290369290383290393290399290419290429290441290443290447290471290473290489290497290509290527290531290533290539290557290593290597290611290617290621290623290627290657290659290663290669290671290677290701290707290711290737290761290767290791290803290821290827290837290839290861290869290879290897290923290959290963290971290987290993290999291007291013291037291041291043291077291089291101291103291107291113291143291167291169291173291191291199291209291217291253291257291271291287291293291299291331291337291349291359291367291371291373291377291419291437291439291443291457291481291491291503291509291521291539291547291559291563291569291619291647291649291661291677291689291691291701291721291727291743291751291779291791291817291829291833291853291857291869291877291887291899291901291923291971291979291983291997292021292027292037292057292069292079292081292091292093292133292141292147292157292181292183292223292231292241292249292267292283292301292309292319292343292351292363292367292381292393292427292441292459292469292471292477292483292489292493292517292531292541292549292561292573292577292601292627292631292661292667292673292679292693292703292709292711292717292727292753292759292777292793292801292807292819292837292841292849292867292879292909292921292933292969292973292979292993293021293071293081293087293093293099293107293123293129293147293149293173293177293179293201293207293213293221293257293261293263293269293311293329293339293351293357293399293413293431293441293453293459293467293473293483293507293543293599293603293617293621293633293639293651293659293677293681293701293717293723293729293749293767293773293791293803293827293831293861293863293893293899293941293957293983293989293999294001294013294023294029294043294053294059294067294103294127294131294149294157294167294169294179294181294199294211294223294227294241294247294251294269294277294289294293294311294313294317294319294337294341294347294353294383294391294397294403294431294439294461294467294479294499294509294523294529294551294563294629294641294647294649294659294673294703294731294751294757294761294773294781294787294793294799294803294809294821294829294859294869294887294893294911294919294923294947294949294953294979294989294991294997295007295033295037295039295049295073295079295081295111295123295129295153295187295199295201295219295237295247295259295271295277295283295291295313295319295333295357295363295387295411295417295429295433295439295441295459295513295517295541295553295567295571295591295601295663295693295699295703295727295751295759295769295777295787295819295831295837295843295847295853295861295871295873295877295879295901295903295909295937295943295949295951295961295973295993296011296017296027296041296047296071296083296099296117296129296137296159296183296201296213296221296237296243296249296251296269296273296279296287296299296347296353296363296369296377296437296441296473296477296479296489296503296507296509296519296551296557296561296563296579296581296587296591296627296651296663296669296683296687296693296713296719296729296731296741296749296753296767296771296773296797296801296819296827296831296833296843296909296911296921296929296941296969296971296981296983296987297019297023297049297061297067297079297083297097297113297133297151297161297169297191297233297247297251297257297263297289297317297359297371297377297391297397297403297421297439297457297467297469297481297487297503297509297523297533297581297589297601297607297613297617297623297629297641297659297683297691297707297719297727297757297779297793297797297809297811297833297841297853297881297889297893297907297911297931297953297967297971297989297991298013298021298031298043298049298063298087298093298099298153298157298159298169298171298187298201298211298213298223298237298247298261298283298303298307298327298339298343298349298369298373298399298409298411298427298451298477298483298513298559298579298583298589298601298607298621298631298651298667298679298681298687298691298693298709298723298733298757298759298777298799298801298817298819298841298847298853298861298897298937298943298993298999299011299017299027299029299053299059299063299087299099299107299113299137299147299171299179299191299197299213299239299261299281299287299311299317299329299333299357299359299363299371299389299393299401299417299419299447299471299473299477299479299501299513299521299527299539299567299569299603299617299623299653299671299681299683299699299701299711299723299731299743299749299771299777299807299843299857299861299881299891299903299909299933299941299951299969299977299983299993300007300017300023300043300073300089300109300119300137300149300151300163300187300191300193300221300229300233300239300247300277300299300301300317300319300323300331300343300347300367300397300413300427300431300439300463300481300491300493300497300499300511300557300569300581300583300589300593300623300631300647300649300661300667300673300683300691300719300721300733300739300743300749300757300761300779300787300799300809300821300823300851300857300869300877300889300893300929300931300953300961300967300973300977300997301013301027301039301051301057301073301079301123301127301141301153301159301177301181301183301211301219301237301241301243301247301267301303301319301331301333301349301361301363301381301403301409301423301429301447301459301463301471301487301489301493301501301531301577301579301583301591301601301619301627301643301649301657301669301673301681301703301711301747301751301753301759301789301793301813301831301841301843301867301877301897301901301907301913301927301933301943301949301979301991301993301997301999302009302053302111302123302143302167302171302173302189302191302213302221302227302261302273302279302287302297302299302317302329302399302411302417302429302443302459302483302507302513302551302563302567302573302579302581302587302593302597302609302629302647302663302681302711302723302747302759302767302779302791302801302831302833302837302843302851302857302873302891302903302909302921302927302941302959302969302971302977302983302989302999303007303011303013303019303029303049303053303073303089303091303097303119303139303143303151303157303187303217303257303271303283303287303293303299303307303313303323303337303341303361303367303371303377303379303389303409303421303431303463303469303473303491303493303497303529303539303547303551303553303571303581303587303593303613303617303619303643303647303649303679303683303689303691303703303713303727303731303749303767303781303803303817303827303839303859303871303889303907303917303931303937303959303983303997304009304013304021304033304039304049304063304067304069304081304091304099304127304151304153304163304169304193304211304217304223304253304259304279304301304303304331304349304357304363304373304391304393304411304417304429304433304439304457304459304477304481304489304501304511304517304523304537304541304553304559304561304597304609304631304643304651304663304687304709304723304729304739304751304757304763304771304781304789304807304813304831304847304849304867304879304883304897304901304903304907304933304937304943304949304961304979304981305017305021305023305029305033305047305069305093305101305111305113305119305131305143305147305209305219305231305237305243305267305281305297305329305339305351305353305363305369305377305401305407305411305413305419305423305441305449305471305477305479305483305489305497305521305533305551305563305581305593305597305603305611305621305633305639305663305717305719305741305743305749305759305761305771305783305803305821305839305849305857305861305867305873305917305927305933305947305971305999306011306023306029306041306049306083306091306121306133306139306149306157306167306169306191306193306209306239306247306253306259306263306301306329306331306347306349306359306367306377306389306407306419306421306431306437306457306463306473306479306491306503306511306517306529306533306541306563306577306587306589306643306653306661306689306701306703306707306727306739306749306763306781306809306821306827306829306847306853306857306871306877306883306893306899306913306919306941306947306949306953306991307009307019307031307033307067307079307091307093307103307121307129307147307163307169307171307187307189307201307243307253307259307261307267307273307277307283307289307301307337307339307361307367307381307397307399307409307423307451307471307481307511307523307529307537307543307577307583307589307609307627307631307633307639307651307669307687307691307693307711307733307759307817307823307831307843307859307871307873307891307903307919307939307969308003308017308027308041308051308081308093308101308107308117308129308137308141308149308153308213308219308249308263308291308293308303308309308311308317308323308327308333308359308383308411308423308437308447308467308489308491308501308507308509308519308521308527308537308551308569308573308587308597308621308639308641308663308681308701308713308723308761308773308801308809308813308827308849308851308857308887308899308923308927308929308933308939308951308989308999309007309011309013309019309031309037309059309079309083309091309107309109309121309131309137309157309167309173309193309223309241309251309259309269309271309277309289309293309311309313309317309359309367309371309391309403309433309437309457309461309469309479309481309493309503309521309523309539309541309559309571309577309583309599309623309629309637309667309671309677309707309713309731309737309769309779309781309797309811309823309851309853309857309877309899309929309931309937309977309989310019310021310027310043310049310081310087310091310111310117310127310129310169310181310187310223310229310231310237310243310273310283310291310313310333310357310361310363310379310397310423310433310439310447310459310463310481310489310501310507310511310547310553310559310567310571310577310591310627310643310663310693310697310711310721310727310729310733310741310747310771310781310789310801310819310823310829310831310861310867310883310889310901310927310931310949310969310987310997311009311021311027311033311041311099311111311123311137311153311173311177311183311189311197311203311237311279311291311293311299311303311323311329311341311347311359311371311393311407311419311447311453311473311533311537311539311551311557311561311567311569311603311609311653311659311677311681311683311687311711311713311737311743311747311749311791311803311807311821311827311867311869311881311897311951311957311963311981312007312023312029312031312043312047312071312073312083312089312101312107312121312161312197312199312203312209312211312217312229312233312241312251312253312269312281312283312289312311312313312331312343312349312353312371312383312397312401312407312413312427312451312469312509312517312527312551312553312563312581312583312589312601312617312619312623312643312673312677312679312701312703312709312727312737312743312757312773312779312799312839312841312857312863312887312899312929312931312937312941312943312967312971312979312989313003313009313031313037313081313087313109313127313129313133313147313151313153313163313207313211313219313241313249313267313273313289313297313301313307313321313331313333313343313351313373313381313387313399313409313471313477313507313517313543313549313553313561313567313571313583313589313597313603313613313619313637313639313661313669313679313699313711313717313721313727313739313741313763313777313783313829313849313853313879313883313889313897313909313921313931313933313949313961313969313979313981313987313991313993313997314003314021314059314063314077314107314113314117314129314137314159314161314173314189314213314219314227314233314239314243314257314261314263314267314299314329314339314351314357314359314399314401314407314423314441314453314467314491314497314513314527314543314549314569314581314591314597314599314603314623314627314641314651314693314707314711314719314723314747314761314771314777314779314807314813314827314851314879314903314917314927314933314953314957314983314989315011315013315037315047315059315067315083315097315103315109315127315179315181315193315199315223315247315251315257315269315281315313315349315361315373315377315389315407315409315421315437315449315451315461315467315481315493315517315521315527315529315547315551315559315569315589315593315599315613315617315631315643315671315677315691315697315701315703315739315743315751315779315803315811315829315851315857315881315883315893315899315907315937315949315961315967315977316003316031316033316037316051316067316073316087316097316109316133316139316153316177316189316193316201316213316219316223316241316243316259316271316291316297316301316321316339316343316363316373316391316403316423316429316439316453316469316471316493316499316501316507316531316567316571316577316583316621316633316637316649316661316663316681316691316697316699316703316717316753316759316769316777316783316793316801316817316819316847316853316859316861316879316891316903316907316919316937316951316957316961316991317003317011317021317029317047317063317071317077317087317089317123317159317171317179317189317197317209317227317257317263317267317269317279317321317323317327317333317351317353317363317371317399317411317419317431317437317453317459317483317489317491317503317539317557317563317587317591317593317599317609317617317621317651317663317671317693317701317711317717317729317731317741317743317771317773317777317783317789317797317827317831317839317857317887317903317921317923317957317959317963317969317971317983317987318001318007318023318077318103318107318127318137318161318173318179318181318191318203318209318211318229318233318247318259318271318281318287318289318299318301318313318319318323318337318347318349318377318403318407318419318431318443318457318467318473318503318523318557318559318569318581318589318601318629318641318653318671318677318679318683318691318701318713318737318743318749318751318781318793318809318811318817318823318833318841318863318881318883318889318907318911318917318919318949318979319001319027319031319037319049319057319061319069319093319097319117319127319129319133319147319159319169319183319201319211319223319237319259319279319289319313319321319327319339319343319351319357319387319391319399319411319427319433319439319441319453319469319477319483319489319499319511319519319541319547319567319577319589319591319601319607319639319673319679319681319687319691319699319727319729319733319747319757319763319811319817319819319829319831319849319883319897319901319919319927319931319937319967319973319981319993320009320011320027320039320041320053320057320063320081320083320101320107320113320119320141320143320149320153320179320209320213320219320237320239320267320269320273320291320293320303320317320329320339320377320387320389320401320417320431320449320471320477320483320513320521320533320539320561320563320591320609320611320627320647320657320659320669320687320693320699320713320741320759320767320791320821320833320839320843320851320861320867320899320911320923320927320939320941320953321007321017321031321037321047321053321073321077321091321109321143321163321169321187321193321199321203321221321227321239321247321289321301321311321313321319321323321329321331321341321359321367321371321383321397321403321413321427321443321449321467321469321509321547321553321569321571321577321593321611321617321619321631321647321661321679321707321709321721321733321743321751321757321779321799321817321821321823321829321833321847321851321889321901321911321947321949321961321983321991322001322009322013322037322039322051322057322067322073322079322093322097322109322111322139322169322171322193322213322229322237322243322247322249322261322271322319322327322339322349322351322397322403322409322417322429322433322459322463322501322513322519322523322537322549322559322571322573322583322589322591322607322613322627322631322633322649322669322709322727322747322757322769322771322781322783322807322849322859322871322877322891322901322919322921322939322951322963322969322997322999323003323009323027323053323077323083323087323093323101323123323131323137323149323201323207323233323243323249323251323273323333323339323341323359323369323371323377323381323383323413323419323441323443323467323471323473323507323509323537323549323567323579323581323591323597323599323623323641323647323651323699323707323711323717323759323767323789323797323801323803323819323837323879323899323903323923323927323933323951323957323987324011324031324053324067324073324089324097324101324113324119324131324143324151324161324179324199324209324211324217324223324239324251324293324299324301324319324329324341324361324391324397324403324419324427324431324437324439324449324451324469324473324491324497324503324517324523324529324557324587324589324593324617324619324637324641324647324661324673324689324697324707324733324743324757324763324773324781324791324799324809324811324839324847324869324871324889324893324901324931324941324949324953324977324979324983324991324997325001325009325019325021325027325043325051325063325079325081325093325133325153325163325181325187325189325201325217325219325229325231325249325271325301325307325309325319325333325343325349325379325411325421325439325447325453325459325463325477325487325513325517325537325541325543325571325597325607325627325631325643325667325673325681325691325693325697325709325723325729325747325751325753325769325777325781325783325807325813325849325861325877325883325889325891325901325921325939325943325951325957325987325993325999326023326057326063326083326087326099326101326113326119326141326143326147326149326153326159326171326189326203326219326251326257326309326323326351326353326369326437326441326449326467326479326497326503326537326539326549326561326563326567326581326593326597326609326611326617326633326657326659326663326681326687326693326701326707326737326741326773326779326831326863326867326869326873326881326903326923326939326941326947326951326983326993326999327001327007327011327017327023327059327071327079327127327133327163327179327193327203327209327211327247327251327263327277327289327307327311327317327319327331327337327343327347327401327407327409327419327421327433327443327463327469327473327479327491327493327499327511327517327529327553327557327559327571327581327583327599327619327629327647327661327667327673327689327707327721327737327739327757327779327797327799327809327823327827327829327839327851327853327869327871327881327889327917327923327941327953327967327979327983328007328037328043328051328061328063328067328093328103328109328121328127328129328171328177328213328243328249328271328277328283328291328303328327328331328333328343328357328373328379328381328397328411328421328429328439328481328511328513328519328543328579328589328591328619328621328633328637328639328651328667328687328709328721328753328777328781328787328789328813328829328837328847328849328883328891328897328901328919328921328931328961328981329009329027329053329059329081329083329089329101329111329123329143329167329177329191329201329207329209329233329243329257329267329269329281329293329297329299329309329317329321329333329347329387329393329401329419329431329471329473329489329503329519329533329551329557329587329591329597329603329617329627329629329639329657329663329671329677329683329687329711329717329723329729329761329773329779329789329801329803329863329867329873329891329899329941329947329951329957329969329977329993329999330017330019330037330041330047330053330061330067330097330103330131330133330139330149330167330199330203330217330227330229330233330241330247330271330287330289330311330313330329330331330347330359330383330389330409330413330427330431330433330439330469330509330557330563330569330587330607330611330623330641330643330653330661330679330683330689330697330703330719330721330731330749330767330787330791330793330821330823330839330853330857330859330877330887330899330907330917330943330983330997331013331027331031331043331063331081331099331127331141331147331153331159331171331183331207331213331217331231331241331249331259331277331283331301331307331319331333331337331339331349331367331369331391331399331423331447331451331489331501331511331519331523331537331543331547331549331553331577331579331589331603331609331613331651331663331691331693331697331711331739331753331769331777331781331801331819331841331843331871331883331889331897331907331909331921331937331943331957331967331973331997331999332009332011332039332053332069332081332099332113332117332147332159332161332179332183332191332201332203332207332219332221332251332263332273332287332303332309332317332393332399332411332417332441332447332461332467332471332473332477332489332509332513332561332567332569332573332611332617332623332641332687332699332711332729332743332749332767332779332791332803332837332851332873332881332887332903332921332933332947332951332987332989332993333019333023333029333031333041333049333071333097333101333103333107333131333139333161333187333197333209333227333233333253333269333271333283333287333299333323333331333337333341333349333367333383333397333419333427333433333439333449333451333457333479333491333493333497333503333517333533333539333563333581333589333623333631333647333667333673333679333691333701333713333719333721333737333757333769333779333787333791333793333803333821333857333871333911333923333929333941333959333973333989333997334021334031334043334049334057334069334093334099334127334133334157334171334177334183334189334199334231334247334261334289334297334319334331334333334349334363334379334387334393334403334421334423334427334429334447334487334493334507334511334513334541334547334549334561334603334619334637334643334651334661334667334681334693334699334717334721334727334751334753334759334771334777334783334787334793334843334861334877334889334891334897334931334963334973334987334991334993335009335021335029335033335047335051335057335077335081335089335107335113335117335123335131335149335161335171335173335207335213335221335249335261335273335281335299335323335341335347335381335383335411335417335429335449335453335459335473335477335507335519335527335539335557335567335579335591335609335633335641335653335663335669335681335689335693335719335729335743335747335771335807335809335813335821335833335843335857335879335893335897335917335941335953335957335999336029336031336041336059336079336101336103336109336113336121336143336151336157336163336181336199336211336221336223336227336239336247336251336253336263336307336317336353336361336373336397336403336419336437336463336491336499336503336521336527336529336533336551336563336571336577336587336593336599336613336631336643336649336653336667336671336683336689336703336727336757336761336767336769336773336793336799336803336823336827336829336857336863336871336887336899336901336911336929336961336977336983336989336997337013337021337031337039337049337069337081337091337097337121337153337189337201337213337217337219337223337261337277337279337283337291337301337313337327337339337343337349337361337367337369337397337411337427337453337457337487337489337511337517337529337537337541337543337583337607337609337627337633337639337651337661337669337681337691337697337721337741337751337759337781337793337817337837337853337859337861337867337871337873337891337901337903337907337919337949337957337969337973337999338017338027338033338119338137338141338153338159338161338167338171338183338197338203338207338213338231338237338251338263338267338269338279338287338293338297338309338321338323338339338341338347338369338383338389338407338411338413338423338431338449338461338473338477338497338531338543338563338567338573338579338581338609338659338669338683338687338707338717338731338747338753338761338773338777338791338803338839338851338857338867338893338909338927338959338993338999339023339049339067339071339091339103339107339121339127339137339139339151339161339173339187339211339223339239339247339257339263339289339307339323339331339341339373339389339413339433339467339491339517339527339539339557339583339589339601339613339617339631339637339649339653339659339671339673339679339707339727339749339751339761339769339799339811339817339821339827339839339841339863339887339907339943339959339991340007340027340031340037340049340057340061340063340073340079340103340111340117340121340127340129340169340183340201340211340237340261340267340283340297340321340337340339340369340381340387340393340397340409340429340447340451340453340477340481340519340541340559340573340577340579340583340591340601340619340633340643340649340657340661340687340693340709340723340757340777340787340789340793340801340811340819340849340859340877340889340897340903340909340913340919340927340931340933340937340939340957340979340999341017341027341041341057341059341063341083341087341123341141341171341179341191341203341219341227341233341269341273341281341287341293341303341311341321341323341333341339341347341357341423341443341447341459341461341477341491341501341507341521341543341557341569341587341597341603341617341623341629341641341647341659341681341687341701341729341743341749341771341773341777341813341821341827341839341851341863341879341911341927341947341951341953341959341963341983341993342037342047342049342059342061342071342073342077342101342107342131342143342179342187342191342197342203342211342233342239342241342257342281342283342299342319342337342341342343342347342359342371342373342379342389342413342421342449342451342467342469342481342497342521342527342547342553342569342593342599342607342647342653342659342673342679342691342697342733342757342761342791342799342803342821342833342841342847342863342869342871342889342899342929342949342971342989343019343037343051343061343073343081343087343127343141343153343163343169343177343193343199343219343237343243343253343261343267343289343303343307343309343313343327343333343337343373343379343381343391343393343411343423343433343481343489343517343529343531343543343547343559343561343579343583343589343591343601343627343631343639343649343661343667343687343709343727343769343771343787343799343801343813343817343823343829343831343891343897343901343913343933343939343943343951343963343997344017344021344039344053344083344111344117344153344161344167344171344173344177344189344207344209344213344221344231344237344243344249344251344257344263344269344273344291344293344321344327344347344353344363344371344417344423344429344453344479344483344497344543344567344587344599344611344621344629344639344653344671344681344683344693344719344749344753344759344791344797344801344807344819344821344843344857344863344873344887344893344909344917344921344941344957344959344963344969344987345001345011345017345019345041345047345067345089345109345133345139345143345181345193345221345227345229345259345263345271345307345311345329345379345413345431345451345461345463345473345479345487345511345517345533345547345551345571345577345581345599345601345607345637345643345647345659345673345679345689345701345707345727345731345733345739345749345757345769345773345791345803345811345817345823345853345869345881345887345889345907345923345937345953345979345997346013346039346043346051346079346091346097346111346117346133346139346141346147346169346187346201346207346217346223346259346261346277346303346309346321346331346337346349346361346369346373346391346393346397346399346417346421346429346433346439346441346447346453346469346501346529346543346547346553346559346561346589346601346607346627346639346649346651346657346667346669346699346711346721346739346751346763346793346831346849346867346873346877346891346903346933346939346943346961346963347003347033347041347051347057347059347063347069347071347099347129347131347141347143347161347167347173347177347183347197347201347209347227347233347239347251347257347287347297347299347317347329347341347359347401347411347437347443347489347509347513347519347533347539347561347563347579347587347591347609347621347629347651347671347707347717347729347731347747347759347771347773347779347801347813347821347849347873347887347891347899347929347933347951347957347959347969347981347983347987347989347993348001348011348017348031348043348053348077348083348097348149348163348181348191348209348217348221348239348241348247348253348259348269348287348307348323348353348367348389348401348407348419348421348431348433348437348443348451348457348461348463348487348527348547348553348559348563348571348583348587348617348629348637348643348661348671348709348731348739348757348763348769348779348811348827348833348839348851348883348889348911348917348919348923348937348949348989348991349007349039349043349051349079349081349093349099349109349121349133349171349177349183349187349199349207349211349241349291349303349313349331349337349343349357349369349373349379349381349387349397349399349403349409349411349423349471349477349483349493349499349507349519349529349553349567349579349589349603349637349663349667349697349709349717349729349753349759349787349793349801349813349819349829349831349837349841349849349871349903349907349913349919349927349931349933349939349949349963349967349981350003350029350033350039350087350089350093350107350111350137350159350179350191350213350219350237350249350257350281350293350347350351350377350381350411350423350429350431350437350443350447350453350459350503350521350549350561350563350587350593350617350621350629350657350663350677350699350711350719350729350731350737350741350747350767350771350783350789350803350809350843350851350869350881350887350891350899350941350947350963350971350981350983350989351011351023351031351037351041351047351053351059351061351077351079351097351121351133351151351157351179351217351223351229351257351259351269351287351289351293351301351311351341351343351347351359351361351383351391351397351401351413351427351437351457351469351479351497351503351517351529351551351563351587351599351643351653351661351667351691351707351727351731351733351749351751351763351773351779351797351803351811351829351847351851351859351863351887351913351919351929351931351959351971351991352007352021352043352049352057352069352073352081352097352109352111352123352133352181352193352201352217352229352237352249352267352271352273352301352309352327352333352349352357352361352367352369352381352399352403352409352411352421352423352441352459352463352481352483352489352493352511352523352543352549352579352589352601352607352619352633352637352661352691352711352739352741352753352757352771352813352817352819352831352837352841352853352867352883352907352909352931352939352949352951352973352991353011353021353047353053353057353069353081353099353117353123353137353147353149353161353173353179353201353203353237353263353293353317353321353329353333353341353359353389353401353411353429353443353453353459353471353473353489353501353527353531353557353567353603353611353621353627353629353641353653353657353677353681353687353699353711353737353747353767353777353783353797353807353813353819353833353867353869353879353891353897353911353917353921353929353939353963354001354007354017354023354031354037354041354043354047354073354091354097354121354139354143354149354163354169354181354209354247354251354253354257354259354271354301354307354313354317354323354329354337354353354371354373354377354383354391354401354421354439354443354451354461354463354469354479354533354539354551354553354581354587354619354643354647354661354667354677354689354701354703354727354737354743354751354763354779354791354799354829354833354839354847354869354877354881354883354911354953354961354971354973354979354983354997355007355009355027355031355037355039355049355057355063355073355087355093355099355109355111355127355139355171355193355211355261355297355307355321355331355339355343355361355363355379355417355427355441355457355463355483355499355501355507355513355517355519355529355541355549355559355571355573355591355609355633355643355651355669355679355697355717355721355723355753355763355777355783355799355811355819355841355847355853355867355891355909355913355933355937355939355951355967355969356023356039356077356093356101356113356123356129356137356141356143356171356173356197356219356243356261356263356287356299356311356327356333356351356387356399356441356443356449356453356467356479356501356509356533356549356561356563356567356579356591356621356647356663356693356701356731356737356749356761356803356819356821356831356869356887356893356927356929356933356947356959356969356977356981356989356999357031357047357073357079357083357103357107357109357131357139357169357179357197357199357211357229357239357241357263357271357281357283357293357319357347357349357353357359357377357389357421357431357437357473357503357509357517357551357559357563357569357571357583357587357593357611357613357619357649357653357659357661357667357671357677357683357689357703357727357733357737357739357767357779357781357787357793357809357817357823357829357839357859357883357913357967357977357983357989357997358031358051358069358073358079358103358109358153358157358159358181358201358213358219358223358229358243358273358277358279358289358291358297358301358313358327358331358349358373358417358427358429358441358447358459358471358483358487358499358531358541358571358573358591358597358601358607358613358637358667358669358681358691358697358703358711358723358727358733358747358753358769358783358793358811358829358847358859358861358867358877358879358901358903358907358909358931358951358973358979358987358993358999359003359017359027359041359063359069359101359111359129359137359143359147359153359167359171359207359209359231359243359263359267359279359291359297359299359311359323359327359353359357359377359389359407359417359419359441359449359477359479359483359501359509359539359549359561359563359581359587359599359621359633359641359657359663359701359713359719359731359747359753359761359767359783359837359851359869359897359911359929359981359987360007360023360037360049360053360071360089360091360163360167360169360181360187360193360197360223360229360233360257360271360277360287360289360293360307360317360323360337360391360407360421360439360457360461360497360509360511360541360551360589360593360611360637360649360653360749360769360779360781360803360817360821360823360827360851360853360863360869360901360907360947360949360953360959360973360977360979360989361001361003361013361033361069361091361093361111361159361183361211361213361217361219361223361237361241361271361279361313361321361327361337361349361351361357361363361373361409361411361421361433361441361447361451361463361469361481361499361507361511361523361531361541361549361561361577361637361643361649361651361663361679361687361723361727361747361763361769361787361789361793361799361807361843361871361873361877361901361903361909361919361927361943361961361967361973361979361993362003362027362051362053362059362069362081362093362099362107362137362143362147362161362177362191362203362213362221362233362237362281362291362293362303362309362333362339362347362353362357362363362371362377362381362393362407362419362429362431362443362449362459362473362521362561362569362581362599362629362633362657362693362707362717362723362741362743362749362753362759362801362851362863362867362897362903362911362927362941362951362953362969362977362983362987363017363019363037363043363047363059363061363067363119363149363151363157363161363173363179363199363211363217363257363269363271363277363313363317363329363343363359363361363367363371363373363379363397363401363403363431363437363439363463363481363491363497363523363529363533363541363551363557363563363569363577363581363589363611363619363659363677363683363691363719363731363751363757363761363767363773363799363809363829363833363841363871363887363889363901363911363917363941363947363949363959363967363977363989364027364031364069364073364079364103364127364129364141364171364183364187364193364213364223364241364267364271364289364291364303364313364321364333364337364349364373364379364393364411364417364423364433364447364451364459364471364499364513364523364537364541364543364571364583364601364607364621364627364643364657364669364687364691364699364717364739364747364751364753364759364801364829364853364873364879364883364891364909364919364921364937364943364961364979364993364997365003365017365021365039365063365069365089365107365119365129365137365147365159365173365179365201365213365231365249365251365257365291365293365297365303365327365333365357365369365377365411365413365419365423365441365461365467365471365473365479365489365507365509365513365527365531365537365557365567365569365587365591365611365627365639365641365669365683365689365699365747365749365759365773365779365791365797365809365837365839365851365903365929365933365941365969365983366001366013366019366029366031366053366077366097366103366127366133366139366161366167366169366173366181366193366199366211366217366221366227366239366259366269366277366287366293366307366313366329366341366343366347366383366397366409366419366433366437366439366461366463366467366479366497366511366517366521366547366593366599366607366631366677366683366697366701366703366713366721366727366733366787366791366811366829366841366851366853366859366869366881366889366901366907366917366923366941366953366967366973366983366997367001367007367019367021367027367033367049367069367097367121367123367127367139367163367181367189367201367207367219367229367231367243367259367261367273367277367307367309367313367321367357367369367391367397367427367453367457367469367501367519367531367541367547367559367561367573367597367603367613367621367637367649367651367663367673367687367699367711367721367733367739367751367771367777367781367789367819367823367831367841367849367853367867367879367883367889367909367949367957368021368029368047368059368077368083368089368099368107368111368117368129368141368149368153368171368189368197368227368231368233368243368273368279368287368293368323368327368359368363368369368399368411368443368447368453368471368491368507368513368521368531368539368551368579368593368597368609368633368647368651368653368689368717368729368737368743368773368783368789368791368801368803368833368857368873368881368899368911368939368947368957369007369013369023369029369067369071369077369079369097369119369133369137369143369169369181369191369197369211369247369253369263369269369283369293369301369319369331369353369361369407369409369419369469369487369491369539369553369557369581369637369647369659369661369673369703369709369731369739369751369791369793369821369827369829369833369841369851369877369893369913369917369947369959369961369979369983369991369997370003370009370021370033370057370061370067370081370091370103370121370133370147370159370169370193370199370207370213370217370241370247370261370373370387370399370411370421370423370427370439370441370451370463370471370477370483370493370511370529370537370547370561370571370597370603370609370613370619370631370661370663370673370679370687370693370723370759370793370801370813370837370871370873370879370883370891370897370919370949371027371029371057371069371071371083371087371099371131371141371143371153371177371179371191371213371227371233371237371249371251371257371281371291371299371303371311371321371333371339371341371353371359371383371387371389371417371447371453371471371479371491371509371513371549371561371573371587371617371627371633371639371663371669371699371719371737371779371797371831371837371843371851371857371869371873371897371927371929371939371941371951371957371971371981371999372013372023372037372049372059372061372067372107372121372131372137372149372167372173372179372223372241372263372269372271372277372289372293372299372311372313372353372367372371372377372397372401372409372413372443372451372461372473372481372497372511372523372539372607372611372613372629372637372653372661372667372677372689372707372709372719372733372739372751372763372769372773372797372803372809372817372829372833372839372847372859372871372877372881372901372917372941372943372971372973372979373003373007373019373049373063373073373091373127373151373157373171373181373183373187373193373199373207373211373213373229373231373273373291373297373301373327373339373343373349373357373361373363373379373393373447373453373459373463373487373489373501373517373553373561373567373613373621373631373649373657373661373669373693373717373721373753373757373777373783373823373837373859373861373903373909373937373943373951373963373969373981373987373999374009374029374039374041374047374063374069374083374089374093374111374117374123374137374149374159374173374177374189374203374219374239374287374291374293374299374317374321374333374347374351374359374389374399374441374443374447374461374483374501374531374537374557374587374603374639374641374653374669374677374681374683374687374701374713374719374729374741374753374761374771374783374789374797374807374819374837374839374849374879374887374893374903374909374929374939374953374977374981374987374989374993375017375019375029375043375049375059375083375091375097375101375103375113375119375121375127375149375157375163375169375203375209375223375227375233375247375251375253375257375259375281375283375311375341375359375367375371375373375391375407375413375443375449375451375457375467375481375509375511375523375527375533375553375559375563375569375593375607375623375631375643375647375667375673375703375707375709375743375757375761375773375779375787375799375833375841375857375899375901375923375931375967375971375979375983375997376001376003376009376021376039376049376063376081376097376099376127376133376147376153376171376183376199376231376237376241376283376291376297376307376351376373376393376399376417376463376469376471376477376483376501376511376529376531376547376573376577376583376589376603376609376627376631376633376639376657376679376687376699376709376721376729376757376759376769376787376793376801376807376811376819376823376837376841376847376853376889376891376897376921376927376931376933376949376963376969377011377021377051377059377071377099377123377129377137377147377171377173377183377197377219377231377257377263377287377291377297377327377329377339377347377353377369377371377387377393377459377471377477377491377513377521377527377537377543377557377561377563377581377593377599377617377623377633377653377681377687377711377717377737377749377761377771377779377789377801377809377827377831377843377851377873377887377911377963377981377999378011378019378023378041378071378083378089378101378127378137378149378151378163378167378179378193378223378229378239378241378253378269378277378283378289378317378353378361378379378401378407378439378449378463378467378493378503378509378523378533378551378559378569378571378583378593378601378619378629378661378667378671378683378691378713378733378739378757378761378779378793378809378817378821378823378869378883378893378901378919378929378941378949378953378967378977378997379007379009379013379033379039379073379081379087379097379103379123379133379147379157379163379177379187379189379199379207379273379277379283379289379307379319379333379343379369379387379391379397379399379417379433379439379441379451379459379499379501379513379531379541379549379571379573379579379597379607379633379649379663379667379679379681379693379699379703379721379723379727379751379777379787379811379817379837379849379853379859379877379889379903379909379913379927379931379963379979379993379997379999380041380047380059380071380117380129380131380141380147380179380189380197380201380203380207380231380251380267380269380287380291380299380309380311380327380329380333380363380377380383380417380423380441380447380453380459380461380483380503380533380557380563380591380621380623380629380641380651380657380707380713380729380753380777380797380803380819380837380839380843380867380869380879380881380909380917380929380951380957380971380977380983381001381011381019381037381047381061381071381077381097381103381167381169381181381209381221381223381233381239381253381287381289381301381319381323381343381347381371381373381377381383381389381401381413381419381439381443381461381467381481381487381509381523381527381529381533381541381559381569381607381629381631381637381659381673381697381707381713381737381739381749381757381761381791381793381817381841381853381859381911381917381937381943381949381977381989381991382001382003382021382037382061382069382073382087382103382117382163382171382189382229382231382241382253382267382271382303382331382351382357382363382373382391382427382429382457382463382493382507382511382519382541382549382553382567382579382583382589382601382621382631382643382649382661382663382693382703382709382727382729382747382751382763382769382777382801382807382813382843382847382861382867382871382873382883382919382933382939382961382979382999383011383023383029383041383051383069383077383081383083383099383101383107383113383143383147383153383171383179383219383221383261383267383281383291383297383303383321383347383371383393383399383417383419383429383459383483383489383519383521383527383533383549383557383573383587383609383611383623383627383633383651383657383659383681383683383693383723383729383753383759383767383777383791383797383807383813383821383833383837383839383869383891383909383917383923383941383951383963383969383983383987384001384017384029384049384061384067384079384089384107384113384133384143384151384157384173384187384193384203384227384247384253384257384259384277384287384289384299384301384317384331384343384359384367384383384403384407384437384469384473384479384481384487384497384509384533384547384577384581384589384599384611384619384623384641384673384691384697384701384719384733384737384751384757384773384779384817384821384827384841384847384851384889384907384913384919384941384961384973385001385013385027385039385057385069385079385081385087385109385127385129385139385141385153385159385171385193385199385223385249385261385267385279385289385291385321385327385331385351385379385391385393385397385403385417385433385471385481385493385501385519385531385537385559385571385573385579385589385591385597385607385621385631385639385657385661385663385709385739385741385771385783385793385811385817385831385837385843385859385877385897385901385907385927385939385943385967385991385997386017386039386041386047386051386083386093386117386119386129386131386143386149386153386159386161386173386219386227386233386237386249386263386279386297386299386303386329386333386339386363386369386371386381386383386401386411386413386429386431386437386471386489386501386521386537386543386549386569386587386609386611386621386629386641386647386651386677386689386693386713386719386723386731386747386777386809386839386851386887386891386921386927386963386977386987386989386993387007387017387031387047387071387077387083387089387109387137387151387161387169387173387187387197387199387203387227387253387263387269387281387307387313387329387341387371387397387403387433387437387449387463387493387503387509387529387551387577387587387613387623387631387641387659387677387679387683387707387721387727387743387749387763387781387791387799387839387853387857387911387913387917387953387967387971387973387977388009388051388057388067388081388099388109388111388117388133388159388163388169388177388181388183388187388211388231388237388253388259388273388277388301388313388319388351388363388369388373388391388403388459388471388477388481388483388489388499388519388529388541388567388573388621388651388657388673388691388693388697388699388711388727388757388777388781388789388793388813388823388837388859388879388891388897388901388903388931388933388937388961388963388991389003389023389027389029389041389047389057389083389089389099389111389117389141389149389161389167389171389173389189389219389227389231389269389273389287389297389299389303389357389369389381389399389401389437389447389461389479389483389507389513389527389531389533389539389561389563389567389569389579389591389621389629389651389659389663389687389699389713389723389743389749389761389773389783389791389797389819389839389849389867389891389897389903389911389923389927389941389947389953389957389971389981389989389999390001390043390067390077390083390097390101390107390109390113390119390151390157390161390191390193390199390209390211390223390263390281390289390307390323390343390347390353390359390367390373390389390391390407390413390419390421390433390437390449390463390479390487390491390493390499390503390527390539390553390581390647390653390671390673390703390707390721390727390737390739390743390751390763390781390791390809390821390829390851390869390877390883390889390893390953390959390961390967390989390991391009391019391021391031391049391057391063391067391073391103391117391133391151391159391163391177391199391217391219391231391247391249391273391283391291391301391331391337391351391367391373391379391387391393391397391399391403391441391451391453391487391519391537391553391579391613391619391627391631391639391661391679391691391693391711391717391733391739391751391753391757391789391801391817391823391847391861391873391879391889391891391903391907391921391939391961391967391987391999392011392033392053392059392069392087392099392101392111392113392131392143392149392153392159392177392201392209392213392221392233392239392251392261392263392267392269392279392281392297392299392321392333392339392347392351392363392383392389392423392437392443392467392473392477392489392503392519392531392543392549392569392593392599392611392629392647392663392669392699392723392737392741392759392761392767392803392807392809392827392831392837392849392851392857392879392893392911392923392927392929392957392963392969392981392983393007393013393017393031393059393073393077393079393083393097393103393109393121393137393143393157393161393181393187393191393203393209393241393247393257393271393287393299393301393311393331393361393373393377393383393401393403393413393451393473393479393487393517393521393539393541393551393557393571393577393581393583393587393593393611393629393637393649393667393671393677393683393697393709393713393721393727393739393749393761393779393797393847393853393857393859393863393871393901393919393929393931393947393961393977393989393997394007394019394039394049394063394073394099394123394129394153394157394169394187394201394211394223394241394249394259394271394291394319394327394357394363394367394369394393394409394411394453394481394489394501394507394523394529394549394571394577394579394601394619394631394633394637394643394673394699394717394721394727394729394733394739394747394759394787394811394813394817394819394829394837394861394879394897394931394943394963394967394969394981394987394993395023395027395039395047395069395089395093395107395111395113395119395137395141395147395159395173395189395191395201395231395243395251395261395273395287395293395303395309395321395323395377395383395407395429395431395443395449395453395459395491395509395513395533395537395543395581395597395611395621395627395657395671395677395687395701395719395737395741395749395767395803395849395851395873395887395891395897395909395921395953395959395971396001396029396031396041396043396061396079396091396103396107396119396157396173396181396197396199396203396217396239396247396259396269396293396299396301396311396323396349396353396373396377396379396413396427396437396443396449396479396509396523396527396533396541396547396563396577396581396601396619396623396629396631396637396647396667396679396703396709396713396719396733396833396871396881396883396887396919396931396937396943396947396953396971396983396997397013397027397037397051397057397063397073397093397099397127397151397153397181397183397211397217397223397237397253397259397283397289397297397301397303397337397351397357397361397373397379397427397429397433397459397469397489397493397517397519397541397543397547397549397567397589397591397597397633397643397673397687397697397721397723397729397751397753397757397759397763397799397807397811397829397849397867397897397907397921397939397951397963397973397981398011398023398029398033398039398053398059398063398077398087398113398117398119398129398143398149398171398207398213398219398227398249398261398267398273398287398303398311398323398339398341398347398353398357398369398393398407398417398423398441398459398467398471398473398477398491398509398539398543398549398557398569398581398591398609398611398621398627398669398681398683398693398711398729398731398759398771398813398819398821398833398857398863398887398903398917398921398933398941398969398977398989399023399031399043399059399067399071399079399097399101399107399131399137399149399151399163399173399181399197399221399227399239399241399263399271399277399281399283399353399379399389399391399401399403399409399433399439399473399481399491399493399499399523399527399541399557399571399577399583399587399601399613399617399643399647399667399677399689399691399719399727399731399739399757399761399769399781399787399793399851399853399871399887399899399911399913399937399941399953399979399983399989400009400031400033400051400067400069400087400093400109400123400151400157400187400199400207400217400237400243400247400249400261400277400291400297400307400313400321400331400339400381400391400409400417400429400441400457400471400481400523400559400579400597400601400607400619400643400651400657400679400681400703400711400721400723400739400753400759400823400837400849400853400859400871400903400927400931400943400949400963400997401017401029401039401053401057401069401077401087401101401113401119401161401173401179401201401209401231401237401243401279401287401309401311401321401329401341401347401371401381401393401407401411401417401473401477401507401519401537401539401551401567401587401593401627401629401651401669401671401689401707401711401743401771401773401809401813401827401839401861401867401887401903401909401917401939401953401957401959401981401987401993402023402029402037402043402049402053402071402089402091402107402131402133402137402139402197402221402223402239402253402263402277402299402307402313402329402331402341402343402359402361402371402379402383402403402419402443402487402503402511402517402527402529402541402551402559402581402583402587402593402601402613402631402691402697402739402751402757402761402763402767402769402797402803402817402823402847402851402859402863402869402881402923402943402947402949402991403001403003403037403043403049403057403061403063403079403097403103403133403141403159403163403181403219403241403243403253403261403267403289403301403309403327403331403339403363403369403387403391403433403439403483403499403511403537403547403549403553403567403577403591403603403607403621403649403661403679403681403687403703403717403721403729403757403783403787403817403829403831403849403861403867403877403889403901403933403951403957403969403979403981403993404009404011404017404021404029404051404081404099404113404119404123404161404167404177404189404191404197404213404221404249404251404267404269404273404291404309404321404323404357404381404387404389404399404419404423404429404431404449404461404483404489404497404507404513404527404531404533404539404557404597404671404693404699404713404773404779404783404819404827404837404843404849404851404941404951404959404969404977404981404983405001405011405029405037405047405049405071405073405089405091405143405157405179405199405211405221405227405239405241405247405253405269405277405287405299405323405341405343405347405373405401405407405413405437405439405473405487405491405497405499405521405527405529405541405553405577405599405607405611405641405659405667405677405679405683405689405701405703405709405719405731405749405763405767405781405799405817405827405829405857405863405869405871405893405901405917405947405949405959405967405989405991405997406013406027406037406067406073406093406117406123406169406171406177406183406207406247406253406267406271406309406313406327406331406339406349406361406381406397406403406423406447406481406499406501406507406513406517406531406547406559406561406573406577406579406583406591406631406633406649406661406673406697406699406717406729406739406789406807406811406817406837406859406873406883406907406951406969406981406993407023407047407059407083407119407137407149407153407177407179407191407203407207407219407221407233407249407257407263407273407287407291407299407311407317407321407347407357407359407369407377407383407401407437407471407483407489407501407503407509407521407527407567407573407579407587407599407621407633407639407651407657407669407699407707407713407717407723407741407747407783407789407791407801407807407821407833407843407857407861407879407893407899407917407923407947407959407969407971407977407993408011408019408041408049408071408077408091408127408131408137408169408173408197408203408209408211408217408223408229408241408251408263408271408283408311408337408341408347408361408379408389408403408413408427408431408433408437408461408469408479408491408497408533408539408553408563408607408623408631408637408643408659408677408689408691408701408703408713408719408743408763408769408773408787408803408809408817408841408857408869408911408913408923408943408953408959408971408979408997409007409021409027409033409043409063409069409081409099409121409153409163409177409187409217409237409259409261409267409271409289409291409327409333409337409349409351409369409379409391409397409429409433409441409463409471409477409483409499409517409523409529409543409573409579409589409597409609409639409657409691409693409709409711409723409729409733409753409769409777409781409813409817409823409831409841409861409867409879409889409891409897409901409909409933409943409951409961409967409987409993409999410009410029410063410087410093410117410119410141410143410149410171410173410203410231410233410239410243410257410279410281410299410317410323410339410341410353410359410383410387410393410401410411410413410453410461410477410489410491410497410507410513410519410551410561410587410617410621410623410629410651410659410671410687410701410717410731410741410747410749410759410783410789410801410807410819410833410857410899410903410929410953410983410999411001411007411011411013411031411041411049411067411071411083411101411113411119411127411143411157411167411193411197411211411233411241411251411253411259411287411311411337411347411361411371411379411409411421411443411449411469411473411479411491411503411527411529411557411563411569411577411583411589411611411613411617411637411641411667411679411683411703411707411709411721411727411737411739411743411751411779411799411809411821411823411833411841411883411919411923411937411941411947411967411991412001412007412019412031412033412037412039412051412067412073412081412099412109412123412127412133412147412157412171412187412189412193412201412211412213412219412249412253412273412277412289412303412333412339412343412387412397412411412457412463412481412487412493412537412561412567412571412589412591412603412609412619412627412637412639412651412663412667412717412739412771412793412807412831412849412859412891412901412903412939412943412949412967412987413009413027413033413053413069413071413081413087413089413093413111413113413129413141413143413159413167413183413197413201413207413233413243413251413263413267413293413299413353413411413417413429413443413461413477413521413527413533413537413551413557413579413587413597413629413653413681413683413689413711413713413719413737413753413759413779413783413807413827413849413863413867413869413879413887413911413923413951413981414013414017414019414031414049414053414061414077414083414097414101414107414109414131414157414179414199414203414209414217414221414241414259414269414277414283414311414313414329414331414347414361414367414383414389414397414413414431414433414451414457414461414467414487414503414521414539414553414559414571414577414607414611414629414641414643414653414677414679414683414691414697414703414707414709414721414731414737414763414767414769414773414779414793414803414809414833414857414871414889414893414899414913414923414929414949414959414971414977414991415013415031415039415061415069415073415087415097415109415111415133415141415147415153415159415171415187415189415201415213415231415253415271415273415319415343415379415381415391415409415427415447415469415477415489415507415517415523415543415553415559415567415577415603415607415609415627415631415643415651415661415669415673415687415691415697415717415721415729415759415783415787415799415801415819415823415861415873415879415901415931415937415949415951415957415963415969415979415993415999416011416023416071416077416089416107416147416149416153416159416167416201416219416239416243416249416257416263416281416291416333416359416387416389416393416399416401416407416413416417416419416441416443416459416473416477416491416497416501416503416513416531416543416573416579416593416621416623416629416659416677416693416719416761416797416821416833416839416849416851416873416881416887416947416957416963416989417007417017417019417023417037417089417097417113417119417127417133417161417169417173417181417187417191417203417217417227417239417251417271417283417293417311417317417331417337417371417377417379417383417419417437417451417457417479417491417493417509417511417523417541417553417559417577417581417583417617417623417631417643417649417671417691417719417721417727417731417733417737417751417763417773417793417811417821417839417863417869417881417883417899417931417941417947417953417959417961417983417997418007418009418027418031418043418051418069418073418079418087418109418129418157418169418177418181418189418199418207418219418259418273418279418289418303418321418331418337418339418343418349418351418357418373418381418391418423418427418447418459418471418493418511418553418559418597418601418603418631418633418637418657418667418699418709418721418739418751418763418771418783418787418793418799418811418813418819418837418843418849418861418867418871418883418889418909418921418927418933418939418961418981418987418993418997419047419051419053419057419059419087419141419147419161419171419183419189419191419201419231419249419261419281419291419297419303419317419329419351419383419401419417419423419429419443419449419459419467419473419477419483419491419513419527419537419557419561419563419567419579419591419597419599419603419609419623419651419687419693419701419711419743419753419777419789419791419801419803419821419827419831419873419893419921419927419929419933419953419959419999420001420029420037420041420047420073420097420103420149420163420191420193420221420241420253420263420269420271420293420307420313420317420319420323420331420341420349420353420361420367420383420397420419420421420439420457420467420479420481420499420503420521420551420557420569420571420593420599420613420671420677420683420691420731420737420743420757420769420779420781420799420803420809420811420851420853420857420859420899420919420929420941420967420977420997421009421019421033421037421049421079421081421093421103421121421123421133421147421159421163421177421181421189421207421241421273421279421303421313421331421339421349421361421381421397421409421417421423421433421453421459421469421471421483421493421501421517421559421607421609421621421633421639421643421657421661421691421697421699421703421709421711421717421727421739421741421783421801421807421831421847421891421907421913421943421973421987421997422029422041422057422063422069422077422083422087422089422099422101422111422113422129422137422141422183422203422209422231422239422243422249422267422287422291422309422311422321422339422353422363422369422377422393422407422431422453422459422479422537422549422551422557422563422567422573422581422621422627422657422689422701422707422711422749422753422759422761422789422797422803422827422857422861422867422869422879422881422893422897422899422911422923422927422969422987423001423013423019423043423053423061423067423083423091423097423103423109423121423127423133423173423179423191423209423221423229423233423251423257423259423277423281423287423289423299423307423323423341423347423389423403423413423427423431423439423457423461423463423469423481423497423503423509423541423547423557423559423581423587423601423617423649423667423697423707423713423727423749423751423763423769423779423781423791423803423823423847423853423859423869423883423887423931423949423961423977423989423991424001424003424007424019424027424037424079424091424093424103424117424121424129424139424147424157424163424169424187424199424223424231424243424247424261424267424271424273424313424331424339424343424351424397424423424429424433424451424471424481424493424519424537424547424549424559424573424577424597424601424639424661424667424679424687424693424709424727424729424757424769424771424777424811424817424819424829424841424843424849424861424867424889424891424903424909424913424939424961424967424997425003425027425039425057425059425071425083425101425107425123425147425149425189425197425207425233425237425251425273425279425281425291425297425309425317425329425333425363425377425387425393425417425419425423425441425443425471425473425489425501425519425521425533425549425563425591425603425609425641425653425681425701425713425779425783425791425801425813425819425837425839425851425857425861425869425879425899425903425911425939425959425977425987425989426007426011426061426073426077426089426091426103426131426161426163426193426197426211426229426233426253426287426301426311426319426331426353426383426389426401426407426421426427426469426487426527426541426551426553426563426583426611426631426637426641426661426691426697426707426709426731426737426739426743426757426761426763426773426779426787426799426841426859426863426871426889426893426913426917426919426931426941426971426973426997427001427013427039427043427067427069427073427079427081427103427117427151427169427181427213427237427241427243427247427249427279427283427307427309427327427333427351427369427379427381427403427417427421427423427429427433427439427447427451427457427477427513427517427523427529427541427579427591427597427619427621427681427711427717427723427727427733427751427781427787427789427813427849427859427877427879427883427913427919427939427949427951427957427967427969427991427993427997428003428023428027428033428039428041428047428083428093428137428143428147428149428161428167428173428177428221428227428231428249428251428273428297428299428303428339428353428369428401428411428429428471428473428489428503428509428531428539428551428557428563428567428569428579428629428633428639428657428663428671428677428683428693428731428741428759428777428797428801428807428809428833428843428851428863428873428899428951428957428977429007429017429043429083429101429109429119429127429137429139429161429181429197429211429217429223429227429241429259429271429277429281429283429329429347429349429361429367429389429397429409429413429427429431429449429463429467429469429487429497429503429509429511429521429529429547429551429563429581429587429589429599429631429643429659429661429673429677429679429683429701429719429727429731429733429773429791429797429817429823429827429851429853429881429887429889429899429901429907429911429917429929429931429937429943429953429971429973429991430007430009430013430019430057430061430081430091430093430121430139430147430193430259430267430277430279430289430303430319430333430343430357430393430411430427430433430453430487430499430511430513430517430543430553430571430579430589430601430603430649430663430691430697430699430709430723430739430741430747430751430753430769430783430789430799430811430819430823430841430847430861430873430879430883430891430897430907430909430921430949430957430979430981430987430999431017431021431029431047431051431063431077431083431099431107431141431147431153431173431191431203431213431219431237431251431257431267431269431287431297431311431329431339431363431369431377431381431399431423431429431441431447431449431479431513431521431533431567431581431597431603431611431617431621431657431659431663431671431693431707431729431731431759431777431797431801431803431807431831431833431857431863431867431869431881431887431891431903431911431929431933431947431983431993432001432007432023432031432037432043432053432059432067432073432097432121432137432139432143432149432161432163432167432199432203432227432241432251432277432281432287432301432317432323432337432343432349432359432373432389432391432401432413432433432437432449432457432479432491432499432503432511432527432539432557432559432569432577432587432589432613432631432637432659432661432713432721432727432737432743432749432781432793432797432799432833432847432857432869432893432907432923432931432959432961432979432983432989433003433033433049433051433061433073433079433087433093433099433117433123433141433151433187433193433201433207433229433241433249433253433259433261433267433271433291433309433319433337433351433357433361433369433373433393433399433421433429433439433453433469433471433501433507433513433549433571433577433607433627433633433639433651433661433663433673433679433681433703433723433729433747433759433777433781433787433813433817433847433859433861433877433883433889433931433943433963433967433981434009434011434029434039434081434087434107434111434113434117434141434167434179434191434201434209434221434237434243434249434261434267434293434297434303434311434323434347434353434363434377434383434387434389434407434411434431434437434459434461434471434479434501434509434521434561434563434573434593434597434611434647434659434683434689434699434717434719434743434761434783434803434807434813434821434827434831434839434849434857434867434873434881434909434921434923434927434933434939434947434957434963434977434981434989435037435041435059435103435107435109435131435139435143435151435161435179435181435187435191435221435223435247435257435263435277435283435287435307435317435343435349435359435371435397435401435403435419435427435437435439435451435481435503435529435541435553435559435563435569435571435577435583435593435619435623435637435641435647435649435653435661435679435709435731435733435739435751435763435769435779435817435839435847435857435859435881435889435893435907435913435923435947435949435973435983435997436003436013436027436061436081436087436091436097436127436147436151436157436171436181436217436231436253436273436279436283436291436307436309436313436343436357436399436417436427436439436459436463436477436481436483436507436523436529436531436547436549436571436591436607436621436627436649436651436673436687436693436717436727436729436739436741436757436801436811436819436831436841436853436871436889436913436957436963436967436973436979436993436999437011437033437071437077437083437093437111437113437137437141437149437153437159437191437201437219437237437243437263437273437279437287437293437321437351437357437363437387437389437401437413437467437471437473437497437501437509437519437527437533437539437543437557437587437629437641437651437653437677437681437687437693437719437729437743437753437771437809437819437837437849437861437867437881437909437923437947437953437959437977438001438017438029438047438049438091438131438133438143438169438203438211438223438233438241438253438259438271438281438287438301438313438329438341438377438391438401438409438419438439438443438467438479438499438517438521438523438527438533438551438569438589438601438611438623438631438637438661438667438671438701438707438721438733438761438769438793438827438829438833438847438853438869438877438887438899438913438937438941438953438961438967438979438983438989439007439009439063439081439123439133439141439157439163439171439183439199439217439253439273439279439289439303439339439349439357439367439381439409439421439427439429439441439459439463439471439493439511439519439541439559439567439573439577439583439601439613439631439639439661439667439687439693439697439709439723439729439753439759439763439771439781439787439799439811439823439849439853439861439867439883439891439903439919439949439961439969439973439981439991440009440023440039440047440087440093440101440131440159440171440177440179440183440203440207440221440227440239440261440269440281440303440311440329440333440339440347440371440383440389440393440399440431440441440443440471440497440501440507440509440527440537440543440549440551440567440569440579440581440641440651440653440669440677440681440683440711440717440723440731440753440761440773440807440809440821440831440849440863440893440903440911440939440941440953440959440983440987440989441011441029441041441043441053441073441079441101441107441109441113441121441127441157441169441179441187441191441193441229441247441251441257441263441281441307441319441349441359441361441403441421441443441449441461441479441499441517441523441527441547441557441563441569441587441607441613441619441631441647441667441697441703441713441737441751441787441797441799441811441827441829441839441841441877441887441907441913441923441937441953441971442003442007442009442019442027442031442033442061442069442097442109442121442139442147442151442157442171442177442181442193442201442207442217442229442237442243442271442283442291442319442327442333442363442367442397442399442439442447442457442469442487442489442499442501442517442531442537442571442573442577442579442601442609442619442633442691442699442703442721442733442747442753442763442769442777442781442789442807442817442823442829442831442837442843442861442879442903442919442961442963442973442979442987442991442997443011443017443039443041443057443059443063443077443089443117443123443129443147443153443159443161443167443171443189443203443221443227443231443237443243443249443263443273443281443291443293443341443347443353443363443369443389443407443413443419443423443431443437443453443467443489443501443533443543443551443561443563443567443587443591443603443609443629443659443687443689443701443711443731443749443753443759443761443771443777443791443837443851443867443869443873443879443881443893443899443909443917443939443941443953443983443987443999444001444007444029444043444047444079444089444109444113444121444127444131444151444167444173444179444181444187444209444253444271444281444287444289444293444307444341444343444347444349444401444403444421444443444449444461444463444469444473444487444517444523444527444529444539444547444553444557444569444589444607444623444637444641444649444671444677444701444713444739444767444791444793444803444811444817444833444841444859444863444869444877444883444887444893444901444929444937444953444967444971444979445001445019445021445031445033445069445087445091445097445103445141445157445169445183445187445199445229445261445271445279445283445297445307445321445339445363445427445433445447445453445463445477445499445507445537445541445567445573445583445589445597445619445631445633445649445657445691445699445703445741445747445769445771445789445799445807445829445847445853445871445877445883445891445931445937445943445967445969446003446009446041446053446081446087446111446123446129446141446179446189446191446197446221446227446231446261446263446273446279446293446309446323446333446353446363446387446389446399446401446417446441446447446461446473446477446503446533446549446561446569446597446603446609446647446657446713446717446731446753446759446767446773446819446827446839446863446881446891446893446909446911446921446933446951446969446983447001447011447019447053447067447079447101447107447119447133447137447173447179447193447197447211447217447221447233447247447257447259447263447311447319447323447331447353447401447409447427447439447443447449447451447463447467447481447509447521447527447541447569447571447611447617447637447641447677447683447701447703447743447749447757447779447791447793447817447823447827447829447841447859447877447883447893447901447907447943447961447983447991448003448013448027448031448057448067448073448093448111448121448139448141448157448159448169448177448187448193448199448207448241448249448303448309448313448321448351448363448367448373448379448387448397448421448451448519448531448561448597448607448627448631448633448667448687448697448703448727448733448741448769448793448801448807448829448843448853448859448867448871448873448879448883448907448927448939448969448993448997448999449003449011449051449077449083449093449107449117449129449131449149449153449161449171449173449201449203449209449227449243449249449261449263449269449287449299449303449311449321449333449347449353449363449381449399449411449417449419449437449441449459449473449543449549449557449563449567449569449591449609449621449629449653449663449671449677449681449689449693449699449741449759449767449773449783449797449807449821449833449851449879449921449929449941449951449959449963449971449987449989450001450011450019450029450067450071450077450083450101450103450113450127450137450161450169450193450199450209450217450223450227450239450257450259450277450287450293450299450301450311450343450349450361450367450377450383450391450403450413450421450431450451450473450479450481450487450493450503450529450533450557450563450581450587450599450601450617450641450643450649450677450691450707450719450727450761450767450787450797450799450803450809450811450817450829450839450841450847450859450881450883450887450893450899450913450917450929450943450949450971450991450997451013451039451051451057451069451093451097451103451109451159451177451181451183451201451207451249451277451279451301451303451309451313451331451337451343451361451387451397451411451439451441451481451499451519451523451541451547451553451579451601451609451621451637451657451663451667451669451679451681451691451699451709451723451747451753451771451783451793451799451823451831451837451859451873451879451897451901451903451909451921451933451937451939451961451967451987452009452017452027452033452041452077452083452087452131452159452161452171452191452201452213452227452233452239452269452279452293452297452329452363452377452393452401452443452453452497452519452521452531452533452537452539452549452579452587452597452611452629452633452671452687452689452701452731452759452773452797452807452813452821452831452857452869452873452923452953452957452983452989453023453029453053453073453107453119453133453137453143453157453161453181453197453199453209453217453227453239453247453269453289453293453301453311453317453329453347453367453371453377453379453421453451453461453527453553453559453569453571453599453601453617453631453637453641453643453659453667453671453683453703453707453709453737453757453797453799453823453833453847453851453877453889453907453913453923453931453949453961453977453983453991454009454021454031454033454039454061454063454079454109454141454151454159454183454199454211454213454219454229454231454247454253454277454297454303454313454331454351454357454361454379454387454409454417454451454453454483454501454507454513454541454543454547454577454579454603454609454627454637454673454679454709454711454721454723454759454763454777454799454823454843454847454849454859454889454891454907454919454921454931454943454967454969454973454991455003455011455033455047455053455093455099455123455149455159455167455171455177455201455219455227455233455237455261455263455269455291455309455317455321455333455339455341455353455381455393455401455407455419455431455437455443455461455471455473455479455489455491455513455527455531455537455557455573455579455597455599455603455627455647455659455681455683455687455701455711455717455737455761455783455789455809455827455831455849455863455881455899455921455933455941455953455969455977455989455993455999456007456013456023456037456047456061456091456107456109456119456149456151456167456193456223456233456241456283456293456329456349456353456367456377456403456409456427456439456451456457456461456499456503456517456523456529456539456553456557456559456571456581456587456607456611456613456623456641456647456649456653456679456683456697456727456737456763456767456769456791456809456811456821456871456877456881456899456901456923456949456959456979456991457001457003457013457021457043457049457057457087457091457097457099457117457139457151457153457183457189457201457213457229457241457253457267457271457277457279457307457319457333457339457363457367457381457393457397457399457403457411457421457433457459457469457507457511457517457547457553457559457571457607457609457621457643457651457661457669457673457679457687457697457711457739457757457789457799457813457817457829457837457871457889457903457913457943457979457981457987458009458027458039458047458053458057458063458069458119458123458173458179458189458191458197458207458219458239458309458317458323458327458333458357458363458377458399458401458407458449458477458483458501458531458533458543458567458569458573458593458599458611458621458629458639458651458663458669458683458701458719458729458747458789458791458797458807458819458849458863458879458891458897458917458921458929458947458957458959458963458971458977458981458987458993459007459013459023459029459031459037459047459089459091459113459127459167459169459181459209459223459229459233459257459271459293459301459313459317459337459341459343459353459373459377459383459397459421459427459443459463459467459469459479459509459521459523459593459607459611459619459623459631459647459649459671459677459691459703459749459763459791459803459817459829459841459847459883459913459923459929459937459961460013460039460051460063460073460079460081460087460091460099460111460127460147460157460171460181460189460211460217460231460247460267460289460297460301460337460349460373460379460387460393460403460409460417460451460463460477460531460543460561460571460589460609460619460627460633460637460643460657460673460697460709460711460721460771460777460787460793460813460829460841460843460871460891460903460907460913460919460937460949460951460969460973460979460981460987460991461009461011461017461051461053461059461093461101461119461143461147461171461183461191461207461233461239461257461269461273461297461299461309461317461323461327461333461359461381461393461407461411461413461437461441461443461467461479461507461521461561461569461581461599461603461609461627461639461653461677461687461689461693461707461717461801461803461819461843461861461887461891461917461921461933461957461971461977461983462013462041462067462073462079462097462103462109462113462131462149462181462191462199462221462239462263462271462307462311462331462337462361462373462377462401462409462419462421462437462443462467462481462491462493462499462529462541462547462557462569462571462577462589462607462629462641462643462653462659462667462673462677462697462713462719462727462733462739462773462827462841462851462863462871462881462887462899462901462911462937462947462953462983463003463031463033463093463103463157463181463189463207463213463219463231463237463247463249463261463283463291463297463303463313463319463321463339463343463363463387463399463433463447463451463453463457463459463483463501463511463513463523463531463537463549463579463613463627463633463643463649463663463679463693463711463717463741463747463753463763463781463787463807463823463829463831463849463861463867463873463889463891463907463919463921463949463963463973463987463993464003464011464021464033464047464069464081464089464119464129464131464137464141464143464171464173464197464201464213464237464251464257464263464279464281464291464309464311464327464351464371464381464383464413464419464437464447464459464467464479464483464521464537464539464549464557464561464587464591464603464617464621464647464663464687464699464741464747464749464753464767464771464773464777464801464803464809464813464819464843464857464879464897464909464917464923464927464939464941464951464953464963464983464993464999465007465011465013465019465041465061465067465071465077465079465089465107465119465133465151465161465163465167465169465173465187465209465211465259465271465277465281465293465299465317465319465331465337465373465379465383465407465419465433465463465469465523465529465541465551465581465587465611465631465643465649465659465679465701465721465739465743465761465781465797465799465809465821465833465841465887465893465901465917465929465931465947465977465989466009466019466027466033466043466061466069466073466079466087466091466121466139466153466171466181466183466201466243466247466261466267466273466283466303466321466331466339466357466369466373466409466423466441466451466483466517466537466547466553466561466567466573466579466603466619466637466649466651466673466717466723466729466733466747466751466777466787466801466819466853466859466897466909466913466919466951466957466997467003467009467017467021467063467081467083467101467119467123467141467147467171467183467197467209467213467237467239467261467293467297467317467329467333467353467371467399467417467431467437467447467471467473467477467479467491467497467503467507467527467531467543467549467557467587467591467611467617467627467629467633467641467651467657467669467671467681467689467699467713467729467737467743467749467773467783467813467827467833467867467869467879467881467893467897467899467903467927467941467953467963467977468001468011468019468029468049468059468067468071468079468107468109468113468121468133468137468151468157468173468187468191468199468239468241468253468271468277468289468319468323468353468359468371468389468421468439468451468463468473468491468493468499468509468527468551468557468577468581468593468599468613468619468623468641468647468653468661468667468683468691468697468703468709468719468737468739468761468773468781468803468817468821468841468851468859468869468883468887468889468893468899468913468953468967468973468983469009469031469037469069469099469121469127469141469153469169469193469207469219469229469237469241469253469267469279469283469303469321469331469351469363469367469369469379469397469411469429469439469457469487469501469529469541469543469561469583469589469613469627469631469649469657469673469687469691469717469723469747469753469757469769469787469793469801469811469823469841469849469877469879469891469907469919469939469957469969469979469993470021470039470059470077470081470083470087470089470131470149470153470161470167470179470201470207470209470213470219470227470243470251470263470279470297470299470303470317470333470347470359470389470399470411470413470417470429470443470447470453470461470471470473470489470501470513470521470531470539470551470579470593470597470599470609470621470627470647470651470653470663470669470689470711470719470731470749470779470783470791470819470831470837470863470867470881470887470891470903470927470933470941470947470957470959470993470999471007471041471061471073471089471091471101471137471139471161471173471179471187471193471209471217471241471253471259471277471281471283471299471301471313471353471389471391471403471407471439471451471467471481471487471503471509471521471533471539471553471571471589471593471607471617471619471641471649471659471671471673471677471683471697471703471719471721471749471769471781471791471803471817471841471847471853471871471893471901471907471923471929471931471943471949471959471997472019472027472051472057472063472067472103472111472123472127472133472139472151472159472163472189472193472247472249472253472261472273472289472301472309472319472331472333472349472369472391472393472399472411472421472457472469472477472523472541472543472559472561472573472597472631472639472643472669472687472691472697472709472711472721472741472751472763472793472799472817472831472837472847472859472883472907472909472921472937472939472963472993473009473021473027473089473101473117473141473147473159473167473173473191473197473201473203473219473227473257473279473287473293473311473321473327473351473353473377473381473383473411473419473441473443473453473471473477473479473497473503473507473513473519473527473531473533473549473579473597473611473617473633473647473659473719473723473729473741473743473761473789473833473839473857473861473867473887473899473911473923473927473929473939473951473953473971473981473987473999474017474029474037474043474049474059474073474077474101474119474127474137474143474151474163474169474197474211474223474241474263474289474307474311474319474337474343474347474359474379474389474391474413474433474437474443474479474491474497474499474503474533474541474547474557474569474571474581474583474619474629474647474659474667474671474707474709474737474751474757474769474779474787474809474811474839474847474857474899474907474911474917474923474931474937474941474949474959474977474983475037475051475073475081475091475093475103475109475141475147475151475159475169475207475219475229475243475271475273475283475289475297475301475327475331475333475351475367475369475379475381475403475417475421475427475429475441475457475469475483475511475523475529475549475583475597475613475619475621475637475639475649475669475679475681475691475693475697475721475729475751475753475759475763475777475789475793475807475823475831475837475841475859475877475879475889475897475903475907475921475927475933475957475973475991475997476009476023476027476029476039476041476059476081476087476089476101476107476111476137476143476167476183476219476233476237476243476249476279476299476317476347476351476363476369476381476401476407476419476423476429476467476477476479476507476513476519476579476587476591476599476603476611476633476639476647476659476681476683476701476713476719476737476743476753476759476783476803476831476849476851476863476869476887476891476911476921476929476977476981476989477011477013477017477019477031477047477073477077477091477131477149477163477209477221477229477259477277477293477313477317477329477341477359477361477383477409477439477461477469477497477511477517477523477539477551477553477557477571477577477593477619477623477637477671477677477721477727477731477739477767477769477791477797477809477811477821477823477839477847477857477863477881477899477913477941477947477973477977477991478001478039478063478067478069478087478099478111478129478139478157478169478171478189478199478207478213478241478243478253478259478271478273478321478339478343478351478391478399478403478411478417478421478427478433478441478451478453478459478481478483478493478523478531478571478573478579478589478603478627478631478637478651478679478697478711478727478729478739478741478747478763478769478787478801478811478813478823478831478843478853478861478871478879478897478901478913478927478931478937478943478963478967478991478999479023479027479029479041479081479131479137479147479153479189479191479201479209479221479231479239479243479263479267479287479299479309479317479327479357479371479377479387479419479429479431479441479461479473479489479497479509479513479533479543479561479569479581479593479599479623479629479639479701479749479753479761479771479777479783479797479813479821479833479839479861479879479881479891479903479909479939479951479953479957479971480013480017480019480023480043480047480049480059480061480071480091480101480107480113480133480143480157480167480169480203480209480287480299480317480329480341480343480349480367480373480379480383480391480409480419480427480449480451480461480463480499480503480509480517480521480527480533480541480553480563480569480583480587480647480661480707480713480731480737480749480761480773480787480803480827480839480853480881480911480919480929480937480941480959480967480979480989481001481003481009481021481043481051481067481073481087481093481097481109481123481133481141481147481153481157481171481177481181481199481207481211481231481249481297481301481303481307481343481363481373481379481387481409481417481433481447481469481489481501481513481531481549481571481577481589481619481633481639481651481667481673481681481693481697481699481721481751481753481769481787481801481807481813481837481843481847481849481861481867481879481883481909481939481963481997482017482021482029482033482039482051482071482093482099482101482117482123482179482189482203482213482227482231482233482243482263482281482309482323482347482351482359482371482387482393482399482401482407482413482423482437482441482483482501482507482509482513482519482527482539482569482593482597482621482627482633482641482659482663482683482687482689482707482711482717482719482731482743482753482759482767482773482789482803482819482827482837482861482863482873482897482899482917482941482947482957482971483017483031483061483071483097483127483139483163483167483179483209483211483221483229483233483239483247483251483281483289483317483323483337483347483367483377483389483397483407483409483433483443483467483481483491483499483503483523483541483551483557483563483577483611483619483629483643483649483671483697483709483719483727483733483751483757483761483767483773483787483809483811483827483829483839483853483863483869483883483907483929483937483953483971483991484019484027484037484061484067484079484091484111484117484123484129484151484153484171484181484193484201484207484229484243484259484283484301484303484327484339484361484369484373484397484411484417484439484447484457484459484487484489484493484531484543484577484597484607484609484613484621484639484643484691484703484727484733484751484763484769484777484787484829484853484867484927484951484987484999485021485029485041485053485059485063485081485101485113485123485131485137485161485167485171485201485207485209485263485311485347485351485363485371485383485389485411485417485423485437485447485479485497485509485519485543485567485587485593485603485609485647485657485671485689485701485717485729485731485753485777485819485827485831485833485893485899485909485923485941485959485977485993486023486037486041486043486053486061486071486091486103486119486133486139486163486179486181486193486203486221486223486247486281486293486307486313486323486329486331486341486349486377486379486389486391486397486407486433486443486449486481486491486503486509486511486527486539486559486569486583486589486601486617486637486641486643486653486667486671486677486679486683486697486713486721486757486767486769486781486797486817486821486833486839486869486907486923486929486943486947486949486971486977486991487007487013487021487049487051487057487073487079487093487099487111487133487177487183487187487211487213487219487247487261487283487303487307487313487349487363487381487387487391487397487423487427487429487447487457487463487469487471487477487481487489487507487561487589487601487603487607487637487649487651487657487681487691487703487709487717487727487733487741487757487769487783487789487793487811487819487829487831487843487873487889487891487897487933487943487973487979487997488003488009488011488021488051488057488069488119488143488149488153488161488171488197488203488207488209488227488231488233488239488249488261488263488287488303488309488311488317488321488329488333488339488347488353488381488399488401488407488417488419488441488459488473488503488513488539488567488573488603488611488617488627488633488639488641488651488687488689488701488711488717488723488729488743488749488759488779488791488797488821488827488833488861488879488893488897488909488921488947488959488981488993489001489011489019489043489053489061489101489109489113489127489133489157489161489179489191489197489217489239489241489257489263489283489299489329489337489343489361489367489389489407489409489427489431489439489449489457489479489487489493489529489539489551489553489557489571489613489631489653489659489673489677489679489689489691489733489743489761489791489793489799489803489817489823489833489847489851489869489871489887489901489911489913489941489943489959489961489977489989490001490003490019490031490033490057490097490103490111490117490121490151490159490169490183490201490207490223490241490247490249490267490271490277490283490309490313490339490367490393490417490421490453490459490463490481490493490499490519490537490541490543490549490559490571490573490577490579490591490619490627490631490643490661490663490697490733490741490769490771490783490829490837490849490859490877490891490913490921490927490937490949490951490957490967490969490991490993491003491039491041491059491081491083491129491137491149491159491167491171491201491213491219491251491261491273491279491297491299491327491329491333491339491341491353491357491371491377491417491423491429491461491483491489491497491501491503491527491531491537491539491581491591491593491611491627491633491639491651491653491669491677491707491719491731491737491747491773491783491789491797491819491833491837491851491857491867491873491899491923491951491969491977491983492007492013492017492029492047492053492059492061492067492077492083492103492113492227492251492253492257492281492293492299492319492377492389492397492403492409492413492421492431492463492467492487492491492511492523492551492563492587492601492617492619492629492631492641492647492659492671492673492707492719492721492731492757492761492763492769492781492799492839492853492871492883492893492901492911492967492979493001493013493021493027493043493049493067493093493109493111493121493123493127493133493139493147493159493169493177493193493201493211493217493219493231493243493249493277493279493291493301493313493333493351493369493393493397493399493403493433493447493457493463493481493523493531493541493567493573493579493583493607493621493627493643493657493693493709493711493721493729493733493747493777493793493807493811493813493817493853493859493873493877493897493919493931493937493939493967493973493979493993494023494029494041494051494069494077494083494093494101494107494129494141494147494167494191494213494237494251494257494267494269494281494287494317494327494341494353494359494369494381494383494387494407494413494441494443494471494497494519494521494539494561494563494567494587494591494609494617494621494639494647494651494671494677494687494693494699494713494719494723494731494737494743494749494759494761494783494789494803494843494849494873494899494903494917494927494933494939494959494987495017495037495041495043495067495071495109495113495119495133495139495149495151495161495181495199495211495221495241495269495277495289495301495307495323495337495343495347495359495361495371495377495389495401495413495421495433495437495449495457495461495491495511495527495557495559495563495569495571495587495589495611495613495617495619495629495637495647495667495679495701495707495713495749495751495757495769495773495787495791495797495799495821495827495829495851495877495893495899495923495931495947495953495959495967495973495983496007496019496039496051496063496073496079496123496127496163496187496193496211496229496231496259496283496289496291496297496303496313496333496339496343496381496399496427496439496453496459496471496477496481496487496493496499496511496549496579496583496609496631496669496681496687496703496711496733496747496763496789496813496817496841496849496871496877496889496891496897496901496913496919496949496963496997496999497011497017497041497047497051497069497093497111497113497117497137497141497153497171497177497197497239497257497261497269497279497281497291497297497303497309497323497339497351497389497411497417497423497449497461497473497479497491497501497507497509497521497537497551497557497561497579497587497597497603497633497659497663497671497677497689497701497711497719497729497737497741497771497773497801497813497831497839497851497867497869497873497899497929497957497963497969497977497989497993497999498013498053498061498073498089498101498103498119498143498163498167498181498209498227498257498259498271498301498331498343498361498367498391498397498401498403498409498439498461498467498469498493498497498521498523498527498551498557498577498583498599498611498613498643498647498653498679498689498691498733498739498749498761498767498779498781498787498791498803498833498857498859498881498907498923498931498937498947498961498973498977498989499021499027499033499039499063499067499099499117499127499129499133499139499141499151499157499159499181499183499189499211499229499253499267499277499283499309499321499327499349499361499363499391499397499403499423499439499459499481499483499493499507499519499523499549499559499571499591499601499607499621499633499637499649499661499663499669499673499679499687499691499693499711499717499729499739499747499781499787499801499819499853499879499883499897499903499927499943499957499969499973499979500009500029500041500057500069500083500107500111500113500119500153500167500173500177500179500197500209500231500233500237500239500249500257500287500299500317500321500333500341500363500369500389500393500413500417500431500443500459500471500473500483500501500509500519500527500567500579500587500603500629500671500677500693500699500713500719500723500729500741500777500791500807500809500831500839500861500873500881500887500891500909500911500921500923500933500947500953500957500977501001501013501019501029501031501037501043501077501089501103501121501131501133501139501157501173501187501191501197501203501209501217501223501229501233501257501271501287501299501317501341501343501367501383501401501409501419501427501451501463501493501503501511501563501577501593501601501617501623501637501659501691501701501703501707501719501731501769501779501803501817501821501827501829501841501863501889501911501931501947501953501967501971501997502001502013502039502043502057502063502079502081502087502093502121502133502141502171502181502217502237502247502259502261502277502301502321502339502393502409502421502429502441502451502487502499502501502507502517502543502549502553502591502597502613502631502633502643502651502669502687502699502703502717502729502769502771502781502787502807502819502829502841502847502861502883502919502921502937502961502973503003503017503039503053503077503123503131503137503147503159503197503207503213503227503231503233503249503267503287503297503303503317503339503351503359503369503381503383503389503407503413503423503431503441503453503483503501503543503549503551503563503593503599503609503611503621503623503647503653503663503707503717503743503753503771503777503779503791503803503819503821503827503851503857503869503879503911503927503929503939503947503959503963503969503983503989504001504011504017504047504061504073504103504121504139504143504149504151504157504181504187504197504209504221504247504269504289504299504307504311504323504337504349504353504359504377504379504389504403504457504461504473504479504521504523504527504547504563504593504599504607504617504619504631504661504667504671504677504683504727504767504787504797504799504817504821504851504853504857504871504877504893504901504929504937504943504947504953504967504983504989504991505027505031505033505049505051505061505067505073505091505097505111505117505123505129505139505157505159505181505187505201505213505231505237505277505279505283505301505313505319505321505327505339505357505367505369505399505409505411505429505447505459505469505481505493505501505511505513505523505537505559505573505601505607505613505619505633505639505643505657505663505669505691505693505709505711505727505759505763505777505781505811505819505823505867505871505877505907505919505927505949505961505969505979506047506071506083506101506113506119506131506147506171506173506183506201506213506251506263506269506281506291506327506329506333506339506347506351506357506381506393506417506423506449506459506461506479506491506501506507506531506533506537506551506563506573506591506593506599506609506629506647506663506683506687506689506699506729506731506743506773506783506791506797506809506837506843506861506873506887506893506899506903506911506929506941506963506983506993506999507029507049507071507077507079507103507109507113507119507137507139507149507151507163507193507197507217507289507301507313507317507329507347507349507359507361507371507383507401507421507431507461507491507497507499507503507523507557507571507589507593507599507607507631507641507667507673507691507697507713507719507743507757507779507781507797507803507809507821507827507839507883507901507907507917507919507937507953507961507971507979508009508019508021508033508037508073508087508091508097508103508129508159508171508187508213508223508229508237508243508259508271508273508297508301508327508331508349508363508367508373508393508433508439508451508471508477508489508499508513508517508531508549508559508567508577508579508583508619508621508637508643508661508693508709508727508771508789508799508811508817508841508847508867508901508903508909508913508919508931508943508951508957508961508969508973508987509023509027509053509063509071509087509101509123509137509147509149509203509221509227509239509263509281509287509293509297509317509329509359509363509389509393509413509417509429509441509449509477509513509521509543509549509557509563509569509573509581509591509603509623509633509647509653509659509681509687509689509693509699509723509731509737509741509767509783509797509801509833509837509843509863509867509879509909509911509921509939509947509959509963509989510007510031510047510049510061510067510073510077510079510089510101510121510127510137510157510179510199510203510217510227510233510241510247510253510271510287510299510311510319510331510361510379510383510401510403510449510451510457510463510481510529510551510553510569510581510583510589510611510613510617510619510677510683510691510707510709510751510767510773510793510803510817510823510827510847510889510907510919510931510941510943510989511001511013511019511033511039511057511061511087511109511111511123511151511153511163511169511171511177511193511201511211511213511223511237511243511261511279511289511297511327511333511337511351511361511387511391511409511417511439511447511453511457511463511477511487511507511519511523511541511549511559511573511579511583511591511603511627511631511633511669511691511703511711511723511757511787511793511801511811511831511843511859511867511873511891511897511909511933511939511961511963511991511997512009512011512021512047512059512093512101512137512147512167512207512249512251512269512287512311512321512333512353512389512419512429512443512467512497512503512507512521512531512537512543512569512573512579512581512591512593512597512609512621512641512657512663512671512683512711512713512717512741512747512761512767512779512797512803512819512821512843512849512891512899512903512917512921512927512929512959512977512989512999513001513013513017513031513041513047513053513059513067513083513101513103513109513131513137513157513167513169513173513203513239513257513269513277513283513307513311513313513319513341513347513353513367513371513397513407513419513427513431513439513473513479513481513509513511513529513533513593513631513641513649513673513679513683513691513697513719513727513731513739513749513761513767513769513781513829513839513841513871513881513899513917513923513937513943513977513991514001514009514013514021514049514051514057514061514079514081514093514103514117514123514127514147514177514187514201514219514229514243514247514249514271514277514289514309514313514333514343514357514361514379514399514417514429514433514453514499514513514519514523514529514531514543514561514571514621514637514639514643514649514651514669514681514711514733514739514741514747514751514757514769514783514793514819514823514831514841514847514853514859514867514873514889514903514933514939514949514967515041515087515089515111515143515149515153515173515191515227515231515233515237515279515293515311515323515351515357515369515371515377515381515401515429515477515507515519515539515563515579515587515597515611515621515639515651515653515663515677515681515687515693515701515737515741515761515771515773515777515783515803515813515839515843515857515861515873515887515917515923515929515941515951515969515993516017516023516049516053516077516091516127516151516157516161516163516169516179516193516199516209516223516227516233516247516251516253516277516283516293516319516323516349516359516361516371516377516391516407516421516431516433516437516449516457516469516493516499516517516521516539516541516563516587516589516599516611516617516619516623516643516653516673516679516689516701516709516713516721516727516757516793516811516821516829516839516847516871516877516883516907516911516931516947516949516959516973516977516979516991517003517043517061517067517073517079517081517087517091517129517151517169517177517183517189517207517211517217517229517241517243517249517261517267517277517289517303517337517343517367517373517381517393517399517403517411517417517457517459517469517471517481517487517499517501517507517511517513517547517549517553517571517577517589517597517603517609517613517619517637517639517711517717517721517729517733517739517747517817517823517831517861517873517877517901517919517927517931517949517967517981517991517999518017518047518057518059518083518099518101518113518123518129518131518137518153518159518171518179518191518207518209518233518237518239518249518261518291518299518311518327518341518387518389518411518417518429518431518447518467518471518473518509518521518533518543518579518587518597518611518621518657518689518699518717518729518737518741518743518747518759518761518767518779518801518803518807518809518813518831518863518867518893518911518933518953518981518983518989519011519031519037519067519083519089519091519097519107519119519121519131519151519161519193519217519227519229519247519257519269519283519287519301519307519349519353519359519371519373519383519391519413519427519433519457519487519499519509519521519523519527519539519551519553519577519581519587519611519619519643519647519667519683519691519703519713519733519737519769519787519793519797519803519817519863519881519889519907519917519919519923519931519943519947519971519989519997520019520021520031520043520063520067520073520103520111520123520129520151520193520213520241520279520291520297520307520309520313520339520349520357520361520363520369520379520381520393520409520411520423520427520433520447520451520529520547520549520567520571520589520607520609520621520631520633520649520679520691520699520703520717520721520747520759520763520787520813520837520841520853520867520889520913520921520943520957520963520967520969520981521009521021521023521039521041521047521051521063521107521119521137521153521161521167521173521177521179521201521231521243521251521267521281521299521309521317521329521357521359521363521369521377521393521399521401521429521447521471521483521491521497521503521519521527521533521537521539521551521557521567521581521603521641521657521659521669521671521693521707521723521743521749521753521767521777521789521791521809521813521819521831521861521869521879521881521887521897521903521923521929521981521993521999522017522037522047522059522061522073522079522083522113522127522157522161522167522191522199522211522227522229522233522239522251522259522281522283522289522317522323522337522371522373522383522391522409522413522439522449522469522479522497522517522521522523522541522553522569522601522623522637522659522661522673522677522679522689522703522707522719522737522749522757522761522763522787522811522827522829522839522853522857522871522881522883522887522919522943522947522959522961522989523007523021523031523049523093523097523109523129523169523177523207523213523219523261523297523307523333523349523351523357523387523403523417523427523433523459523463523487523489523493523511523519523541523543523553523571523573523577523597523603523631523637523639523657523667523669523673523681523717523729523741523759523763523771523777523793523801523829523847523867523877523903523907523927523937523949523969523987523997524047524053524057524063524071524081524087524099524113524119524123524149524171524189524197524201524203524219524221524231524243524257524261524269524287524309524341524347524351524353524369524387524389524411524413524429524453524497524507524509524519524521524591524593524599524633524669524681524683524701524707524731524743524789524801524803524827524831524857524863524869524873524893524899524921524933524939524941524947524957524959524963524969524971524981524983524999525001525013525017525029525043525101525127525137525143525157525163525167525191525193525199525209525221525241525247525253525257525299525313525353525359525361525373525377525379525391525397525409525431525433525439525457525461525467525491525493525517525529525533525541525571525583525593525599525607525641525649525671525677525697525709525713525719525727525731525739525769525773525781525809525817525839525869525871525887525893525913525923525937525947525949525953525961525979525983526027526037526049526051526063526067526069526073526087526117526121526139526157526159526189526193526199526213526223526231526249526271526283526289526291526297526307526367526373526381526387526391526397526423526429526441526453526459526483526499526501526511526531526543526571526573526583526601526619526627526633526637526649526651526657526667526679526681526703526709526717526733526739526741526759526763526777526781526829526831526837526853526859526871526909526913526931526937526943526951526957526963526993526997527053527057527063527069527071527081527099527123527129527143527159527161527173527179527203527207527209527237527251527273527281527291527327527333527347527353527377527381527393527399527407527411527419527441527447527453527489527507527533527557527563527581527591527599527603527623527627527633527671527699527701527729527741527749527753527789527803527809527819527843527851527869527881527897527909527921527929527941527981527983527987527993528001528013528041528043528053528091528097528107528127528131528137528163528167528191528197528217528223528247528263528289528299528313528317528329528373528383528391528401528403528413528419528433528469528487528491528509528511528527528559528611528623528629528631528659528667528673528679528691528707528709528719528763528779528791528799528811528821528823528833528863528877528881528883528911528929528947528967528971528973528991529003529007529027529033529037529043529049529051529097529103529117529121529127529129529153529157529181529183529213529229529237529241529259529271529273529301529307529313529327529343529349529357529381529393529411529421529423529471529489529513529517529519529531529547529577529579529603529619529637529649529657529673529681529687529691529693529709529723529741529747529751529807529811529813529819529829529847529871529927529933529939529957529961529973529979529981529987529999530017530021530027530041530051530063530087530093530129530137530143530177530183530197530203530209530227530237530249530251530261530267530279530293530297530303530329530333530339530353530359530389530393530401530429530443530447530501530507530513530527530531530533530539530549530567530597530599530603530609530641530653530659530669530693530701530711530713530731530741530743530753530767530773530797530807530833530837530843530851530857530861530869530897530911530947530969530977530983530989531017531023531043531071531079531101531103531121531133531143531163531169531173531197531203531229531239531253531263531281531287531299531331531337531343531347531353531359531383531457531481531497531521531547531551531569531571531581531589531611531613531623531631531637531667531673531689531701531731531793531799531821531823531827531833531841531847531857531863531871531877531901531911531919531977531983531989531997532001532009532027532033532061532069532093532099532141532153532159532163532183532187532193532199532241532249532261532267532277532283532307532313532327532331532333532349532373532379532391532403532417532421532439532447532451532453532489532501532523532529532531532537532547532561532601532603532607532619532621532633532639532663532669532687532691532709532733532739532751532757532771532781532783532789532801532811532823532849532853532867532907532919532949532951532981532993532999533003533009533011533033533051533053533063533077533089533111533129533149533167533177533189533191533213533219533227533237533249533257533261533263533297533303533317533321533327533353533363533371533389533399533413533447533453533459533509533543533549533573533581533593533633533641533671533693533711533713533719533723533737533747533777533801533809533821533831533837533857533879533887533893533909533921533927533959533963533969533971533989533993533999534007534013534019534029534043534047534049534059534073534077534091534101534113534137534167534173534199534203534211534229534241534253534283534301534307534311534323534329534341534367534371534403534407534431534439534473534491534511534529534553534571534577534581534601534607534617534629534631534637534647534649534659534661534671534697534707534739534799534811534827534839534841534851534857534883534889534913534923534931534943534949534971535013535019535033535037535061535099535103535123535133535151535159535169535181535193535207535219535229535237535243535273535303535319535333535349535351535361535387535391535399535481535487535489535499535511535523535529535547535571535573535589535607535609535627535637535663535669535673535679535697535709535727535741535751535757535771535783535793535811535849535859535861535879535919535937535939535943535957535967535973535991535999536017536023536051536057536059536069536087536099536101536111536141536147536149536189536191536203536213536219536227536233536243536267536273536279536281536287536293536311536323536353536357536377536399536407536423536441536443536447536449536453536461536467536479536491536509536513536531536533536561536563536593536609536621536633536651536671536677536687536699536717536719536729536743536749536771536773536777536779536791536801536803536839536849536857536867536869536891536909536917536923536929536933536947536953536971536989536999537001537007537011537023537029537037537041537067537071537079537091537127537133537143537157537169537181537191537197537221537233537241537269537281537287537307537331537343537347537373537379537401537403537413537497537527537547537569537583537587537599537611537637537661537673537679537703537709537739537743537749537769537773537781537787537793537811537841537847537853537877537883537899537913537919537941537991538001538019538049538051538073538079538093538117538121538123538127538147538151538157538159538163538199538201538247538249538259538267538283538297538301538303538309538331538333538357538367538397538399538411538423538457538471538481538487538511538513538519538523538529538553538561538567538579538589538597538621538649538651538697538709538711538721538723538739538751538763538771538777538789538799538801538817538823538829538841538871538877538921538927538931538939538943538987539003539009539039539047539089539093539101539107539111539113539129539141539153539159539167539171539207539219539233539237539261539267539269539293539303539309539311539321539323539339539347539351539389539401539447539449539479539501539503539507539509539533539573539621539629539633539639539641539653539663539677539687539711539713539723539729539743539761539783539797539837539839539843539849539863539881539897539899539921539947539993540041540061540079540101540119540121540139540149540157540167540173540179540181540187540203540217540233540251540269540271540283540301540307540343540347540349540367540373540377540383540389540391540433540437540461540469540509540511540517540539540541540557540559540577540587540599540611540613540619540629540677540679540689540691540697540703540713540751540769540773540779540781540803540809540823540851540863540871540877540901540907540961540989541001541007541027541049541061541087541097541129541133541141541153541181541193541201541217541231541237541249541267541271541283541301541309541339541349541361541363541369541381541391541417541439541447541469541483541507541511541523541529541531541537541543541547541549541571541577541579541589541613541631541657541661541669541693541699541711541721541727541759541763541771541777541781541799541817541831541837541859541889541901541927541951541967541987541991541993541999542021542023542027542053542063542071542081542083542093542111542117542119542123542131542141542149542153542167542183542189542197542207542219542237542251542261542263542281542293542299542323542371542401542441542447542461542467542483542489542497542519542533542537542539542551542557542567542579542587542599542603542683542687542693542713542719542723542747542761542771542783542791542797542821542831542837542873542891542911542921542923542933542939542947542951542981542987542999543017543019543029543061543097543113543131543139543143543149543157543161543163543187543203543217543223543227543233543241543253543259543281543287543289543299543307543311543313543341543349543353543359543379543383543407543427543463543497543503543509543539543551543553543593543601543607543611543617543637543659543661543671543679543689543703543707543713543769543773543787543791543793543797543811543827543841543853543857543859543871543877543883543887543889543901543911543929543967543971543997544001544007544009544013544021544031544097544099544109544123544129544133544139544171544177544183544199544223544259544273544277544279544367544373544399544403544429544451544471544477544487544501544513544517544543544549544601544613544627544631544651544667544699544717544721544723544727544757544759544771544781544793544807544813544837544861544877544879544883544889544897544903544919544927544937544961544963544979545023545029545033545057545063545087545089545093545117545131545141545143545161545189545203545213545231545239545257545267545291545329545371545387545429545437545443545449545473545477545483545497545521545527545533545543545549545551545579545599545609545617545621545641545647545651545663545711545723545731545747545749545759545773545789545791545827545843545863545873545893545899545911545917545929545933545939545947545959546001546017546019546031546047546053546067546071546097546101546103546109546137546149546151546173546179546197546211546233546239546241546253546263546283546289546317546323546341546349546353546361546367546373546391546461546467546479546509546523546547546569546583546587546599546613546617546619546631546643546661546671546677546683546691546709546719546731546739546781546841546859546863546869546881546893546919546937546943546947546961546967546977547007547021547037547061547087547093547097547103547121547133547139547171547223547229547237547241547249547271547273547291547301547321547357547361547363547369547373547387547397547399547411547441547453547471547483547487547493547499547501547513547529547537547559547567547577547583547601547609547619547627547639547643547661547663547681547709547727547741547747547753547763547769547787547817547819547823547831547849547853547871547889547901547909547951547957547999548003548039548059548069548083548089548099548117548123548143548153548189548201548213548221548227548239548243548263548291548309548323548347548351548363548371548393548399548407548417548423548441548453548459548461548489548501548503548519548521548533548543548557548567548579548591548623548629548657548671548677548687548693548707548719548749548753548761548771548783548791548827548831548833548837548843548851548861548869548893548897548903548909548927548953548957548963549001549011549013549019549023549037549071549089549091549097549121549139549149549161549163549167549169549193549203549221549229549247549257549259549281549313549319549323549331549379549391549403549421549431549443549449549481549503549509549511549517549533549547549551549553549569549587549589549607549623549641549643549649549667549683549691549701549707549713549719549733549737549739549749549751549767549817549833549839549863549877549883549911549937549943549949549977549979550007550009550027550049550061550063550073550111550117550127550129550139550163550169550177550181550189550211550213550241550267550279550283550289550309550337550351550369550379550427550439550441550447550457550469550471550489550513550519550531550541550553550577550607550609550621550631550637550651550657550661550663550679550691550703550717550721550733550757550763550789550801550811550813550831550841550843550859550861550903550909550937550939550951550961550969550973550993550997551003551017551027551039551059551063551069551093551099551107551113551129551143551179551197551207551219551231551233551269551281551297551311551321551339551347551363551381551387551407551423551443551461551483551489551503551519551539551543551549551557551569551581551587551597551651551653551659551671551689551693551713551717551723551729551731551743551753551767551773551801551809551813551843551849551861551909551911551917551927551933551951551959551963551981552001552011552029552031552047552053552059552089552091552103552107552113552127552137552179552193552217552239552241552259552263552271552283552301552317552341552353552379552397552401552403552469552473552481552491552493552511552523552527552553552581552583552589552611552649552659552677552703552707552709552731552749552751552757552787552791552793552809552821552833552841552847552859552883552887552899552913552917552971552983552991553013553037553043553051553057553067553073553093553097553099553103553123553139553141553153553171553181553193553207553211553229553249553253553277553279553309553351553363553369553411553417553433553439553447553457553463553471553481553507553513553517553529553543553549553561553573553583553589553591553601553607553627553643553649553667553681553687553699553703553727553733553747553757553759553769553789553811553837553849553867553873553897553901553919553921553933553961553963553981553991554003554011554017554051554077554087554089554117554123554129554137554167554171554179554189554207554209554233554237554263554269554293554299554303554317554347554377554383554417554419554431554447554453554467554503554527554531554569554573554597554611554627554633554639554641554663554669554677554699554707554711554731554747554753554759554767554779554789554791554797554803554821554833554837554839554843554849554887554891554893554899554923554927554951554959554969554977555029555041555043555053555073555077555083555091555097555109555119555143555167555209555221555251555253555257555277555287555293555301555307555337555349555361555383555391555419555421555439555461555487555491555521555523555557555589555593555637555661555671555677555683555691555697555707555739555743555761555767555823555827555829555853555857555871555931555941555953555967556007556021556027556037556043556051556067556069556093556103556123556159556177556181556211556219556229556243556253556261556267556271556273556279556289556313556321556327556331556343556351556373556399556403556441556459556477556483556487556513556519556537556559556573556579556583556601556607556609556613556627556639556651556679556687556691556693556697556709556723556727556741556753556763556769556781556789556793556799556811556817556819556823556841556849556859556861556867556883556891556931556939556943556957556967556981556987556999557017557021557027557033557041557057557059557069557087557093557153557159557197557201557261557269557273557281557303557309557321557329557339557369557371557377557423557443557449557461557483557489557519557521557533557537557551557567557573557591557611557633557639557663557671557693557717557729557731557741557743557747557759557761557779557789557801557803557831557857557861557863557891557899557903557927557981557987558007558017558029558053558067558083558091558109558113558121558139558149558167558179558197558203558209558223558241558251558253558287558289558307558319558343558401558413558421558427558431558457558469558473558479558491558497558499558521558529558533558539558541558563558583558587558599558611558629558643558661558683558703558721558731558757558769558781558787558791558793558827558829558863558869558881558893558913558931558937558947558973558979558997559001559049559051559067559081559093559099559123559133559157559177559183559201559211559213559217559219559231559243559259559277559297559313559319559343559357559367559369559397559421559451559459559469559483559511559513559523559529559541559547559549559561559571559577559583559591559597559631559633559639559649559667559673559679559687559703559709559739559747559777559781559799559807559813559831559841559849559859559877559883559901559907559913559939559967559973559991560017560023560029560039560047560081560083560089560093560107560113560117560123560137560149560159560171560173560179560191560207560213560221560227560233560237560239560243560249560281560293560297560299560311560317560341560353560393560411560437560447560459560471560477560479560489560491560501560503560531560543560551560561560597560617560621560639560641560653560669560683560689560701560719560737560753560761560767560771560783560797560803560827560837560863560869560873560887560891560893560897560929560939560941560969560977561019561047561053561059561061561079561083561091561097561101561103561109561161561173561181561191561199561229561251561277561307561313561343561347561359561367561373561377561389561409561419561439561461561521561529561551561553561559561599561607561667561703561713561733561761561767561787561797561809561829561839561907561917561923561931561943561947561961561973561983561997562007562019562021562043562091562103562129562147562169562181562193562201562231562259562271562273562283562291562297562301562307562313562333562337562349562351562357562361562399562403562409562417562421562427562439562459562477562493562501562517562519562537562577562579562589562591562607562613562621562631562633562651562663562669562673562691562693562699562703562711562721562739562753562759562763562781562789562813562831562841562871562897562901562909562931562943562949562963562967562973562979562987562997563009563011563021563039563041563047563051563077563081563099563113563117563119563131563149563153563183563197563219563249563263563287563327563351563357563359563377563401563411563413563417563419563447563449563467563489563501563503563543563551563561563587563593563599563623563657563663563723563743563747563777563809563813563821563831563837563851563869563881563887563897563929563933563947563971563987563999564013564017564041564049564059564061564089564097564103564127564133564149564163564173564191564197564227564229564233564251564257564269564271564299564301564307564313564323564353564359564367564371564373564391564401564407564409564419564437564449564457564463564467564491564497564523564533564593564607564617564643564653564667564671564679564701564703564709564713564761564779564793564797564827564871564881564899564917564919564923564937564959564973564979564983564989564997565013565039565049565057565069565109565111565127565163565171565177565183565189565207565237565241565247565259565261565273565283565289565303565319565333565337565343565361565379565381565387565391565393565427565429565441565451565463565469565483565489565507565511565517565519565549565553565559565567565571565583565589565597565603565613565637565651565661565667565723565727565769565771565787565793565813565849565867565889565891565907565909565919565921565937565973565979565997566011566023566047566057566077566089566101566107566131566149566161566173566179566183566201566213566227566231566233566273566311566323566347566387566393566413566417566429566431566437566441566443566453566521566537566539566543566549566551566557566563566567566617566633566639566653566659566677566681566693566701566707566717566719566723566737566759566767566791566821566833566851566857566879566911566939566947566963566971566977566987566999567011567013567031567053567059567067567097567101567107567121567143567179567181567187567209567257567263567277567319567323567367567377567383567389567401567407567439567449567451567467567487567493567499567527567529567533567569567601567607567631567649567653567659567661567667567673567689567719567737567751567761567767567779567793567811567829567841567857567863567871567877567881567883567899567937567943567947567949567961567979567991567997568019568027568033568049568069568091568097568109568133568151568153568163568171568177568187568189568193568201568207568231568237568241568273568279568289568303568349568363568367568387568391568433568439568441568453568471568481568493568523568541568549568577568609568619568627568643568657568669568679568691568699568709568723568751568783568787568807568823568831568853568877568891568903568907568913568921568963568979568987568991568999569003569011569021569047569053569057569071569077569081569083569111569117569137569141569159569161569189569197569201569209569213569237569243569249569251569263569267569269569321569323569369569417569419569423569431569447569461569479569497569507569533569573569579569581569599569603569609569617569623569659569663569671569683569711569713569717569729569731569747569759569771569773569797569809569813569819569831569839569843569851569861569869569887569893569897569903569927569939569957569983570001570013570029570041570043570047570049570071570077570079570083570091570107570109570113570131570139570161570173570181570191570217570221570233570253570329570359570373570379570389570391570403570407570413570419570421570461570463570467570487570491570497570499570509570511570527570529570539570547570553570569570587570601570613570637570643570649570659570667570671570677570683570697570719570733570737570743570781570821570827570839570841570851570853570859570881570887570901570919570937570949570959570961570967570991571001571019571031571037571049571069571093571099571111571133571147571157571163571199571201571211571223571229571231571261571267571279571303571321571331571339571369571381571397571399571409571433571453571471571477571531571541571579571583571589571601571603571633571657571673571679571699571709571717571721571741571751571759571777571783571789571799571801571811571841571847571853571861571867571871571873571877571903571933571939571969571973572023572027572041572051572053572059572063572069572087572093572107572137572161572177572179572183572207572233572239572251572269572281572303572311572321572323572329572333572357572387572399572417572419572423572437572449572461572471572479572491572497572519572521572549572567572573572581572587572597572599572609572629572633572639572651572653572657572659572683572687572699572707572711572749572777572791572801572807572813572821572827572833572843572867572879572881572903572909572927572933572939572941572963572969572993573007573031573047573101573107573109573119573143573161573163573179573197573247573253573263573277573289573299573317573329573341573343573371573379573383573409573437573451573457573473573479573481573487573493573497573509573511573523573527573557573569573571573637573647573673573679573691573719573737573739573757573761573763573787573791573809573817573829573847573851573863573871573883573887573899573901573929573941573953573967573973573977574003574031574033574051574061574081574099574109574127574157574159574163574169574181574183574201574219574261574279574283574289574297574307574309574363574367574373574393574423574429574433574439574477574489574493574501574507574529574543574547574597574619574621574627574631574643574657574667574687574699574703574711574723574727574733574741574789574799574801574813574817574859574907574913574933574939574949574963574967574969575009575027575033575053575063575077575087575119575123575129575131575137575153575173575177575203575213575219575231575243575249575251575257575261575303575317575359575369575371575401575417575429575431575441575473575479575489575503575513575551575557575573575579575581575591575593575611575623575647575651575669575677575689575693575699575711575717575723575747575753575777575791575821575837575849575857575863575867575893575903575921575923575941575957575959575963575987576001576013576019576029576031576041576049576089576101576119576131576151576161576167576179576193576203576211576217576221576223576227576287576293576299576313576319576341576377576379576391576421576427576431576439576461576469576473576493576509576523576529576533576539576551576553576577576581576613576617576637576647576649576659576671576677576683576689576701576703576721576727576731576739576743576749576757576769576787576791576881576883576889576899576943576949576967576977577007577009577033577043577063577067577069577081577097577111577123577147577151577153577169577177577193577219577249577259577271577279577307577327577331577333577349577351577363577387577397577399577427577453577457577463577471577483577513577517577523577529577531577537577547577559577573577589577601577613577627577637577639577667577721577739577751577757577781577799577807577817577831577849577867577873577879577897577901577909577919577931577937577939577957577979577981578021578029578041578047578063578077578093578117578131578167578183578191578203578209578213578251578267578297578299578309578311578317578327578353578363578371578399578401578407578419578441578453578467578477578483578489578497578503578509578533578537578563578573578581578587578597578603578609578621578647578659578687578689578693578701578719578729578741578777578779578789578803578819578821578827578839578843578857578861578881578917578923578957578959578971578999579011579017579023579053579079579083579107579113579119579133579179579197579199579239579251579259579263579277579281579283579287579311579331579353579379579407579409579427579433579451579473579497579499579503579517579521579529579533579539579541579563579569579571579583579587579611579613579629579637579641579643579653579673579701579707579713579721579737579757579763579773579779579809579829579851579869579877579881579883579893579907579947579949579961579967579973579983580001580031580033580079580081580093580133580163580169580183580187580201580213580219580231580259580291580301580303580331580339580343580357580361580373580379580381580409580417580471580477580487580513580529580549580553580561580577580607580627580631580633580639580663580673580687580691580693580711580717580733580747580757580759580763580787580793580807580813580837580843580859580871580889580891580901580913580919580927580939580969580981580997581029581041581047581069581071581089581099581101581137581143581149581171581173581177581183581197581201581227581237581239581261581263581293581303581311581323581333581341581351581353581369581377581393581407581411581429581443581447581459581473581491581521581527581549581551581557581573581597581599581617581639581657581663581683581687581699581701581729581731581743581753581767581773581797581809581821581843581857581863581869581873581891581909581921581941581947581953581981581983582011582013582017582031582037582067582083582119582137582139582157582161582167582173582181582203582209582221582223582227582247582251582299582317582319582371582391582409582419582427582433582451582457582469582499582509582511582541582551582563582587582601582623582643582649582677582689582691582719582721582727582731582737582761582763582767582773582781582793582809582821582851582853582859582887582899582931582937582949582961582971582973582983583007583013583019583021583031583069583087583127583139583147583153583169583171583181583189583207583213583229583237583249583267583273583279583291583301583337583339583351583367583391583397583403583409583417583421583447583459583469583481583493583501583511583519583523583537583543583577583603583613583619583621583631583651583657583669583673583697583727583733583753583769583777583783583789583801583841583853583859583861583873583879583903583909583937583969583981583991583997584011584027584033584053584057584063584081584099584141584153584167584183584203584249584261584279584281584303584347584357584359584377584387584393584399584411584417584429584447584471584473584509584531584557584561584587584593584599584603584609584621584627584659584663584677584693584699584707584713584719584723584737584767584777584789584791584809584849584863584869584873584879584897584911584917584923584951584963584971584981584993584999585019585023585031585037585041585043585049585061585071585073585077585107585113585119585131585149585163585199585217585251585269585271585283585289585313585317585337585341585367585383585391585413585437585443585461585467585493585503585517585547585551585569585577585581585587585593585601585619585643585653585671585677585691585721585727585733585737585743585749585757585779585791585799585839585841585847585853585857585863585877585881585883585889585899585911585913585917585919585953585989585997586009586037586051586057586067586073586087586111586121586123586129586139586147586153586189586213586237586273586277586291586301586309586319586349586361586363586367586387586403586429586433586457586459586463586471586493586499586501586541586543586567586571586577586589586601586603586609586627586631586633586667586679586693586711586723586741586769586787586793586801586811586813586819586837586841586849586871586897586903586909586919586921586933586939586951586961586973586979586981587017587021587033587051587053587057587063587087587101587107587117587123587131587137587143587149587173587179587189587201587219587263587267587269587281587287587297587303587341587371587381587387587413587417587429587437587441587459587467587473587497587513587519587527587533587539587549587551587563587579587599587603587617587621587623587633587659587669587677587687587693587711587731587737587747587749587753587771587773587789587813587827587833587849587863587887587891587897587927587933587947587959587969587971587987587989587999588011588019588037588043588061588073588079588083588097588113588121588131588151588167588169588173588191588199588229588239588241588257588277588293588311588347588359588361588383588389588397588403588433588437588463588481588493588503588509588517588521588529588569588571588619588631588641588647588649588667588673588683588703588733588737588743588767588773588779588811588827588839588871588877588881588893588911588937588941588947588949588953588977589021589027589049589063589109589111589123589139589159589163589181589187589189589207589213589219589231589241589243589273589289589291589297589327589331589349589357589387589409589439589451589453589471589481589493589507589529589531589579589583589591589601589607589609589639589643589681589711589717589751589753589759589763589783589793589807589811589829589847589859589861589873589877589903589921589933589993589997590021590027590033590041590071590077590099590119590123590129590131590137590141590153590171590201590207590243590251590263590267590269590279590309590321590323590327590357590363590377590383590389590399590407590431590437590489590537590543590567590573590593590599590609590627590641590647590657590659590669590713590717590719590741590753590771590797590809590813590819590833590839590867590899590921590923590929590959590963590983590987591023591053591061591067591079591089591091591113591127591131591137591161591163591181591193591233591259591271591287591289591301591317591319591341591377591391591403591407591421591431591443591457591469591499591509591523591553591559591581591599591601591611591623591649591653591659591673591691591709591739591743591749591751591757591779591791591827591841591847591863591881591887591893591901591937591959591973592019592027592049592057592061592073592087592099592121592129592133592139592157592199592217592219592223592237592261592289592303592307592309592321592337592343592351592357592367592369592387592391592393592429592451592453592463592469592483592489592507592517592531592547592561592577592589592597592601592609592621592639592643592649592661592663592681592693592723592727592741592747592759592763592793592843592849592853592861592873592877592897592903592919592931592939592967592973592987592993593003593029593041593051593059593071593081593083593111593119593141593143593149593171593179593183593207593209593213593227593231593233593251593261593273593291593293593297593321593323593353593381593387593399593401593407593429593447593449593473593479593491593497593501593507593513593519593531593539593573593587593597593603593627593629593633593641593647593651593689593707593711593767593777593783593839593851593863593869593899593903593933593951593969593977593987593993594023594037594047594091594103594107594119594137594151594157594161594163594179594193594203594211594227594241594271594281594283594287594299594311594313594329594359594367594379594397594401594403594421594427594449594457594467594469594499594511594521594523594533594551594563594569594571594577594617594637594641594653594667594679594697594709594721594739594749594751594773594793594821594823594827594829594857594889594899594911594917594929594931594953594959594961594977594989595003595037595039595043595057595069595073595081595087595093595097595117595123595129595139595141595157595159595181595183595201595207595229595247595253595261595267595271595277595291595303595313595319595333595339595351595363595373595379595381595411595451595453595481595513595519595523595547595549595571595577595579595613595627595687595703595709595711595717595733595741595801595807595817595843595873595877595927595939595943595949595951595957595961595963595967595981596009596021596027596047596053596059596069596081596083596093596117596119596143596147596159596179596209596227596231596243596251596257596261596273596279596291596293596317596341596363596369596399596419596423596461596489596503596507596537596569596573596579596587596593596599596611596623596633596653596663596669596671596693596707596737596741596749596767596779596789596803596821596831596839596851596857596861596863596879596899596917596927596929596933596941596963596977596983596987597031597049597053597059597073597127597131597133597137597169597209597221597239597253597263597269597271597301597307597349597353597361597367597383597391597403597407597409597419597433597437597451597473597497597521597523597539597551597559597577597581597589597593597599597613597637597643597659597671597673597677597679597689597697597757597761597767597769597781597803597823597827597833597853597859597869597889597899597901597923597929597967597997598007598049598051598057598079598093598099598123598127598141598151598159598163598187598189598193598219598229598261598303598307598333598363598369598379598387598399598421598427598439598447598457598463598487598489598501598537598541598571598613598643598649598651598657598669598681598687598691598711598721598727598729598777598783598789598799598817598841598853598867598877598883598891598903598931598933598963598967598973598981598987598999599003599009599021599023599069599087599117599143599147599149599153599191599213599231599243599251599273599281599303599309599321599341599353599359599371599383599387599399599407599413599419599429599477599479599491599513599519599537599551599561599591599597599603599611599623599629599657599663599681599693599699599701599713599719599741599759599779599783599803599831599843599857599869599891599899599927599933599939599941599959599983599993599999600011600043600053600071600073600091600101600109600167600169600203600217600221600233600239600241600247600269600283600289600293600307600311600317600319600337600359600361600367600371600401600403600407600421600433600449600451600463600469600487600517600529600557600569600577600601600623600631600641600659600673600689600697600701600703600727600751600791600823600827600833600841600857600877600881600883600889600893600931600947600949600959600961600973600979600983601021601031601037601039601043601061601067601079601093601127601147601187601189601193601201601207601219601231601241601247601259601267601283601291601297601309601313601319601333601339601357601379601397601411601423601439601451601457601487601507601541601543601589601591601607601631601651601669601687601697601717601747601751601759601763601771601801601807601813601819601823601831601849601873601883601889601897601903601943601949601961601969601981602029602033602039602047602057602081602083602087602093602099602111602137602141602143602153602179602197602201602221602227602233602257602267602269602279602297602309602311602317602321602333602341602351602377602383602401602411602431602453602461602477602479602489602501602513602521602543602551602593602597602603602621602627602639602647602677602687602689602711602713602717602729602743602753602759602773602779602801602821602831602839602867602873602887602891602909602929602947602951602971602977602983602999603011603013603023603047603077603091603101603103603131603133603149603173603191603203603209603217603227603257603283603311603319603349603389603391603401603431603443603457603467603487603503603521603523603529603541603553603557603563603569603607603613603623603641603667603679603689603719603731603739603749603761603769603781603791603793603817603821603833603847603851603853603859603881603893603899603901603907603913603917603919603923603931603937603947603949603989604001604007604013604031604057604063604069604073604171604189604223604237604243604249604259604277604291604309604313604319604339604343604349604361604369604379604397604411604427604433604441604477604481604517604529604547604559604579604589604603604609604613604619604649604651604661604697604699604711604727604729604733604753604759604781604787604801604811604819604823604829604837604859604861604867604883604907604931604939604949604957604973604997605009605021605023605039605051605069605071605113605117605123605147605167605173605177605191605221605233605237605239605249605257605261605309605323605329605333605347605369605393605401605411605413605443605471605477605497605503605509605531605533605543605551605573605593605597605599605603605609605617605629605639605641605687605707605719605779605789605809605837605849605861605867605873605879605887605893605909605921605933605947605953605977605987605993606017606029606031606037606041606049606059606077606079606083606091606113606121606131606173606181606223606241606247606251606299606301606311606313606323606341606379606383606413606433606443606449606493606497606503606521606527606539606559606569606581606587606589606607606643606649606653606659606673606721606731606733606737606743606757606791606811606829606833606839606847606857606863606899606913606919606943606959606961606967606971606997607001607003607007607037607043607049607063607067607081607091607093607097607109607127607129607147607151607153607157607163607181607199607213607219607249607253607261607301607303607307607309607319607331607337607339607349607357607363607417607421607423607471607493607517607531607549607573607583607619607627607667607669607681607697607703607721607723607727607741607769607813607819607823607837607843607861607883607889607909607921607931607933607939607951607961607967607991607993608011608029608033608087608089608099608117608123608129608131608147608161608177608191608207608213608269608273608297608299608303608339608347608357608359608369608371608383608389608393608401608411608423608429608431608459608471608483608497608519608521608527608581608591608593608609608611608633608653608659608669608677608693608701608737608743608749608759608767608789608819608831608843608851608857608863608873608887608897608899608903608941608947608953608977608987608989608999609043609047609067609071609079609101609107609113609143609149609163609173609179609199609209609221609227609233609241609253609269609277609283609289609307609313609337609359609361609373609379609391609397609403609407609421609437609443609461609487609503609509609517609527609533609541609571609589609593609599609601609607609613609617609619609641609673609683609701609709609743609751609757609779609781609803609809609821609859609877609887609907609911609913609923609929609979609989609991609997610031610063610081610123610157610163610187610193610199610217610219610229610243610271610279610289610301610327610331610339610391610409610417610429610439610447610457610469610501610523610541610543610553610559610567610579610583610619610633610639610651610661610667610681610699610703610721610733610739610741610763610781610783610787610801610817610823610829610837610843610847610849610867610877610879610891610913610919610921610933610957610969610993611011611027611033611057611069611071611081611101611111611113611131611137611147611189611207611213611257611263611279611293611297611323611333611389611393611411611419611441611449611453611459611467611483611497611531611543611549611551611557611561611587611603611621611641611657611671611693611707611729611753611791611801611803611827611833611837611839611873611879611887611903611921611927611939611951611953\"\r\n    return primes[a:a+b]\r\n    pass\r\n",
  "5a91a7c5fd8c061367000002": "def minimum_steps(arr, n):\r\n    arr = sorted(arr)\r\n    s = 0\r\n    for i, v in enumerate(arr):\r\n    s += v\r\n    if s >= n:\r\n        return i\r\n",
  "5a906c895084d7ed740000c2": "from math import comb\n\n\ndef solve(n):\n    \"\"\" \n See: https://en.wikipedia.org/wiki/Catalan's_triangle \n \"\"\"\n    return comb(n << 1, n) / / (n + 1)\n",
  "5a903c0557c562cd7500026f": "from itertools import combinations\n\n\ndef solve(xs):\n    return sum(1 for a, b, c in combinations(xs, 3) if a - b == b - c)\n",
  "5a90c9ecb171012b47000077": "def digitsum(n):\r\n    return sum(map(int, str(n)))\r\n\r\n    def test_it(a, b):\r\n    return digitsum(a) * digitsum(b)\r\n",
  "5a90bc1fba1bb5aae800007e": "def f(x, k):\r\n    mult(x, 2, k)\r\n\r\n    def g(x, k):\r\n    mult(10, x, lambda x: add(x, 1, k))\r\n\r\n    def main(k):\r\n    g(2, lambda y: f(y, lambda x: show(x, k)))\r\n",
  "5a905c2157c562994900009d": "from operator import mul\nfrom functools import reduce\n\n\ndef product_array(numbers):\n    tot = reduce(mul, numbers)\n    return [tot / / n for n in numbers]\n",
  "5a90f6d457c5624ecc000012": "def next_smaller_pronic(n):\r\n    k = int((- 1 + (1 + 4 * n) * * .5) / 2 - 10 * * - 5)\r\n    return k * (k + 1)\r\n",
  "5a8fbe73373c2e904700008c": "def solve(s):\r\n    return any(s[i + 1:] + s[: i + 1] == s[i:: - 1] + s[: i: - 1] for i in range(len(s)))\r\n",
  "58c5fca35722de3493000081": "class Sandpile:\r\n\r\n    def __init__(self, piles: str = \"000\\n000\\n000\"):\r\n    self . piles = Sandpile . _to_list(piles)\r\n    self . _topple()\r\n\r\n    def __str__(self):\r\n    return Sandpile . _to_str(self . piles)\r\n\r\n    def add(self, sandpile):\r\n    return Sandpile(Sandpile . _to_str([[p1 + p2 for p1, p2 in zip(r1, r2)] for r1, r2 in zip(self . piles, sandpile . piles)]))\r\n\r\n    @ staticmethod\r\n    def _to_list(piles):\r\n    return [[* map(int, row)] for row in piles . splitlines()]\r\n\r\n    @ staticmethod\r\n    def _to_str(piles):\r\n    return '\\n' . join('' . join(map(str, row)) for row in piles)\r\n\r\n    def _topple(self):\r\n    check = True\r\n    while check:\r\n    check = False\r\n    for i, row in enumerate(self . piles):\r\n    for j, x in enumerate(row):\r\n    if x >= 4:\r\n    check = True\r\n    self . piles[i][j] -= 4\r\n    for k, l in ((i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1)):\r\n    if 0 <= k < 3 and 0 <= l < 3:\r\n    self . piles[k][l] += 1\r\n",
  "5950eec3a100d72be100003f": "def handle(func, success, failure, * exceptions):\r\n    class manager:\r\n    def __enter__(self):\r\n    pass\r\n    def __exit__(self, type, value, traceback):\r\n    if isinstance(value, exceptions):\r\n    failure(func, value)\r\n    return True\r\n    return not value\r\n    with manager():\r\n    success(func, func())\r\n",
  "56f1e42f0cd8bc1e6e001713": "class RSA:\r\n    def __init__(self, p, q, e):\r\n    phi = (p - 1) * (q - 1)\r\n    self . n = p * q\r\n    self . e = e\r\n    self . d = pow(e, - 1, phi)\r\n\r\n    def encrypt(self, m):\r\n    return pow(m, self . e, self . n)\r\n\r\n    def decrypt(self, c):\r\n    return pow(c, self . d, self . n)\r\n",
  "5a8cacb2d5261f53ec0031f3": "class Ziggurate:\r\n    board = []\r\n    exit_gates = []\r\n\r\n    def __init__(self, x):\r\n    self . x = x\r\n    self . y = 0\r\n    self . axis_flag = 1\r\n    self . direction = 1\r\n    self . exit = None\r\n    def travers_ziggurate(self):\r\n    while self . is_exit(len(self . board), self . x, self . y):\r\n    field = self . board[self . x][self . y]\r\n    if field is not None:\r\n    self . pass_switcher(field)\r\n    Ziggurate . shift_switcher(self . x, self . y)\r\n    self . exit = [self . x, self . y] if self . y + \\\r\n        self . direction * self . axis_flag >= 0 else None\r\n    self . x += self . direction * (1 - self . axis_flag)\r\n    self . y += self . direction * self . axis_flag\r\n    Ziggurate . add_exit_gate(self . exit)\r\n    return self . exit\r\n    def pass_switcher(self, state):\r\n    \"\"\"Set direction of explorer's movement (forward/backward).\"\"\"\r\n    self . axis_flag = 0 if self . axis_flag else 1\r\n    self . direction = - self . direction if state == 'B' else self . direction\r\n    @ staticmethod\r\n    def is_exit(n, x, y):\r\n    \"\"\"Check if explorer reaches exit gate.\"\"\"\r\n    return True if (0 <= x < n) and (0 <= y < n) else False\r\n    @ classmethod\r\n    def shift_switcher(cls, x, y):\r\n    \"\"\"Change state of switcher ('A'/'B').\"\"\"\r\n    item = cls . board[x][y]\r\n    cls . board[x][y] = 'A' if item == 'B' else 'B'\r\n    return cls . board\r\n    @ classmethod\r\n    def set_board(cls, board):\r\n    cls . board = [\r\n        [column if column != ' ' else None for column in raw]\r\n        for raw in board\r\n    ]\r\n    return cls . board\r\n    @ classmethod\r\n    def add_exit_gate(cls, exit_gate):\r\n    cls . exit_gates . append(exit_gate)\r\n\r\n    def ride_of_fortune(artifact, explorers):\r\n    Ziggurate . set_board(artifact)\r\n    return [\r\n        Ziggurate(explorer_gate). travers_ziggurate()\r\n        for explorer_gate in explorers\r\n    ]\r\n",
  "584acd331b8b758fe700000d": "MONTH = ['January', 'February', 'March', 'April', 'May', 'June',\r\n         'July', 'August', 'September', 'October', 'November', 'December']\r\n\r\n\r\ndef check_challenge(pledged, current, month):\r\n    d, p = divmod(pledged, 12)\r\n    plg = [d + 1] * p + [d] * (12 - p)\r\n    diff = current - sum(plg[: MONTH . index(month)])\r\n\r\n    return ('Challenge is completed.' if current >= pledged else 'You are on track.' if diff == 0 or month == 'January' else\r\n            'You are {} ahead of schedule!' . format(diff) if diff > 0 else 'You are {} behind schedule.' . format(- diff))\r\n",
  "5a8d63930025e92f4c000086": "e = [1, 2]\r\nfor n in range(1, 10 * * 4):\r\n    for f in 1, 2 * n, 1:\r\n    e . append(f * e[- 1] + e[- 2])\r\n    def convergents_of_e(n): return sum(map(int, str(e[n])))\r\n",
  "590363d57e16c9b3c0000014": "def order(matrix):\r\n    matrix = [sorted(row) for row in matrix]\r\n    matrix = [sorted(row) for row in zip(* matrix)]\r\n    return list(zip(* matrix))\r\n",
  "5a8d2bf60025e9163c0000bc": "from collections import Counter\r\n\r\n\r\ndef solve(a):\r\n    c = Counter(a)\r\n    return sorted(a, key=lambda k: (- c[k], k))\r\n",
  "5a8d1c82373c2e099d0000ac": "def solve(s, a, b):\r\n    return s[: a] + s[a: b + 1][:: - 1] + s[b + 1:]\r\n",
  "59167d51c63c18af32000055": "import re\r\n\r\n\r\ndef find_longest_substr(s):\r\n    m = max(re . finditer(r'([A-Za-z0-9])\\1*', s),\r\n            key=lambda m: m . end() - m . start())\r\n    return [str(ord(m . group(1))), m . end() - m . start(), [m . start(), m . end() - 1]]\r\n",
  "5a8c1b06fd5777d4c00000dd": "def diagonal(m):\r\n\t P = sum(m[i][i] for i in range(len(m)))\r\n\t S = sum(m[i][- i - 1] for i in range(len(m)))\r\n\t if P > S:\r\n\t\t return \"Principal Diagonal win!\"\r\n elif S > P :\r\n\t\t return \"Secondary Diagonal win!\" \r\n else :\r\n\t\t return 'Draw!'",
  "5a87449ab1710171300000fd": "def tidyNumber(n):\r\n    s = list(str(n))\r\n    return s == sorted(s)\r\n",
  "5a651865fd56cb55760000e0": "def array_leaders(numbers):\r\n    return [n for (i, n) in enumerate(numbers) if n > sum(numbers[(i + 1):])]\r\n",
  "584c692db32364474000000a": "def simple_sum(x, y):\r\n    while x:\r\n    x, y = ((x & y) << 1), (x ^ y)\r\n    return y\r\n",
  "584d9a8fd2d637cccf00017a": "def schedule(teams):\r\n    if len(teams) % 2:\r\n        raise ValueError\r\n    season = []\r\n    for _ in range(len(teams) - 1):\r\n    season . append([(teams[i], teams[- 1 - i]) if i or len(season) % 2 else (teams[- 1 - i], teams[i]) for i in range(len(teams) / / 2)])\r\n    teams = [teams[0], teams[- 1]] + teams[1: - 1]\r\n\r\n    return season\r\n",
  "5a8bcd980025e99381000099": "def square_up(n):\r\n    return [j if j <= i else 0 for i in range(1, n + 1) for j in range(n, 0, - 1)]\r\n",
  "59de9f8ff703c4891900005c": "from copy import deepcopy\r\n\r\n\r\nclass Go:\r\n\r\n    MOVES = [(1, 0), (- 1, 0), (0, 1), (0, - 1)]\r\n    SYMBOLS = \"xo\"\r\n    HANDICAP = {(9, 9): ['7G', '3C', '3G', '7C', '5E'],\r\n                (13, 13): ['10K', '4D', '4K', '10D', '7G', '7D', '7K', '10G', '4G'],\r\n                (19, 19): ['16Q', '4D', '4Q', '16D', '10K', '10D', '10Q', '16K', '4K']}\r\n\r\n    def __init__(self, * args):\r\n    if not all(0 < v < 26 for v in args):\r\n        raise ValueError(\"This is sooooo wrong... :p\")\r\n    args = args * 2\r\n    self . lenX, self . lenY = args[: 2][:]\r\n    self . pos = {str(i) + chr(65 + j + (j >= 8)): (args[0] - i, j) for i in range(1, args[0] + 1) for j in range(args[1])}\r\n    self . p, self . archive, self . board, self . hasHandi = self . initializer(\r\n        * args)\r\n\r\n    @ property\r\n    def size(self): return {z: v for z, v in zip(\r\n        [\"height\", \"width\"], (self . lenX, self . lenY))}\r\n\r\n    @ property\r\n    def turn(self): return \"white\" if self . p else \"black\"\r\n\r\n    def initializer(self, * args): return 0, [], [['.'] * args[1]\r\n                                                  for _ in range(args[0])], False\r\n\r\n    def reset(self): self . p, self . archive, self . board, self . hasHandi = self . initializer(\r\n        self . lenX, self . lenY)\r\n\r\n    # raise an exception if invalid position\r\n    def get_position(\r\n        self, pos): x, y = self . pos[pos]\r\n    return self . board[x][y]\r\n\r\n    def updatePlayer(self): self . p ^= 1\r\n    def pass_turn(self):\r\n    self . archive . append(deepcopy(self . board))\r\n    self . updatePlayer()\r\n\r\n    def rollback(self, n=1):\r\n    for _ in range(n):\r\n    self . board = self . archive . pop()\r\n    self . updatePlayer()\r\n\r\n    def rollInvalidMove_Raise(self, msg):\r\n    self . rollback()\r\n    self . updatePlayer()  # Restore current player if invalid move\r\n    raise ValueError(msg)\r\n\r\n    def handicap_stones(self, n):\r\n    if self . hasHandi or self . archive or self . p:\r\n        raise ValueError(\"No, I wont...\")\r\n    self . hasHandi = True\r\n    # raise an exception if invalid size of the board\r\n    pos = iter(self . HANDICAP[(self . lenX, self . lenY)])\r\n    for _ in range(n):\r\n        # raise an exception of too many number of handicap stones asked for\r\n    x, y = self . pos[next(pos)]\r\n    self . board[x][y] = self . SYMBOLS[self . p]\r\n\r\n    def move(self, * moves):\r\n\r\n    for m in moves:\r\n\r\n    self . archive . append(deepcopy(self . board))  # Archive for rollback\r\n    x, y = self . pos . get(m, (- 1, - 1))\r\n    if (x, y) == (- 1, - 1) or self . board[x][y] != '.':\r\n    self . rollInvalidMove_Raise([\"Reproduction of stones does not work... (at {})\" . format(m),\r\n                                  \"Play in the board, damn you!!\"][(x, y) == (- 1, - 1)])\r\n\r\n    # Retrieve player and opponent symbols\r\n    player, opp = self . SYMBOLS[::(- 1) * * (2 * * self . p ^ 1)]\r\n    self . board[x][y] = player  # Update the board\r\n    around = [(x + dx, y + dy) for dx, dy in self . MOVES\r\n              if 0 <= x + dx < self . lenX and 0 <= y + dy < self . lenY\r\n              and self . board[x + dx][y + dy] != '.']\r\n\r\n    # {\"x\": list of tuples [(set of (x,y), liberty count), ...], \"o\": ...}\r\n    grpsAround = {player: [], opp: []}\r\n    for a, b in around + [(x, y)]:  # Extract all the groups (opponent AND player) around the concerned position: (sets of positions, liberties count), as many lists of tuples that there are groups of stones\r\n    c = self . board[a][b]\r\n    # Update the groups and lib value only if the current seed position is not already in a previously found group\r\n    if not any((a, b) in neighGrp for neighGrp in grpsAround[c]):\r\n    grpsAround[c]. append(self . floodLib(a, b, c))\r\n\r\n    isSuicidal = grpsAround[player][0][1] == 0\r\n    isCapturing = any(lib == 0 for _, lib in grpsAround[opp])\r\n    if isSuicidal and not isCapturing:  # Forbid self-capturing (suicide)\r\n    self . rollInvalidMove_Raise(\"You definitely have suicidal tendances\")\r\n\r\n    for grp, lib in grpsAround[opp]:\r\n    if lib == 0:  # Handle captures of opponent's stones\r\n    for a, b in grp:\r\n        self . board[a][b] = '.'  # Remove opponent's stone\r\n    # Check for KO rule\r\n    if len(grp) == 1 and len(self . archive) > 2 and self . board == self . archive[- 2]:\r\n    self . rollInvalidMove_Raise(\"You're knocked out! Again!\")\r\n\r\n    self . updatePlayer()  # Change the current player\r\n    def floodLib(self, x, y, c):  # Floof-fill the board, retrieving all the pieces of the same group and counting its liberties at the same time\r\n    pos = (x, y)\r\n    seens, q, grp, lib = {pos}, {pos}, {pos}, 0\r\n    while q:\r\n    x, y = q . pop()\r\n    for dx, dy in self . MOVES:\r\n    a, b = pos = x + dx, y + dy\r\n    if 0 <= a < self . lenX and 0 <= b < self . lenY and pos not in seens:\r\n    if self . board[a][b] == '.':\r\n        lib += 1\r\n    elif self . board[a][b] == c:\r\n        grp . add(pos)\r\n        q . add(pos)\r\n    seens . add(pos)\r\n    return grp, lib\r\n",
  "5a8897d4ba1bb5f266000057": "def make_2d_list(head, row, col):\r\n    return [[head + c + r * col for c in range(col)] for r in range(row)]\r\n",
  "5694b4f9a01ae685c400002f": "import re\r\n\r\n\r\ndef calc_poly(coefs, x):\r\n    coefs = coefs[:: - 1]\r\n    res = sum(x * * i * c for i, c in enumerate(coefs))\r\n    poly = ' + ' . join([\"{}*x^{}\" . format(c, i)\r\n                        for i, c in enumerate(coefs) if c][:: - 1])\r\n    poly = re . sub(r'\\*x\\^0|\\^1\\b|\\b1\\*(?!x\\^0)',\r\n                    '', poly). replace(\"+ -\", \"- \")\r\n    return \"For {} with x = {} the value is {}\" . format(poly, x, res)\r\n",
  "5a86073fb17101e453000258": "def sort_emotions(arr, order):\r\n    return sorted(arr, key=[':D', ':)', ':|', ':(', 'T_T']. index, reverse=not order)\r\n",
  "5a77f76bfd5777c6c300001c": "import numpy as np\r\n\r\n\r\ndef five_by_2n(n):\r\n    x = np . array([[1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 1, 1, 1, 2, 2, 1], [1, 1, 2, 1, 1, 1, 2, 1], [1, 1, 1, 2, 1, 1, 2, 1], [\r\n                   1, 1, 1, 1, 2, 1, 2, 2], [1, 2, 1, 1, 2, 1, 6, 1], [1, 2, 1, 1, 2, 1, 6, 1], [1, 2, 1, 1, 2, 1, 6, 1]])\r\n    y = np . array([1, 1, 1, 1, 1, 1, 1, 1])\r\n    z = y\r\n    for i in range(n - 1):\r\n    z = np . mod(x @ z, 12345787 * y)\r\n    return z . T @ y % 12345787\r\n",
  "5a77f725b17101edd5000020": "def shortest_time(times):\r\n    times . sort()\r\n    cost = 0\r\n    while len(times) > 3:\r\n    t1 = times[0] + 2 * times[1] + times[- 1]\r\n    t2 = 2 * times[0] + times . pop() + times . pop()\r\n    cost += min(t1, t2)\r\n    cost += sum(times) - sum(times[: - 1]) * (len(times) < 3)\r\n    return cost\r\n",
  "5a12755832b8b956a9000133": "import re\r\n\r\n\r\nclass RSUProgram:\r\n\r\n    ID_PATT_BRA = r'[PpRFL)](?:0|[1-9]\\d*)|[RFLq()]'\r\n    WHITE_COMMENTS = r'\\s+|//.*?(?:\\n|$)|/\\*.*?\\*/'\r\n    TOKENIZER = re . compile(r'|' . join(\r\n        [WHITE_COMMENTS, ID_PATT_BRA, r'.']), flags=re . DOTALL)\r\n    VALID_TOKEN = re . compile(ID_PATT_BRA)\r\n    IS_NOT_TOKEN = re . compile(WHITE_COMMENTS, flags=re . DOTALL)\r\n    MOVES = ((0, 1), (1, 0), (0, - 1), (- 1, 0))\r\n\r\n    def __init__(self, prog): self . source = prog\r\n\r\n    def convert_to_raw(self, tokens): return [\r\n        c for c, r in self . compileCode(tokens) for _ in range(r)]\r\n    def execute(self): return self . execute_raw(\r\n        '', self . compileCode(self . get_tokens()))\r\n\r\n    def compileCode(self, tokens):\r\n    scope = {'parent': None, 'cmd': ()}\r\n    return self . applyPatterns(self . parseCode(iter(tokens), scope), scope, 0)\r\n\r\n    def get_tokens(self):\r\n    tokens = []\r\n    for tok in self . TOKENIZER . findall(self . source):\r\n    if self . IS_NOT_TOKEN . match(tok):\r\n        continue\r\n    elif self . VALID_TOKEN . match(tok):\r\n        tokens . append(tok)\r\n    elif tok:\r\n        raise Exception(\"Invalid expression found: {}\" . format(tok))\r\n    return tokens\r\n    def execute_raw(self, cmds, todo=None):\r\n    pos, seens, iDir = (0, 0), {(0, 0)}, 0\r\n    # OVERRIDE todo/cmds TO BYPASS SPECIFICATIONS...\r\n    for s, r in todo or ((c, 1) for c in cmds):\r\n    if s == 'F':\r\n    for _ in range(r):\r\n    pos = tuple(z + dz for z, dz in zip(pos, self . MOVES[iDir]))\r\n    seens . add(pos)\r\n    else:\r\n    iDir = (iDir + r * (- 1) * * (s == 'L')) % len(self . MOVES)\r\n\r\n    miX, maX = (f(x for x, _ in seens) for f in (min, max))\r\n    miY, maY = (f(y for _, y in seens) for f in (min, max))\r\n\r\n    return '\\r\\n' . join('' . join('*' if (x, y) in seens else ' ' for y in range(miY, maY + 1))\r\n                         for x in range(miX, maX + 1))\r\n\r\n    def parseCode(self, tokIter, scope, inPattern=0):\r\n    cmds = [[]]\r\n    for tok in tokIter:\r\n    cmd, r = tok[0], int(tok[1:] or '1')\r\n    isRepeat = cmds[- 1] and cmds[- 1][- 1] and cmds[- 1][- 1][0] == cmd\r\n    if cmd in 'pq' and len(cmds) > 1:\r\n        raise Exception(\"pattern definition inside brackets\")\r\n\r\n    if cmd == 'p':\r\n    name = tok . upper()\r\n    if name in scope:\r\n        raise Exception(\"Invalid pattern: cannot define multiple patterns with the same name at the same level: {}\\nScope: {}\\n\\n{}\" . format(\r\n            name, scope, self . source))\r\n    else:\r\n    freshScope = {'parent': scope, 'cmds': ()}\r\n    scope[name] = freshScope\r\n    freshScope['cmds'] = self . parseCode(tokIter, freshScope, 1)\r\n\r\n    elif cmd == 'q':\r\n    if not inPattern:\r\n        raise Exception('unopened pattern definition')\r\n    inPattern = 0\r\n    break\r\n    elif cmd == '(':\r\n        cmds . append([])\r\n    elif cmd == ')':\r\n        lst = cmds . pop()\r\n        cmds[- 1]. extend(lst * r)\r\n    elif isRepeat:\r\n        cmds[- 1][- 1] = (cmd, cmds[- 1][- 1][1] + r)\r\n    else:\r\n        cmds[- 1]. append((tok, 1) if cmd == 'P' else (cmd, r))\r\n\r\n    if inPattern:\r\n        raise Exception(\"unclosed pattern definition, last token: \" + tok)\r\n    if len(cmds) > 1:\r\n        raise Exception(\"unclosed brackets, last token: \" + tok)\r\n    return cmds[0]\r\n\r\n    def applyPatterns(self, rawCmds, scope, depth):\r\n    if depth == 20:\r\n        raise Exception(\"Stack overflow\")\r\n    lst = []\r\n    for c, r in rawCmds:\r\n    if c[0] != 'P':\r\n        lst . append((c, r))\r\n    else:\r\n    pattern, nextScope = self . reachPattern(scope, c)\r\n    lst . extend(self . applyPatterns(pattern, nextScope, depth + 1))\r\n    return lst\r\n    def reachPattern(self, scope, name):\r\n    calledP = scope . get(name)\r\n    parent = scope['parent']\r\n    if calledP is not None:\r\n        return calledP['cmds'], calledP\r\n    if not parent:\r\n        raise Exception(\"Unknown pattern: \" + name)\r\n    return self . reachPattern(parent, name)\r\n",
  "5a8328fefd57777fa3000072": "from math import ceil\r\n\r\n\r\ndef will_it_balance(stick, gnd):\r\n    gravPt = sum(v * i for i, v in enumerate(stick)) / sum(stick)\r\n    return gnd[int(gravPt)] == gnd[ceil(gravPt)] == 1\r\n",
  "5a81b78d4a6b344638000183": "SUFFIXES = {'a': ['o', 'as', 'a', 'amos', 'ais', 'an'],\r\n            'e': ['o', 'es', 'e', 'emos', 'eis', 'en'],\r\n            'i': ['o', 'es', 'e', 'imos', 'is', 'en']}\r\n\r\n\r\ndef conjugate(verb):\r\n    return {verb: [verb[: - 2] + s for s in SUFFIXES[verb[- 2]]]}\r\n",
  "52a401f1a65172ce8f00008d": "def score_breakdowns(score):\r\n    ways = []\r\n    for s in range(0, score + 1, 2):\r\n    for fg in range(0, score - s + 1, 3):\r\n    for td in range(0, score - s - fg + 1, 6):\r\n    for tdep in range(0, score - s - fg - td + 1, 7):\r\n    for tdtp in range(0, score - s - fg - td - tdep + 1, 8):\r\n    if s + fg + td + tdep + tdtp == score:\r\n    ways . append(dict(s=s / / 2, fg=fg / / 3, td=td / / 6 + tdep / / 7 + tdtp / / 8, ep=tdep / / 7, tp=tdtp / / 8))\r\n    return ways\r\n",
  "55eab8c5a15df752cc00002b": "def tree_amplitude(node, path=[]):\r\n    if not node:\r\n    return max(path) - min(path) if path else 0\r\n    left = tree_amplitude(node . left, path + [node . data])\r\n    right = tree_amplitude(node . right, path + [node . data])\r\n    return max(left, right)\r\n",
  "59d0ee709f0cbcf65400003b": "from collections import defaultdict\r\nimport re\r\nPATTERN = re . compile(r'(.+?), (.+?), (.+?(?= [A-Z]{2})) ([A-Z]{2})')\r\nSTATES = {\"CA\": \"California\",\r\n          \"MA\": \"Massachusetts\",\r\n          \"OK\": \"Oklahoma\",\r\n          \"PA\": \"Pennsylvania\",\r\n          \"VA\": \"Virginia\",\r\n          \"AZ\": \"Arizona\",\r\n          \"ID\": \"Idaho\",\r\n          \"IN\": \"Indiana\"}\r\n\r\n\r\ndef by_state(s):\r\n    dct = defaultdict(list)\r\n    for name, addrs, city, state in PATTERN . findall(s):\r\n    dct[STATES[state]]. append(\"..... {} {} {} {}\" . format(\r\n        name, addrs, city, STATES[state]))\r\n\r\n    return '\\r\\n ' . join(\"{}\\r\\n{}\" . format(state, '\\r\\n' . join(sorted(lst))) for state, lst in sorted(dct . items()))\r\n",
  "5791bdba3467db61ff000040": "def calc(M, n):\r\n\r\n    def mulM(a, b, S=len(M)):\r\n    return [[sum(a[i][x] * b[x][j] for x in range(S))\r\n             for j in range(S)] for i in range(S)]\r\n\r\n    def quick(m, n):\r\n    if n < 2:\r\n        return m\r\n    out = quick(mulM(m, m), n >> 1)\r\n    if n & 1:\r\n        out = mulM(out, m)\r\n    return out\r\n    return quick(M, n)\r\n",
  "5a7f58c00025e917f30000f1": "import re\r\nreg = re . compile('a*b*c*d*e*f*g*h*i*j*k*l*m*n*o*p*q*r*s*t*u*v*w*x*y*z*')\r\n\r\n\r\ndef longest(s):\r\n    return max(reg . findall(s), key=len)\r\n",
  "5a805631ba1bb55b0c0000b8": "def case_sensitive(s):\r\n    return [s . islower() or not s, [c for c in s if c . isupper()]]\r\n",
  "5a8059b1fd577709860000f6": "def alphabetic(s):\r\n    return sorted(s) == list(s)\r\n",
  "5a5cdb07fd56cbdd3c00005b": "from collections import Counter\r\n\r\n\r\ndef find_dups_miss(arr):\r\n    mi, ma, c = min(arr), max(arr), Counter(arr)\r\n    duplicates = sorted(n for n in c if c[n] > 1)\r\n    return [ma * (ma + 1) / / 2 - mi * (mi - 1) / / 2 - sum(c), duplicates]\r\n",
  "5a7e6bd576c0e2f27d00237a": "from itertools import groupby\r\n\r\n\r\ndef is_reoccuring(xs):\r\n    cs = [k for k, _ in groupby(xs)]\r\n    return len(cs) != len(set(cs))\r\n",
  "5a662a02e626c54e87000123": "def extra_perfect(n):\r\n    return list(range(1, n + 1, 2))\r\n",
  "5a08b22b32b8b96f4700001c": "from math import log\r\n\r\n\r\ndef phi(n):\r\n    r, i = n, 2\r\n    while i * i <= n:\r\n    if n % i == 0:\r\n    r = r / / i * (i - 1)\r\n    while n % i == 0:\r\n        n / /= i\r\n    i += 1\r\n    if n > 1:\r\n        r = r / / n * (n - 1)\r\n    return r\r\n    def _tower(base, h, m):\r\n    if h < 2 or m == 1:\r\n        return pow(base, h, m)\r\n    p = phi(m)\r\n    return pow(base, p + tower(base, h - 1, p), m)\r\n\r\n    def tower(base, h, m):\r\n    res = 1\r\n    for _ in range(h):\r\n    if res * log(base) > log(m):\r\n        return _tower(base, h, m)\r\n    res = base * * res\r\n    return res % m\r\n",
  "5a26073ce1ce0e3c01000023": "def traffic_jam(road, sides):\r\n    X = road . index(\"X\")\r\n    main = list(road[: X + 1])\r\n\r\n    for i in reversed(range(min(X, len(sides)))):\r\n    tmp = []\r\n    for j in range(1, min(len(main) - i - 1, len(sides[i])) + 1):\r\n    tmp . append(sides[i][- j])\r\n    tmp . append(main[i + j])\r\n    main[i + 1: i + len(tmp) / / 2 + 1] = tmp\r\n    return '' . join(main)\r\n",
  "5a7b3d08fd5777bf6a000121": "def remove_nth_element(lst, n):\r\n    lst_copy = lst . copy()\r\n    del lst_copy[n]\r\n    return lst_copy\r\n",
  "590ac6b9be4dff49b0000042": "def convert(i):\r\n    t = round(i * 3600)\r\n    d, m, s = t / / 3600, t % 3600 / / 60, t % 60\r\n    return [d, m, s] if s else [d, m] if m else [d]\r\n",
  "59c68ea2aeb2843e18000109": "def amort(rate, bal, term, num_payments):\r\n    monthlyRate = rate / (12 * 100)\r\n    c = bal * (monthlyRate * (1 + monthlyRate) * * term) / (((1 + monthlyRate) * * term) - 1)\r\n    newBalance = bal\r\n    for i in range(num_payments):\r\n    interest = newBalance * monthlyRate\r\n    princ = c - interest\r\n    newBalance = newBalance - princ\r\n    return 'num_payment %s c %.0f princ %.0f int %.0f balance %.0f' % (num_payments, c, princ, interest, newBalance)\r\n",
  "5a793fdbfd8c06d07f0000d5": "def solve(s):\r\n    s1 = s[:: - 1]\r\n    s2 = ''\r\n    for i in s1:\r\n    if i . isalpha():\r\n    s2 += i\r\n    elif i . isdigit():\r\n    s2 = s2 * int(i)\r\n    return s2[:: - 1]\r\n",
  "5a7893ef0025e9eb50000013": "def max_gap(numbers):\r\n    lst = sorted(numbers)\r\n    return max(b - a for a, b in zip(lst, lst[1:]))\r\n",
  "5a752a0b0136a1266c0000b5": "def isTree(matrix):\r\n    visited_nodes = set([0])\r\n    crossed_edges = set()\r\n    agenda = [0]\r\n\r\n    while agenda:\r\n    node = agenda . pop()\r\n    for i in matrix[node]:\r\n    if (node, i) in crossed_edges:\r\n        continue\r\n    if i in visited_nodes:\r\n        return False\r\n    agenda . append(i)\r\n    crossed_edges . add((i, node))\r\n    visited_nodes . add(i)\r\n\r\n    return len(visited_nodes) == len(matrix)\r\n",
  "5a4ff3c5fd56cbaf9800003e": "def without_last(lst):\r\n    return lst[: - 1]\r\n",
  "5a667236145c462103000091": "__import__('sys'). setrecursionlimit(10000)\r\n\r\n\r\ndef square_sums(n):\r\n    squares = [sq * sq for sq in range(2, int((n * 2 - 1) * * .5) + 1)]\r\n    Graph = {i: [j - i for j in squares if 0 < j - i <= n and j - i != i]\r\n             for i in range(1, n + 1)}\r\n\r\n    def get_result(G, res, ind):\r\n    if len(res) == n:\r\n        return res\r\n    for next_ind in sorted((G . keys() if ind == 0 else G[ind]), key=lambda x: len(G[x])):\r\n\r\n    for i in G[next_ind]:\r\n    G[i]. remove(next_ind)\r\n    res . append(next_ind)\r\n\r\n    next_result = get_result(G, res, next_ind)\r\n    if next_result != False:\r\n        return next_result\r\n    for i in G[next_ind]:\r\n    G[i]. append(next_ind)\r\n    res . pop()\r\n\r\n    return False\r\n    return get_result(Graph, [], 0)\r\n",
  "5a77e4af373c2edf72000085": "def a1_thick_and_hearty(a1, a2):\r\n    s = set(a1) & set(a2)\r\n    return set(n for n in s if any(m != n and m in s for m in [len(a1) + n, abs(len(a1) - n), len(a2) + n, abs(len(a2) - n)]))\r\n",
  "5a7778790136a132a00000c1": "def single_digit(n):\r\n    while n > 9:\r\n    n = bin(n). count(\"1\")\r\n    return n\r\n",
  "5a7671e6373c2e8c3e00008d": "def max_x(f):\r\n    tau = (5 * * .5 - 1) / 2\r\n    a, b, c, d, coins = 0, 1, 1 - tau, tau, 0\r\n    fc, fd = f(c), f(d)\r\n    for _ in range(28):\r\n    if fc >= fd:\r\n    a, b, c, d = a, d, a + (d - a) * (1 - tau), c\r\n    fc, fd = f(c), fc\r\n    else:\r\n    a, b, c, d = c, b, d, c + (b - c) * (tau)\r\n    fc, fd = fd, f(d)\r\n\r\n    return (a + b) / 2\r\n",
  "5a74d00c0025e979c9000145": "def getVertex(a, b, c):\r\n    h = b / (- 2 * a)\r\n    k = c - (a * h * * 2)\r\n    return [h, k]\r\n",
  "5858326b994864753d0000d1": "class SimTime:\n\n    def __init__(self):\n    self . sim_time = 0\n    self . real_time = 0\n    self . speed = 1\n    def get(self):\n    return self . sim_time\n    def set_speed(self, new_speed):\n    self . speed = new_speed\n    def update(self, current_realtime):\n    assert current_realtime >= self . real_time\n    self . sim_time += (current_realtime - self . real_time) * self . speed\n    self . real_time = current_realtime\n",
  "590e4940defcf1751c000009": "def is_keith_number(n):\n    numList = [int(i) for i in str(n)]  # int array\n    if len(numList) > 1:  # min 2 digits\n    itr = 0\n    while numList[0] <= n:\n        # replace array entries by its sum:\n    numList[itr % len(numList)] = sum(numList)\n    itr += 1\n    if n in numList:  # keith-condition\n    return itr\n    return False\n",
  "5779474882d7d0a10f000005": "def tab_to_spaces(text):\r\n    return text . expandtabs(4)\r\n",
  "5426006a60d777c556001aad": "def dithering(width, height):\r\n    size = 1\r\n    while width > size or height > size:\r\n    size *= 2\r\n    if size == 1:\r\n    yield (0, 0)\r\n    else:\r\n    for (x, y) in dithering(size / 2, size / 2):\r\n    for t in ((x, y), (x + size / 2, y + size / 2), (x + size / 2, y), (x, y + size / 2)):\r\n    if t[0] < width and t[1] < height:\r\n    yield t\r\n",
  "5665a6a07b5afe0aba00003a": "import re\r\n\r\n\r\ndef atm(value):\r\n    match = re . fullmatch('([A-Z]+) ?(\\d+)|(\\d+) ?([A-Z]+)', value . upper())\r\n    currency = match . group(1) or match . group(4)\r\n    value = int(match . group(2) or match . group(3))\r\n    if currency not in VALUES:\r\n    return \"Sorry, have no {}.\" . format(currency)\r\n    if value % VALUES[currency][0]:\r\n    return \"Can't do {} {}. Value must be divisible by {}!\" . format(value, currency, VALUES[currency][0])\r\n    result = []\r\n    for v in VALUES[currency][:: - 1]:\r\n    if value and v <= value:\r\n    result . append(\"{} * {} {}\" . format(value / / v, v, currency))\r\n    value %= v\r\n    return \", \" . join(result)\r\n",
  "58177df1e7f457b89d000327": "import math\r\n\r\n\r\ndef calculate_retirement(P, FV):\r\n    rates = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0}\r\n    for i in range(1, 7):\r\n    r = i / 100\r\n    rates[i] = math . ceil(math . log(\r\n        1 + (FV * r) / (P * r + P)) / math . log(1 + r))\r\n    return rates\r\n",
  "5a731b36e19d14400f000c19": "def decode_pass(pass_list, bits):\r\n    s = \"\" . join(chr(int(x, 2)) for x in bits . split())\r\n    return s if s in pass_list else False\r\n",
  "5a72fd224a6b3463b00000a0": "from math import modf\r\n\r\n\r\ndef dms(number: float, cardinal_dirs: str) - > str:\r\n    rem, D = modf(abs(number))\r\n    rem, M = modf(rem * 60)\r\n    S = rem * 60\r\n    return f' { D : 03.0 f } * { M : 02.0 f } \\' { S : 06.3 f } \" { cardinal_dirs [ number < 0 ]} '\r\n    def convert_to_dms(latitude: str, longitude: str) - > tuple:\r\n    return f' { dms ( float ( latitude ), \"NS\" )} ', f' { dms ( float ( longitude ), \"EW\" )} '\r\n",
  "57f171f618e9fa58ef000083": "from itertools import product\r\nimport re\r\nKEY = [a + b for a, b in product(\"ADFGX\", repeat=2)]\r\n\r\n\r\ndef adfgx_encrypt(plaintext, square):\r\n    d = dict(zip(square, KEY))\r\n    oddity = d['i'] if 'i' in d else d['j']\r\n    return '' . join(d . get(c, oddity) for c in plaintext)\r\n\r\n    def adfgx_decrypt(ciphertext, square):\r\n    d = dict(zip(KEY, square))\r\n    IJkey = [k for k, v in d . items() if v in 'ij']. pop()\r\n\r\n    return '' . join(d . get(c, d[IJkey]) for c in re . findall(r'.{2}', ciphertext))\r\n",
  "5a71939d373c2e634200008e": "def solve(s):\r\n    it = reversed(s . replace(' ', ''))\r\n    return '' . join(c if c == ' ' else next(it) for c in s)\r\n",
  "52cdc1b015db27c484000031": "def nQueen(n):\r\n    if n == 2 or n == 3:\r\n        return []\r\n    r, odds, evens = n % 6, list(range(1, n, 2)), list(range(0, n, 2))\r\n    if r == 2:\r\n    evens[: 2] = evens[: 2][:: - 1]\r\n    evens . append(evens . pop(2))\r\n    if r == 3:\r\n    odds . append(odds . pop(0))\r\n    evens . extend(evens[: 2])\r\n    del evens[: 2]\r\n    return odds + evens\r\n",
  "5680e56f4797a55076000044": "from itertools import groupby\r\nfrom operator import itemgetter\r\n_LAYOUT = (' 0', '1', 'ABC2', 'DEF3', 'GHI4',\r\n           'JKL5', 'MNO6', 'PQRS7', 'TUV8', 'WXYZ9')\r\n_KEYMAP = {c: str(i) * j for i, key in enumerate(_LAYOUT)\r\n           for j, c in enumerate(key, 1)}\r\n\r\n\r\ndef sequence(phrase):\r\n    presses = (_KEYMAP . get(c . upper(), c) for c in phrase)\r\n    return '' . join('p' . join(group) for __, group in groupby(presses, key=itemgetter(0)))\r\n",
  "561d54055e399e2f62000045": "def find_mult10_SF(n):\r\n    return 16 * * n * (81 * * n + 9) / / 24\r\n",
  "594adadee075005308000122": "def even_and_odd(n):\r\n    ne = \"\"\r\n    no = \"\"\r\n    for x in str(n):\r\n    if int(x) % 2 == 0:\r\n    ne += x\r\n    else:\r\n    no += x\r\n    if len(ne) == 0:\r\n    ne = \"0\"\r\n    if len(no) == 0:\r\n    no = \"0\"\r\n    return (int(ne), int(no))\r\n",
  "5a68ffe3e626c5e85700002d": "def old_lady_swallows(animals: list) - > list:\r\n    ord_an = [None, 'fly', 'spider', 'bird',\r\n              'cat', 'dog', 'goat', 'cow', 'horse', None]\r\n    res = []\r\n\r\n    for a in animals:\r\n    ind_a = ord_an . index(a)\r\n    res = [x for x in res if x != ord_an[ind_a - 1]]\r\n    if ord_an[ind_a + 1] not in res:\r\n    res . append(a)\r\n    if a == 'horse':\r\n    break\r\n    return res\r\n",
  "5a3af5b1ee1aaeabfe000084": "def one_square(n):\n    return round(n * * .5) * * 2 == n\n    def two_squares(n):\n    while n % 2 == 0:\n        n / /= 2\n    p = 3\n    while p * p <= n:\n    while n % (p * p) == 0:\n    n / /= p * p\n    while n % p == 0:\n    if p % 4 == 3:\n        return False\n    n / /= p\n    p += 2\n    return n % 4 == 1\n    def three_squares(n):\n    while n % 4 == 0:\n        n / /= 4\n    return n % 8 != 7\n    def sum_of_squares(n):\n    if one_square(n):\n        return 1\n    if two_squares(n):\n        return 2\n    if three_squares(n):\n        return 3\n    return 4\n",
  "5a63948acadebff56f000018": "from functools import reduce\nfrom operator import mul\nfrom heapq import nlargest\n\n\ndef maxProduct(lst, n):\n    return reduce(mul, nlargest(n, lst))\n",
  "5693239fb761dc8670000001": "def find_additive_numbers(num):\r\n    for k in range(2, len(num)):\r\n    for j in range(1, k):\r\n    if k - j > 1 and num[j] == '0':\r\n        continue\r\n    a, b = j, k\r\n    out = [num[: a], num[a: b]]\r\n    while b < len(num):\r\n    x = int(out[- 2]) + int(out[- 1])\r\n    a, b = b, b + len(str(x))\r\n    y = int(num[a: b])\r\n    if x != y:\r\n        break\r\n    out . append(str(y))\r\n    else:\r\n    return out\r\n    return []\r\n",
  "5826c14622be6ef2a4000033": "from gmpy2 import is_prime, next_prime\r\n\r\n\r\ndef gen():\r\n    prime = 0\r\n    while True:\r\n    prime = next_prime(prime)\r\n    if is_prime(int(str(prime)[:: - 1])):\r\n    yield prime\r\n    primes, result = gen(), []\r\n\r\n    def reversible_prime(n):\r\n    while len(result) <= n:\r\n    result . append(next(primes))\r\n    return result[n]\r\n",
  "5a59e029145c46eaac000062": "def two_by_n(n, k):\r\n    s = [1, k, 2 * k * (k - 1)]\r\n    for _ in range(2, n):\r\n    s . append((k - 2) * s[- 1] + (k - 1) * (k - 1) * s[- 2])\r\n    return s[n] % 12345787\r\n",
  "5993e6f701726f0998000030": "from math import comb\n\n\ndef insane_inc_or_dec(max_digits):\n    ''' \n Derivation summerized: \n \n Counting the number of increasing (or decreasing) numbers with d digits is equivalent \n to counting the number of ways to put d \"balls\" in 9 (or 10) boxes representing each digit, \n e.g. for decreasing numbers: \n \n | |oo| |o| | | | | | | = 886 \n ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ \n 9 8 7 6 5 4 3 2 1 0 \n \n Number of ways to put d balls in n boxes is comb(n + d - 1, d). \n \n Overcounting: \n Numbers with all identical digits from 1 to 9 are counted as both increasing and decreasing. \n Zeros, e.g. 0 or 000, are counted but should not be. \n => Subtract 10 * max_digits \n \n Useful identity: \n sum(comb(n + x, x) for x in range(1, d)) = comb(n + d + 1, d) - 1 = comb(n + d, n + 1) - 1 \n '''\n    return (comb(max_digits + 10, 10) + comb(max_digits + 9, 9) - 2 - max_digits * 10) % 12345787\n",
  "5a6b80cb880385a8f7000089": "from bs4 import BeautifulSoup\r\nimport requests\r\nreq = requests . get(\"https://www.codewars.com/users/leaderboard\"). content\r\nbs = BeautifulSoup(req, \"html.parser\")\r\ntr = [x . attrs[\"data-username\"]\r\n      for x in bs . find_all(lambda x: \"data-username\" in x . attrs)]\r\n\r\n\r\ndef get_codeChallenges(n):\r\n    req = requests . get(\r\n        f\"https://www.codewars.com/api/v1/users/ { tr [ n - 1 ]} \"). json()[\"codeChallenges\"]\r\n    return [req[\"totalAuthored\"], req[\"totalCompleted\"]]\r\n",
  "5a6de0ec0136a1761d000093": "def rotate_right(tree):\n    if tree . left is not None:\n    new_right = tree\n    tree = tree . left\n    new_right . left = tree . right\n    tree . right = new_right\n    return tree\n    def rotate_left(tree):\n    if tree . right is not None:\n    new_left = tree\n    tree = tree . right\n    new_left . right = tree . left\n    tree . left = new_left\n    return tree\n",
  "5a6d3bd238f80014a2000187": "def owned_cat_and_dog(cy, dy):\n    cat = 0 if cy < 15 else 1 if cy < 24 else 2 + (cy - 24) / / 4\n    dog = 0 if dy < 15 else 1 if dy < 24 else 2 + (dy - 24) / / 5\n    return [cat, dog]\n",
  "5a6ccef6b17101c74900004e": "from random import sample\r\n\r\n\r\ndef player_matrixes(R=7, B=7):\r\n    res = sample('R' * R + 'B' * B + '-' * (25 - R - B), k=25)\r\n    red_matrix = [[res[5 * x + y] if res[5 * x + y] !=\r\n                   'B' else '-' for y in range(5)] for x in range(5)]\r\n    blue_matrix = [[res[5 * x + y] if res[5 * x + y] !=\r\n                    'R' else '-' for y in range(5)] for x in range(5)]\r\n\r\n    return {\r\n        \"R\": red_matrix,\r\n        \"B\": blue_matrix,\r\n    }\r\n",
  "5a6986abe626c5d3e9000063": "import os\n\n\ndef get_output(s):\n    return os . popen(s). read()\n",
  "5a6b24d4e626c59d5b000066": "def square_sums_row(n):\r\n\r\n    def dfs():\r\n    if not inp:\r\n        yield res\r\n    for v in tuple(inp):\r\n    if not res or not ((res[- 1] + v) * * .5 % 1):\r\n    res . append(v)\r\n    inp . discard(v)\r\n    yield from dfs()\r\n    inp . add(res . pop())\r\n\r\n    inp, res = set(range(1, n + 1)), []\r\n    return next(dfs(), False)\r\n",
  "582b3b085ad95285c4000013": "import re\r\n\r\n\r\ndef calculate(input):\r\n    try:\r\n    return eval(re . sub(r'(\\d+)', lambda m: str(int(m . group(1))), input))\r\n    except:\r\n    return False\r\n",
  "5a6a02adcadebf618400002b": "from functools import reduce\nfrom collections import defaultdict\n\n\ndef my_hash_map(list_of_strings):\n    return reduce(lambda h, s: h[sum(map(ord, s))]. append(s) or h, list_of_strings, defaultdict(list))\n",
  "55fd8b5e61d47237810000d9": "def word_wrap(text, limit):\r\n    st = iter(text . split())\r\n    cur = next(st, None)\r\n\r\n    res = ['']\r\n    while cur:\r\n    if len(res[- 1]) + len(cur) + (res[- 1] != '') <= limit:\r\n    res[- 1] += ' ' * (res[- 1] != '') + cur\r\n    cur = next(st, None)\r\n    elif len(cur) > limit and limit - len(res[- 1]) - 1 > 0:\r\n    ind = limit - len(res[- 1]) - (res[- 1] != '')\r\n    res[- 1] += ' ' * (res[- 1] != '') + cur[: ind]\r\n    cur = cur[ind:]\r\n    res . append('')\r\n    else:\r\n    res . append('')\r\n\r\n    return '\\n' . join(res)\r\n",
  "5a6761be145c4691ee000090": "def solve(n):\r\n    zoznam = [int(i) for i in range(2, n + 1)]\r\n    res = [1]\r\n    while zoznam != []:\r\n    res . append(zoznam[0])\r\n    del zoznam[0:: zoznam[0]]\r\n    return sum(res)\r\n",
  "5a66ea69e6be38219f000110": "def solve(s):\r\n    v = sum(s[i] != s[- 1 - i] for i in range((len(s)) / / 2))\r\n    return v == 1 or not v and len(s) % 2\r\n",
  "57c13e724677bbc5fc000a0b": "def symmetric_shape(shape, q):\r\n    return shape + list(map(lambda x: (2 * q[0] - x[0], 2 * q[1] - x[1]), shape))\r\n",
  "5867d76b36959fa4a400034e": "def frame(phr='', ch='*'):\n    l = len(phr) + 4\n    line = ch * l\n    middle = ch + ' ' * (l - 2) + ch\n    return line + '\\n' + middle + '\\n' + ((ch + ' ' + phr + ' ' + ch + '\\n') if phr else '') + middle + '\\n' + line\n",
  "5a631508e626c5f127000055": "from datetime import *\n\n\ndef seconds_ago(s, n):\n    return str(datetime . strptime(s, '%Y-%m-%d %H:%M:%S') - timedelta(seconds=n))\n",
  "5a62da60d39ec5d947000093": "def findSquares(x, y):\r\n    return sum((x - i) * (y - i) for i in range(y))\r\n",
  "56e8d06029035a0c7c001d85": "def draw(n):\r\n    shape = ['\u25e2' + (n / / 2 - 2) * '\u25a0' + '\u25e3\u25e2' + (n / / 2 - 2) * '\u25a0' + '\u25e3']\r\n    shape . extend(n / / 6 * ['\u25a0' * n])\r\n    shape . extend(['\u25e5' + i * 2 * '\u25a0' + '\u25e4' for i in range(n / / 2 - 1, - 1, - 1)])\r\n    return '\\n' . join(row . center(n, '\u2003') for row in shape)\r\n",
  "5a6225e5d8e145b540000127": "from collections import Counter\n\n\ndef common(a, b, c):\n    return sum((Counter(a) & Counter(b) & Counter(c)). elements())\n",
  "5a626fc7fd56cb63c300008c": "import re\n\n\ndef uncollapse(digits):\n    return ' ' . join(re . findall('zero|one|two|three|four|five|six|seven|eight|nine', digits))\n",
  "5a35f08b9e5f4923790010dc": "from numpy import linspace\n\n\ndef looper(start, stop, number):\n    return list(linspace(start, stop, number))\n",
  "5a622f5f85bef7a9e90009e2": "def reverse_fizzbuzz(s):\r\n    if s == 'Fizz':\r\n        return [3]\r\n    if s == 'Buzz':\r\n        return [5]\r\n    if s == 'Fizz Buzz':\r\n        return [9, 10]\r\n    if s == 'Buzz Fizz':\r\n        return [5, 6]\r\n    if s == 'FizzBuzz':\r\n        return [15]\r\n    s = s . split()\r\n    for i in range(len(s)):\r\n    if s[i]. isdigit():\r\n    start = int(s[i]) - i\r\n    return list(range(start, start + len(s)))\r\n",
  "5a61a846cadebf9738000076": "def peak(arr):\r\n    for i, val in enumerate(arr):\r\n    if sum(arr[: i]) == sum(arr[i + 1:]):\r\n    return i\r\n    return - 1\r\n",
  "5a60d519400f93fc450032e5": "def hop_across(lst):\r\n    def one_side(lst):\r\n    i = 0\r\n    steps = 0\r\n    while i < len(lst):\r\n    i += lst[i]\r\n    steps += 1\r\n    return steps\r\n    return one_side(lst) + one_side(lst[:: - 1])\r\n",
  "5a5f48f2880385daac00006c": "def solve(arr, reach):\r\n    dogs, nCats = {i for i, x in enumerate(arr) if x == 'D'}, 0\r\n    for i, c in enumerate(arr):\r\n    if c == 'C':\r\n    catchingDog = next(\r\n        (i + id for id in range(- reach, reach + 1) if i + id in dogs), None)\r\n    if catchingDog is not None:\r\n    nCats += 1\r\n    dogs . remove(catchingDog)\r\n    return nCats\r\n",
  "5a5f3034cadebf76db000023": "def showBits(n):\r\n    return list(map(int, '{:032b}' . format(n if n >= 0 else 2 * * 32 + n)))\r\n",
  "57a153e872292d7c030009d4": "def simple_transposition(text):\r\n    return text[:: 2] + text[1:: 2]\r\n",
  "580f5818a88b4a5b2500061d": "def bit_letter(n):\r\n    def code(n):\r\n    x, i = divmod(n, 32)\r\n    p, c = divmod(x, 2)\r\n    return ' ' * (p == 1) + chr(97 + i - c * 32) + ',.' [p - 2] * (p > 1)\r\n    return '' . join(code(i) for i in n)\r\n",
  "555b605a76962690ea0000c8": "def Zeckendorf_rep(n):\r\n    if n >= 0:\r\n    fibs, res = [1, 2], []\r\n\r\n    while fibs[- 1] < n:\r\n    fibs . append(sum(fibs[- 2:]))\r\n\r\n    while n > 0:\r\n    x = fibs . pop()\r\n    if x <= n:\r\n    res . append(x)\r\n    n -= x\r\n    return res\r\n",
  "560d41fd7e0b946ac700011c": "def parade_time(groups, location, speed, pref):\r\n    return [c / / speed for c, p in enumerate(groups, 1 + location) if p == pref]\r\n",
  "58b96d99404be9187c000003": "import re\r\n\r\n\r\ndef frame(balls):\r\n    if 'W' in balls:\r\n    return 'Foul'\r\n    list = re . findall('[A-Z][a-z]*[0-9]*', balls)\r\n    sum = 0\r\n    for ball in list:\r\n    num = re . findall('[0-9]+', ball)\r\n    color = ball . rstrip(num[0]) if num else ball\r\n    n = int(num[0]) if num else 1\r\n    sum += n * int(blz[color])\r\n    return sum if sum < 148 else 'invalid data'\r\n",
  "5a5e4f5f118dd1b407000028": "def cantor(nested_list):\r\n    return [not (line[i]) for i, line in enumerate(nested_list)]\r\n",
  "5a580064e6be38fd34000147": "import re\r\nSPLITTER = re . compile(r\"[\\s-]\")\r\n\r\n\r\ndef birdify(lst):\r\n    return '' . join(x[: 4 / / len(lst)] for x in lst) + ('' if len(lst) != 3 else lst[- 1][1])\r\n\r\n    def bird_code(arr):\r\n    return [birdify(SPLITTER . split(name)). upper() for name in arr]\r\n",
  "560248d6ba06815d6f000098": "# precalculate results\r\nresults = {}\r\nn, digits = 1, 0\r\nwhile digits <= 1000:\r\n    digits = len(str(sum(x * * (n - x + 1) for x in range(1, n))))\r\n    if digits not in results:\r\n    results[digits] = n\r\n    n += 1\r\n    def min_length_num(digits, max_num):\r\n    n = results . get(digits, 0)\r\n    return [True, n + 1] if n and n < max_num else [False, - 1]\r\n",
  "58a2ff40e7841f82b600010a": "def chebyshev(n, v):\n    t0, t1 = 1, v\n    for _ in range(n):\n        t0, t1 = t1, 2 * v * t1 - t0\n    return t0\n",
  "562c3b54746f50d28d000027": "from itertools import islice\r\n\r\n\r\ndef decode(s):\r\n    def f():\r\n    it = iter(s)\r\n    for c in it:\r\n    if c == \"\\\\\":\r\n    digits = next(it)\r\n    while True:\r\n    c = next(it)\r\n    if not c . isdigit():\r\n    break\r\n    digits += c\r\n    c += \"\" . join(islice(it, int(digits) - 1))\r\n    yield c\r\n    return list(f())\r\n",
  "56f3ca069821793533000a3a": "def super_pad(string, width, fill=\" \"):\r\n    if fill . startswith('>'):\r\n    return (string + width * fill[1:])[: width]\r\n    elif fill . startswith('^'):\r\n    pad = (width * fill[1:])[: max(0, width - len(string) + 1) / / 2]\r\n    return (pad + string + pad)[: width]\r\n    else:\r\n    if fill . startswith('<'):\r\n        fill = fill[1:]\r\n    return (width * fill)[: max(0, width - len(string))] + string[max(0, len(string) - width):]\r\n",
  "5888cba35194f7f5a800008b": "import re\r\n\r\n\r\ndef asterisc_it(s):\r\n    if isinstance(s, int):\r\n        s = str(s)\r\n    elif isinstance(s, list):\r\n        s = '' . join(map(str, s))\r\n    return re . sub(r'(?<=[02468])(?=[02468])', '*', s)\r\n",
  "57cfd92c05c1864df2001563": "def vowel_back(st):\r\n    return st . translate(str . maketrans(\"abcdefghijklmnopqrstuvwxyz\", \"vkbaafpqistuvwnyzabtpvfghi\"))\r\n",
  "55cb8b5ddd6a67fef7000070": "def total_kilometers(cons, petrol):\r\n    return round(100 * petrol / cons, 2)\r\n\r\n    def check_distance(dist, cons, petrol):\r\n    return (\"You will need to refuel\" if dist > total_kilometers(cons, petrol) else\r\n            [[n * 100, dist - 100 * n, round(petrol - cons * n, 2)] for n in range(dist / / 100 + 1)])\r\n",
  "56f411dc9821795fd90011d9": "class UnexpectedTypeException (Exception):\r\n    pass\r\n    def expected_type(return_types):\r\n\r\n    def decor(func):\r\n    def wrapper(* args, * * kwargs):\r\n    ans = func(* args, * * kwargs)\r\n    if not isinstance(ans, return_types):\r\n    raise UnexpectedTypeException()\r\n    return ans\r\n    return wrapper\r\n    return decor\r\n",
  "560030c3ab9f805455000098": "from itertools import chain\r\n\r\n\r\ndef putTheCatOnTheTable(cat, map):\r\n    lX, lY = len(map), len(map[0])\r\n    x, y = cat\r\n    if not (0 <= x < lX and 0 <= y < lY):\r\n        return 'NoCat'\r\n    try:\r\n    table = divmod(list(chain . from_iterable(map)). index(1), lY)\r\n    except ValueError:\r\n    return \"NoTable\"\r\n    return '' . join(['UD', 'LR'][i][d > 0] * abs(d) for i, d in enumerate([b - a for a, b in zip(cat, table)]))\r\n",
  "55ea170313b76622b3000014": "from bisect import bisect\r\nA110819 = [1089, 2178, 4356, 6534, 8712, 9801,\r\n           10989, 21978, 24024, 26208, 42042, 43956, 48048]\r\n\r\n\r\ndef same_factRev(nMax):\r\n    return A110819[: bisect(A110819, nMax)]\r\n",
  "5959ec605595565f5c00002b": "def reverse_bits(n):\r\n    return int(bin(n)[: 1: - 1], 2)\r\n",
  "57dd8c78eb0537722f0006bd": "from collections import Counter\r\n\r\n\r\ndef presentation_agenda(friend_list):\r\n    uniqueDest = {d for d, c in Counter(\r\n        d for p in friend_list for d in p['dest']). items() if c == 1}\r\n    pFilteredDest = tuple(\r\n        (p['person'], [d for d in p['dest'] if d in uniqueDest]) for p in friend_list)\r\n    return [{'person': name, 'dest': lst} for name, lst in pFilteredDest if lst]\r\n",
  "5a5c5a1ab3bfa8728d00008d": "# Top portion is adapted from my solution for a different kata about this language\r\n# Removing the instructions that aren't used.to not fully spoiler the other kata.\r\nfrom enum import Enum\r\nD = Enum('Direction', ['U', 'D', 'L', 'R'])\r\n\r\n\r\ndef interpret(code):\r\n    instructions = tuple(l for l in code . split('\\n'))\r\n    output = \"\"\r\n    ip = [0, 0]\r\n    direction = D . R\r\n    op = instructions[ip[1]][ip[0]]\r\n    stack = []\r\n    def pop(): return stack . pop() if stack else 0\r\n    def div(a, b): return b / / a if a != 0 else 0\r\n    def mod(a, b): return b % a if a != 0 else 0\r\n    def sub(a, b): return b - a\r\n    while op != '@':\r\n    if op == '^':\r\n        direction = D . U\r\n    elif op == '<':\r\n        direction = D . L\r\n    elif op == '>':\r\n        direction = D . R\r\n    elif op == 'v':\r\n        direction = D . D\r\n    elif op == '|':\r\n        direction = D . U if pop() else D . D\r\n    elif op == ':':\r\n        stack . append(stack[- 1] if stack else 0)\r\n    elif op == '$':\r\n        pop()\r\n    elif op == '.':\r\n        output += str(pop())\r\n    elif op == ',':\r\n        output += chr(pop())\r\n    elif op == ' ':\r\n        pass\r\n    elif op == '+':\r\n        stack . append(pop() + pop())\r\n    elif op == '-':\r\n        stack . append(sub(pop(), pop()))\r\n    elif op == '*':\r\n        stack . append(pop() * pop())\r\n    elif op == '/':\r\n        stack . append(div(pop(), pop()))\r\n    elif op == '%':\r\n        stack . append(mod(pop(), pop()))\r\n    elif op . isdigit():\r\n        stack . append(int(op))\r\n\r\n    # Move to next instruction\r\n    if direction == D . L:\r\n        ip[0] = (ip[0] - 1) % len(instructions[ip[1]])\r\n    elif direction == D . R:\r\n        ip[0] = (ip[0] + 1) % len(instructions[ip[1]])\r\n    elif direction == D . U:\r\n        ip[1] = (ip[1] - 1) % len(instructions)\r\n    elif direction == D . D:\r\n        ip[1] = (ip[1] + 1) % len(instructions)\r\n    op = instructions[ip[1]][ip[0]]\r\n\r\n    return output\r\n    def podium_code():\r\n    return interpret(':345**/.87vv98,:<>\\nv/*52:,+2*<>**- |\\n>6%.:52*%.1+:25*^@')\r\n",
  "56fa467e0ba33b8b1100064a": "from math import ceil\r\n\r\n\r\nclass Route:\r\n    def __init__(self, soc, h, m, t):\r\n    c = ceil(h / int((t * 60) * 50 / m))\r\n    self . paperboys_needed = lambda: f\" { c - 2 } paperboy {[ '' , 's' ][ c > 3 ]} needed for { soc } \" if c > 2 else \"You and Stripes can handle the work yourselves\"\r\n",
  "56ee74e7fd6a2c3c7800037e": "from collections import Iterable\r\n\r\n\r\ndef unpack(iterable):\r\n    lst = []\r\n    for x in iterable:\r\n    if isinstance(x, dict):\r\n        x = unpack(x . items())\r\n    elif isinstance(x, str):\r\n        x = [x]\r\n    elif isinstance(x, Iterable):\r\n        x = unpack(x)\r\n    else:\r\n        x = [x]\r\n    lst . extend(x)\r\n    return lst\r\n",
  "58f671ee5522a9c33800009b": "from functools import reduce\n\n\ndef mult_implication(lst):\n    return reduce(lambda p, q: not p or q, lst) if lst else None\n",
  "59f9cad032b8b91e12000035": "import re\nfrom abc import ABC\nfrom collections import ChainMap\nfrom collections.abc import Iterable, Iterator, MutableMapping\nfrom contextlib import AbstractContextManager\nfrom dataclasses import asdict, dataclass, fields, replace\nfrom enum import Enum\nfrom itertools import islice, tee\nfrom typing import Any, Literal, overload\n\n\n# I try to be pedantic and avoid undefined behaviour,\n# so I also raise this in all cases that are said to be never tested.\n# Except for division by zero and out-of-bound lset/lget,\n# which are impossible to check at compile time.\nclass KcufError(Exception):\n    '''Any possible error in the program source code.'''\n    pass\n\n\n# -----------------------------------------------------------------------------\n#                                   Lexer\n#\n#                Splits the source code into a stream of tokens.\n#        Works like a filter, doesn't hold more than 1 token in memory.\n# -----------------------------------------------------------------------------\n\n_CHAR_ELEMENT_PATTERN = r'''(?:[^'\"\\n\\\\]|[\\\\][\\\\'\"nrt])'''\n\n\nclass TokenType(Enum):\n    COMMENT       = r'(?:^[ \\t]*[Rr][Ee][Mm]\\b|//|--|#).*?$'\n    VAR_NAME      = r'[A-Za-z$_][A-Za-z$_0-9]*'\n    BRACKET       = r'[\\[\\]]'\n    NUMBER        = r'-?[0-9]+'\n    CHAR          = f\"'{_CHAR_ELEMENT_PATTERN}'\"\n    STRING        = f'\"{_CHAR_ELEMENT_PATTERN}*\"'\n    EOL           = r'\\n'\n    WHITESPACE    = r'[ \\t]+'\n    INVALID_TOKEN = r'.'\n\n    def __repr__(self) -> str:\n        return f'{self.__class__.__name__}.{self.name}'\n\n\nTT = TokenType\n_TOKEN_PATTERN = '|'.join(f'({t.value})' for t in TokenType)\n_TOKEN = re.compile(_TOKEN_PATTERN, re.MULTILINE)\n\n\n@dataclass(repr=False)\nclass Token:\n    type: TokenType\n    value: str\n\n    def __repr__(self) -> str:\n        return f'{type(self).__name__}({self.type.name}, {repr(self.value)})'\n\n\ndef _primary_lex(source: str) -> Iterator[Token]:\n    '''Just split `source` into tokens defined in `TOKEN_CLASSES`.'''\n    for match in _TOKEN.finditer(source):\n        matched_group = match.lastindex\n        assert matched_group is not None, 'Some group should always match'\n        token_type = list(TokenType)[matched_group - 1]\n        token_value = match[matched_group]\n        yield Token(token_type, token_value)\n\n\ndef lex(source: str) -> Iterator[Token]:\n    '''Split `source` into tokens which are useful for the parser.'''\n    tokens = _primary_lex(source)\n    for token in tokens:\n        if token.type == TT.INVALID_TOKEN:\n            # Apart from unclosed strings/chars,\n            # this also covers other random gibberish that's never tested.\n            raise KcufError('Invalid token')\n        if token.type in (TT.WHITESPACE, TT.COMMENT):\n            continue\n        yield token\n\n\n# -----------------------------------------------------------------------------\n#                                   Parser\n#\n#                      Combines tokens into statements,\n#                 verifies the grammar for blocks and procs.\n#\n#     Works like a filter, doesn't hold more than 1 statement in memory.\n# -----------------------------------------------------------------------------\n\n\ndef _iter_line(tokens: Iterable[Token]) -> Iterator[Token]:\n    '''Iterate over `tokens` until EOL of EOF.'''\n    for token in tokens:\n        if token.type == TT.EOL:\n            break\n        yield token\n\n\nclass String(str):\n    '''A string literal in the program.'''\n\n    def __repr__(self) -> str:\n        return f'{type(self).__name__}({super().__str__()})'\n\n\nclass VarName(str):\n    '''A simple implementation of a case-insensitive string.\n    Represents a variable/list/procedure/parameter name.\n    '''\n\n    def __new__(cls, contents: str):\n        if isinstance(contents, VarName):\n            contents = contents._contents  # type:ignore\n        self = str.__new__(cls, contents.casefold())\n        self._contents = contents  # type:ignore\n        return self\n\n    def __repr__(self) -> str:\n        return f'{type(self).__name__}({repr(self._contents)})'  # type:ignore\n\n\nclass ListName(VarName):\n    pass\n\n\n@dataclass\nclass Constant:\n    value: int\n\n\nVarNameOrNumber = VarName | Constant\n\n\ndef _parse_var_name(token: Token) -> VarName:\n    if token.type != TT.VAR_NAME:\n        raise KcufError('Expect a variable but got something else')\n    return VarName(token.value)\n\n\ndef _parse_var_name_or_number(token: Token) -> VarNameOrNumber:\n    match token:\n        case Token(TT.VAR_NAME, name):\n            return VarName(name)\n        case Token(TT.NUMBER, value_str):\n            value = int(value_str) % 256\n            return Constant(value)\n        case Token(TT.CHAR, value_str):\n            value = ord(eval(value_str))\n            return Constant(value)\n        case _:\n            # This case is never tested.\n            raise KcufError('Expect VarNameOrNumber but got something else')\n\n\n@dataclass\nclass Declaration:\n    name: VarName\n    size: int | None = None\n\n    @property\n    def is_list(self) -> bool:\n        return self.size is not None\n\n\nclass Statement(ABC):\n    '''Abstract base class for all statements.'''\n\n    @classmethod\n    def parse(cls, args: Iterable[Token]) -> 'Statement':\n        # Default implementation that works for all fixed-size instructions.\n        try:\n            return cls(*cls._parse_fields(args))\n        except ValueError:\n            raise KcufError('Number of arguments for an instruction '\n                            'does not match the expectation')\n\n    @classmethod\n    def _parse_fields(cls, args: Iterable[Token]) -> Iterator[Any]:\n        '''Parse own fields from tokens (`cls` must be a dataclass).'''\n        args = _iter_line(args)\n        for field, token in zip(fields(cls), args, strict=True):\n            if field.type is VarNameOrNumber:\n                yield _parse_var_name_or_number(token)\n            elif field.type is VarName:\n                yield _parse_var_name(token)\n            elif field.type is ListName:\n                yield ListName(_parse_var_name(token))\n            else:\n                assert False, 'Forgot to add case'\n\n\n@dataclass\nclass Var(Statement):\n    declarations: list[Declaration]\n\n    @classmethod\n    def parse(cls, args: Iterable[Token]) -> 'Var':\n        declarations = list(cls._parse_declarations(args))\n        if len(declarations) == 0:\n            raise KcufError('Number of arguments for an instruction '\n                            'does not match the expectation')\n        return Var(declarations)\n\n    @staticmethod\n    def _parse_declarations(tokens: Iterable[Token]) -> Iterator[Declaration]:\n        tokens = _iter_line(tokens)\n        # We need to see 4 tokens ahead.\n        window = list(islice(tokens, 4))\n        # Window becomes empty after we've consumed all tokens.\n        while window:\n            match window:\n                case [Token(TT.VAR_NAME, name), Token(TT.BRACKET, '['),\n                      Token(TT.NUMBER, size_str), Token(TT.BRACKET, ']')]:\n                    n_consumed = 4\n                    size = int(size_str)\n                    if not 1 <= size <= 256:\n                        # This case is never tested.\n                        raise KcufError('List size must be in range [1,256]')\n                    yield Declaration(ListName(name), size)\n                case [Token(TT.VAR_NAME, name), *_]:\n                    n_consumed = 1\n                    yield Declaration(VarName(name))\n                case _:\n                    # This covers 'Unclosed [] pair'\n                    # and other random gibberish that's never tested.\n                    raise KcufError('Expect VarSingle but got something else')\n            # Move the window forward.\n            window = window[n_consumed:] + list(islice(tokens, n_consumed))\n\n\n@dataclass\nclass Set(Statement):\n    a: VarName\n    b: VarNameOrNumber\n\n\n@dataclass\nclass Inc(Statement):\n    a: VarName\n    b: VarNameOrNumber\n\n\n@dataclass\nclass Dec(Statement):\n    a: VarName\n    b: VarNameOrNumber\n\n\n@dataclass\nclass Add(Statement):\n    a: VarNameOrNumber\n    b: VarNameOrNumber\n    c: VarName\n\n\n@dataclass\nclass Sub(Statement):\n    a: VarNameOrNumber\n    b: VarNameOrNumber\n    c: VarName\n\n\n@dataclass\nclass Mul(Statement):\n    a: VarNameOrNumber\n    b: VarNameOrNumber\n    c: VarName\n\n\n@dataclass\nclass Divmod(Statement):\n    a: VarNameOrNumber\n    b: VarNameOrNumber\n    c: VarName\n    d: VarName\n\n\n@dataclass\nclass Div(Statement):\n    a: VarNameOrNumber\n    b: VarNameOrNumber\n    c: VarName\n\n\n@dataclass\nclass Mod(Statement):\n    a: VarNameOrNumber\n    b: VarNameOrNumber\n    c: VarName\n\n\n@dataclass\nclass Cmp(Statement):\n    a: VarNameOrNumber\n    b: VarNameOrNumber\n    c: VarName\n\n\n@dataclass\nclass A2b(Statement):\n    a: VarNameOrNumber\n    b: VarNameOrNumber\n    c: VarNameOrNumber\n    d: VarName\n\n\n@dataclass\nclass B2a(Statement):\n    a: VarNameOrNumber\n    b: VarName\n    c: VarName\n    d: VarName\n\n\n@dataclass\nclass Lset(Statement):\n    a: ListName\n    b: VarNameOrNumber\n    c: VarNameOrNumber\n\n\n@dataclass\nclass Lget(Statement):\n    a: ListName\n    b: VarNameOrNumber\n    c: VarName\n\n\n@dataclass\nclass Ifeq(Statement):\n    a: VarName\n    b: VarNameOrNumber\n\n\n@dataclass\nclass Ifneq(Statement):\n    a: VarName\n    b: VarNameOrNumber\n\n\n@dataclass\nclass Wneq(Statement):\n    a: VarName\n    b: VarNameOrNumber\n\n\n@dataclass\nclass Proc(Statement):\n    name: VarName\n    params: list[VarName]\n\n    @classmethod\n    def parse(cls, args: Iterable[Token]) -> 'Proc':\n        args_iter = _iter_line(args)\n        name_arg = next(args_iter, None)\n        if name_arg is None:\n            raise KcufError('Number of arguments for an instruction '\n                            'does not match the expectation')\n        name = _parse_var_name(name_arg)\n        params = [_parse_var_name(a) for a in args_iter]\n        return Proc(name, params)\n\n\n@dataclass\nclass End(Statement):\n    pass\n\n\n@dataclass\nclass Call(Statement):\n    proc_name: VarName\n    arguments: list[VarName]\n\n    @classmethod\n    def parse(cls, args: Iterable[Token]) -> 'Call':\n        args_iter = _iter_line(args)\n        name_arg = next(args_iter, None)\n        if name_arg is None:\n            raise KcufError('Number of arguments for an instruction '\n                            'does not match the expectation')\n        proc_name = _parse_var_name(name_arg)\n        proc_args = [_parse_var_name(a) for a in args_iter]\n        return Call(proc_name, proc_args)\n\n\n@dataclass\nclass Read(Statement):\n    var_name: VarName\n\n\n@dataclass\nclass Msg(Statement):\n    args: list[VarName | String]\n\n    @classmethod\n    def parse(cls, args: Iterable[Token]) -> 'Msg':\n        msg_args = [cls._parse_var_name_or_string(a) for a in _iter_line(args)]\n        if len(msg_args) == 0:\n            raise KcufError('Number of arguments for an instruction '\n                            'does not match the expectation')\n        return Msg(msg_args)\n\n    @staticmethod\n    def _parse_var_name_or_string(token: Token) -> VarName | String:\n        match token.type:\n            case TT.STRING:\n                return String(token.value)\n            case TT.VAR_NAME:\n                return VarName(token.value)\n            case _:\n                # This case is never tested.\n                raise KcufError('Expect VarNameOrString but got somethin else')\n\n\n@dataclass\nclass Rem(Statement):\n    pass\n\n\ndef _is_concrete_statement_type(cls: type) -> bool:\n    return issubclass(cls, Statement) and cls is not Statement\n\n\ndef _parse_statements(tokens: Iterable[Token]) -> Iterator[Statement]:\n    # A sentinel value that's never seen in the actual lexer output.\n    eof = Token(TT.COMMENT, 'EOF')\n\n    tokens_iter = iter(tokens)\n    for token in tokens_iter:\n        # Skip empty lines.\n        while token.type == TT.EOL:\n            token = next(tokens_iter, eof)\n        if token is eof:\n            break\n\n        statement_cls_name = token.value.capitalize()\n        statement_cls = globals_().get(statement_cls_name, None)\n        if not _is_concrete_statement_type(statement_cls):\n            # This also covers non-VarName tokens, which are never tested.\n            raise KcufError('Unknown instructions')\n        yield statement_cls.parse(tokens_iter)\n\n\ndef _check_block_grammar(program: Iterable[Statement]) -> Iterator[Statement]:\n    unclosed_proc = False\n    unclosed_blocks = 0\n    for statement in program:\n        match statement:\n            case Var() if unclosed_proc:\n                raise KcufError('Define variables inside a procedure')\n            case Proc() if unclosed_proc:\n                raise KcufError('Nested procedures')\n            case Proc():\n                unclosed_proc = True\n            case Ifeq() | Ifneq() | Wneq():\n                unclosed_blocks += 1\n            case End() if unclosed_blocks:\n                unclosed_blocks -= 1\n            case End() if unclosed_proc:\n                unclosed_proc = False\n            case End():\n                raise KcufError('End before beginning a block')\n        yield statement\n    if unclosed_blocks or unclosed_proc:\n        raise KcufError('Unclosed blocks')\n\n\ndef parse(tokens: Iterable[Token]) -> Iterator[Statement]:\n    '''Check for grammatical errors and combine tokens into statements.'''\n    statements = _parse_statements(tokens)\n    return _check_block_grammar(statements)\n\n\n# -----------------------------------------------------------------------------\n#                                Preprocessor\n#\n#                         Checks for semantic errors,\n#              removes proc definitions and inlines proc calls.\n# -----------------------------------------------------------------------------\n\n\n@dataclass\nclass _Procedure():\n    name: VarName\n    params: list[VarName]\n    body: list[Statement]\n\n\nclass _Lookup:\n    '''A lookup table for variables and procedures.'''\n\n    def __init__(self) -> None:\n        self._variables = ChainMap[VarName, Declaration]()\n        self._procedures = dict[VarName, _Procedure]()\n        self._call_stack = list[VarName]()\n\n    @property\n    def _globals(self) -> MutableMapping[VarName, Declaration]:\n        return self._variables.maps[-1]\n\n    def add_global(self, var: Declaration) -> None:\n        if var.name in self._globals:\n            raise KcufError('Duplicate var names')\n        self._globals[var.name] = var\n\n    def add_procedure(self, procedure: _Procedure) -> None:\n        if procedure.name in self._procedures:\n            raise KcufError('Duplicate procedure names')\n        if len(set(procedure.params)) < len(procedure.params):\n            raise KcufError('Duplicate parameter names')\n        self._procedures[procedure.name] = procedure\n\n    def new_scope(self, proc: _Procedure, arguments: list[VarName]\n                  ) -> AbstractContextManager:\n        '''Return a context manager that allows to\n        enter and exit the scope of a procedure, affecting lookup.\n        '''\n        class ContextManager:\n            def __enter__(self_) -> 'ContextManager':\n                if proc.name in self._call_stack:\n                    raise KcufError('Recursive call')\n                self._call_stack.append(proc.name)\n                if len(arguments) != len(proc.params):\n                    raise KcufError('The length of arguments does not match '\n                                    'the length of parameters')\n                resolved_args = [self.var(name) for name in arguments]\n                bindings = {p: a for p, a in zip(proc.params, resolved_args)}\n                self._variables.maps.insert(0, bindings)  # type:ignore\n                return self_\n\n            def __exit__(self_, exc_type, exc_value, exc_traceback) -> None:\n                self._call_stack.pop()\n                self._variables.maps.pop(0)\n\n        return ContextManager()\n\n    def proc(self, proc_name: VarName) -> _Procedure:\n        try:\n            return self._procedures[proc_name]\n        except KeyError:\n            raise KcufError('Undefined procedure')\n\n    def var(self, var_name: VarName) -> Declaration:\n        var = self._var_or_list(var_name)\n        if var.is_list:\n            raise KcufError('Expect a variable but got a list')\n        return var\n\n    def list(self, name: ListName) -> Declaration:\n        var = self._var_or_list(name)\n        if not var.is_list:\n            raise KcufError('Expect a list but got a variable')\n        return var\n\n    def _var_or_list(self, var_name: VarName) -> Declaration:\n        if var_name not in self._variables:\n            # This also covers variables used before they are defined,\n            # which currently isn't tested.\n            raise KcufError('Undefined var names')\n        return self._variables[var_name]\n\n\ndef _iter_until_matching_end(body: Iterable[Statement]) -> Iterator[Statement]:\n    unclosed_blocks = 1\n    for statement in body:\n        if isinstance(statement, (Ifeq, Ifneq, Wneq)):\n            unclosed_blocks += 1\n        elif isinstance(statement, End):\n            unclosed_blocks -= 1\n            if not unclosed_blocks:\n                break\n        yield statement\n\n\nclass _Preprocessor:\n    def __init__(self) -> None:\n        self._lookup: _Lookup\n        self._unused_procs: set[VarName]\n\n    def preprocess(self, program: Iterable[Statement]) -> Iterator[Statement]:\n        self._lookup = _Lookup()\n        self._unused_procs = set[VarName]()\n        # Make a full pass to register procs and remove definitions from main.\n        main = list(self._remove_procs(program))\n        # Then work on a stream.\n        return self._expand_main(main)\n\n    def _remove_procs(self, body: Iterable[Statement]) -> Iterator[Statement]:\n        body_iter = iter(body)\n        for statement in body_iter:\n            if isinstance(statement, Proc):\n                proc_body = list(_iter_until_matching_end(body_iter))\n                proc = _Procedure(statement.name, statement.params, proc_body)\n                self._lookup.add_procedure(proc)\n                self._unused_procs.add(proc.name)\n            else:\n                yield statement\n\n    def _expand_main(self, main: Iterable[Statement]) -> Iterator[Statement]:\n        yield from self._expand_calls(main)\n        if self._unused_procs:\n            # This case is never tested.\n            raise KcufError('Unused procedures')\n\n    def _expand_calls(self, body: Iterable[Statement]) -> Iterator[Statement]:\n        for statement in body:\n            if isinstance(statement, Var):\n                for decl in statement.declarations:\n                    self._lookup.add_global(decl)\n                yield statement\n            elif isinstance(statement, Call):\n                procedure = self._lookup.proc(statement.proc_name)\n                with self._lookup.new_scope(procedure, statement.arguments):\n                    yield from self._expand_calls(procedure.body)\n                self._unused_procs.discard(procedure.name)\n            else:\n                statement = self._resolve_var_names(statement)\n                yield statement\n\n    def _resolve_var_names(self, statement: Statement) -> Statement:\n        '''Resolve used parameters (if any) to the gloval vars they point to'''\n        match statement:\n            case Msg(args):\n                # A special case because fields aren't scalar.\n                resolved_args = list(self._resolve_msg_args(args))\n                return Msg(resolved_args)\n            case _:\n                fields_dict = asdict(statement)\n                updated_fields = {\n                    fn: self._resolve_name(fv)\n                    for fn, fv in fields_dict.items()\n                    if isinstance(fv, VarName)\n                }\n                return replace(statement, **updated_fields)\n\n    def _resolve_msg_args(self, args: Iterable[VarName | String]\n                          ) -> Iterator[VarName | String]:\n        for arg in args:\n            if isinstance(arg, VarName):\n                yield self._resolve_name(arg)\n            else:\n                yield arg\n\n    def _resolve_name(self, name: VarName) -> VarName:\n        '''If `name` refers to a parameter, resolve it\n        to the gloval variable that it points to.\n        '''\n        if isinstance(name, ListName):\n            referenced_list = self._lookup.list(name)\n            return referenced_list.name\n        else:\n            referenced_var = self._lookup.var(name)\n            return referenced_var.name\n\n\ndef preprocess(program: Iterable[Statement]) -> Iterator[Statement]:\n    '''Check for semantic errors, remove proc definitions and inline calls.'''\n    return _Preprocessor().preprocess(program)\n\n\n# -----------------------------------------------------------------------------\n#                                 Backend\n#\n#     Takes a valid program from the previous step and translates it to BF.\n# -----------------------------------------------------------------------------\n\n\n@dataclass\nclass _Variable:\n    address: int\n\n\n@dataclass\nclass _List:\n    HEAD_SIZE = 4\n\n    address: int\n    size: int\n\n\n_Rvalue = _Variable | Constant\n\n\n@dataclass(init=False)\nclass _Zeroed:\n    '''A marker for `_Backend._free()` arguments.\n    Indicates that the cleanup is not needed.\n    '''\n\n    address: int\n\n    def __init__(self, var: _Variable) -> None:\n        self.address = var.address\n\n\n@dataclass\nclass _IfBlock:\n    cond_var: _Variable\n\n\n@dataclass\nclass _WhileBlock:\n    a: _Rvalue\n    b: _Rvalue\n    cond_var: _Variable\n\n\n_Block = _IfBlock | _WhileBlock\n\n\nclass _Backend:\n    '''Generates BF code, statement by statement.'''\n\n    # The main idea is to treat the cell array like a stack.\n    # Statements are implemented using algorithms that claim\n    # available cells at the top, use them, and then reset them back to 0.\n\n    # Common principles for private methods:\n    # - Translate the eponymous concept into BF.\n    # - Write the result into `_buffer` attribute.\n    # - Don't clobber variables that are supposed to be read-only.\n    #     (But sometimes, `consume` option is available. When set to `True`,\n    #      it produces more optimized BF code and sets the variable to 0.)\n    # - Always handle cases where multiple operands alias the same cell.\n    #     Don't push responsibility onto the caller.\n    # - Apply constant folding where it's easy to implement.\n\n    def __init__(self, *, cleanup_blocks: bool) -> None:\n        '''`cleanup_blocks=False` allows to compile everything in one pass,\n        but this approach leaks one cell per each `ifeq/ifneq/wneq` block,\n        producing a bloated cell layout that's hard to understand and debug.\n\n        `cleanup_blocks=True` fixes the leak, but one-pass compilation\n        crashes if there are any `vars` defined inside of blocks.\n        That's because everything is stack allocated and these `vars`\n        are allocated on top of the block cell that needs to be cleaned up.\n\n        My preferred approach is using `cleanup_blocks=True` with two passes:\n        pre-allocating all `vars` in advance and then generating the code.\n        '''\n        self._cleanup_blocks = cleanup_blocks\n\n        self._buffer = list[str]()\n        '''Generated BF code goes here.'''\n\n        self._ptr = 0\n        '''Points at the current data cell.'''\n\n        self._stack_ptr = 0\n        '''Points at the first available cell on the \"BF stack\".\n        This cell and all cells to the right are always zeroed.'''\n\n        self._blocks = list[_Block]()\n        '''A stack to keep track of of entered ifeq,ifneq,wneq blocks.'''\n\n        self._vars = dict[VarName, _Variable]()\n        self._lists = dict[VarName, _List]()\n\n    def get_full_result(self) -> str:\n        '''Return full contents of the internal buffer.'''\n        return ''.join(self._buffer)\n\n    def generate(self, statement: Statement) -> None:\n        '''Translate statement to BF code and append it to internal buffer.'''\n        args = self._lookup_args(statement)\n        match statement:\n            case Var():     self._var(*args)\n            case Set():     self._set(*args)\n            case Inc():     self._inc(*args)\n            case Dec():     self._dec(*args)\n            case Add():     self._add(*args)\n            case Sub():     self._sub(*args)\n            case Mul():     self._mul(*args)\n            case Divmod():  self._divmod(*args)\n            case Div():     self._div(*args)\n            case Mod():     self._mod(*args)\n            case Cmp():     self._cmp(*args)\n            case A2b():     self._a2b(*args)\n            case B2a():     self._b2a(*args)\n            case Lset():    self._lset(*args)\n            case Lget():    self._lget(*args)\n            case Ifeq():    self._ifeq(*args)\n            case Ifneq():   self._ifneq(*args)\n            case Wneq():    self._wneq(*args)\n            case Proc():    assert False, 'Should be already removed'\n            case End():     self._end(*args)\n            case Call():    assert False, 'Should be already expanded'\n            case Read():    self._read(*args)\n            case Msg():     self._msg(*args)\n            case Rem():     pass\n            case _:         assert False, 'Forgot to add case'\n\n    def _lookup_args(self, statement: Statement) -> Iterator[Any]:\n        '''Iterate `statement` args, translating variable names to addresses'''\n        args: Iterable[Any]\n        args = (getattr(statement, field.name) for field in fields(statement))\n        # Special cases when statement fields are not scalar.\n        if isinstance(statement, Var):\n            args = statement.declarations\n        elif isinstance(statement, Msg):\n            args = statement.args\n        for arg in args:\n            match arg:\n                case ListName() as list_name:\n                    yield self._lists[list_name]\n                case VarName() as var_name:\n                    yield self._vars[var_name]\n                case _:\n                    yield arg\n\n    def _var(self, *declarations: Declaration) -> None:\n        for decl in declarations:\n            if decl.is_list:\n                assert decl.size is not None, 'Lists are always sized'\n                self._lists[decl.name] = self._allocate_list(decl.size)\n            else:\n                self._vars[decl.name] = self._allocate_var()\n\n    def _set(self, dest: _Variable, source: _Rvalue, *, consume=False) -> None:\n        if isinstance(source, _Variable) and source.address == dest.address:\n            return\n        self._append(dest, '[-]')\n        self._inc(dest, source, consume=consume)\n\n    def _inc(self, dest: _Variable, source: _Rvalue, *, consume=False) -> None:\n        if isinstance(source, _Variable) and source.address == dest.address:\n            copy = self._allocate_copy(source)\n            self._inc_dec_impl('inc', dest, copy, consume=True)\n            self._free(_Zeroed(copy))\n            return\n        self._inc_dec_impl('inc', dest, source, consume=consume)\n\n    def _dec(self, dest: _Variable, source: _Rvalue, *, consume=False) -> None:\n        if isinstance(source, _Variable) and source.address == dest.address:\n            self._append(dest, '[-]')\n            return\n        self._inc_dec_impl('dec', dest, source, consume=consume)\n\n    def _inc_dec_impl(self, instruction: Literal['inc', 'dec'],\n                      dest: _Variable, source: _Rvalue, *, consume=False\n                      ) -> None:\n        '''Assumes `source.address != dest.address`!'''\n        op = '+' if instruction == 'inc' else '-'\n        match source:\n            case _Variable() if consume:\n                self._append(source, '[', dest, op, source, '-]')\n            case _Variable():\n                temp = self._allocate_var()\n                self._append(source, '[', dest, op, temp, '+', source, '-]')\n                self._append(temp, '[', source, '+', temp, '-]')\n                self._free(_Zeroed(temp))\n            case Constant():\n                self._append(dest, op * source.value)\n\n    def _add(self, op1: _Rvalue, op2: _Rvalue, dest: _Variable) -> None:\n        self._set(dest, op1)\n        self._inc(dest, op2)\n\n    def _sub(self, op1: _Rvalue, op2: _Rvalue, dest: _Variable) -> None:\n        self._set(dest, op1)\n        self._dec(dest, op2)\n\n    def _mul(self, mul1: _Rvalue, mul2: _Rvalue, dest: _Variable) -> None:\n        self._set(dest, mul1)\n        # Now we can do `dest *= mul2`:\n        temp = self._allocate_var()\n        self._inc(temp, dest, consume=True)\n        self._append(temp, '[')\n        self._inc(dest, mul2)\n        self._append(temp, '-]')\n        self._free(_Zeroed(temp))\n\n    def _divmod(self, a: _Rvalue, b: _Rvalue,\n                c: _Variable, d: _Variable) -> None:\n        self._divmod_div_mod_impl('divmod', a, b, c, d)\n\n    def _div(self, a: _Rvalue, b: _Rvalue, c: _Variable) -> None:\n        self._divmod_div_mod_impl('div', a, b, c)\n\n    def _mod(self, a: _Rvalue, b: _Rvalue, c: _Variable) -> None:\n        self._divmod_div_mod_impl('mod', a, b, c)\n\n    def _divmod_div_mod_impl(self,\n                             instruction: Literal['divmod', 'div', 'mod'],\n                             a: _Rvalue, b: _Rvalue, c: _Variable,\n                             d: _Variable | None = None) -> None:\n        # Harcoded algorithm requires x,y,r,q on the top of the stack.\n        x = self._allocate_copy(a)\n        y = self._allocate_copy(b)\n        r = self._allocate_var()\n        q = self._allocate_var()\n        self._append(\n            x, '[->[->+>>]>[<<+>>[-<+>]>+>>]<<<<<]>[>>>]>[[-<+>]>+>>]<<<<<'\n        )\n        match instruction:\n            case 'div':\n                self._set(c, q, consume=True)\n                self._free(_Zeroed(q), r, y, _Zeroed(x))\n            case 'mod':\n                self._set(c, r, consume=True)\n                self._free(q, _Zeroed(r), y, _Zeroed(x))\n            case 'divmod':\n                assert d is not None, \"'divmod' requires d\"\n                self._set(c, q, consume=True)\n                self._set(d, r, consume=True)\n                self._free(_Zeroed(q), _Zeroed(r), y, _Zeroed(x))\n\n    def _cmp(self, x: _Rvalue, y: _Rvalue, dest: _Variable) -> None:\n        # Easy optimization if `x` and `y` are the same constant or cell.\n        if x == y:\n            self._set(dest, Constant(0))\n            return\n\n        is_not_equal = self._allocate_var()\n        self._not_equals(x, y, is_not_equal)\n        # Pure speculation.\n        self._set(dest, Constant(0))\n        # If x != y, this branch will execute and set `dest` to 1 or 255.\n        self._append(is_not_equal, '[')\n        self._cmp_not_equal(x, y, dest)\n        self._append(is_not_equal, '-]')\n        self._free(_Zeroed(is_not_equal))\n\n    def _not_equals(self, x: _Rvalue, y: _Rvalue, dest: _Variable) -> None:\n        '''If `x` != `y`, set `dest` to 1. Else, set `dest` to 0.'''\n        # Easy optimization if `x` and `y` are the same constant or cell.\n        if x == y:\n            self._set(dest, Constant(0))\n            return\n\n        # The algorithm below writes the result to `x`,\n        # so we put `x` in `dest` and use `dest` instead.\n        self._set(dest, x)\n        # It also needs `y` as a Variable and zeroes it, so we make a copy.\n        # Copy will also protect us if the original `y` aliases `dest`.\n        y = self._allocate_copy(y)\n\n        diff = self._allocate_var()\n        self._inc(diff, dest, consume=True)\n        self._dec(diff, y, consume=True)\n        self._append(diff, '[', dest, '+', diff, '[-]]')\n        self._free(_Zeroed(diff), _Zeroed(y))\n\n    def _cmp_not_equal(self, x: _Rvalue, y: _Rvalue, dest: _Variable) -> None:\n        '''Assumes `x` != `y` and `dest` == 0. Sets `dest` to 255 or 1.'''\n        # The algorithm below writes the result to `x`,\n        # so we need to protect the original.\n        x = self._allocate_copy(x)\n        # Algorithm for `x = x < y`:\n        temp0 = self._allocate_var()\n        temp1 = self._allocate_var()\n        temp2 = self._allocate_var()  # In the algrorithm, these are unnamed.\n        temp3 = self._allocate_var()  # But they need to be cleaned up.\n        self._append(temp1, '>+<')\n        self._set(temp1, y)\n        self._append(x, '[', temp0, '+', x, '-]+')\n        self._append(temp1, '[>-]> [<', x, '-', temp0, '[-]', temp1, '>->]<+<')\n        self._append(temp0, '[', temp1, '-[>-]>')\n        self._append('[<', x, '-', temp0, '[-]+', temp1, '>->]')\n        self._append('<+<', temp0, '-]')\n        self._free(temp3, temp2, temp1, _Zeroed(temp0))\n        # Speculatively set `dest` from 0 to 1, assuming that `x > y`.\n        self._append(dest, '+')\n        # If `x < y`, execute the branch that sets `dest` from 1 to 255.\n        self._append(x, '[', dest, '--', x, '-]')\n        self._free(_Zeroed(x))\n\n    def _a2b(self, a: _Rvalue, b: _Rvalue, c: _Rvalue, d: _Variable) -> None:\n        term = self._allocate_var()\n        with self._temporary(d) as d:\n            self._sub(a, Constant(48), term)\n            self._mul(term, Constant(100), d)\n            self._sub(b, Constant(48), term)\n            self._mul(term, Constant(10), term)\n            self._inc(d, term, consume=True)\n            self._sub(c, Constant(48), term)\n            self._inc(d, term, consume=True)\n        self._free(_Zeroed(term))\n\n    def _b2a(self, a: _Rvalue, b: _Variable,\n             c: _Variable, d: _Variable) -> None:\n        with self._temporary(b, c, d) as (b, c, d):\n            self._div(a, Constant(100), b)\n            self._inc(b, Constant(48))\n            self._div(a, Constant(10), c)\n            self._mod(c, Constant(10), c)\n            self._inc(c, Constant(48))\n            self._mod(a, Constant(10), d)\n            self._inc(d, Constant(48))\n\n    @overload\n    def _temporary(self, v: _Variable, /) -> AbstractContextManager[_Variable]:\n        ...\n\n    @overload\n    def _temporary(self, v0: _Variable, v1: _Variable, /, *vn: _Variable,\n                   ) -> AbstractContextManager[tuple[_Variable, ...]]:\n        ...\n\n    def _temporary(self, *vars: _Variable) -> AbstractContextManager:\n        '''Upon entering, return temporaries to be used instead of `vars`.\n\n        Upon exiting, write back to `vars` (in the order listed)\n        and destroy temporaries.\n\n        This protects any variables aliased by `vars`\n        from being overwritten before exiting the context.\n        '''\n        class ContextManager:\n            def __enter__(self_) -> _Variable | tuple[_Variable, ...]:\n                self_._temps = tuple(self._allocate_var() for _ in vars)\n                if len(self_._temps) == 1:\n                    return self_._temps[0]\n                return self_._temps\n\n            def __exit__(self_, exc_type, exc_value, exc_traceback) -> None:\n                temps_and_originals = list(zip(self_._temps, vars))\n                for temp, original in temps_and_originals:\n                    self._set(original, temp, consume=True)\n                # Need to free stack allocated memory in reverse order.\n                for temp, original in reversed(temps_and_originals):\n                    self._free(_Zeroed(temp))\n\n        return ContextManager()\n\n    def _lset(self, a: _List, b: _Rvalue, c: _Rvalue) -> None:\n        if isinstance(b, Constant):\n            cell_in_list = self._const_index(a, b)\n            self._set(cell_in_list, c)\n            return\n        space = _Variable(a.address)\n        index1 = _Variable(a.address + 1)\n        index2 = _Variable(a.address + 2)\n        data = _Variable(a.address + 3)\n        self._set(data, c)\n        self._set(index1, b)\n        self._set(index2, b)\n        # lset from `data`:\n        self._append(space, '>[>>>[-<<<<+>>>>]<[->+<]<[->+<]<[->+<]>-]')\n        self._append('>>>[-]<[->+<]<')\n        self._append('[[-<+>]<<<[->>>>+<<<<]>>-]<<')\n\n    def _lget(self, a: _List, b: _Rvalue, c: _Variable) -> None:\n        if isinstance(b, Constant):\n            cell_in_list = self._const_index(a, b)\n            self._set(c, cell_in_list)\n            return\n        space = _Variable(a.address)\n        index1 = _Variable(a.address + 1)\n        index2 = _Variable(a.address + 2)\n        data = _Variable(a.address + 3)\n        self._set(index1, b)\n        self._set(index2, b)\n        # lget into `data`:\n        self._append(space, '>[>>>[-<<<<+>>>>]<<[->+<]<[->+<]>-]')\n        self._append('>>>[-<+<<+>>>]<<<[->>>+<<<]>')\n        self._append('[[-<+>]>[-<+>]<<<<[->>>>+<<<<]>>-]<<')\n        # Now we only need to:\n        self._set(c, data, consume=True)\n\n    def _const_index(self, list: _List, index: Constant) -> _Variable:\n        '''Get address of a list cell at compile time.'''\n        if not 0 <= index.value < list.size:\n            # This case is never tested.\n            raise KcufError('Out of bounds list access')\n        return _Variable(list.address + _List.HEAD_SIZE + index.value)\n\n    def _ifeq(self, a: _Variable, b: _Rvalue) -> None:\n        self._ifeq_ifneq_impl('ifeq', a, b)\n\n    def _ifneq(self, a: _Variable, b: _Rvalue) -> None:\n        self._ifeq_ifneq_impl('ifneq', a, b)\n\n    def _ifeq_ifneq_impl(self, statement: Literal['ifeq', 'ifneq'],\n                         a: _Variable, b: _Rvalue) -> None:\n        cond_var = self._allocate_var()  # Freed after the end of the block.\n        self._not_equals(a, b, cond_var)\n        if statement == 'ifeq':\n            self._unary_not(cond_var)\n        self._append(cond_var, '[-')\n        block = _IfBlock(cond_var)\n        self._blocks.append(block)\n\n    def _unary_not(self, x: _Variable) -> None:\n        '''If `x` == 0, set `x` to 1. Else, set `x` to 0.'''\n        temp = self._allocate_var()\n        self._append(x, '[', temp, '+', x, '[-]]+')\n        self._append(temp, '[', x, '-', temp, '-]')\n        self._free(_Zeroed(temp))\n\n    def _wneq(self, a: _Variable, b: _Rvalue) -> None:\n        cond_var = self._allocate_var()  # Freed after the end of the block.\n        self._not_equals(a, b, cond_var)\n        self._append(cond_var, '[')\n        block = _WhileBlock(a, b, cond_var)\n        self._blocks.append(block)\n\n    def _end(self) -> None:\n        block = self._blocks.pop()\n        if isinstance(block, _WhileBlock):\n            self._not_equals(block.a, block.b, block.cond_var)\n        self._append(block.cond_var, ']')\n        if self._cleanup_blocks:\n            self._free(_Zeroed(block.cond_var))\n\n    def _read(self, var: _Variable) -> None:\n        self._append(var, ',')\n\n    def _msg(self, *args: _Variable | String) -> None:\n        for argument in args:\n            match argument:\n                case _Variable() as var:\n                    self._append(var, '.')\n                case String() as string:\n                    self._print_string(string)\n\n    def _print_string(self, string: String) -> None:\n        '''Generate hardcode for printing a string constant.'''\n        self._goto(self._stack_ptr)\n        for byte_value in eval(string).encode():\n            self._append('+' * byte_value, '.[-]')\n\n    def _free(self, *variables: _Variable | _Zeroed) -> None:\n        for var in variables:\n            if not isinstance(var, _Zeroed):\n                self._append(var, '[-]')\n            assert var.address == self._stack_ptr - 1, 'Invalid deallocation'\n            self._stack_ptr -= 1\n\n    def _allocate_copy(self, rv: _Rvalue) -> _Variable:\n        copy = self._allocate_var()\n        self._set(copy, rv)\n        return copy\n\n    def _allocate_list(self, size: int) -> _List:\n        address = self._allocate_stack(size + _List.HEAD_SIZE)\n        return _List(address, size)\n\n    def _allocate_var(self) -> _Variable:\n        address = self._allocate_stack()\n        return _Variable(address)\n\n    def _allocate_stack(self, size: int = 1) -> int:\n        pre_increment = self._stack_ptr\n        self._stack_ptr += size\n        return pre_increment\n\n    def _append(self, *args: str | _Variable) -> None:\n        '''For each argument:\n        * If `str`: treat it as BF code and append to the `_buffer` as is.\n        * If `Variable`: generate a jump to that variable.\n\n        This allows for a nice notation like the followng:\n        ```\n        A: Variable = ...\n        B: Variable = ...\n        self._append(A, '[-]', B, '[-]')  # set A and B to 0\n        ```\n        '''\n        for arg in args:\n            if isinstance(arg, _Variable):\n                self._goto(arg.address)\n            else:\n                self._buffer.append(arg)\n\n    def _goto(self, addr: int) -> None:\n        '''Generate a jump to the given cell.'''\n        offset = addr - self._ptr\n        if offset > 0:\n            self._buffer.append('>' * offset)\n        elif offset < 0:\n            self._buffer.append('<' * abs(offset))\n        self._ptr = addr\n\n\ndef generate_bf(program: Iterable[Statement]) -> str:\n    '''Translate a valid preprocessed `program` to BF.'''\n    # It's possible to compile everything in one pass:\n\n    # backend = _Backend(cleanup_blocks=False)\n    # for statement in program:\n    #     backend.generate(statement)\n    # return backend.get_full_result()\n\n    # But I prefer this approach:\n\n    backend = _Backend(cleanup_blocks=True)\n    pass1, pass2 = tee(program)\n    # Pre-allocate globals.\n    for statement in pass1:\n        if isinstance(statement, Var):\n            backend.generate(statement)\n    # Generate the other instructions.\n    for statement in pass2:\n        if not isinstance(statement, Var):\n            backend.generate(statement)\n    return backend.get_full_result()\n\n\n# -----------------------------------------------------------------------------\n#                                Transpiler\n#\n#              High-level pipeline of the other components.\n# -----------------------------------------------------------------------------\n\n\ndef kcuf(code: str) -> str:\n    tokens = lex(code)\n    program = parse(tokens)\n    program = preprocess(program)\n    return generate_bf(program)\n\n\nglobals_ = globals\n'''Weird anti-cheat messes with `globals` after this module is imported.'''",
  "5602e85d255e3240c2000024": "notes = \"A, A#, B, C, C#, D, D#, E, F, F#, G, G#\" . split(', ')\r\n\r\n\r\ndef what_note(string, fret):\r\n    return notes[(notes . index(string . upper()) + fret) % len(notes)]\r\n",
  "5a5c118380eba8a53d0000ce": "def convert_my_dollars(usd, currency):\r\n    if currency[0]. lower() in 'aeiou':\r\n    rate = CONVERSION_RATES[currency]\r\n    else:\r\n    rate = int(str(CONVERSION_RATES[currency]), 2)\r\n    return f'You now have { usd * rate } of { currency } .'\r\n",
  "57ed7214f670e99f7a000c73": "def ski_jump(mountain):\n    height = len(mountain)\n    speed = height * 1.5\n    jump_length = height * speed * 9 / 10\n    return (\n        f\" { jump_length : .2 f } metres: He's crap!\" if jump_length < 10 else\n        f\" { jump_length : .2 f } metres: He's ok!\" if jump_length < 25 else\n        f\" { jump_length : .2 f } metres: He's flying!\" if jump_length < 50 else\n        f\" { jump_length : .2 f } metres: Gold!!\"\n    )\n",
  "5649b9f069dacef88400005e": "def is_efficient(x, y, threshold):\r\n    o = 0\r\n    for i in range(x - 1, x + 2):\r\n    for j in range(y - 1, y + 2):\r\n    if 0 <= i <= 19 and 0 <= j <= 19:\r\n    o += float(FIELD[i][j])\r\n\r\n    return o >= threshold\r\n",
  "58558673b6b0e5a16b000028": "def fight_resolve(d, a):\r\n    return - 1 if d . islower() == a . islower() else d if d . lower() + a . lower() in \"ka sp as pk\" else a\r\n",
  "541837036d821665ee0006c2": "def get_required(p, e):\n    p, e = sum(p), sum(e)\n    if p - e >= 6:\n        return \"Auto-win\"\n    if p - e == 0:\n        return \"Random\"\n    if p - e <= - 6:\n        return \"Auto-lose\"\n    if p - e <= - 5:\n        return \"Pray for a tie!\"\n    if p > e:\n        return f\"( { e - p + 7 } ..6)\"\n    return f\"(1.. { p - e + 5 } )\"\n",
  "5a5bef7a5c770d08cd0032fa": "def agents(list_found, list_records):\r\n    if list_found:\r\n    return \"Match found\" if list_found in list_records else \"No matches\"\r\n",
  "5a5915b8d39ec5aa18000030": "def find_missing(arr1, arr2):\r\n    return sum(arr1) - sum(arr2)\r\n",
  "5a58d889880385c2f40000aa": "def automorphic(n):\r\n    return \"Automorphic\" if str(n * n). endswith(str(n)) else \"Not!!\"\r\n",
  "5a58d46cfd56cb4e8600009d": "def halving_sum(n):\r\n    s = 0\r\n    while n:\r\n    s += n\r\n    n >>= 1\r\n    return s\r\n",
  "5a58ca28e626c55ae000018a": "from math import sin, pi\n\n\ndef area_of_polygon_inside_circle(r, n):\n    return round(0.5 * n * r * * 2 * sin(2 * pi / n), 3)\n",
  "5a57d101cadebf03d40000b9": "import requests\r\nfrom bs4 import BeautifulSoup\r\n\r\n\r\ndef get_leaderboard_honor():\r\n    soup = BeautifulSoup(requests . get(\r\n        'https://www.codewars.com/users/leaderboard'). text)\r\n    return [\r\n        int(tr . find_all('td')[- 1]. text . replace(',', ''))\r\n        for tr in soup . select('div.leaderboard table tr')[1:]\r\n    ]\r\n",
  "5a2166f355519e161a000019": "from string import ascii_lowercase as aLow\r\nimport re\r\n\r\n\r\ndef rotateWord(w, alpha, dct, d):\r\n    lst = []\r\n    for i, c in enumerate(w . lower(), 1):\r\n    transChar = alpha[(dct[c] + i * d) % 26]\r\n    if w[i - 1]. isupper():\r\n        transChar = transChar . upper()\r\n    lst . append(transChar)\r\n    return '' . join(lst)\r\n\r\n    def encode(text, key, d=1):\r\n    remains, alpha = set(aLow), []\r\n    for c in key + aLow:\r\n    if c in remains:\r\n    remains . remove(c)\r\n    alpha . append(c)\r\n    alpha = '' . join(alpha)\r\n    dct = {c: i for i, c in enumerate(alpha)}\r\n    return re . sub(r'[a-zA-Z]+', lambda m: rotateWord(m . group(), alpha, dct, d), text)\r\n\r\n    def decode(text, key):\r\n    return encode(text, key, - 1)\r\n",
  "553ba31138239b9bc6000037": "def chameleon(chameleons, color):\r\n    (_, a), (_, b), (_, c) = sorted((i == color, v)\r\n                                    for i, v in enumerate(chameleons))\r\n    return - 1 if not a and not c or (b - a) % 3 else b\r\n",
  "56e9ac87c3e7d512bc001363": "def ascii_encrypt(plaintext):\r\n    return '' . join(chr(ord(c) + i) for i, c in enumerate(plaintext))\r\n\r\n    def ascii_decrypt(plaintext):\r\n    return '' . join(chr(ord(c) - i) for i, c in enumerate(plaintext))\r\n",
  "567cd7da4b9255b96b000022": "def square_free_part(n):\r\n    for i in range(2, int(n * * 0.5) + 1):\r\n    while n % (i * * 2) == 0:\r\n    n /= i\r\n    return n\r\n",
  "5a55f04be6be383a50000187": "def special_number(n):\r\n    return \"Special!!\" if max(str(n)) <= \"5\" else \"NOT!!\"\r\n",
  "570e6e32de4dc8a8340016dd": "class Lamp (object):\n    def __init__(self, color=None, on=False):\n    self . color = color\n    self . on = on\n    def toggle_switch(self):\n    self . on = not self . on\n    def state(self):\n    if self . on:\n        s = 'on'\n    else:\n        s = 'off'\n    return f'The lamp is { s } .'\n",
  "55709dc15ebd283cc9000007": "class JurassicWord (object):\r\n\r\n    TREX, VELO, BRAK, TRIS = \"A T-Rex\", \"A velociraptor\", \"A brachiosaurus\", \"A triceratops\"\r\n    MEAT, FLOW, LEAF = \"a dead dino\", \"flowers\", \"leaves\"\r\n    DEF = \"Something\"\r\n    DEF_ = DEF . lower()\r\n\r\n    EATEN = [((MEAT, 2, 3), \"_C\", \"C}>\"),\r\n             ((FLOW, 3, 3), \"iii\", \"iii\"),\r\n             ((LEAF, 3, 3), \"|||\", \"|||\")]\r\n    EATER = [(TREX, \"VvvvV\", (MEAT,)),\r\n             (VELO, \"vvvvv\", (MEAT,)),\r\n             (BRAK, \"uuuuu\", (FLOW, LEAF)),\r\n             (TRIS, \"uuVuu\", (FLOW,))]\r\n\r\n    def lunch_time(self, scene):\r\n    what, i, j = next((res for res, s, e in self . EATEN if scene . startswith(\r\n        s) and scene . endswith(e)), (self . DEF_, 3, 3))\r\n    eater = next((res for res, s, reg in self . EATER if scene[i: - j] == s and (\r\n        what == self . DEF_ or what in reg)), self . DEF)\r\n\r\n    return \"{} is eating {}.\" . format(eater, what)\r\n",
  "57cc79ec484cf991c900018d": "def db_sort(arr):\r\n    return sorted(arr, key=lambda x: (isinstance(x, str), x))\r\n",
  "582642b1083e12521f0000da": "def array_mash(xs, ys):\r\n    return [z for p in zip(xs, ys) for z in p]\r\n",
  "55953e906851cf2441000032": "import re\r\n\r\n\r\ndef scramble_words(words):\r\n    def sort_letters(match):\r\n    s = match . group()\r\n    letters = iter(sorted(filter(str . isalpha, s[1: - 1])))\r\n    return s[0] + \"\" . join(next(letters) if c . isalpha() else c for c in s[1: - 1]) + s[- 1]\r\n    return re . sub(r'[a-z][^\\s]*[a-z]', sort_letters, words)\r\n",
  "532a69ee484b0e27120000b6": "import math\r\n\r\n\r\nclass VectorInputCoordsValidationError (Exception):\r\n    \"\"\"Custom exception class for invalid input args given to the Vector instantiation\"\"\"\r\n    class Vector:\r\n        # https://www.mathsisfun.com/algebra/vectors.html\r\n\r\n    def __init__(self, * args):\r\n    try:\r\n    self . x, self . y, self . z = args if len(args) == 3 else args[0]\r\n    except ValueError:\r\n    raise VectorInputCoordsValidationError(\r\n        'Either give single iterable of 3 coords or pass them as *args')\r\n\r\n    def __add__(self, other) - > \"Vector\":\r\n    return Vector(\r\n        self . x + other . x,\r\n        self . y + other . y,\r\n        self . z + other . z\r\n    )\r\n\r\n    def __sub__(self, other) - > \"Vector\":\r\n\r\n    return Vector(\r\n        self . x - other . x,\r\n        self . y - other . y,\r\n        self . z - other . z\r\n    )\r\n\r\n    def __eq__(self, other) - > bool:\r\n        # https://www.grc.nasa.gov/www/k-12/airplane/vectcomp.html\r\n        # https://onlinemschool.com/math/library/vector/equality/\r\n    return all((\r\n        self . x == other . x,\r\n        self . y == other . y,\r\n        self . z == other . z\r\n    ))\r\n\r\n    def cross(self, other) - > \"Vector\":\r\n        # https://www.mathsisfun.com/algebra/vectors-cross-product.html\r\n    return Vector(\r\n        self . y * other . z - self . z * other . y,\r\n        self . z * other . x - self . x * other . z,\r\n        self . x * other . y - self . y * other . x\r\n    )\r\n\r\n    def dot(self, other) - > int:\r\n        # https://www.mathsisfun.com/algebra/vectors-dot-product.html\r\n    return self . x * other . x + self . y * other . y + self . z * other . z\r\n    def to_tuple(self) - > tuple:\r\n    return self . x, self . y, self . z\r\n    def __str__(self) - > str:\r\n    return \"<{x}, {y}, {z}>\" . format(* * self . __dict__)\r\n\r\n    @ property\r\n    def magnitude(self) - > float:\r\n    return math . sqrt(\r\n        sum(\r\n            (\r\n                self . x * * 2,\r\n                self . y * * 2,\r\n                self . z * * 2\r\n            )\r\n        )\r\n    )\r\n",
  "5441310626bc6a1e61000f2c": "def colorful(number):\r\n    base_result = []\r\n    for x in str(number):\r\n    base_result . append(int(x))\r\n    for y in range(len(base_result) - 1):\r\n    temp = base_result[y] * base_result[y + 1]\r\n    base_result . append(temp)\r\n    # Should you really eval the last value ? :shrug: If so, would use eval\r\n    return len(set(base_result)) == len(base_result)\r\n",
  "5672f4e3404d0609ec00000a": "def frame(text, char):\r\n    n = len(max(text, key=len)) + 4\r\n    return \"\\n\" . join([char * n] +\r\n                       [\"%s %s %s\" % (char, line . ljust(n - 4), char) for line in text] +\r\n                       [char * n])\r\n",
  "586d12f0aa042830910001d1": "import re\r\n\r\n\r\ndef fix(value):\r\n    digits = re . sub('\\D', '', value)\r\n    return '$' + digits[: - 2] + '.' + digits[- 2:]\r\n\r\n    def remove_char(values):\r\n    return [fix(v) for v in values]\r\n",
  "5a552ef7e6be3855270000bd": "import os\r\n\r\n\r\ndef first_line(path):\r\n    with open(path) as f:\r\n        return f . readline()\r\n\r\n    def create_file_dict(): return {k: first_line(k)\r\n                                    for k in next(os . walk('.'))[2]}\r\n",
  "5a54e796b3bfa8932c0000ed": "def jumping_number(number):\r\n    arr = list(map(int, str(number)))\r\n    return ('Not!!', 'Jumping!!')[all(map(lambda a, b: abs(a - b) == 1, arr, arr[1:]))]\r\n",
  "5357edc90d9c5df39a0013bc": "def redWith2Blues(i, line):\r\n    return any(line[i - 2 + x: i + 1 + x]. count('blue') == 2 for x in range(3))\r\n\r\n    def friend_find(line):\r\n    return sum(p == 'red' and redWith2Blues(i, line) for i, p in enumerate(line))\r\n",
  "571af500196bb01cc70014fa": "def mirror(code, chars=\"abcdefghijklmnopqrstuvwxyz\"):\r\n    return code . lower(). translate(str . maketrans(chars, chars[:: - 1]))\r\n",
  "57193a349906afdf67000f50": "def magic_sum(arr):\r\n    return arr and sum(x for x in arr if x % 2 and '3' in str(x)) or 0\r\n",
  "5635e7cb49adc7b54500001c": "def solve(n):\r\n    if n % 10:\r\n        return - 1\r\n    c, billet = 0, iter((500, 200, 100, 50, 20, 10))\r\n    while n:\r\n    x, r = divmod(n, next(billet))\r\n    c, n = c + x, r\r\n    return c\r\n",
  "586d79182e8d9cfaba0000f1": "from collections import Counter\nimport re\n\n\ndef is_isogram(word):\n    if type(word) is not str or not word:\n        return False\n    return len(set(Counter(re . sub(r'[^a-z]', \"\", word . lower())). values())) == 1\n",
  "547f601b4a437a2048000981": "def find_duplicates(emp):\r\n    dups, out, uniq = [], [], set()\r\n    for e in emp:\r\n    if e in uniq:\r\n        dups . append(e)\r\n    else:\r\n        out . append(e)\r\n        uniq . add(e)\r\n    emp . clear()\r\n    emp . extend(out)\r\n    return dups\r\n",
  "573c91c5eaffa3bd350000b0": "TOME = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'k': 10, 'l': 20, 'm': 30, 'n': 40, 'o': 50,\r\n        'p': 60, 'q': 70, 'r': 80, 's': 90, 't': 100, 'u': 200, 'x': 300, 'y': 400, 'z': 500, 'j': 600, 'v': 700, 'w': 900}\r\n\r\n\r\ndef gematria(s): return sum(TOME . get(c, 0) for c in s . lower())\r\n",
  "5495bfa82eced2146100002f": "from itertools import chain\r\nimport bisect\r\n\r\n\r\ndef merge_intervals(intervals):\r\n    intervals = iter(intervals)\r\n    merged = [next(intervals)]\r\n    for ins in intervals:\r\n    l, r = merged[- 1]\r\n    if ins[0] <= r:\r\n        merged[- 1] = (l, max(r, ins[1]))\r\n    else:\r\n        merged . append(ins)\r\n    return merged\r\n    def interval_insert(intervals, ins):\r\n    intervals = list(intervals)\r\n    bisect . insort(intervals, ins)\r\n    return merge_intervals(intervals)\r\n",
  "565f448e6e0190b0a40000cc": "from random import sample\r\n\r\n\r\ndef actually_really_good(foods):\r\n    question = \"You know what's actually really good? \"\r\n    len_foods = len(foods)\r\n    if len_foods == 0:\r\n    return question + \"Nothing!\"\r\n    elif len_foods == 1:\r\n    food = foods[0]\r\n    return question + f\" { food . capitalize ()} and more { food . lower ()} .\"\r\n    else:\r\n    [food1, food2] = sample(foods, 2)\r\n    return question + f\" { food1 . capitalize ()} and { food2 . lower ()} .\"\r\n",
  "53689951c8a5ca91ac000566": "def args_to_string(args):\r\n    L = []\r\n    for arg in args:\r\n    if isinstance(arg, str):\r\n    L . append(arg)\r\n    elif len(arg) == 1:\r\n    L . append(arg[0])\r\n    elif len(arg[0]) == 1:\r\n    L . append('-' + ' ' . join(arg))\r\n    else:\r\n    L . append('--' + ' ' . join(arg))\r\n    return ' ' . join(L)\r\n",
  "587e18b97a25e865530000d8": "from collections import Counter\n\n\ndef anagram_counter(words):\n    return sum(n * (n - 1) / / 2 for n in Counter('' . join(sorted(x)) for x in words). values())\n",
  "5a53a17bfd56cb9c14000003": "def disarium_number(n):\r\n    return \"Disarium !!\" if n == sum(int(d) * * i for i, d in enumerate(str(n), 1)) else \"Not !!\"\r\n",
  "56ad7a4978b5162445000056": "from collections import Counter\r\nfrom copy import *\r\n# only works for first case\r\n\r\n\r\ndef solution(tiles):\r\n    valid = \"\"\r\n    for i in range(1, 10):\r\n    x = tiles + str(i)\r\n    c = Counter(x)\r\n\r\n    if c . most_common(1)[0][1] < 5 and is_valid(Counter(x)):\r\n    valid += str(i)\r\n\r\n    return valid\r\n    def is_valid(hand, melds=0, pair=0):\r\n\r\n    hand = {k: v for k, v in hand . items() if v}\r\n    ordered_hand = sorted(hand, key=int)\r\n\r\n    if melds > 5 or pair > 1:\r\n    return False\r\n    if len(hand) == 0:\r\n    return True\r\n    if hand[ordered_hand[0]] > 1:\r\n    new_hand = deepcopy(hand)\r\n    new_hand[ordered_hand[0]] -= 2\r\n    if is_valid(new_hand, melds, pair + 1):\r\n        return True\r\n    if hand[ordered_hand[0]] > 2:\r\n    new_hand = deepcopy(hand)\r\n    new_hand[ordered_hand[0]] -= 3\r\n    if is_valid(new_hand, melds + 1, pair):\r\n        return True\r\n    if len(ordered_hand) > 2 and int(ordered_hand[0]) + 2 == int(ordered_hand[1]) + 1 == int(ordered_hand[2]):\r\n    new_hand = deepcopy(hand)\r\n    new_hand[ordered_hand[0]] -= 1\r\n    new_hand[ordered_hand[1]] -= 1\r\n    new_hand[ordered_hand[2]] -= 1\r\n    if is_valid(new_hand, melds + 1, pair):\r\n        return True\r\n    return False\r\n",
  "56a36b618e2548ddb400004d": "ranking = 'psmz'\r\n\r\n\r\ndef sorted_tiles(tiles):\r\n    return sorted(tiles, key=lambda x: (ranking . index(x[1]), int(x[0])))\r\n\r\n    def check_all_three(tiles):\r\n    s_tiles = sorted_tiles(tiles)\r\n    while s_tiles:\r\n    next = s_tiles[0]\r\n    if s_tiles . count(next) >= 3:\r\n    for i in range(3):\r\n    s_tiles . remove(next)\r\n    continue\r\n    if next[1] != 'z' and f\" { int ( next [ 0 ]) + 1 }{ next [ 1 ]} \" in s_tiles and f\" { int ( next [ 0 ]) + 2 }{ next [ 1 ]} \" in s_tiles:\r\n    for i in range(3):\r\n    s_tiles . remove(f\" { int ( next [ 0 ]) + i }{ next [ 1 ]} \")\r\n    else:\r\n    return False\r\n    return True\r\n    def solution(tiles):\r\n    res = []\r\n    tile_list = tiles . split(\" \")\r\n\r\n    all_tiles = [str(i) + c for c in ['p', 's', 'm']\r\n                 for i in range(1, 10)] + [str(i) + 'z' for i in range(1, 8)]\r\n    for new_tile in [x for x in all_tiles if x]:\r\n    new_hand = [new_tile] + tile_list\r\n    counts = [(x, new_hand . count(x)) for x in set(new_hand)]\r\n\r\n    if new_tile in [x[0] for x in counts if x[1] == 5]:\r\n    continue\r\n    if all(x[1] % 2 == 0 for x in counts):\r\n    res . append(new_tile)\r\n    continue\r\n    pairs = list(filter(lambda x: x[1] >= 2, counts))\r\n    for p in pairs:\r\n    short = new_hand[:]\r\n    short . remove(p[0])\r\n    short . remove(p[0])\r\n    if check_all_three(short):\r\n    res . append(new_tile)\r\n    break\r\n    res = sorted_tiles(list(set(res)))\r\n    return ' ' . join(res)\r\n",
  "5a47391c80eba865ea00003e": "class Segment:  # Instead of an abstract class, make it the implementation for all three subclasses\r\n    def __init__(self, * coords):\r\n    self . control_points = coords  # IMHO a getter/setter is overkill here\r\n    def control_points_at(self, t):  # Helper function\r\n    p = self . control_points\r\n    result = []\r\n    while p:\r\n    result . extend(p[: 2])\r\n    p = [v + (p[i + 2] - v) * t for i, v in enumerate(p[: - 2])]\r\n    return result\r\n    def point_at(self, t):\r\n    return tuple(self . control_points_at(t)[- 2:])\r\n\r\n    def sub_segment(self, t):\r\n    return self . __class__(* self . control_points_at(t))\r\n\r\n    class Line (Segment):\r\n        pass\r\n\r\n    class Quad (Segment):\r\n        pass\r\n\r\n    class Cubic (Segment):\r\n        pass\r\n",
  "59c053f070a3b7d19100007e": "from math import dist\r\n\r\n\r\ndef distance_from_line(a, b, c):\r\n    ca = dist(c, a)\r\n    cb = dist(c, b)\r\n    ab = dist(a, b)\r\n    s = (ca + cb + ab) / 2\r\n    area = (s * (s - ca) * (s - cb) * (s - ab)) * * (1 / 2)\r\n    if a == b:\r\n    return ca\r\n    h = (area * 2) / ab\r\n    return h\r\n",
  "5a523566b3bfa84c2e00010b": "def min_sum(arr):\r\n    arr = sorted(arr)\r\n    return sum(arr[i] * arr[- i - 1] for i in range(len(arr) / / 2))\r\n",
  "5a51717fa7ca4d133f001fdf": "def pack_bagpack(scores, weights, capacity):\r\n    load = [0] * (capacity + 1)\r\n    for score, weight in zip(scores, weights):\r\n    load = [max(l, weight <= w and load[w - weight] + score)\r\n            for w, l in enumerate(load)]\r\n    return load[- 1]\r\n",
  "5a511db1b3bfa8f45b000098": "def infected_zeroes(s):\r\n    m = 0\r\n    l = 0\r\n    for i, n in enumerate(s):\r\n    if n == 0:\r\n        m = i if l == 0 else max(m, (i - l + 1) / / 2)\r\n        l = i + 1\r\n    return max(m, len(s) - l)\r\n",
  "5a516c2efd56cbd7a8000058": "from itertools import product\r\n\r\n\r\ndef isPrime(n):\r\n    return n == 2 or n % 2 and all(n % p for p in range(3, int(n * * .5) + 1, 2))\r\n\r\n    def get_total_primes(a, b):\r\n    low, high = map(len, map(str, (a, b)))\r\n    return sum(a <= n < b and isPrime(n) for d in range(low, high + 1) for n in map(int, map('' . join, product(\"2357\", repeat=d))))\r\n",
  "5a512f6a80eba857280000fc": "def nth_smallest(arr, pos):\r\n    return sorted(arr)[pos - 1]\r\n",
  "53670c5867e9f2222f000225": "def is_orthogonal(u, v):\r\n    return sum(i * j for i, j in zip(u, v)) == 0\r\n",
  "59ea2a532a7accf2510000ce": "class Journey:\r\n\r\n    def __init__(self, object, crew, balloons):\r\n    self . base_weight = object['weight']\r\n    self . crew_weight = crew * 80\r\n    self . balloons_lifts = balloons * 0.0048\r\n    def isPossible(self):\r\n    return self . balloons_lifts >= self . base_weight + self . crew_weight\r\n",
  "5830e55fa317216de000001b": "def breakTheWeb(strength, width):\n    res = total = 0\n    for i in range(width):\n    for _ in range(width - i):\n    total += (i + 1) * 1000\n    if total > strength:\n        return res\n    res += 1\n    return res\n",
  "5879f95892074d769f000272": "from math import sin, atan\n\n\ndef temps(v0, slope, d_tot):\n    GRAVITY_ACC = 9.81 * 3.6 * 60.0  # gravity acceleration\n    DRAG = 60.0 * 0.3 / 3.6  # force applied by air on the cyclist\n    DELTA_T = 1.0 / 60.0  # in minutes\n    D_WATTS = 0.5  # power loss in Watts / minute\n    G_THRUST = 60 * 3.6 * 3.6  # acceleration due to biker's power\n    MASS = 80  # biker's MASS\n    WATTS0 = 225  # initial biker's power\n    t = 0.0  # time in minutes\n    d = 0.0  # distance traveled in km\n    v = v0  # initial speed km/h\n    gamma = 0.0  # acceleration in km/h/minute\n    # biker's power (watts at time t + DELTA_T is watts at time t - D_WATTS * DELTA_T)\n    watts = WATTS0\n    slopeGravityAcc = - GRAVITY_ACC * sin(atan(slope / 100.0))\n    while (d <= d_tot):\n    t += DELTA_T\n    # new power\n    watts -= D_WATTS * DELTA_T  # tiredness\n    # earth gravity due to slope and DRAG due to air resistance\n    gamma = slopeGravityAcc - DRAG * abs(v) * abs(v) / MASS\n    # acceleration due to biker's power\n    if ((watts > 0.0) and (v > 0.0)):\n    gamma += G_THRUST * watts / (v * MASS)\n    # acceleration too small -> acc = 0\n    if (abs(gamma) <= 1e-5):\n    gamma = 0.0\n    else:\n    v += gamma * DELTA_T\n    # new distance\n    d += v * DELTA_T / 60.0  # v in km/h, DELTA_T in minutes\n    # speed too slow, John stops\n    if (v - 3.0 <= 1e-2):\n    return - 1\n    return round(t)\n",
  "5a4ea304b3bfa89a9900008e": "def max_number(n):\r\n    return int('' . join(sorted(str(n), reverse=True)))\r\n",
  "5a4e3782880385ba68000018": "def balancedNum(n):\r\n    s = str(n)\r\n    l = (len(s) - 1) / / 2\r\n    same = len(s) < 3 or sum(map(int, s[: l])) == sum(map(int, s[- l:]))\r\n    return \"Balanced\" if same else \"Not Balanced\"\r\n    balanced_num = balancedNum\r\n",
  "5416fac7932c1dcc4f0006b4": "def lucas_lehmer(n):\r\n    return n in [2, 3, 5, 7, 13, 17, 19, 31, 61, 89, 107, 127, 521, 607, 1279,\r\n                 2203, 2281, 3217, 4253, 4423, 9689, 9941, 11213, 19937, 21701,\r\n                 23209, 44497, 86243, 110503, 132049, 216091, 756839, 859433,\r\n                 1257787, 1398269, 2976221, 3021377, 6972593, 13466917, 20996011,\r\n                 24036583, 25964951, 30402457, 32582657, 3715666]\r\n",
  "580f1220df91273ee90001e7": "def fixed_xor(a, b):\r\n    return \"\" . join(f\" { int ( x , 16 ) ^ int ( y , 16 ): x } \" for x, y in zip(a, b))\r\n",
  "59841e5084533834d6000025": "def flipping_game(a):\r\n    current = best = 0\r\n    for n in a:\r\n    current = max(0, current - (n or - 1))\r\n    best = max(best, current)\r\n    return sum(a) + (best or - 1)\r\n",
  "55332880e679dd9cb3000081": "import math\r\n\r\n\r\ndef bocce_score(balls):\r\n    xy = balls[- 1]['distance']\r\n    balls = balls[: - 1]\r\n    for b in balls:\r\n    b['distance'] = math . sqrt(((xy[0] - b['distance'][0]) * * 2) + ((xy[1] - b['distance'][1]) * * 2))\r\n    reds = [x for x in balls if x['type'] == \"red\"]\r\n    blacks = [x for x in balls if x['type'] == \"black\"]\r\n    red = min(reds, key=lambda x: x['distance'])['distance']\r\n    black = min(blacks, key=lambda x: x['distance'])['distance']\r\n\r\n    if black == red:\r\n    return \"No points scored\"\r\n    elif black < red:\r\n    return \"black scores %d\" % len([x for x in blacks if x['distance'] < red])\r\n    else:\r\n    return \"red scores %d\" % len([x for x in reds if x['distance'] < black])\r\n",
  "536cce5f49aa8b3648000b52": "def patch_data(s):\r\n    r, p = '', 0\r\n    while p < len(s):\r\n    ll = ord(s[p]) + 256 * ord(s[p + 1])\r\n    r += s[p: p + ll + 2] + chr(244) + chr(1)\r\n    p += 4 + ll\r\n    return r\r\n",
  "5820e17770ca28df760012d7": "import heapq\r\nimport itertools\r\n\r\n\r\ndef sort(iterable):\r\n    heap = list(iterable)\r\n    heapq . heapify(heap)\r\n    return (heapq . heappop(heap) for i in range(len(heap)))\r\n",
  "571df7c31f95429529000092": "def poly_from_roots(rs):\r\n    return reduce(poly_multiply, [[- r, 1] for r in rs]) if rs else [1]\r\n",
  "58bd011fd0efbec33400001f": "def black_hole(n, a, b):\n    cont = min(a, b, n - 1 - a, n - 1 - b)\n    start = 4 * cont * (n - 2 * cont + 1) + 4 * cont * \\\n        (cont - 1) if cont > 0 else 0\n    n, a, b = n - 2 * cont, a - cont, b - cont\n    fin = (1 + 4 * b if a == 0 and b < n - 1 else 2 + 4 * a if b == n - 1 and a < n - 1 else\n           3 + 4 * (n - 1 - b) if a == n - 1 and b > 0 else 4 + 4 * (n - 1 - a)) if n > 1 else 1\n    return start + fin\n",
  "5a4b612ee626c5d116000084": "def funnel_out(funnel):\r\n    r = \"\"\r\n    h = len(funnel)\r\n    while funnel[h - 1][0] != \"~\":\r\n    r += funnel[h - 1][0]\r\n    funnel[h - 1][0] = \"~\"\r\n    i = h - 1\r\n    j = 0\r\n    while i > 0:\r\n    if funnel[i - 1][j] < funnel[i - 1][j + 1]:\r\n    funnel[i][j] = funnel[i - 1][j]\r\n    funnel[i - 1][j] = \"~\"\r\n    else:\r\n    funnel[i][j] = funnel[i - 1][j + 1]\r\n    funnel[i - 1][j + 1] = \"~\"\r\n    j += 1\r\n    i -= 1\r\n    print(funnel)\r\n    return r\r\n",
  "561c34b31dbb1b11640000de": "from gmpy2 import is_prime\r\nprimes = [n for n in range(3, int(1e6), 4) if is_prime(n)]\r\n\r\n\r\ndef ith_nondecomp_prime(i):\r\n    return primes[i - 1]\r\n",
  "58c1446b61aefc34620000aa": "def egged(year, span):\r\n    total = 0\r\n    eggs_per_chicken = 300\r\n    for i in range(min(span, year)):\r\n    total += 3 * eggs_per_chicken\r\n    eggs_per_chicken = int(eggs_per_chicken * 0.8)\r\n\r\n    return total or \"No chickens yet!\"\r\n",
  "5a4d303f880385399b000001": "import math\n\n\ndef strong_num(number):\n    return \"STRONG!!!!\" if sum(math . factorial(int(i)) for i in str(number)) == number else \"Not Strong !!\"\n",
  "59f98052120be4abfa000304": "def upsidedown(a, b):\r\n    a, b = str(a), str(int(b) + 1)\r\n    ans = _solve_len_ge(len(a), a)\r\n    for i in range(len(a) + 1, len(b) + 1):\r\n    ans += _solve_len(i)\r\n    return ans - _solve_len_ge(len(b), b)\r\n\r\n    def _solve_len(n):\r\n    if n == 1:\r\n        return 3\r\n    if n % 2 == 0:\r\n        return 4 * 5 * * (n / / 2 - 1)\r\n    return 4 * 5 * * (n / / 2 - 1) * 3\r\n    def _solve_len_w0(n):\r\n    if n % 2 == 0:\r\n        return 5 * * (n / / 2)\r\n    return 5 * * (n / / 2) * 3\r\n    def _solve_len_ge(n, v):\r\n    tmp = ''\r\n    ans = _solve_len_w0(n)\r\n    for i in range(n / / 2):\r\n    for d in '01689':\r\n    if tmp + d < v[: i + 1]:\r\n    ans -= _solve_len_w0(n - 2 - i * 2)\r\n    elif tmp + d > v[: i + 1]:\r\n    return ans\r\n    else:\r\n    tmp += d\r\n    break\r\n    else:\r\n        return ans\r\n    if n % 2:\r\n    i = n / / 2\r\n    for d in '018':\r\n    if tmp + d < v[: i + 1]:\r\n    ans -= 1\r\n    elif tmp + d > v[: i + 1]:\r\n    return ans\r\n    else:\r\n    tmp += d\r\n    break\r\n    else:\r\n        return ans\r\n    trans = str . maketrans('69', '96')\r\n    tmp += (tmp[:: - 1] if n %\r\n            2 == 0 else tmp[: - 1][:: - 1]). translate(trans)\r\n    return ans - (tmp < v)\r\n",
  "5a48948e145c46820b00002f": "def prime_factors_length(n):\r\n    cnt, i = 0, 2\r\n    while (i * i <= n):\r\n    while (n % i == 0):\r\n    cnt += 1\r\n    n /= i\r\n    i += 1\r\n    if (n > 1):\r\n        cnt += 1\r\n    return cnt\r\n    def kprimes_step(k, step, start, nd):\r\n    res = []\r\n    for i in range(start, nd - step + 1):\r\n    if (prime_factors_length(i) == k and prime_factors_length(i + step) == k):\r\n    res . append([i, i + step])\r\n    return res\r\n",
  "5a479247e6be385a41000064": "import itertools\r\n\r\n\r\nclass Nonogram:\r\n    poss = {(1, 1, 1): set([(1, 0, 1, 0, 1)]),\r\n            (1, 1): set([(0, 0, 1, 0, 1), (0, 1, 0, 1, 0), (1, 0, 1, 0, 0), (0, 1, 0, 0, 1), (1, 0, 0, 1, 0), (1, 0, 0, 0, 1)]),\r\n            (1, 2): set([(1, 0, 1, 1, 0), (1, 0, 0, 1, 1), (0, 1, 0, 1, 1)]),\r\n            (1, 3): set([(1, 0, 1, 1, 1)]),\r\n            (2, 1): set([(1, 1, 0, 1, 0), (1, 1, 0, 0, 1), (0, 1, 1, 0, 1)]),\r\n            (2, 2): set([(1, 1, 0, 1, 1)]),\r\n            (3, 1): set([(1, 1, 1, 0, 1)]),\r\n            (1,): set([(0, 0, 0, 0, 1), (0, 0, 0, 1, 0), (0, 0, 1, 0, 0), (0, 1, 0, 0, 0), (1, 0, 0, 0, 0)]),\r\n            (2,): set([(0, 0, 0, 1, 1), (0, 0, 1, 1, 0), (0, 1, 1, 0, 0), (1, 1, 0, 0, 0)]),\r\n            (3,): set([(0, 0, 1, 1, 1), (0, 1, 1, 1, 0), (1, 1, 1, 0, 0)]),\r\n            (4,): set([(0, 1, 1, 1, 1), (1, 1, 1, 1, 0)]),\r\n            (5,): set([(1, 1, 1, 1, 1)])}\r\n\r\n    def __init__(self, clues):\r\n    self . h, self . w = (\r\n        tuple(Nonogram . poss[clue] for clue in side) for side in clues)\r\n\r\n    def solve(self):\r\n    for r in itertools . product(* self . w):\r\n    if all(c in self . h[i] for i, c in enumerate(zip(* r))):\r\n        return r\r\n",
  "586423aa39c5abfcec0001e6": "from functools import total_ordering\r\n\r\n\r\n@ total_ordering\r\nclass PokerHand (object):\r\n    CARDS = \"AKQJT987654321\"\r\n    RANKS = {card: idx for idx, card in enumerate(CARDS)}\r\n\r\n    def score(self, hand):\r\n    values, suits = zip(* hand . split())\r\n    idxs, ordered = zip(\r\n        * sorted((self . RANKS[card], card) for card in values))\r\n    is_straight = '' . join(ordered) in self . CARDS\r\n    is_flush = len(set(suits)) == 1\r\n    return (- 2 * sum(values . count(card) for card in values)\r\n            - 13 * is_straight - 15 * is_flush, idxs)\r\n\r\n    def __init__(self, hand):\r\n    self . hand = hand\r\n    self . score = min(self . score(\r\n        hand), self . score(hand . replace('A', '1')))\r\n\r\n    def __repr__(self): return self . hand\r\n    def __eq__(self, other): return self . score == other . score\r\n    def __lt__(self, other): return self . score < other . score\r\n",
  "5a34c8ce55519ecb15000012": "def king_move_combo(ar):\r\n    n = len(ar)\r\n    field = list(map(list, ar))\r\n    def max_move(x0, y0):\r\n    mm = 0\r\n    for dx, dy in ((- 1, - 1), (- 1, 1), (1, 1), (1, - 1)):\r\n    x, y = x0 + 2 * dx, y0 + 2 * dy\r\n    if x >= 0 and x < n and y >= 0 and y < n:\r\n    xe, ye = x0 + dx, y0 + dy\r\n    if field[xe][ye] == 'X':\r\n    field[xe][ye] = ' '\r\n    m = max_move(x, y) + 1\r\n    if m > mm:\r\n    mm = m\r\n    field[xe][ye] = 'X'\r\n    return mm\r\n    return max_move(* next((x, y) for x, r in enumerate(field) for y, c in enumerate(r) if c == 'K'))\r\n",
  "59c1d64b9f0cbcf5740001ab": "import numpy as np\r\n\r\n\r\ndef slope(p1, p2):\r\n    dx, dy = vectorize(p1, p2)\r\n    return dy / dx if dx else float(\"inf\")\r\n\r\n    def vectorize(p1, p2): return [b - a for a, b in zip(p1, p2)]\r\n    def getArea(p1, p2, p3): return np . cross(\r\n        vectorize(p1, p2), vectorize(p1, p3)) / 2\r\n\r\n    def isConcave(p1, pivot, p2): return getArea(pivot, p1, p2) >= 0\r\n    def convex_hull_area(points):\r\n    if len(points) < 3:\r\n        return 0\r\n    # Leftmost point in the graph (lowest if several ones at the same x)\r\n    Z = min(points)\r\n    q = sorted((pt for pt in points if pt != Z),\r\n               key=lambda pt: (- slope(pt, Z), - np . linalg . norm(vectorize(Z, pt))))  # sorted points accordingly to the slope of the line formed by \"pt\" and \"Z\" (in reversed order)\r\n    hull = [Z, q . pop()]  # Construct the convex hull (Graham Scan)\r\n    while q:\r\n    pt = q . pop()\r\n    while len(hull) > 1 and isConcave(hull[- 2], hull[- 1], pt):\r\n    hull . pop()\r\n    hull . append(pt)\r\n\r\n    # Calculate area of the hull by adding the area of all the triangles formed by 2 consecutive points in the hull and having Z as summit\r\n    area = sum(getArea(Z, hull[i], hull[i + 1])\r\n               for i in range(1, len(hull) - 1))\r\n    return round(area, 2)\r\n",
  "5657d8bdafec0a27c800000f": "def hull_method(points):\r\n    sorted_points = sorted(points)\r\n    return half_hull(sorted_points) + half_hull(reversed(sorted_points))\r\n\r\n    def half_hull(sorted_points):\r\n    hull = []\r\n    for p in sorted_points:\r\n    while len(hull) > 1 and not is_ccw_turn(hull[- 2], hull[- 1], p):\r\n    hull . pop()\r\n    hull . append(p)\r\n    hull . pop()\r\n    return hull\r\n    def is_ccw_turn(p0, p1, p2):\r\n    return (p1[0] - p0[0]) * (p2[1] - p0[1]) - (p2[0] - p0[0]) * (p1[1] - p0[1]) > 0\r\n",
  "5a2a597a8882f392020005e5": "from collections import deque\r\n\r\n\r\ndef blox_solver(arr):\r\n\r\n    def isSame(A, B): return A == B  # bloxorz has is pieces superposed\r\n    # bloxorz is vertical (looking the board from above)\r\n    def isVert(A, B): return A[0] != B[0]\r\n    # bloxorz is horizontal (looking the board from above)\r\n    def isHorz(A, B): return A[1] != B[1]\r\n    def moveBlox(m, A, B):  # Move bloxorz according to its current position and the expected direction\r\n    (xA, yA), (xB, yB) = A, B\r\n    dx, dy, fA, fB = DELTAS[m]\r\n    nA = ((xA + dx * (1 + fA(A, B))), (yA + dy * (1 + fA(A, B))))\r\n    nB = ((xB + dx * (1 + fB(A, B))), (yB + dy * (1 + fB(A, B))))\r\n    return tuple(sorted((nA, nB)))\r\n\r\n    # dx,dy conditional modifiers (fA, fB)\r\n    DELTAS = {\"U\": (- 1, 0, isSame, isVert),\r\n              \"D\": (1, 0, isVert, isSame),\r\n              \"L\": (0, - 1, isSame, isHorz),\r\n              \"R\": (0, 1, isHorz, isSame)}\r\n    INF = float(\"inf\")\r\n\r\n    \"\"\" Accumulate data \"\"\"\r\n    board = set()\r\n    for x, line in enumerate(arr):\r\n    for y, c in enumerate(line):\r\n    if c == '0':\r\n        continue\r\n    board . add((x, y))\r\n    if c == 'B':\r\n        blox = ((x, y), (x, y))  # initial position\r\n    elif c == 'X':\r\n        end = ((x, y), (x, y))  # finish position\r\n    \"\"\" VERY crude BFS search \"\"\"\r\n    q, seen, prev, round = deque([blox]), {blox: 0}, {blox: (None, None)}, 0\r\n    while q and q[- 1] != end:\r\n    round += 1\r\n    A, B = blox = q . pop()\r\n    for m in DELTAS:\r\n    nA, nB = nblox = moveBlox(m, A, B)\r\n    if nA in board and nB in board and round < seen . get(nblox, INF):\r\n    q . appendleft(nblox)\r\n    seen[nblox] = round\r\n    prev[nblox] = (blox, m)\r\n\r\n    \"\"\" rebuild the shortest path \"\"\"\r\n    path, (pos, m) = [], prev[end]\r\n    while m is not None:\r\n    path . append(m)\r\n    pos, m = prev[pos]\r\n\r\n    return '' . join(path[:: - 1])\r\n",
  "59315ad28f0ebeebee000159": "class PlayerMovement:\r\n    def __init__(self, x, y):\r\n    self . position = Tile(x, y)\r\n    self . direction = 8\r\n    self . a = []\r\n    self . q = []\r\n\r\n    def update(self):\r\n    a = [Input . get_state(x) for x in (6, 4, 2, 8)]\r\n    for s, d in zip(a, (6, 4, 2, 8)):\r\n    if d in self . q and not s:\r\n    self . q . remove(d)\r\n    elif d not in self . q and s:\r\n    self . q . append(d)\r\n    if self . q:\r\n    d = self . q[- 1]\r\n    if any(self . a) and d == self . direction:\r\n    self . position = Tile(self . position . x + (d == 6) -\r\n                           (d == 4), self . position . y + (d == 8) - (d == 2))\r\n    self . direction = d\r\n    self . a = a\r\n",
  "5a4bdd73d8e145f17d000035": "import numpy as np\n\n\ndef sort_nested_list(A):\n    return np . sort(A, axis=None). reshape(np . array(A). shape). tolist()\n",
  "5a491f0be6be389dbb000117": "def game(maxMike, maxJoe):\n    roundsMike = int(maxMike * * .5)\n    roundsJoe = (- 1 + (1 + 4 * maxJoe) * * .5) / / 2\n    return (\"Non-drinkers can't play\" if not maxMike or not maxJoe else\n            \"Joe\" if roundsMike <= roundsJoe else\n            \"Mike\")\n",
  "5a4a2973d8e14586c700000a": "from collections import Counter\nfrom functools import reduce\nfrom fractions import gcd\n\n\ndef has_subpattern(s):\n    c = Counter(s)\n    m = reduce(gcd, c . values())\n    return '' . join(sorted(k * (v / / m) for k, v in c . items()))\n",
  "5a392890c5e284a7a300003f": "def crosstable(players, results):\r\n    n = len(players)\r\n\r\n    # calculating\r\n    pts = [sum(s for s in row if s != None) for row in results]\r\n    sb = [sum(s * pts for (s, pts) in zip(row, pts) if s != None)\r\n          for row in results]\r\n    surnames = [p . split(' ')[1] for p in players]\r\n\r\n    # sorting\r\n    table = zip(range(n), players, pts, sb, surnames)\r\n    table = sorted(table, key=lambda l: (- l[2], - l[3], l[4]))\r\n    ind, players, pts, sb, surnames = zip(* table)\r\n    dict = {None: ' ', 0: '0', 0.5: '=', 1: '1'}\r\n    results = [[dict[results[i][j]] for i in ind] for j in ind]\r\n\r\n    # ranking\r\n    rank = ['1']\r\n    for i in range(1, n):\r\n    same = (pts[i] == pts[i - 1] and sb[i] == sb[i - 1])\r\n    rank += [' '] if same else [str(i + 1)]\r\n\r\n    # formating\r\n    header = ['#', 'Player', 'Pts', 'SB'] + [str(x + 1) for x in range(n)]\r\n    pts = [f\" { x : .1 f } \" for x in pts]\r\n    sb = [f\" { x : .2 f } \" for x in sb]\r\n    out = list(zip(rank, players, pts, sb, * results))\r\n\r\n    w = [max(len(out[i][j]) for i in range(n))\r\n         for j in range(4)] + [len(str(n))]\r\n    form = \"{o[0]:>{w[0]}} {o[1]:<{w[1]}} \" \\\r\n        + \" \" . join(\"{o[\" + str(i + 4) + \"]:>{w[4]}}\" for i in range(n)) \\\r\n        + \" {o[2]:^{w[2]}} {o[3]:^{w[3]}}\"\r\n    header = form . format(o=header, w=w)\r\n    out = [header . rstrip()] \\\r\n        + ['=' * len(header)] \\\r\n        + [form . replace(\"^\", \">\"). format(o=o, w=w) for o in out]\r\n    return '\\n' . join(out)\r\n",
  "5a3357ae8058425bde002674": "def shift(string, step):\r\n    i = (step % len(string)) if string else 0\r\n    return f\" { string [ - i :]}{ string [: - i ]} \"\r\n    def encode(n, string):\r\n    for _ in range(n):\r\n    shifted = shift(string . replace(\" \", \"\"), n)\r\n    l = [len(word) for word in string . split(\" \")]\r\n    string = \" \" . join(\r\n        shift(shifted[sum(l[: i]): sum(l[: i + 1])], n) for i in range(len(l)))\r\n    return f\" { n } { string } \"\r\n    def decode(string):\r\n    n, string = int(string . partition(\" \")[0]), string . partition(\" \")[2]\r\n    for _ in range(n):\r\n    shifted = shift(\"\" . join(shift(word, - n)\r\n                    for word in string . split(\" \")), - n)\r\n    l = [len(word) for word in string . split(\" \")]\r\n    string = \" \" . join(shifted[sum(l[: i]): sum(l[: i + 1])]\r\n                        for i in range(len(l)))\r\n    return string\r\n",
  "5a24a35a837545ab04001614": "def interlaced_spiral(s):\r\n    n = int((s - 1) * * .5) + 1\r\n    for x, r in enumerate(range(n, 0, - 2)):\r\n    for y in range(x, x + r - (r > 1)):\r\n    for _ in range(4):\r\n    yield x * n + y\r\n    if r == 1:\r\n        return\r\n    x, y = y, n - x - 1\r\n    def encode(s):\r\n    table = {j: i for i, j in enumerate(interlaced_spiral(len(s)))}\r\n    return '' . join(s[i] if i < len(s) else ' ' for i in map(table . get, range(len(table))))\r\n\r\n    def decode(s):\r\n    return '' . join(s[i] for i in interlaced_spiral(len(s))). rstrip()\r\n",
  "55eec0ee00ae4a8fa0000075": "from collections import Counter\n\n\ndef permutational_primes(n_max, k_perms):\n    print(n_max, k_perms)\n    # list of primes\n    P = [2] + [n for n in range(2, n_max) if all(n % i != 0 for i in range(2, int(n * * (0.5)) + 2))]\n    A = [\"\" . join(sorted(str(p))) for p in P]  # convert e.g. 839 to 389\n    B = Counter(A). items()  # count repetition of converted versions\n    # only primes with wanted repetition\n    C = [a for (a, b) in B if b == k_perms + 1]\n    if C == []:\n        return [0, 0, 0]  # is there any?\n    D = [P[A . index(c)] for c in C]  # save first accurance in P\n    return [len(D), D[0], D[- 1]]\n",
  "5a4adff7e626c53463000015": "from collections import Counter\r\n\r\n\r\ndef the_order_of(ribbons):\r\n\r\n    def extractH(row): return next(\r\n        (d for d, n in Counter(row). items() if n > 1 and d != '.'), None)\r\n\r\n    horz = {d for d in map(extractH, ribbons . split('\\n')) if d}\r\n    cnt = Counter(filter(str . isdigit, ribbons))\r\n    tic = max(cnt . items(), key=lambda it: it[1])[0] in horz\r\n    cnt = sorted(cnt . items(), key=lambda it: (it[1], tic != (it[0] in horz)))\r\n    return '' . join(d for d, _ in cnt)\r\n",
  "5a4b16435f08299c7000274f": "def sum_square_even_root_odd(nums):\r\n    return round(sum(n * * 2 if n % 2 == 0 else n * * 0.5 for n in nums), 2)\r\n",
  "5a3267b2ee1aaead3d000037": "from collections import defaultdict\r\nTABLE = str . maketrans(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\r\n                        \"22233344455566677778889999\")\r\n\r\nNUMS = defaultdict(list)\r\nfor w in WORDS:\r\n    NUMS[w . translate(TABLE)]. append(w)\r\n\r\n    def check1800(s):\r\n    num = s[6:]. replace('-', ''). translate(TABLE)\r\n    return {f'1-800- { a } - { b } ' for s, e in ((num[: i], num[i:]) for i in (3, 4) if NUMS[num[: i]] and NUMS[num[i:]])\r\n            for a in NUMS[s] for b in NUMS[e]}\r\n",
  "5a4a167ad8e1453a0b000050": "from functools import reduce\n\n\ndef crashing_weights(weights):\n    return reduce(lambda a, b: [a1 + b1 if a1 > b1 else b1 for a1, b1 in zip(a, b)], weights)\n",
  "5a4a391ad8e145cdee0000c4": "from collections import Counter\nfrom functools import reduce\nfrom math import gcd\n\n\ndef has_subpattern(string):\n    return reduce(gcd, Counter(string). values()) != 1\n",
  "5a49f074b3bfa89b4c00002b": "def has_subpattern(string):\r\n    return (string * 2). find(string, 1) != len(string)\r\n",
  "5a48c7e1e626c56fb7000092": "s, n = [], 1\n   for i in range(200):\n        s . append(n)\n        n = 2 * n * (2 * i + 1) / / (i + 2)\n    def hankel_matrix_maker (n ): return [s [i : i + n ] for i in range ( n )]",
  "5a47d5ddd8e145ff6200004e": "def find_variable():\r\n    return next(k for k, v in globals(). items() if v == 777)\r\n",
  "5a1e1b69697598459d000057": "def fetch_recursion_limit():\r\n    try:\r\n    return 1 + fetch_recursion_limit()\r\n    except RuntimeError:\r\n    return 2\r\n",
  "5a3f61bab6cfd7acbc000001": "def max_mirror(arr):\r\n    n, r_arr = len(arr), arr[:: - 1]\r\n    for i in range(n, 1, - 1):\r\n    s1, s2 = set(), set()\r\n    for j in range(n - i + 1):\r\n    s1 . add(tuple(arr[j: j + i]))\r\n    s2 . add(tuple(r_arr[j: j + i]))\r\n    if s1 & s2:\r\n    return i\r\n    return 0\r\n",
  "5a40fc7ce1ce0e34440000a3": "from collections import Counter\n\n\ndef is_dd(n):\n    return any(value == count for value, count in Counter(int(x) for x in str(n)). items())\n",
  "5a438bc1e1ce0e129100005a": "def unusual_lex_order(a):\r\n    return sorted(a, key=lambda k: k[:: - 1])\r\n",
  "5a4331b18f27f2b31f000085": "def replace_letters(word):\r\n    return word . translate(str . maketrans('abcdefghijklmnopqrstuvwxyz', 'zeeediiihooooonuuuuutaaaaa'))\r\n",
  "5a433c7a8f27f23bb00000dc": "def split_by_value(k, elements):\r\n    return sorted(elements, key=lambda x: x >= k)\r\n",
  "5a431c0de1ce0ec33a00000c": "def even_numbers(arr, n):\r\n    return [i for i in arr if i % 2 == 0][- n:]\r\n",
  "5a4138acf28b82aa43000117": "def adjacent_element_product(array):\r\n    return max(a * b for a, b in zip(array, array[1:]))\r\n",
  "5a3f2925b6cfd78fb0000040": "def solve(s):\n    if len(s) % 2:\n        return - 1\n    # imagine a simple symmetric random walk; '(' is a step up and ')' is a step down. We must stay above the original position\n    height = 0\n    counter = 0\n    for x in s:\n    if x == '(':\n    height += 1\n    else:\n    height -= 1\n    if height < 0:\n    counter += 1\n    height += 2\n    # counter is the number of flips from ')' to '(', height//2 number of opposite flips\n    return counter + height / / 2\n",
  "5a4076f3e1ce0ee6d4000010": "def center_of(chars):\r\n    if not chars:\r\n        return ''\r\n    res, ln, nxt, step = [chars[0]], len(chars), 4, 4\r\n    while len(res) < len(chars) or len(res) % 2 or res[: len(res) / / 2] != res[len(res) / / 2:]:\r\n    res . append(chars[nxt % ln])\r\n    step += 4\r\n    nxt += step\r\n    ind = next(k for k in range(1, len(res) / / 2 + 1) if len(res) % k == 0 and res == res[: k] * (len(res) / / k))\r\n    return '' . join(res[: ind])\r\n",
  "5a40f5b01f7f70ed7600001e": "def drag_race(d, * cars):\r\n    def fullTime(car): return d / car . speed + car . reaction_time\r\n    t1, t2 = map(fullTime, cars)\r\n    return (\"It's a draw\" if abs(t1 - t2) < 1e-10 else\r\n            \"{} is the winner\" . format(\"Anna\" if t1 < t2 else \"Bob\"))\r\n",
  "5a40c250c5e284a76400008c": "def bouncing_ball(initial, proportion):\n    count = 0\n    while initial > 1:\n    initial = initial * proportion\n    count = count + 1\n    return count\n",
  "5a405ba4e1ce0e1d7800012e": "def custom_christmas_tree(chars, n):\r\n    from itertools import cycle\r\n    it = cycle(chars)\r\n    tree = [' ' . join(next(it) for j in range(i)). center(\r\n        2 * n). rstrip() for i in range(1, n + 1)]\r\n    tree . extend('|' . center(2 * n). rstrip() for _ in range(n / / 3))\r\n    return '\\n' . join(tree)\r\n",
  "5a3bedd38f27f246c200005f": "from functools import reduce\n\n\ndef solve(st):\n    res, s, k = [], \"\", 1\n    for ch in st:\n    if ch == '(':\n        res . append(k)\n        k = 1\n    elif ch == ')':\n        res . pop()\n        k = 1\n    elif ch == '-':\n        k = - 1\n    elif ch == '+':\n        k = 1\n    else:\n        s += '-' + ch if (reduce(lambda a, b: a * b, res, 1)\n                          * (1 if k == 1 else - 1) < 0) else '+' + ch\n    return s if s[0] == '-' else s[1:]\n",
  "5a3e1319b6486ac96f000049": "def pairs(ar):\r\n    res = 0\r\n    for i in range(1, len(ar), 2):\r\n    if abs(ar[i] - ar[i - 1]) == 1:\r\n    res += 1\r\n    return res\r\n",
  "5a3dd29055519e23ec000074": "def check_exam(arr1, arr2):\r\n    return max(0, sum(4 if a == b else - 1 for a, b in zip(arr1, arr2) if b))\r\n",
  "5a2950621f7f70c12d000073": "guesses = {}\r\n\r\n\r\ndef guess(mangled):\r\n    return guesses[* mangled]\r\n\r\n    def mangle(integers):\r\n    global guesses\r\n    for i, guess in enumerate(integers):\r\n    mangled = integers[: i] + integers[i + 1:]\r\n    if tuple(mangled) not in guesses:\r\n    guesses[* mangled] = guess\r\n    return mangled\r\n",
  "5a3a95c2e1ce0efe2c0001b0": "from functools import reduce\r\nfrom operator import mul\r\n\r\n\r\ndef maximum_product_of_parts(n):\r\n    s = str(n)\r\n    return max(reduce(mul, map(int, (s[: i], s[i: j], s[j:])))\r\n               for i in range(1, len(s) - 1) for j in range(i + 1, len(s)))\r\n",
  "58008f9897917feeec000a3e": "import copy\r\nfirst = {0: 'nulla', 1: 'egy', 2: 'kett\u0151', 3: 'h\u00e1rom',\r\n         4: 'n\u00e9gy', 5: '\u00f6t', 6: 'hat', 7: 'h\u00e9t', 8: 'nyolc', 9: 'kilenc'}\r\nsecond = {0: '', 1: 'tizen', 2: 'huszon', 3: 'harminc', 4: 'negyven',\r\n          5: '\u00f6tven', 6: 'hatvan', 7: 'hetven', 8: 'nyolcvan', 9: 'kilencven'}\r\nthird = {0: '', 1: 'sz\u00e1z', 2: 'k\u00e9tsz\u00e1z', 3: 'h\u00e1romsz\u00e1z', 4: 'n\u00e9gysz\u00e1z',\r\n         5: '\u00f6tsz\u00e1z', 6: 'hatsz\u00e1z', 7: 'h\u00e9tsz\u00e1z', 8: 'nyolcsz\u00e1z', 9: 'kilencsz\u00e1z'}\r\n\r\n\r\ndef hungarian_numeral(n):\r\n    first_b = copy . deepcopy(first)\r\n    second_b = copy . deepcopy(second)\r\n    third_b = copy . deepcopy(third)\r\n    places = (first_b, second_b, third_b)\r\n\r\n    res = \"\"\r\n    n_list_str = list(str(n))\r\n    # reverse the list, the numbers will be treated from right to left, it seems way easier\r\n    n_list_str . reverse()\r\n    n_list = [int(i) for i in n_list_str]\r\n\r\n    # if at least two digits, rid \"first\" of the \"0\" case and check if \"10\" or \"20\"\r\n    if n > 9:\r\n    first_b[0] = ''\r\n    if n_list[0] == 0:\r\n    second_b . update({1: 't\u00edz', 2: 'h\u00fasz'})\r\n\r\n    # for the first three from the right, ready the res variable for the return\r\n    for i, c in zip(n_list[0: 3], places):\r\n    res = c[i] + res\r\n    # end early if it should\r\n    if n < 1000:\r\n    return res\r\n    # put a \"-\" before the thousands if needed\r\n    if n >= 2000 and int(\"\" . join(n_list_str[: 3])) != 0:\r\n    res = \"-\" + res\r\n    # adding the 'ezer' and taking care of edgecases\r\n    res = 'ezer' + res\r\n    if n < 2000:\r\n    first_b[1] = ''\r\n    first_b[2] = 'k\u00e9t'\r\n    if n_list[3] == 0:\r\n    second_b . update({1: 't\u00edz', 2: 'h\u00fasz'})\r\n    else:\r\n    second_b . update({1: 'tizen', 2: 'huszon'})\r\n\r\n    # from the fourth to the sixth included, from the right, ready the res variable for the return\r\n    for i, c in zip(n_list[3:], places):\r\n    res = c[i] + res\r\n    return res\r\n",
  "5536552b372553087d000086": "import re\r\nSKIPERS = re . compile(r'|' . join([\"\\\\\\*.*?\\*/\", \"--.*?(\\n|$)\", \"''\"]))\r\n\r\n\r\ndef get_textliterals(code):\r\n    code = SKIPERS . sub(lambda m: \"x\" * len(m . group()), code . rstrip())\r\n    if code . count(\"'\") % 2:\r\n        code += \"'\"\r\n    return [(m . start(), m . end()) for m in re . finditer(r\"'.+?'\", code, flags=re . DOTALL)]\r\n",
  "5a28cf591f7f7019a80000de": "def missing(seq):\r\n    for digits in range(1, len(seq) / / 2 + 1):\r\n    my_seq = last = seq[: digits]\r\n    n = int(my_seq)\r\n    missing = None\r\n    while len(my_seq) < len(seq):\r\n    n += 1\r\n    my_seq += str(n)\r\n\r\n    if not seq . startswith(my_seq):\r\n    if missing == None:\r\n    missing = n\r\n    my_seq = last\r\n    else:\r\n    break\r\n    else:\r\n    last = my_seq\r\n    if my_seq == seq and missing:\r\n    return missing\r\n    return - 1\r\n",
  "57f21fcd69e09cb0d2000088": "def order_by_domain(addresses):\r\n    def weights(a):\r\n    _, d = a . rsplit('.', 1)\r\n    return {'com': 0, 'gov': 1, 'org': 2}. get(d[: 3], 3), d\r\n    return sorted(addresses, key=weights)\r\n",
  "5a39724945ddce2223000800": "def totalAmountVisible(topNum, numOfSides):\r\n    return numOfSides * (numOfSides + 1) / 2 - (numOfSides - topNum + 1)\r\n",
  "5a3141fe55519e04d90009d8": "def card_game(card_1, card_2, trump):\r\n    deck = ['joker', '2\u2663', '3\u2663', '4\u2663', '5\u2663', '6\u2663', '7\u2663', '8\u2663', '9\u2663', '10\u2663', 'J\u2663', 'Q\u2663', 'K\u2663', 'A\u2663',\r\n            '2\u2666', '3\u2666', '4\u2666', '5\u2666', '6\u2666', '7\u2666', '8\u2666', '9\u2666', '10\u2666', 'J\u2666', 'Q\u2666', 'K\u2666', 'A\u2666',\r\n            '2\u2665', '3\u2665', '4\u2665', '5\u2665', '6\u2665', '7\u2665', '8\u2665', '9\u2665', '10\u2665', 'J\u2665', 'Q\u2665', 'K\u2665', 'A\u2665',\r\n            '2\u2660', '3\u2660', '4\u2660', '5\u2660', '6\u2660', '7\u2660', '8\u2660', '9\u2660', '10\u2660', 'J\u2660', 'Q\u2660', 'K\u2660', 'A\u2660']\r\n\r\n    if card_1 == card_2:\r\n    return \"Someone cheats.\"\r\n    if card_1 == \"joker\":\r\n    return \"The first card won.\"\r\n    if card_2 == \"joker\":\r\n    return \"The second card won.\"\r\n    if card_1[- 1] == card_2[- 1]:\r\n    return \"The first card won.\" if deck . index(card_1) > deck . index(card_2) else \"The second card won.\"\r\n    if card_1[- 1] == trump:\r\n    return \"The first card won.\"\r\n    if card_2[- 1] == trump:\r\n    return \"The second card won.\"\r\n    return \"Let us play again.\"\r\n",
  "5a2c22271f7f709eaa0005d3": "def solve(s):\r\n    def isOK(x): return x == x[:: - 1]\r\n\r\n    return (\"OK\" if isOK(s) else\r\n            \"remove one\" if any(isOK(s[: i] + s[i + 1:]) for i in range(len(s))) else\r\n            \"not possible\")\r\n",
  "5a33ec23ee1aaebecf000130": "from collections import Counter\r\n\r\n\r\ndef countFeelings(letters, feelings):\r\n    counter = Counter(letters)\r\n    result = sum(not (Counter(feeling) - counter) for feeling in feelings)\r\n    return \"{} feeling{}.\" . format(result, \"s\" if result != 1 else \"\")\r\n",
  "5a30e7e9c5e28454790000c1": "import math\r\n\r\n\r\ndef spider_to_fly(spider, fly):\r\n    web = {'A': 0, 'B': 45, 'C': 90, 'D': 135,\r\n           'E': 180, 'F': 225, 'G': 270, 'H': 315}\r\n    angle = min(abs(web[spider[0]] - web[fly[0]]),\r\n                360 - abs(web[spider[0]] - web[fly[0]]))\r\n    sideA, sideB = int(spider[1]), int(fly[1])\r\n    return math . sqrt(sideA * * 2 + sideB * * 2 - 2 * sideA * sideB * math . cos(angle * math . pi / 180))\r\n",
  "586c7cd3b98de02ef60001ab": "from operator import mul\nfrom functools import reduce\nfrom collections import Counter\nfrom math import factorial as fact\n\n\ndef uniq_count(s):\n    return fact(len(s)) / / reduce(mul, map(fact, Counter(s . lower()). values()), 1)\n",
  "5a376259b6cfd77ca000006b": "SIGNS . append('Capricorn')\r\nCUTOFFS = [19, 18, 20, 19, 20, 20, 22, 22, 22, 22, 21, 21]\r\n\r\n\r\ndef get_zodiac_sign(day, month):\r\n    return SIGNS[month] if day > CUTOFFS[month - 1] else SIGNS[month - 1]\r\n",
  "5a32526ae1ce0ec0f10000b2": "def digits_average(input):\r\n    digits = [int(c) for c in str(input)]\r\n    while len(digits) > 1:\r\n    digits = [(a + b + 1) / / 2 for a, b in zip(digits, digits[1:])]\r\n    return digits[0]\r\n",
  "5a34af40e1ce0eb1f5000036": "def toCsvText(array):\r\n    return '\\n' . join(',' . join(map(str, line)) for line in array)\r\n",
  "5a34da5dee1aae516d00004a": "def get_matrix(n):\r\n    return [[1 if i == j else 0 for i in range(n)] for j in range(n)]\r\n",
  "5a34f087c5e28462d9000082": "def swap_head_tail(a):\r\n    r, l = (len(a) + 1) / / 2, len(a) / / 2\r\n    return a[r:] + a[l: r] + a[: l]\r\n",
  "5a31a71c1f7f705a93000005": "from itertools import cycle\r\n\r\n\r\ndef gen(n, iterable):\r\n    iter, r = cycle(iterable), ()\r\n\r\n    while True:\r\n    while len(r) < n:\r\n    r += (next(iter),)\r\n    yield r\r\n    r = r[1:]\r\n",
  "5a3277005b2f00a11b0011c4": "import re\n\n\ndef spiner(s, p):\n    return (s[:: - 1] if len(s) > 6 or s . lower(). count('t') > 1\n            else s . upper() if len(s) == 2 or p == ','\n            else '0' if len(s) == 1\n            else s) + p\n\n    def spin_solve(sentence):\n    return re . sub(r\"((?:\\w|['-])+)(\\W)?\", lambda m: spiner(m . group(1), m . group(2) or ''), sentence)\n",
  "5a2e96f1c5e2849eef00014a": "n = 10 * * 6\r\ns = list(range(n + 1))\r\ns[4:: 2] = ((n - 4) / / 2 + 1) * [2]\r\nfor i in range(3, int((n + 1) * * .5) + 1, 2):\r\n    if s[i] == i:\r\n    for j in range(i * i, n + 1, i):\r\n    if s[j] == j:\r\n        s[j] = i\r\n\r\n    def prime_ant(n):\r\n    d, a = 2, list(range(n + 1))\r\n    for _ in range(n):\r\n    if s[a[d]] == a[d]:\r\n        d += 1\r\n    else:\r\n        a[d - 1], a[d], d = a[d - 1] + s[a[d]], a[d] / / s[a[d]], d - 1\r\n    return a[2: d + 1]\r\n",
  "55f9439929875c58a500007a": "from signal import *\r\n\r\n\r\ndef signal_handler(signum, frame):\r\n    raise Exception\r\n    def wrap_mystery(n):\r\n    signal(SIGALRM, signal_handler)\r\n    setitimer(ITIMER_REAL, .01)\r\n    try:\r\n        return mystery(n)\r\n    except:\r\n        return - 1\r\n",
  "5a2f92621f7f701e02000097": "from collections import Counter\r\n\r\n\r\ndef dupe_detect(functions):\r\n    results = [tuple(map(f, range(256))) for f in functions]\r\n    repeated = [tup for tup, v in Counter(results). items() if v > 1]\r\n    return [[i for i, t in enumerate(results) if t == f] for f in repeated]\r\n",
  "5a2f83daee1aae4f1c00007e": "def isMultiple(a, b, n):\r\n    remainder = int((a / b + 0.05) * 10) % 10\r\n    return remainder > 0 and remainder % n == 0\r\n",
  "58c9322bedb4235468000019": "def is_very_even_number(n):\r\n    while len(str(n)) > 1:\r\n    n = sum(int(x) for x in str(n))\r\n    return True if n % 2 == 0 else False\r\n",
  "5707bf345699a1e98800004b": "# (1, 2), (2, 1), (2, -1), (1, -2), (-1, -2), (-2, -1), (-2, 1), (-1, 2)\r\ndef moves(pos: tuple):\r\n    from itertools import product\r\n    x, y = pos\r\n    pos = list()\r\n    for move in list(product((1, - 1), (2, - 2))) + list(product((2, - 2), (1, - 1))):\r\n    if 0 <= x + move[0] <= 7 and 0 <= y + move[1] <= 7:\r\n    pos . append((x + move[0], y + move[1]))\r\n    return tuple(pos)  # tuple\r\n    def get_pos(board: list):\r\n    for x in range(8):\r\n    if 'K' in board[x]:\r\n    return (x, board[x]. index('K'))\r\n\r\n    def count(board: list):\r\n    all = list()\r\n    for move1 in moves(get_pos(board)):\r\n    all . extend(moves(move1))\r\n    return len(set(all))\r\n",
  "5a2e8c0955519e54bf0000bd": "def check_digit(n, i1, i2, d):\r\n    return str(d) in str(n)[min(i1, i2): max(i1, i2) + 1]\r\n",
  "5a2d376ec5e2845ec20000bd": "def check_grid(grid, pos, size):\r\n    c, r = pos\r\n    return [\r\n        grid[r],\r\n        [row[c] for row in grid],\r\n        [grid[r2][c - r + r2]\r\n            for r2 in range(len(grid)) if 0 <= c - r + r2 < len(grid)],\r\n        [grid[r2][c + r - r2]\r\n            for r2 in range(len(grid)) if 0 <= c + r - r2 < len(grid)]\r\n    ]\r\n",
  "58fbc832e86f5e905300007f": "def isogram_encode(input=None, key=None):\r\n    try:\r\n    assert input and len(key) == len(set(key)) == 10\r\n    trans = dict(zip('1234567890', key . upper()))\r\n    return '' . join([trans[d] for d in str(input)])\r\n    except:\r\n    return 'Incorrect key or input!'\r\n    def isogram_decode(input=None, key=None):\r\n    try:\r\n    assert input and len(key) == len(set(key)) == 10\r\n    trans = dict(zip(key . upper(), '1234567890'))\r\n    return '' . join([trans[c] for c in input . upper()])\r\n    except:\r\n    return 'Incorrect key or input!'\r\n",
  "5a26af968882f3523100003d": "from collections import Counter\r\n\r\n\r\ndef solve(* args):\r\n    c1, c2 = map(Counter, args)\r\n    return 2 - any(c1[k] - c2[k] >= 2 and k not in c2 for k in c1)\r\n",
  "5a1d86dbba2a142e040000ee": "from collections import Counter\r\nfrom itertools import permutations\r\n\r\n\r\ndef find_number(start, stop, s):\r\n    miss = Counter('' . join(map(str, range(start, stop + 1)))) - Counter(s)\r\n    intValues = {int(v) for v in map('' . join, permutations(\r\n        '' . join(c * n for c, n in miss . items()))) if v and v[0] != '0'}\r\n    return [v for v in intValues if start <= v <= stop]\r\n",
  "5705601c5eef1fad69000674": "def to_bytes(n):\r\n    if not n:\r\n    return ['00000000']\r\n\r\n    res = []\r\n    while n:\r\n    res . append('{:08b}' . format(n % 256))\r\n    n / /= 256\r\n    return res[:: - 1]\r\n",
  "5a2d70a6f28b821ab4000004": "def largest_sum(s):\r\n    return max(sum(map(int, x)) for x in s . split('0'))\r\n",
  "5902ea9b378a92a990000016": "# generate primes up to limit\r\nlimit = 10 * * 6\r\nsieve = [0] + list(range(3, limit + 1, 2))\r\nfor n in sieve:\r\n    if n:\r\n    for i in range(n * n, limit + 1, n * 2):\r\n    sieve[i / / 2] = 0\r\n    primes = [2] + list(n for n in sieve if n)\r\n\r\n    def sumPrimes(lower, upper):\r\n    return sum(p for p in primes if lower <= p <= upper)\r\n",
  "5a2b7edcb6486a856e00005b": "def check_vowel(s, i):\r\n    return 0 <= i < len(s) and s[i] in \"aieouAEIOU\"\r\n",
  "5a29a0898f27f2d9c9000058": "def solve(s):\n    uc, lc, num, sp = 0, 0, 0, 0\n    for ch in s:\n    if ch . isupper():\n        uc += 1\n    elif ch . islower():\n        lc += 1\n    elif ch . isdigit():\n        num += 1\n    else:\n        sp += 1\n    return [uc, lc, num, sp]\n",
  "5a27e3438882f334a10000e3": "def distance(n):\n    if n == 1:\n        return 0\n    r = 0 - (1 - n * * .5) / / 2\n    d, m = divmod(n - (2 * r - 1) * * 2 - 1, 2 * r)\n    z = (r * (1 + 1j) - m - 1) * 1j * * d\n    return abs(z . real) + abs(z . imag)\n",
  "5a296b571f7f70b0b3000100": "from collections import defaultdict\r\n\r\n\r\ndef solve(arr):\r\n    dct = defaultdict(list)\r\n    for i, fs in enumerate(map(frozenset, arr)):\r\n    dct[fs]. append(i)\r\n    return sorted(sum(lst) for lst in dct . values() if len(lst) > 1)\r\n",
  "5840e31f770be1636e0000d3": "def basereduct(x):\r\n    for _ in range(150):\r\n    x = int(str(x), int(max(str(x))) + 1 + ('9' in str(x)))\r\n    if x < 10:\r\n        return x\r\n    return - 1\r\n",
  "58bc16e271b1e4c5d3000151": "def get_min_base(number):\r\n    for ln in range(number . bit_length(), 2, - 1):\r\n    b = int(number * * (1 / (ln - 1)))\r\n    if b * * ln - 1 == number * (b - 1):\r\n    return b\r\n    else:\r\n    return number - 1\r\n",
  "5a224a15ee1aaef6e100005a": "# invert the triangle\n# maketri(size_of_triangle) can be called for convenience\ndef invert_triangle(t):\n    return t[:: - 1]. translate(str . maketrans('# ', ' #'))\n",
  "53c9157c689f841d16000c03": "def totient(n):\n    if not isinstance(n, int) or n < 1:\n        return 0\n    phi = n >= 1 and n\n    for p in range(2, int(n * * .5) + 1):\n    if not n % p:\n    phi -= phi / / p\n    while not n % p:\n    n / /= p\n    if n > 1:\n        phi -= phi / / n\n    return phi\n",
  "52f5424d0531259cfc000d04": "def sort_by_bit(seq):\r\n    return sum(2 * * i for i in seq)\r\n",
  "5727500a20c7f837fc001869": "def area_polygon(vertex):\r\n    vertex . append(vertex[0])\r\n    return round(abs(sum([((vertex[i][0] * vertex[i + 1][1]) - (vertex[i][1] * vertex[i + 1][0])) for i in range(0, len(vertex) - 1)]) / 2), 1)\r\n",
  "5a2809dbe1ce0e07f800004d": "def divisible_by_last(n):\r\n    l = list(map(int, f\"0 { n } \"))\r\n    return [x and not y % x for x, y in zip(l, l[1:])]\r\n",
  "5a26ca51e1ce0e987b0000ee": "def branch(n):\r\n    k = int((- 1 + (n) * * .5) / 2 - 10 * * - 5)\r\n    return (n - 4 * k * (k + 1) - 2) / / (2 * (k + 1)) if n > 1 else 0\r\n",
  "5a274c9fc5e284a9f7000072": "def jumping(arr, n):\r\n    i = 0\r\n    while i < len(arr):\r\n    x = arr[i]\r\n    arr[i] += 1 if x < n else - 1\r\n    i += x\r\n    return arr . count(n)\r\n",
  "5a262cfb8f27f217f700000b": "def solve(a, b):\r\n    s = set(a) & set(b)\r\n    return '' . join(c for c in a + b if c not in s)\r\n",
  "5a254114e1ce0ecf6a000168": "from math import ceil, sqrt\n\n\ndef layers(n):\n    return ceil(sqrt(n)) / / 2 + 1\n",
  "5a24254fe1ce0ec2eb000078": "def solve(s, idx):\r\n    stack = []\r\n    for i, c in enumerate(s):\r\n    if c == '(':\r\n        stack += [i]\r\n    if c == ')':\r\n    if not stack:\r\n        break\r\n    if stack . pop() == idx:\r\n        return i\r\n    return - 1\r\n",
  "595db7e4c1b631ede30004c4": "# nice kata!\r\ndef largest_rect(n):\r\n    x, res, i = [], 0, 0\r\n\r\n    while i < len(n):\r\n\r\n    if not x or n[i] >= n[x[- 1]]:\r\n    x . append(i)\r\n    i += 1\r\n    else:\r\n\r\n    res = max(res, n[x . pop()] * (check(i, x)))\r\n    while x:\r\n    res = max(res, n[x . pop()] * (check(i, x)))\r\n    return res\r\n    def check(i, x):\r\n    return i - x[- 1] - 1 if x else i\r\n",
  "5a21bd361f7f7098e800000c": "from sklearn . ensemble import AdaBoostClassifier\r\nfrom sklearn . model_selection import train_test_split\r\n\r\n\r\ndef train_ada_boost(X, target, estimators=3, random_seed=0):\r\n\r\n    x_train, x_test, target_train, target_test = train_test_split(\r\n        X, target, random_state=random_seed)\r\n\r\n    model = AdaBoostClassifier(\r\n        n_estimators=estimators, random_state=random_seed)\r\n    model . fit(x_train, target_train)\r\n\r\n    return model, x_test, target_test\r\n",
  "5848565e273af816fb000449": "def encrypt_this(text):\r\n    result = []\r\n\r\n    for word in text . split():\r\n        # turn word into a list\r\n    word = list(word)\r\n\r\n    # replace first letter with ascii code\r\n    word[0] = str(ord(word[0]))\r\n\r\n    # switch 2nd and last letters\r\n    if len(word) > 2:\r\n    word[1], word[- 1] = word[- 1], word[1]\r\n\r\n    # add to results\r\n    result . append('' . join(word))\r\n\r\n    return ' ' . join(result)\r\n",
  "5a1a514effe75fd63b0000f2": "from collections import Counter\n\n\ndef solve(s):\n    return any(len(set(Counter(s . replace(c, '', 1)). values())) == 1 for c in s)\n",
  "5a179d4346d843ff1200000c": "def find_replaced(arr):\n    \"\"\" \n    s = len(arr) \n    sum a_i - duplicate + missing = s * (s + 1) // 2 \n    sum a_i^2 - dumplicate^2 + missing^2 = s * (s + 1) * (2 * s + 1) // 6 \n    \"\"\"\n    s = len(arr)\n    a = s * (s + 1) / / 2 - sum(arr)\n    b = s * (s + 1) * (2 * s + 1) / / 6 - sum(n * n for n in arr)\n    d = (b - a * a) / / (2 * a)\n    m = a + d\n    return m, d\n",
  "5a21dcc48f27f2afa1000065": "def membership(amount, platinum, gold, silver, bronze):\r\n    ordered = reversed(sorted((v, k)\r\n                       for k, v in locals(). items() if k != 'amount'))\r\n    return next((level . capitalize() for threshold, level in ordered if amount >= threshold), 'Not a member')\r\n",
  "5a21e090f28b824def00013c": "def switch_dict(dic):\r\n    result = {}\r\n    for key, value in dic . items():\r\n    result . setdefault(value, []). append(key)\r\n    return result\r\n",
  "5a21f943c5e284d4340000cb": "import re\n\n\ndef debug(s):\n    return re . sub(r'bug(?!s)', '', s)\n",
  "596b1d44224071b9f5000010": "def psion_power_points(l, s): return [0, 2, 6, 11, 17, 25, 35, 46, 58, 72, 88, 106, 126, 147, 170, 195, 221, 250, 280, 311, 343][min(l, 20)] + (s - 10) / / 2 * l / / 2 if l and s > 10 else 0\n",
  "5a115ff080171f9651000046": "def memorysize_conversion(memorysize):\r\n    [value, unit] = memorysize . split(\" \")\r\n    kibis = [\"KiB\", \"MiB\", \"GiB\", \"TiB\"]\r\n    kilos = [\"kB\", \"MB\", \"GB\", \"TB\"]\r\n    if unit in kibis:\r\n    return (str(round(float(value) * pow(1.024, kibis . index(unit) + 1), 3)) + \" \" + kilos[kibis . index(unit)])\r\n    else:\r\n    return (str(round(float(value) / pow(1.024, kilos . index(unit) + 1), 3)) + \" \" + kibis[kilos . index(unit)])\r\n",
  "58db9545facc51e3db00000a": "def compress(raw):\r\n    # initialize stack\r\n    stack = [raw[0], raw[1]]\r\n    # calculate inital difference between the first two elements!\r\n    difference = stack[1] - stack[0]\r\n\r\n    out = []\r\n    for value in raw[2:] + [float(\"inf\")]:\r\n    if (value - stack[- 1]) == difference:\r\n    stack . append(value)\r\n\r\n    elif len(stack) > 1 and difference == 0:\r\n    out . append(f\" { stack [ 0 ]} * { len ( stack )} \")\r\n    stack = [value]\r\n\r\n    elif len(stack) > 2:\r\n    absolute_difference = str(abs(difference))\r\n    out . append(\r\n        f\" { stack [ 0 ]} - { stack [ - 1 ]}{ absolute_difference != '1' and '/' + absolute_difference or '' } \")\r\n    difference = value - stack[- 1]\r\n    stack = [value]\r\n    else:\r\n    if len(stack) == 2:\r\n        out . append(stack[0])\r\n    difference = value - stack[- 1]\r\n    stack = [stack[- 1], value]\r\n\r\n    # Handling possible leftovers in the stack\r\n    if not isinstance((f := stack[0]), float):\r\n        out . append(f)\r\n    return ',' . join(map(str, out))\r\n",
  "55e079b1e00f75e1cd00013b": "def alg196(n):\r\n    for _ in range(261):  # Set a reasonable upper limit for iterations\r\n    n += int(str(n)[:: - 1])\r\n    if str(n) == str(n)[:: - 1]:\r\n    return n\r\n    return - 1\r\n",
  "57adadd36b34faea6b00031b": "def populate_my_vault(n):\r\n    if n < 2:\r\n        return (n, 0, 0)\r\n    half, odd = divmod(n, 2)\r\n    crowded = n > 50\r\n    return 1 + crowded, half + odd - crowded, half - 1\r\n",
  "579294724be9121e4d00018f": "def score_pole_vault(vaulter_list):\r\n\t popytki = len(vaulter_list[0][\"results\"])\r\n\t temp = {}\r\n\t res = {}\r\n\t for mas in vaulter_list:\r\n\t\t i = popytki - 1\r\n while i >= 0 and mas [ \"results\" ][ i ]. find ( 'O' ) == - 1 :\r\n\t\t\t i -= 1 \r\n if i < 0 :\r\n\t\t\t n = 0 \r\n m = '' . join ( mas [ \"results\" ]). count ( 'X' )\r\n\t\t else :\r\n\t\t\t n = mas [ \"results\" ][ i ]. count ( 'X' )\r\n\t\t\t m = '' . join ( mas [ \"results\" ][: i ]). count ( 'X' )\r\n\t\t new_key = ( popytki - i , n , m )\r\n\t\t temp [ new_key ] = temp . get ( new_key , []) + [ mas [ \"name\" ]]\r\n\t k = iter ( sorted ( temp ))\r\n\t i = 0 \r\n while i < 3 :\r\n\t\t key = next ( k )\r\n\t\t if i == 0 and len ( temp [ key ]) == 1 :\r\n\t\t\t res [ '1st' ] = temp [ key ][ 0 ]\r\n\t\t\t i += 1 \r\n elif i == 0 and len ( temp [ key ]) > 1 :\r\n\t\t\t res [ '1st' ] = ', ' . join ( sorted ( temp [ key ])) + ' (jump-off)' \r\n i += len ( temp [ key ])\r\n\t\t elif i == 1 and len ( temp [ key ]) == 1 :\r\n\t\t\t res [ '2nd' ] = temp [ key ][ 0 ]\r\n\t\t\t i += 1 \r\n elif i == 1 and len ( temp [ key ]) > 1 :\r\n\t\t\t res [ '2nd' ] = ', ' . join ( sorted ( temp [ key ])) + ' (tie)' \r\n i += len ( temp [ key ])\r\n\t\t elif i == 2 and len ( temp [ key ]) == 1 :\r\n\t\t\t res [ '3rd' ] = temp [ key ][ 0 ]\r\n\t\t\t i += 1 \r\n elif i == 2 and len ( temp [ key ]) > 1 :\r\n\t\t\t res [ '3rd' ] = ', ' . join ( sorted ( temp [ key ])) + ' (tie)' \r\n i += len ( temp [ key ])\r\n\t return res",
  "55832eda1430b01275000059": "FRACTIONS = \" . : :. :: :.: S S. S: S:. S:: S:.:\" . split(\" \")\r\nUNITS = \" I II III IV V VI VII VIII IX\" . split(\" \")\r\nTENS = \" X XX XXX XL L LX LXX LXXX XC\" . split(\" \")\r\nHUNDREDS = \" C CC CCC CD D DC DCC DCCC CM\" . split(\" \")\r\nTHOUSANDS = \" M MM MMM MMMM MMMMM\" . split(\" \")\r\n\r\n\r\ndef roman_fractions(n, f=0):\r\n    return (\"NaR\" if n < 0 or n > 5000 or f < 0 or f > 11\r\n            else \"N\" if n + f == 0\r\n            else THOUSANDS[n / / 1000]\r\n            + HUNDREDS[n % 1000 / / 100]\r\n            + TENS[n % 100 / / 10]\r\n            + UNITS[n % 10]\r\n            + FRACTIONS[f])\r\n",
  "58bcdf9a7288983803000042": "from collections import defaultdict\r\n\r\n\r\nclass Point (object):\r\n    def __init__(self, x, y):\r\n    self . x = x\r\n    self . y = y\r\n    def __eq__(self, other):\r\n    return self . x == other . x and self . y == other . y\r\n    class WordSearch (object):\r\n    def __init__(self, puzzle):\r\n    self . grid = defaultdict(list)\r\n    for r, row in enumerate(puzzle . split()):\r\n    for c, col in enumerate(row):\r\n    self . grid[col]. append((r, c))\r\n\r\n    def search(self, word):\r\n    for sr, sc in self . grid[word[0]]:\r\n    for dr, dc in [(1, 0), (0, 1), (- 1, 0), (0, - 1), (- 1, - 1), (1, 1), (- 1, 1), (1, - 1)]:\r\n    rr, cc = sr, sc\r\n    for l in word[1:]:\r\n    rr, cc = rr + dr, cc + dc\r\n    if (rr, cc) not in self . grid[l]:\r\n        break\r\n    else:\r\n    return Point(sc, sr), Point(cc, rr)\r\n",
  "585b7bd53d357b12280003a3": "def rotate_square_clockwise_90(lst): return list(map(list, zip(* lst[:: - 1])))\r\n\r\n\r\ndef square_to_diamond_clockwise_45(lst): return [[lst[x - y][y] for y in range(\r\n    len(lst)) if 0 <= x - y < len(lst)] for x in range(len(lst) * 2 - 1)]\r\n\r\n\r\ndef diamond_to_square_cc_45(lst, sqLen): return [\r\n    [lst[x + y][sqLen - x - 1 if x + y >= sqLen else y] for y in range(sqLen)] for x in range(sqLen)]\r\n\r\n\r\ndef combination_lock(dial, combination):\r\n    pos, isD = {}, len(dial[0]) == 1\r\n    lst = dial if not isD else diamond_to_square_cc_45(dial, (len(dial) + 1) / / 2)\r\n    # generate all positions, based on the first dial, adapting initial angle depending on the type of shape of the dial\r\n    for n in range(0 - 45 * isD, 271, 90):\r\n    pos[n % 360] = lst  # accumulate squares\r\n    # accumulate diamonds\r\n    pos[(n + 45) % 360] = square_to_diamond_clockwise_45(lst)\r\n    lst = rotate_square_clockwise_90(lst)\r\n    return [pos[n] for n in combination]\r\n",
  "5a1ee4dfffe75f0fcb000145": "def bingo(array):\r\n    return \"WIN\" if {2, 7, 9, 14, 15}. issubset(set(array)) else \"LOSE\"\r\n",
  "5a1ebe0d46d843454100004c": "def to_day_of_year(date):\n    # Define the number of days in each month, accounting for leap years\n    days_in_month = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    day, month, year = date\n    # Check if it's a leap year and update February's days\n    if ((year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)):\n    days_in_month[2] = 29\n    # Calculate the day of the year\n    day_of_year = sum(days_in_month[: month]) + day\n    return day_of_year\n",
  "5a1ebc2480171f29cf0000e5": "def sort_by_area(seq):\r\n    def func(x):\r\n    if isinstance(x, tuple):\r\n    return x[0] * x[1]\r\n    else:\r\n    return 3.14 * x * x\r\n    return sorted(seq, key=func)\r\n",
  "59aac7a9485a4dd82e00003e": "def cockroaches(room):\r\n    WALLS = {'L': '' . join(r[0] for r in room), 'D': room[- 1],\r\n             'R': '' . join(r[- 1] for r in room), 'U': room[0]}\r\n\r\n    def hole(d, i=0):\r\n    wall = WALLS[d][i:] if d in 'LD' else WALLS[d][: i +\r\n                                                   1][:: - 1] if i else WALLS[d][:: - 1]\r\n    for c in wall:\r\n    if c . isdigit():\r\n        return int(c)\r\n\r\n    return hole({'L': 'D', 'D': 'R', 'R': 'U', 'U': 'L'}[d])  # try next wall\r\n    holes = [hole(d, r if d in 'LR' else c) for r, row in enumerate(room)\r\n             for c, d in enumerate(row) if d in 'LDRU']\r\n\r\n    return [holes . count(i) for i in range(10)]\r\n",
  "5a1e6323ffe75f71ae000026": "import re\r\n\r\n\r\ndef is_turing_equation(s):\r\n    a, b, c = (int(n[:: - 1]) for n in re . split('[+=]', s))\r\n    return a + b == c\r\n",
  "55675eb82a2ca0bcd300006d": "def triangle_area(a, b, c):\r\n    (xa, ya), (xb, yb), (xc, yc) = a, b, c\r\n    return abs(xa * (yb - yc) + xb * (yc - ya) + xc * (ya - yb))\r\n\r\n    def point_vs_triangle(point, triangle):\r\n    area = triangle_area(* triangle)\r\n    assert area > 1e-9\r\n    a, b, c = triangle\r\n    pab, pbc, pca = triangle_area(point, a, b), triangle_area(\r\n        point, b, c), triangle_area(point, c, a)\r\n    if abs(pab + pbc + pca - area) > 1e-9:\r\n        return - 1\r\n    else:\r\n        return bool(pab > 1e-9 and pbc > 1e-9 and pca > 1e-9)\r\n",
  "5897eebff3d21495a70000df": "def chess_triangle(n, m):\r\n    return sum(8 * (n - x + 1) * (m - y + 1) for dims in {(3, 4), (3, 3), (2, 4), (2, 3)} for x, y in [dims, dims[:: - 1]] if x <= n and y <= m)\r\n",
  "59bf943cafcda28e31000130": "def around_fib(n):\n    a, b = 0, 1\n    for i in range(n - 1):\n        a, b = b, a + b\n    fib = str(b)\n    lst = len(fib) % 25\n    if lst == 0:\n    lst = 25\n    maxcnt = 0\n    digit = - 1\n    for i in '0123456789':\n    c = fib . count(i)\n    if c > maxcnt:\n    maxcnt = c\n    digit = i\n    return \"Last chunk {}; Max is {} for digit {}\" . format(fib[- lst:], maxcnt, digit)\n",
  "5828b9455421a4a4e8000007": "from itertools import permutations\r\n\r\n\r\ndef find_mult_3(num):\r\n    num_list = tuple(map(int, str(num)))\r\n\r\n    poss = set()\r\n    for i in range(1, len(num_list) + 1):\r\n    poss |= set(permutations(num_list, i))\r\n\r\n    res = set()\r\n    for p in poss:\r\n    if p[0] != 0 and sum(p) % 3 == 0:\r\n    res . add(p)\r\n\r\n    res = [sum(x * 10 * * n for n, x in enumerate(p[:: - 1])) for p in res]\r\n    return [len(res), max(res)]\r\n",
  "5a1dc4baffe75f270200006b": "def only_duplicates(string):\r\n    return \"\" . join([x for x in string if string . count(x) > 1])\r\n",
  "5871690ba44cfc0834000303": "from itertools import islice\nfrom collections import deque\nresult = (\n    \" |16 {15}\\n\" +\n    \" |08 {7}\\n\" +\n    \" | |17 {16}\\n\" +\n    \" |04 {3}\\n\" +\n    \" | | |18 {17}\\n\" +\n    \" | |09 {8}\\n\" +\n    \" | |19 {18}\\n\" +\n    \" |02 {1}\\n\" +\n    \" | | |20 {19}\\n\" +\n    \" | | |10 {9}\\n\" +\n    \" | | | |21 {20}\\n\" +\n    \" | |05 {4}\\n\" +\n    \" | | |22 {21}\\n\" +\n    \" | |11 {10}\\n\" +\n    \" | |23 {22}\\n\" +\n    \"01 {0}\\n\" +\n    \" | |24 {23}\\n\" +\n    \" | |12 {11}\\n\" +\n    \" | | |25 {24}\\n\" +\n    \" | |06 {5}\\n\" +\n    \" | | | |26 {25}\\n\" +\n    \" | | |13 {12}\\n\" +\n    \" | | |27 {26}\\n\" +\n    \" |03 {2}\\n\" +\n    \" | |28 {27}\\n\" +\n    \" | |14 {13}\\n\" +\n    \" | | |29 {28}\\n\" +\n    \" |07 {6}\\n\" +\n    \" | |30 {29}\\n\" +\n    \" |15 {14}\\n\" +\n    \" |31 {30}\\n\"). format\n\n\ndef gen(person):\n    queue = deque([person])\n    while True:\n    p = queue . popleft()\n    if p is None:\n    yield \"_______\"\n    queue . append(None)\n    queue . append(None)\n    else:\n    yield p . name\n    p1, p2 = (p . parents() + (None, None))[: 2]\n    if p1 and p1 . sex == \"F\":\n        p1, p2 = p2, p1\n    queue . append(p1)\n    queue . append(p2)\n\n    def chart(person):\n    return result(* islice(gen(person), 31))\n",
  "58c8c723df10450b21000024": "class Central_Pixels_Finder (Image):\r\n\r\n    def central_pixels(self, colour):\r\n    size = self . width * self . height\r\n    depths = [0] * size\r\n    internal = []\r\n    for position, pcolour in enumerate(self . pixels):\r\n    if pcolour == colour:\r\n    depths[position] = 1\r\n    if (position > self . width and\r\n        position < size - self . width and\r\n        position % self . width and\r\n            (position + 1) % self . width):\r\n    internal . append(position)\r\n    depths[position] += min(depths[position - 1],\r\n                            depths[position - self . width])\r\n    max_depth = 1\r\n    for position in internal[:: - 1]:\r\n    depths[position] = min(depths[position],\r\n                           depths[position + 1] + 1,\r\n                           depths[position + self . width] + 1)\r\n    max_depth = max(depths[position], max_depth)\r\n    return [position for position, depth in enumerate(depths) if depth == max_depth]\r\n",
  "5a1a46ef80171fc2b0000064": "from decimal import Decimal\nfrom math import ceil\nDECI = Decimal(10)\n\n\ndef tug_of_war(n, arr):\n    n /= Decimal(2)\n    pos = fm = fc = elapsed = 0\n    f = 0\n    for c_m, t in ((c / DECI - m / DECI, t) for c, m, t in arr):\n    delta = f * t\n    if abs(pos + delta) >= n:\n    break\n    pos += delta\n    elapsed += t\n    f += c_m\n    if f:\n    return ['Capulet' if f > 0 else 'Montague', elapsed + ceil((n + pos * (1 if f < 0 else - 1)) / abs(f))]\n",
  "5463c8db865001c1710003b2": "def number_to_english(n):\r\n    z = '''zero one two three four five six seven eight nine ten eleven twelve \r\n thirteen fourteen fifteen sixteen seventeen eighteen nineteen'''\r\n    D = {i: w for i, w in enumerate(z . split())}\r\n    for i, w in enumerate('twenty thirty forty fifty sixty seventy eighty ninety' . split(), 2):\r\n        D[i * 10] = w\r\n    if not isinstance(n, int) or not (0 <= n <= 99999):\r\n        return ''\r\n    d, r = divmod(n, 1000)\r\n    s = [number_to_english(d), 'thousand'] if d else []\r\n    d, r = divmod(r, 100)\r\n    if d:\r\n        s += [number_to_english(d), 'hundred']\r\n    if r and r in D:\r\n        s, r = s + [D[r]], 0\r\n    d, r = divmod(r, 10)\r\n    s += ([number_to_english(d * 10)] if d else []) + \\\r\n        ([number_to_english(r)] if r else [])\r\n    return ' ' . join(s) if s else D[0]\r\n",
  "5945f0c207693bc53100006b": "from collections import Counter\r\n\r\n\r\ndef count_contiguous_distinct(k, arr):\r\n    counts = Counter(arr[: k])\r\n    distinct = len(counts)\r\n    windows = [distinct]\r\n    for i in range(k, len(arr)):\r\n    counts[arr[i - k]] -= 1\r\n    if not counts[arr[i - k]]:\r\n    distinct -= 1\r\n    if not counts[arr[i]]:\r\n    distinct += 1\r\n    counts[arr[i]] += 1\r\n    windows . append(distinct)\r\n    return windows\r\n",
  "583b33786e3994f54e000142": "from contextlib import contextmanager\r\n\r\n\r\n@ contextmanager\r\ndef SelfClosing(jar):\r\n    try:\r\n    jar . open_jar()\r\n    yield jar\r\n    finally:\r\n    jar . close_jar()\r\n",
  "57f548337763f20e02000114": "from collections import Counter\r\nfrom operator import le, lt, ge, gt, eq, ne\r\n\r\n\r\ndef string_evaluation(s, conditions):\r\n    cnt = Counter(s)\r\n    ops = {'<=': le, '<': lt, '>=': ge, '>': gt, '==': eq, '!=': ne}\r\n    result = []\r\n    for condition in conditions:\r\n    left = condition[0]\r\n    right = condition[- 1]\r\n    result . append(ops[condition[1: - 1]](\r\n        cnt[left] if not left . isdigit() else int(left),\r\n        cnt[right] if not right . isdigit() else int(right)\r\n    ))\r\n    return result\r\n",
  "57091b473f1008c03f001a2a": "from fractions import Fraction\r\nVALID_CHARS = {\"1\", \"2\", \"4\", \"8\"}\r\n\r\n\r\ndef note_sum(s):\r\n    return sum(Fraction(1, x) for x in map(int, s))\r\n\r\n    def validate_rhythm(meter, score):\r\n    if meter[1] not in [1, 2, 4, 8]:\r\n    return \"Invalid rhythm\"\r\n    ss = score . split(\"|\")\r\n    if not all(s and all(x in VALID_CHARS for x in s) for s in ss):\r\n    return \"Invalid rhythm\"\r\n    note = Fraction(* meter)\r\n    if all(note_sum(s) == note for s in ss):\r\n    return \"Valid rhythm\"\r\n    ss[0] += ss . pop()\r\n    if all(note_sum(s) == note for s in ss):\r\n    return \"Valid rhythm with anacrusis\"\r\n    return \"Invalid rhythm\"\r\n",
  "5a1c28f9c9fc0ef2e900013b": "def pyramid(n):\r\n    return '\\n' . join(\"/{}\\\\\" . format(\" _\" [r == n - 1] * r * 2). center(2 * n). rstrip() for r in range(n)) + '\\n'\r\n",
  "5a1cae0832b8b99e2900000c": "def check(board):\r\n    for x, line in enumerate(board):\r\n    for y, c in enumerate(line):\r\n    if c == 'q':\r\n        xq, yq = x, y\r\n    elif c == 'k':\r\n        xk, yk = x, y\r\n    return yk == yq or xk == xq or abs(xq - xk) == abs(yq - yk)\r\n",
  "5a1cb5406975987dd9000028": "def sort_array(xs):\r\n    es = sorted(x for x in xs if x % 2 == 0)\r\n    os = sorted((x for x in xs if x % 2 != 0), reverse=True)\r\n    return [(es if x % 2 == 0 else os). pop() for x in xs]\r\n",
  "586e2bc03f3675a4e70000e1": "def count_cash(MAP, coords):\r\n\r\n    lenY, (r, c) = len(MAP), coords\r\n    s = [float(\"-inf\")] * (len(MAP[0]) - c + 1)\r\n    s[1] = 0\r\n    for x in range(r, - 1, - 1):\r\n    for i in range(1, len(s)):\r\n    s[i] = max(s[i - 1], s[i]) + MAP[x][c + i - 1]\r\n\r\n    return s[- 1]\r\n",
  "593e8d839335005b42000097": "from gmpy2 import next_prime as np\r\n\r\n\r\ndef get_primes(h, g):\r\n    a = 2\r\n    while h > 0:\r\n    m, f = g, []\r\n    while m > 0:\r\n    a, f, m, h = np(a), f + [a] if h > 0 else f + [None], m - 1, h - 1\r\n    yield tuple(f)\r\n",
  "59146f7b4670ba520900000a": "import hashlib\r\nimport itertools\r\n\r\n\r\ndef password_cracker(hash):\r\n    for length in range(6):\r\n    for candidate in map(\"\" . join, itertools . product(\"abcdefghijklmnopqrstuvwxyz\", repeat=length)):\r\n    if hashlib . sha1(candidate . encode()). hexdigest() == hash:\r\n    return candidate\r\n",
  "587b2ddb87264729e6000128": "def board(inp):\r\n    return [\"\" . join([ret(i, k, z) for k, z in enumerate(j)]) for i, j in enumerate(inp)]\r\n\r\n    def ret(i, j, s):\r\n    if s in {\"+\", \"-\", \"|\", \"*\"}:\r\n    return s\r\n    t = sum(1 for m in range(j - 1, j + 2)\r\n            for l in range(i - 1, i + 2) if inp[l][m] == \"*\")\r\n    return str(t) if t else \" \"\r\n",
  "5829c6fe7da141bbf000021b": "def compare(s1, s2):\r\n    v1, v2 = version(s1), version(s2)\r\n    return - 1 if v1 < v2 else 1 if v1 > v2 else 0\r\n    def version(s):\r\n    v = [int(n) for n in s . split(\".\")]\r\n    while (v[- 1] == 0):\r\n        v = v[0: - 1]\r\n    return v\r\n",
  "58ed139326f519019a000053": "def box(coords):\r\n    lat, long = zip(* coords)\r\n    return {\"nw\": [max(lat), min(long)], \"se\": [min(lat), max(long)]}\r\n",
  "5a06238a80171f824300003c": "def omit_hashtag(message, hashtag):\r\n    return message . replace(hashtag, \"\", 1)\r\n",
  "5a1a8b7ec374cbea92000086": "from itertools import product\r\n\r\n\r\ndef is_divisible_by_6(s):\r\n    if s[- 1] in '13579':\r\n        return []\r\n    ss = s . replace('*', '{}')\r\n    return [v for v in (ss . format(* p) for p in product(* (['0123456789'] * s . count('*')))) if not int(v) % 6]\r\n",
  "5a1a144f8ba914bbe800003f": "def decipherMessage(s):\r\n    ll = int(len(s) * * 0.5)\r\n    return '' . join(s[i:: ll] for i in range(ll))\r\n",
  "57de888c758d9ebfd7000061": "import numpy as np\r\n\r\n\r\ndef angle_planes(lstPts):\r\n    vectPlans = [np . cross(np . subtract(p1, p2), np . subtract(p1, p3))\r\n                 for p1, p2, p3 in [lstPts[: 3], lstPts[3:]]]\r\n    n1, n2, vp = map(np . linalg . norm, vectPlans + [np . cross(* vectPlans)])\r\n    return round(np . arcsin(vp / (n1 * n2)), 2)\r\n",
  "5a00a8b5ffe75f8888000080": "def replace_zero(arr):\r\n    m, im, i, lst = 0, - 1, - 1, '' . join(map(str, arr)). split('0')\r\n    for a, b in zip(lst, lst[1:]):\r\n    i += len(a) + 1\r\n    candidate = len(a) + len(b) + 1\r\n    if m <= candidate:\r\n    im, m = i, candidate\r\n    return im\r\n",
  "5a1a76c8a7ad6aa26a0007a0": "def life_path_number(s):\r\n    return int(s . replace(\"-\", \"\")) % 9 or 9\r\n",
  "5a1a9e5032b8b98477000004": "def even_last(numbers):\r\n    return sum(numbers[:: 2]) * numbers[- 1] if numbers else 0\r\n",
  "5a15b54bffe75f31990000e0": "import json\r\n\r\n\r\ndef f(data, level):\r\n    if level == 0:\r\n    yield data['name']\r\n    return\r\n    children = data['children']\r\n    if len(children) >= 7 and all(child['gender'] == 'male' for child in children[: 7]):\r\n    yield from f(children[6], level - 1)\r\n    for child in children:\r\n    yield from f(child, 2)\r\n\r\n    def find_seventh_sons_of_seventh_sons(jstring):\r\n    data = json . loads(jstring)\r\n    return set(f(data, 2))\r\n",
  "5a19226646d843de9000007d": "CONSONANTS = set('bcdfghjklmnpqrstvwxyz')\r\n\r\n\r\ndef count_consonants(text):\r\n    return len(CONSONANTS . intersection(text . lower()))\r\n",
  "5a16cab2c9fc0e09ce000097": "def solve(arr):\r\n    if sorted(arr) == arr:\r\n    return \"A\"\r\n    if sorted(arr)[:: - 1] == arr:\r\n    return \"D\"\r\n    return \"RA\" if arr[0] > arr[- 1] else \"RD\"\r\n",
  "55208f16ecb433c5c90001d2": "def trace(matrix):\r\n    if not matrix or len(matrix) != len(matrix[0]):\r\n    return None\r\n    return sum(matrix[i][i] for i in range(len(matrix)))\r\n",
  "5a092d9e46d843b9db000064": "def solve(arr): return sum(set(arr))\n",
  "586b1b91c66d181c2c00016f": "def optimal_number_of_coins(n, coins):\r\n    dp = [0 if not i else float(\"inf\") for i in range(n + 1)]\r\n\r\n    for i in range(1, n + 1):\r\n    for j in range(len(coins)):\r\n    if coins[j] <= i:\r\n    temp = dp[i - coins[j]]\r\n    if temp != float(\"inf\") and temp + 1 < dp[i]:\r\n    dp[i] = temp + 1\r\n    return dp[n]\r\n",
  "5a1502db46d84395ab00008a": "sb_primes = [2, 3, 5, 7, 13, 17, 19, 37, 73, 97, 109, 163, 193, 257, 433, 487, 577, 769, 1153, 1297, 1459, 2593, 2917, 3457, 3889, 10369,\r\n             12289, 17497, 18433, 39367, 52489, 65537, 139969, 147457, 209953, 331777, 472393, 629857, 746497, 786433, 839809, 995329, 1179649, 1492993]\r\n\r\n\r\ndef solve(x, y):\r\n    return sum(x <= p < y for p in sb_primes)\r\n",
  "571a8920b29485b065000582": "def score(c):\r\n    return abs(ord(c) - ord('n'))\r\n\r\n    def the_var(s):\r\n    a, b = s . split(\"*\")\r\n    return score(a) * score(b)\r\n",
  "58901ac726bd581274000096": "from collections import deque\n\n\nclass DoublyLinkedList (deque):\n    push, shift, unshift = deque . append, deque . popleft, deque . appendleft\n",
  "5a0366f12b651dbfa300000c": "def arbitrate(s, n):\r\n    i = s . find('1') + 1\r\n    return s[: i] + '0' * (n - i)\r\n",
  "5a15a4db06d5b6d33c000018": "def sum_nested(lst):\r\n    return sum(sum_nested(x) if isinstance(x, list) else x for x in lst)\r\n",
  "5a145ab08ba9148dd6000094": "def doubles(s):\r\n    cs = []\r\n    for c in s:\r\n    if cs and cs[- 1] == c:\r\n    cs . pop()\r\n    else:\r\n    cs . append(c)\r\n    return '' . join(cs)\r\n",
  "559a9a9ed391015e0700010f": "def chocolate(n, first_bar, second_bar):\r\n    return len(set(zip(first_bar, first_bar[1:])) - set(zip(second_bar, second_bar[1:])))\r\n",
  "5a147735ffe75f1c75000199": "import time\n\n\ndef increment_loop(n):\n    start = time . time()\n    i = 0\n    while time . time() - start < n:\n    i += 1\n    return i\n",
  "58b497914c5d0af407000049": "def nkotb_vs_homie(requirements):\r\n    return [\"{}! Homie dont play that!\" . format(a[8: - 5]. title())\r\n            for b in requirements for a in b] + \\\r\n        [\"{} monitoring objections, {} automation, {} deployment pipeline, {} cloud, and {} microservices.\" .\r\n         format(* (len(x) for x in requirements))]\r\n",
  "5901b2f47591f339b5000059": "import functools\r\n\r\n\r\ndef cmp(a, b):\r\n    for x, y in zip(a, b):\r\n    if x < y:\r\n    return - 1\r\n    if y < x:\r\n    return 1\r\n    if len(a) > len(b):\r\n    return - 1\r\n    if len(b) > len(a):\r\n    return 1\r\n    return 0\r\n    def custom_sort(lst):\r\n    return sorted(lst, key=functools . cmp_to_key(cmp))\r\n",
  "58ff61d2d6b38ee5270000bc": "from numpy . polynomial import polynomial\r\n\r\n\r\ndef outcome(n, s, k):\r\n    try:\r\n    return polynomial . polypow([0] + [1] * s, n)[k]\r\n    except IndexError:\r\n    return 0\r\n",
  "58e4033b5600a17be1000103": "def reverse_list(x):\n    \"\"\"Takes an list and returns the reverse of it. \n    If x is empty, return []. \n\n    >>> reverse_list([1, 2, 3, 4]) \n    [4, 3, 2, 1] \n    >>> reverse_list([]) \n    [] \n    \"\"\"\n    return x[:: - 1]\n\n    def sum_list(x):\n    \"\"\"Takes a list, and returns the sum of that list. \n If x is empty list, return 0. \n >>> sum_list([1, 2, 3, 4]) \n 10 \n >>> sum_list([]) \n 0 \n \"\"\"\n    return sum(x)\n\n    def head_of_list(x):\n    \"\"\"Takes a list, returns the first item in that list. \n If x is empty, return None \n >>> head_of_list([1, 2, 3, 4]) \n 1 \n >>> head_of_list([]) is None \n True \n \"\"\"\n    return x[0] if x else None\n",
  "5660aa6fa60f03856c000045": "def get_honor_path(score, target):\r\n    return {'1kyus': (target - score) / / 2, '2kyus': (target - score) % 2} if target > score else {}\r\n",
  "5a03af9606d5b65ff7000009": "class User (object):\r\n    def __init__(self, name, balance, checking_account):\r\n    self . name = name\r\n    self . balance = balance\r\n    self . checking_account = checking_account\r\n    def withdraw(self, v):\r\n    if v > self . balance:\r\n        raise ValueError()\r\n    self . balance -= v\r\n    return \"{} has {}.\" . format(self . name, int(self . balance))\r\n\r\n    def add_cash(self, v):\r\n    self . balance += v\r\n    return \"{} has {}.\" . format(self . name, int(self . balance))\r\n\r\n    def check(self, other, v):\r\n    if not other . checking_account:\r\n        raise ValueError()\r\n    s1, s2 = other . withdraw(v), self . add_cash(v)[: - 1]\r\n    return \"{} and {}\" . format(s2, s1)\r\n\r\n    def __str__(self): return \"User({}, {}, {})\" . format(\r\n        self . name, self . balance, self . checking_account)\r\n",
  "5a106ce7ffe75f4c200000f7": "from random import seed, randint\r\n\r\n\r\ndef find_random_seed(A):\r\n    for s in range(10000):\r\n    seed(s)\r\n    if [randint(0, 100) for _ in range(10)] == A:\r\n    return s\r\n",
  "5a0ec343c374cb6da0000006": "def element_location(begin: int, end: int, index: int, size: int) - > int:\r\n    out = begin + index * size\r\n    if out < begin or out >= end:\r\n    raise IndexError\r\n    return out\r\n",
  "5a0da79b32b8b98b8d000097": "def find_constant(arr, lb, ub):\r\n    return min(arr) - lb\r\n",
  "5a0be7ea8ba914fc9c00006b": "def sakura_fall(v):\r\n    return 400 / v if v > 0 else 0\r\n",
  "57bb798756449dea77000020": "from itertools import product\r\n\r\n\r\ndef krazy_king_blackjack(hand, king_value):\r\n    VALUE = {str(n): (n,) for n in range(1, 11)}\r\n    VALUE . update(\r\n        {'J': (10,), 'Q': (10,), 'K': (10, king_value), 'A': (1, 11)})\r\n    possible = [sum(comb) for comb in product(* (VALUE[card]\r\n                                                 for card in hand)) if sum(comb) <= 21]\r\n    return max(possible) if possible else False\r\n",
  "5a02cf76c9fc0ee71d0000d5": "from fractions import Fraction as F\r\nfrom math import factorial, tau\r\nB = [1, F(1, 2), F(1, 6), 0, - F(1, 30), 0, F(1, 42), 0, - F(1, 30), 0, F(5, 66), 0, - F(691, 2730), 0, F(7, 6), 0, - F(3617, 510), 0, F(43867, 798),\r\n     0, - F(174611, 330), 0, F(854513, 138), 0, - F(236364091, 2730), 0, F(8553103, 6), 0, - F(23749461029, 870), 0, F(8615841276005, 14322), 0]\r\n\r\n\r\ndef series(k: int, nb: int) - > float:\r\n    if k < - 1:\r\n        return float((- 1) * * k * B[1 - k] / (1 - k))\r\n    if k > 2 and k % 2:\r\n        return sum(1 / n * * k for n in range(1, nb + 1))\r\n    if k >= 2 and not k % 2:\r\n        return abs(B[k]) / 2 * tau * * k / factorial(k)\r\n    raise ValueError(f'function undefined for { k } ')\r\n",
  "5a0b4dc2ffe75f72f70000ef": "def find_children(santas_list, children):\r\n    return sorted(set(santas_list) & set(children))\r\n",
  "5a0b72484bebaefe60001867": "def distance(p1, p2):\r\n    return sum((a - b) * * 2 for a, b in zip(p1, p2)) * * 0.5 if len(p1) == len(p2) > 0 else - 1\r\n",
  "5a05a4d206d5b61ba70000f9": "# return str of the smallest value of the combined numbers in a_list\ndef penalty(a_list):\n    return '' . join(sorted(a_list, key=lambda n: n + n[: 1]))\n",
  "5a0aae48ba2a14cfa600016d": "def start_smoking(bars, boxes):\r\n    return int(22.5 * (10 * bars + boxes) - 0.5)\r\n",
  "5888a57cbf87c25c840000c6": "def star_sign(date):\r\n    limits = ['', 20, 19, 20, 20, 21, 21, 22, 23, 23, 23, 22, 21]\r\n    signs = ['Aquarius', 'Pisces', 'Aries', 'Taurus', 'Gemini', 'Cancer',\r\n             'Leo', 'Virgo', 'Libra', 'Scorpio', 'Sagittarius', 'Capricorn']\r\n\r\n    if date . day > limits[date . month]:\r\n    return signs[date . month - 1]\r\n    else:\r\n    return signs[date . month - 2]\r\n",
  "5a04133e32b8b998dc000089": "def solve(arr):\r\n    r = []\r\n    for v in arr[:: - 1]:\r\n    if not r or r[- 1] < v:\r\n        r . append(v)\r\n    return r[:: - 1]\r\n",
  "5a090c4e697598d0b9000004": "def solve(arr):\r\n    arr = sorted(arr, reverse=True)\r\n    res = []\r\n    while len(arr):\r\n    res . append(arr . pop(0))\r\n    if len(arr):\r\n    res . append(arr . pop())\r\n    return res\r\n",
  "5a084a098ba9146690000969": "def timeConvert(m):\r\n    return '{:02d}:{:02d}' . format(* divmod(max(int(m), 0), 60))\r\n",
  "5a0599908ba914a6cf000138": "notes = {\r\n    440: \"A\",\r\n    466.16: \"A#\",\r\n    493.88: \"B\",\r\n    523.25: \"C\",\r\n    554.37: \"C#\",\r\n    587.33: \"D\",\r\n    622.25: \"D#\",\r\n    659.25: \"E\",\r\n    698.46: \"F\",\r\n    739.99: \"F#\",\r\n    783.99: \"G\",\r\n    830.61: \"G#\"\r\n}\r\n\r\n\r\ndef get_note(pitch):\r\n\r\n    for note in notes:\r\n    if note >= pitch and note % pitch == 0:\r\n    return notes[note]\r\n    elif note < pitch and pitch % note == 0:\r\n    return notes[note]\r\n",
  "5a05fe8a06d5b6208e00010b": "def seq_to_one(n):\r\n    step = (- 1) * * (n >= 1)\r\n    return list(range(n, 1 + step, step))\r\n",
  "5a057ec846d843c81a0000ad": "import math\n\n\ndef cycle(n):\n    if n % 2 == 0 or n % 5 == 0:\n    return - 1\n    k = 1\n    while pow(10, k, n) != 1:\n    k += 1\n    return k\n",
  "5a0350c380171ffd7b00012a": "def get_derivative(s):\r\n    if '^' in s:\r\n    f, t = map(int, s . split('x^'))\r\n    return '{}x' . format(f * t) if t == 2 else '{}x^{}' . format(f * t, t - 1)\r\n    elif 'x' in s:\r\n        return s[: - 1]\r\n    else:\r\n        return '0'\r\n",
  "5a045fee46d843effa000070": "from collections import defaultdict\r\n\r\n\r\ndef dec(n):\r\n    decomp = defaultdict(lambda: 0)\r\n    i = 2\r\n    while n > 1:\r\n    while n % i == 0:\r\n    n /= i\r\n    decomp[i] += 1\r\n    i += 1\r\n    return decomp\r\n    def decomp(n):\r\n    ans = defaultdict(lambda: 0)\r\n    for i in range(2, n + 1):\r\n    for key, value in dec(i). items():\r\n    ans[key] += value\r\n    return ' * ' . join('{}^{}' . format(x, y) if y > 1 else str(x) for x, y in sorted(ans . items()))\r\n",
  "5a0001a606d5b68a5a000013": "from functools import wraps\r\n\r\n\r\ndef validate_args(* types):\r\n    def decorator(func):\r\n    @ wraps(func)\r\n    def wrapper(* args):\r\n    if all(map(isinstance, args, types)):\r\n    return func(* args)\r\n    else:\r\n    raise InvalidArgument\r\n    return wrapper\r\n    return decorator\r\n",
  "59ffef8246d8434b0700001d": "from functools import wraps\r\n\r\n\r\ndef memoize(func):\r\n    cache = {}\r\n    @ wraps(func)\r\n    def wrapper(* args):\r\n    if args in cache:\r\n        return cache[args]\r\n    else:\r\n        return cache . setdefault(args, func(* args))\r\n    return wrapper\r\n",
  "5a010ee3ba2a14f4940001df": "def wraps(wrapped):\r\n    def wrapper(func):\r\n    for attr in ('__module__', '__name__', '__qualname__', '__doc__', '__annotations__'):\r\n    try:\r\n    value = getattr(wrapped, attr)\r\n    except AttributeError:\r\n    pass\r\n    else:\r\n    setattr(func, attr, value)\r\n    func . __dict__ . update(getattr(wrapped, attr, {}))\r\n    func . __wrapped__ = wrapped\r\n    return func\r\n    return wrapper\r\n",
  "5a0117798ba9143a64000073": "from functools import wraps\r\n\r\n\r\ndef htmlize(tag):\r\n    def wrapper(f):\r\n    @ wraps(f)\r\n    def fexec(* args, * * kwds):\r\n    return '<{0}>{1}</{0}>' . format(tag, f(* args, * * kwds))\r\n    return fexec\r\n    return wrapper\r\n",
  "59ffe8bbffe75f6d94000016": "from functools import wraps\r\n\r\n\r\ndef count_calls(func):\r\n    @ wraps(func)\r\n    def wrapper(* args, * * kwds):\r\n    wrapper . call_count += 1\r\n    return func(* args, * * kwds)\r\n    wrapper . call_count = 0\r\n    return wrapper\r\n",
  "56dbb6603e5dd6543c00098d": "def track_sum(arr):\r\n    a = arr\r\n    b = sorted(set(a), reverse=True)\r\n    c = [(x - y) for (x, y) in zip(b, b[1:])]\r\n    d = sorted(set(c), key=c . index)\r\n    return [list(map(sum, [a, b, c, d])), d]\r\n",
  "57048c1275263af10b00063e": "from itertools import cycle, islice\r\n\r\n\r\ndef endless_string(stg, i, l):\r\n    i = min(i, i + l) % len(stg) + (l < 0)\r\n    j = i + abs(l)\r\n    return \"\" . join(islice(cycle(stg), i, j))\r\n",
  "58cf479f87c2e967250000e4": "# system of equations:\n# h = s + b + d\n# l = 8*s + 6*b + 6*d\n# w = 0*s + 1*b + 2*d\n#\n# get third equation in terms of b\n# b = w - 2d\n#\n# replace b in other equations:\n# h = s + (w - 2d) + d\n# l = 8*s + 6*(w - 2d) + 6*d\n#\n# get first equation in terms of s\n# s = h - w + d\n#\n# replace in remaining equation:\n# l = 8*(h - w + d) + 6*(w - 2d) + 6*d\n# simplify:\n# l = 8h - 8w + 8d + 6w - 12d + 6d\n# l = 8h - 2w + 2d\n# get in terms of d:\n# d = l/2 - 4h + w\ndef cal_n_bug(h, l, w):\n    d = l / 2 - 4 * h + w\n    s = h - w + d\n    b = w - 2 * d\n    if d < 0 or s < 0 or b < 0:\n    return [- 1, - 1, - 1]\n    return [s, b, d]\n",
  "5a04450c8ba914083700000a": "def find_max(root):\r\n    v = root . value\r\n    if root . left:\r\n        v = max(v, find_max(root . left))\r\n    if root . right:\r\n        v = max(v, find_max(root . right))\r\n    return v\r\n",
  "5a043fbef3251a5a2b0002b0": "import re\n\n\ndef textin(txt):\n    return re . sub(r'(two|too|to)', '2', txt, flags=re . I)\n",
  "5a043724ffe75fbab000009f": "def reverse_middle(lst):\r\n    l = len(lst) / / 2 - 1\r\n    return lst[l: - l][:: - 1]\r\n",
  "5a028001ba2a14346b0000d4": "def count_visible(posters):\r\n    wall = [0] * 1000\r\n    for i, (x, y) in enumerate(posters, 1):\r\n    wall[x - 1: y] = [i] * (y - x + 1)\r\n    wall = set(wall)\r\n    wall . discard(0)\r\n    return len(wall)\r\n",
  "5a03b3f6a1c9040084001765": "def angle(n):\r\n    return 180 * (n - 2)\r\n",
  "5811cb19d8a4dadcb8000037": "def abundance(n):\r\n    l, i = [], 2\r\n    while len(l) < n:\r\n    i += 1\r\n    a = sum(k for k in range(2, i / / 2 + 1) if i % k == 0) - i\r\n    if a > 0:\r\n    l . append((a, i))\r\n\r\n    return [a for _, a in sorted(l)]\r\n",
  "586d9a71aa0428466d00001c": "from math import comb\n\n\ndef count_paths(N, coords):\n    n, m = coords[0], N - coords[1] - 1\n    return comb(n + m, n) if n + m > 0 else 0\n",
  "5a036ecb2b651d696f00007c": "def draw_a_cross(n: int) - > str:\r\n    if n < 3:\r\n    return \"Not possible to draw cross for grids less than 3x3!\"\r\n    if n % 2 == 0:\r\n    return \"Centered cross not possible!\"\r\n    lines = [('x' + ' ' * i + 'x'). center(n) for i in range(n - 2, 0, - 2)]\r\n    return '\\n' . join(lines + ['x' . center(n)] + lines[:: - 1])\r\n",
  "5a02e9c19f8e2dbd50000167": "from re import sub\n\n\ndef vowel_start(st):\n    return sub(r'(?<=.)([aeiou])', r' \\1', sub(r'[^a-z0-9]', '', st . lower()))\n",
  "5a02037ac374cbab41000089": "def get_animals_count(legs, heads, horns):\n    cows = horns / / 2\n    rabbits = legs / / 2 - cows - heads\n    chickens = heads - cows - rabbits\n    return dict(cows=cows, rabbits=rabbits, chickens=chickens)\n",
  "5a02a758ffe75f8da5000030": "def hanoiArray(n):\r\n    A, B, C = list(range(n, 0, - 1)), [], []\r\n    res = [str([A, C, B])]\r\n    def rec(n, X, Y, Z):\r\n    if not n:\r\n        return\r\n    rec(n - 1, X, Z, Y)\r\n    Y . append(X . pop())\r\n    res . append(str([A, C, B]))\r\n    rec(n - 1, Z, Y, X)\r\n    rec(n, A, B, C)\r\n    return '\\n' . join(res)\r\n",
  "583726b8aa6717a718000002": "from itertools import cycle\r\n\r\n\r\ndef spiralize(word):\r\n    x, y, dirs, spiral = 0, 0, cycle([(1, 0), (0, 1), (- 1, 0), (0, - 1)]), {}\r\n\r\n    for c in word:\r\n    dx, dy = next(dirs)\r\n    for _ in range(ord(c) - 96):\r\n    x, y = x + dx, y + dy\r\n    spiral[(x, y)] = c\r\n    miX, maX = min(spiral . keys(), key=lambda t: t[0])[\r\n        0], max(spiral . keys(), key=lambda t: t[0])[0]\r\n    miY, maY = min(spiral . keys(), key=lambda t: t[1])[\r\n        1], max(spiral . keys(), key=lambda t: t[1])[1]\r\n\r\n    return '\\n' . join('' . join(spiral . get((x, y), ' ') for y in range(miY, maY + 1)) for x in range(miX, maX + 1))\r\n",
  "57aaaada72292d3b8f0001b4": "def n_closestPairs_tonum(upper_lim, k):\r\n    square_lim = int((2 * upper_lim) * * .5) + 1\r\n    squares = [n * n for n in range(1, square_lim)]\r\n    p, s = [], set(squares)\r\n    for m in range(upper_lim - 1, 1, - 1):\r\n    for b in squares:\r\n    if b >= m:\r\n        break\r\n    if 2 * m - b in s:\r\n    p . append([m, m - b])\r\n    if len(p) == k:\r\n        return p\r\n",
  "5a026a9cffe75fbace00007f": "import math\n\n\ndef circle_diameter(sides, side_length):\n    return side_length / math . tan(math . pi / sides)\n",
  "582406166cf35b7f93000057": "from datetime import date\r\nfrom itertools import permutations\r\n\r\n\r\ndef uniqueDate(* args):\r\n    ds = set()\r\n    for y, m, d in permutations(args, 3):\r\n    try:\r\n        ds . add(date(y + 2000, m, d))\r\n    except:\r\n        pass\r\n    return 'ambiguous' if len(ds) > 1 else 'invalid' if not ds else ds . pop(). strftime(\"%y/%m/%d\")\r\n",
  "58add662ea140541a50000f7": "def sierpinski(n):\r\n    t = ['*']\r\n    for _ in range(n):\r\n    t = [r . center(2 * len(t[- 1]) + 1) for r in t] + [r + ' ' + r for r in t]\r\n    return '\\n' . join(t)\r\n",
  "588534713472944a9e000029": "class T:\r\n    def __init__(self, value, left=None, right=None):\r\n    self . value = value\r\n    self . left = left\r\n    self . right = right\r\n    def is_bst(node):\r\n\r\n    def extract(node):\r\n    if node is not None:\r\n    yield from extract(node . left)\r\n    yield node . value\r\n    yield from extract(node . right)\r\n\r\n    gen = extract(node)\r\n    try:\r\n    u, v = next(gen), next(gen)\r\n    except StopIteration:\r\n    return True\r\n    cmp = u < v\r\n    for w in gen:\r\n    if cmp != (v < w):\r\n        return False\r\n    v = w\r\n    return True\r\n",
  "5a023c426975981341000014": "def other_angle(a, b):\r\n    return 180 - a - b\r\n",
  "576986639772456f6f00030c": "def path_finder(maze):\r\n    grid = maze . splitlines()\r\n    end = h, w = len(grid) - 1, len(grid[0]) - 1\r\n    bag, seen = {(0, 0): 0}, set()\r\n    while bag:\r\n    x, y = min(bag, key=bag . get)\r\n    rounds = bag . pop((x, y))\r\n    seen . add((x, y))\r\n    if (x, y) == end:\r\n        return rounds\r\n    for u, v in (- 1, 0), (0, 1), (1, 0), (0, - 1):\r\n    m, n = x + u, y + v\r\n    if (m, n) in seen or not (0 <= m <= h and 0 <= n <= w):\r\n        continue\r\n    new_rounds = rounds + abs(int(grid[x][y]) - int(grid[m][n]))\r\n    if new_rounds < bag . get((m, n), float('inf')):\r\n        bag[m, n] = new_rounds\r\n",
  "567ffb369f7f92e53800005b": "from fractions import Fraction as frac\r\n\r\n\r\ndef ber():\r\n    res, m = [], 0\r\n    while True:\r\n    res . append(frac(1, m + 1))\r\n    for j in range(m, 0, - 1):\r\n    res[j - 1] = j * (res[j - 1] - res[j])\r\n    yield res[0]\r\n    m += 1\r\n    def bernoulli_number(n):\r\n    if n == 1:\r\n        return Fraction(- 1, 2)\r\n    if n % 2 == 1:\r\n       return 0\r\n    bn2 = [ix for ix in zip(range(n + 2), ber())]\r\n    bn2 = [b for _, b in bn2]\r\n    return bn2[n]\r\n",
  "587e1ef6f1a2534bbe0001ef": "class Package (object):\r\n    maxs = {\"length\": 350, \"width\": 300, \"height\": 150, \"weight\": 40}\r\n\r\n    def __init__(self, l, w, h, wg):\r\n    self . length = l\r\n    self . width = w\r\n    self . height = h\r\n    self . weight = wg\r\n    def __setattr__(self, att, v):\r\n    if v <= 0 or v > Package . maxs[att]:\r\n        raise DimensionsOutOfBoundError(att, v, Package . maxs[att])\r\n    self . __dict__[att] = v\r\n    @ property\r\n    def volume(self):\r\n    return self . length * self . width * self . height\r\n    class DimensionsOutOfBoundError (Exception):\r\n    def __init__(self, dim, val, max):\r\n    self . str = \"Package %s==%d out of bounds, should be: 0 < %s <= %d\" % (\r\n        dim, val, dim, max)\r\n\r\n    def __str__(self):\r\n    return self . str\r\n",
  "586fa9ddc66d18e2e10000ce": "exec('try: raises_once()\\nexcept: magic = raises_once()')\n",
  "5845e3f680a8cf0bad00017d": "def min_path(grid, x, y):\r\n    paths = [0] + [float('inf')] * (x + 1)\r\n    for j in range(y + 1):\r\n    for i in range(x + 1):\r\n    paths[i] = grid[j][i] + min(paths[i - 1], paths[i])\r\n    return paths[x]\r\n",
  "57698ec6dd8944888e000110": "from math import comb\n\n\ndef increasing_numbers(digits):\n    return comb(digits + 9, 9)\n",
  "55a4f1f67157d8cbe200007b": "def count_islands(a):\r\n    def dfs(x, y):\r\n    if not (0 <= x < len(a) and 0 <= y < len(a[0]) and a[x][y]):\r\n    return 0\r\n    a[x][y] = 0\r\n    for dx in range(- 1, 2):\r\n    for dy in range(- 1, 2):\r\n    dfs(x + dx, y + dy)\r\n    return 1\r\n    return sum(dfs(i, j) for i in range(len(a)) for j in range(len(a[0])))\r\n",
  "5a0178f66f793bc5b0001728": "from collections import Counter\r\n\r\n\r\ndef longest_palindrome(s):\r\n    c = Counter(filter(str . isalnum, s . lower()))\r\n    return sum(v / / 2 * 2 for v in c . values()) + any(v % 2 for v in c . values())\r\n",
  "58224b5334c53a4294000b5a": "def f(n):\r\n    d = list(map(int, str(n)))\r\n    return sum((- 1) * * (a > b) * a * * abs(a - b) for a, b in zip(d, d[1:])) + n % 10\r\n    seq = [n for n in range(1, 1000101) if not f(n)]\r\n\r\n    from bisect import bisect_left\r\n    def prev_next(n):\r\n    idx = bisect_left(seq, n)\r\n    return seq[max(0, idx - 1): idx + 1 + (seq[idx] == n)]\r\n",
  "584c3e45710dca21be000088": "def find_longest(s):\r\n    stack, m = [- 1], 0\r\n    for i, j in enumerate(s):\r\n    if j == '(':\r\n        stack . append(i)\r\n    else:\r\n    stack . pop()\r\n    if stack:\r\n        m = max(m, i - stack[- 1])\r\n    else:\r\n        stack . append(i)\r\n    return m\r\n",
  "59c5d0b0a25c8c99ca000237": "def line(grid):\r\n    g = {(r, c): v for r, row in enumerate(grid)\r\n         for c, v in enumerate(row) if v . strip()}\r\n    ends = [k for k in g if g[k] == 'X']\r\n    if len(ends) != 2:\r\n        return False\r\n    for start, finish in [ends, ends[:: - 1]]:\r\n    path = [start]\r\n    while path[- 1] != finish:\r\n    r, c = path[- 1]\r\n    d, V, H = g[path[- 1]], [(r + 1, c), (r - 1, c)], [(r, c - 1), (r, c + 1)]\r\n    moves = {'+': V if len(path) > 1 and path[- 1][0] ==\r\n             path[- 2][0] else H, '|': V, '-': H, 'X': H + V}[d]\r\n    possibles = {p for p in moves if p in g and p not in path and (\r\n        d == '+' or (p[0] == r and g[p] != '|') or (p[1] == c and g[p] != '-'))}\r\n\r\n    if len(possibles) != 1:\r\n        break\r\n    path . append(possibles . pop())\r\n    if len(g) == len(path):\r\n        return True\r\n    return False\r\n",
  "5939b753942a2700860000df": "def generateBricks(isCut, y):\r\n    return \"{0}|{1}|{0}\" . format(\"\u25a0\" * (1 + isCut), '|' . join(\"\u25a0\u25a0\" for _ in range(y - 1 - isCut)))\r\n\r\n    def build_a_wall(* args):\r\n    if len(args) != 2 or any(type(z) != int or z <= 0 for z in args):\r\n    return None\r\n    x, y = args\r\n    return (\"Naah, too much...here\\'s my resignation.\" if x * y > 10000\r\n            else '\\n' . join(generateBricks((x - nr) % 2, y) for nr in range(x)))\r\n",
  "59fd6d2332b8b9955200005f": "from itertools import combinations\n\n\ndef solve(n, k):\n    return '' . join(min(combinations(str(n), len(str(n)) - k)))\n",
  "569651a2d6a620b72e000059": "N = [\"scissor\", \"paper\", \"rock\", \"lizard\", \"spock\"]\r\nO = [[0, 1, 2, 1, 2],\r\n     [2, 0, 1, 2, 1],\r\n     [1, 2, 0, 1, 2],\r\n     [2, 1, 2, 0, 1],\r\n     [1, 2, 1, 2, 0]]\r\n\r\n\r\ndef result(p1, p2):\r\n    try:\r\n        i1, i2 = N . index(p1 . lower()), N . index(p2 . lower())\r\n    except:\r\n        return \"Oh, Unknown Thing\"\r\n    r = O[i1][i2]\r\n    return f\"Player { r } won!\" if r else \"Draw!\"\r\n",
  "5a005f4fba2a14897f000086": "def sum_it_up(a):\r\n    return sum(int(n, b) for n, b in a)\r\n",
  "59ff4709ba2a14501500003a": "def arrange(arr):\r\n    def normalized(weight):\r\n    if weight . endswith(\"T\"):\r\n        return int(weight[: - 1]) * 10 * * 6\r\n    if weight . endswith(\"KG\"):\r\n        return int(weight[: - 2]) * 10 * * 3\r\n    if weight . endswith(\"G\"):\r\n        return int(weight[: - 1])\r\n    return sorted(arr, key=normalized)\r\n",
  "589896b99c70093f3e00005b": "import math\n\n\ndef sixteen_circles(r):\n    # coordinates a, b, c, d. Assuming the center (0, 0), x = radius of the center circle\n    # then a = (0, x+r), b = (x+r, 0)\n    # c=(2r*cos(30degree), x+r+2r*sin(30degree))\n    # d = (x+r+2r*cos(60d), 2r*sin(60d))\n    # the distance between c and d should be 2r\n    # (x+r+2rcos(60d) - 2rcos(30d))**2 + (x+r+2rsinc(30d) - 2rsin(60d))**2 = 4r**2\n    # So we got a quadratic ax^2 + bx + c = 0\n    a = 2\n    b = 2 * (r + 2 * r * math . cos(math . radians(60)) - 2 * r * math . cos(math . radians(30))) + \\\n        2 * (r + 2 * r * math . sin(math . radians(30)) -\n             2 * r * math . sin(math . radians(60)))\n    c = - (2 * r) * * 2 + (r + 2 * r * math . cos(math . radians(60)) - 2 * r * math . cos(math . radians(30))) * * 2 + (r + 2 * r * math . sin(math . radians(30)) - 2 * r * math . sin(math . radians(60))) * * 2\n    # two roots\n    x1 = round((- b + (b * * 2 - 4 * a * c) * * 0.5) / (2 * a), 2)\n    x2 = round((- b - (b * * 2 - 4 * a * c) * * 0.5) / (2 * a), 2)\n    if x1 <= 0 and x2 <= 0:\n    return None\n    else:\n    return max(x1, x2)\n",
  "59ffd493ba2a14d16f0000d9": "def possible_scores(answer_of_tom, score_of_tom, answer_of_john):\n    \"\"\"The minimum score for John is when every possible difference from Tom's answer \n    is one that Tom got right. \n\n    The maximum score for John is when every difference from Tom's answer is one that \n    Tom got wrong. \n    \"\"\"\n    num_differences = sum(t != j for t, j in zip(\n        answer_of_tom, answer_of_john))\n    tom_right = score_of_tom / / 10\n    tom_wrong = len(answer_of_tom) - tom_right\n    # John worst case\n    john_right = abs(tom_right - num_differences)\n    min_score = 10 * john_right\n    # John best case\n    john_wrong = abs(tom_wrong - num_differences)\n    max_score = 10 * (len(answer_of_john) - john_wrong)\n\n    return min_score, max_score\n",
  "58855acc9e1de22dff0000ef": "def interpreter(tape):\r\n    ptr, stack, output = 0, [0], []\r\n\r\n    while ptr < len(tape):\r\n    command = tape[ptr]\r\n\r\n    if command == '^':\r\n        stack . pop()\r\n    elif command == '!':\r\n        stack . append(0)\r\n    elif command == '+':\r\n        stack[- 1] = (stack[- 1] + 1) % 256\r\n    elif command == '-':\r\n        stack[- 1] = (stack[- 1] - 1) % 256\r\n    elif command == '*':\r\n        output . append(chr(stack[- 1]))\r\n    elif command == '[' and stack[- 1] == 0:\r\n        ptr = tape . find(']', ptr)\r\n    elif command == ']' and stack[- 1] != 0:\r\n        ptr = tape . rfind('[', ptr)\r\n\r\n    ptr += 1\r\n    return '' . join(output)\r\n",
  "59fa8e2646d8433ee200003f": "def sort_by_bit(arr):\r\n    # they wanted to modify the input\r\n    arr . sort(key=lambda x: (bin(x). count('1'), x))\r\n    return arr\r\n",
  "59fc9e7ec374cbbb8a0000a7": "def largest_cross_sum(arr):\r\n    h, w = range(len(arr)), range(len(arr[0]))\r\n    rows = [sum(row) for row in arr]\r\n    cols = [sum(col) for col in zip(* arr)]\r\n    return max(rows[j] + cols[i] - arr[j][i] for j in h for i in w)\r\n",
  "581bc0629ad9ff9873000316": "def tokenize(expression):\r\n    result = []\r\n    curr = ''\r\n    for chr in expression:\r\n    if chr . isdigit() or chr == '.':\r\n    curr += chr\r\n    elif chr in '$*-+':\r\n    result . extend([float(curr), chr])\r\n    curr = ''\r\n    else:\r\n    raise ValueError('invalid input')\r\n    if curr:\r\n    result . append(float(curr))\r\n    return result\r\n    def calculate(expression):\r\n    ops = {\r\n        '+': lambda x, y: x + y,\r\n        '-': lambda x, y: x - y,\r\n        '*': lambda x, y: x * y,\r\n        '$': lambda x, y: x / y,\r\n    }\r\n\r\n    try:\r\n    l = tokenize(expression)\r\n    except ValueError:\r\n    return '400: Bad request'\r\n    for op in '$*-+':\r\n    while op in l:\r\n    i = l . index(op)\r\n    l = l[: i - 1] + [ops[op](l[i - 1], l[i + 1])] + l[i + 2:]\r\n\r\n    return l[0]\r\n",
  "58de08d376f875dbb40000f1": "def premier_league_standings(teams):\r\n    dct = {1: teams[1]}\r\n    dct . update({i: t for i, t in enumerate(\r\n        sorted(set(teams . values()) - {teams[1]}), 2)})\r\n    return dct\r\n",
  "59fab1f0c9fc0e7cd4000072": "from collections import Counter\n\n\ndef solve(a, b):\n    return 0 if Counter(b) - Counter(a) else len(a) - len(b)\n",
  "59dd2c38f703c4ae5e000014": "import re\n\n\ndef solve(s):\n    return max(map(int, re . findall(r\"(\\d+)\", s)))\n",
  "59f61aada01431e8c200008d": "def solve(n, k):\r\n    maxGcd = 2 * n / / (k * (k + 1))\r\n    for gcd in range(maxGcd, 0, - 1):\r\n    last = n - gcd * k * (k - 1) / / 2\r\n    if not last % gcd:\r\n    return [gcd * x if x != k else last for x in range(1, k + 1)]\r\n    return []\r\n",
  "59831e3575ca6c8aea00003a": "def game(x, y):\r\n    return 'second' if y == 2 else 'first' if x % 2 and y % 2 == 0 or x % 2 else 'second'\r\n",
  "58aa50372223a30e4f000068": "def first_operation_character(expr):\r\n    res, lvl = (1, None, None), 0\r\n    for i, c in enumerate(expr):\r\n    match c:\r\n    case '(': lvl -= 1\r\n    case ')': lvl += 1\r\n    case '+' | '*': res = min(res, (lvl, c, i))\r\n    return res[2]\r\n",
  "596b7f284f232df61e00001b": "from itertools import product\r\n\r\n\r\ndef operator_insertor(n):\r\n    result = []\r\n\r\n    for ops in product([\"+\", \"-\", \"\"], repeat=8):\r\n    expression = \"\" . join(\r\n        a + b for a, b in zip(\"123456789\", list(ops) + [\"\"]))\r\n    res = eval(expression)\r\n    if res == n:\r\n    result . append(len(expression) - 9)\r\n\r\n    return min(result, default=None)\r\n",
  "59f69fefa0143109e5000019": "def did_we_win(plays):\r\n    plays = [p for p in plays if p]\r\n    return all(p != 'turnover' for y, p in plays) and sum(- y if p == 'sack' else y for y, p in plays) > 10\r\n",
  "59f8dd1132b8b9af150001ea": "def to_bits(s):\n    lst = [0] * 5000\n    for i in map(int, s . split()):\n        lst[i] = 1\n    return lst\n",
  "59f81fe146d84322ed00001e": "def check_pipe(pipe_map):\r\n    def get(y, x): return pipe_map[y][x] if 0 <= y < len(\r\n        pipe_map) and 0 <= x < len(pipe_map[0]) else None\r\n    UP, LEFT, DOWN, RIGHT = (- 1, 0), (0, - 1), (1, 0), (0, 1)\r\n    pipes = {\r\n        '\u2517': (UP, RIGHT),\r\n        '\u2513': (LEFT, DOWN),\r\n        '\u250f': (RIGHT, DOWN),\r\n        '\u251b': (UP, LEFT),\r\n        '\u2501': (LEFT, RIGHT),\r\n        '\u2503': (UP, DOWN),\r\n        '\u2523': (UP, DOWN, RIGHT),\r\n        '\u252b': (UP, DOWN, LEFT),\r\n        '\u2533': (LEFT, DOWN, RIGHT),\r\n        '\u253b': (LEFT, UP, RIGHT),\r\n        '\u254b': (UP, LEFT, RIGHT, DOWN)\r\n    }\r\n    ok = set()\r\n    to_check = {(y, x) for y, r in enumerate(pipe_map)\r\n                for x, v in enumerate(r)\r\n                if (y == 0 or y == len(pipe_map) - 1 or x == 0 or x == len(pipe_map[0]) - 1)\r\n                and get(y, x) != '.'\r\n                and any(get(y + dy, x + dx) is None for dy, dx in pipes[v])\r\n                }\r\n    while to_check:\r\n    y, x = to_check . pop()\r\n    for dy, dx in pipes[get(y, x)]:\r\n    if (v := get(y + dy, x + dx)) is None:\r\n    continue\r\n    if v == '.' or (- dy, - dx) not in pipes[v]:\r\n    return False\r\n    ok . add((y, x))\r\n    if (y + dy, x + dx) not in ok:\r\n    to_check . add((y + dy, x + dx))\r\n    return True\r\n",
  "59f897ecc374cb9ed90000c2": "def monkey_talk(phrase):\r\n    return ' ' . join(['ook', 'eek'][w[0]. lower() in 'aeiou'] for w in phrase . split()). capitalize() + '.'\r\n",
  "59f2e89601601434ae000055": "def connect_pipes(pipes, s, e):\r\n    zipped = []\r\n    for l in map('' . join, zip(* pipes)):\r\n    s1, s2 = l . find('x'), l . rfind('x')\r\n    waterline = [0 if c == '.' else\r\n                 9473 if i == s == s1 == s2 else\r\n                 9499 if i == s == s2 else\r\n                 9487 if i == s1 != s else\r\n                 9491 if i == s == s1 else\r\n                 9495 if i == s2 != s else\r\n                 9475 for i, c in enumerate(l)]\r\n    zipped . append(waterline)\r\n    if s1 != s2:\r\n        s = ({s1, s2} - {s}). pop()\r\n\r\n    return list(map(list, zip(* zipped)))\r\n",
  "59f7a0a77eb74bf96b00006a": "def golf_score_calculator(par, score):\r\n    return sum(int(b) - int(a) for a, b in zip(par, score))\r\n",
  "59f8750ac374cba8f0000033": "from gmpy2 import is_prime as ip\n\n\ndef solve(n):\n    a = 1\n    while n > - 1:\n    if not ip(a) and all(i not in '2357' for i in str(a)):\n    n -= 1\n    a += 1\n    return a - 1\n",
  "59f7fc109f0e86d705000043": "def divisible_by_three(st):\r\n    while len(st) != 1:\r\n    st = str(sum(int(n) for n in st))\r\n    return int(st) in [0, 3, 6, 9]\r\n",
  "57658bfa28ed87ecfa00058a": "\"\"\" \n Task \n You are at position [0, 0] in maze NxN and you can only move in one of the four cardinal directions \n (i.e. North, East, South, West). Return true if you can reach position [N-1, N-1] or false otherwise. \n Empty positions are marked .. Walls are marked W. Start and exit positions are empty in all test cases. \n \"\"\"\n\n\ndef path_finder(maze):\n    maze_arr = maze_str_to_array(maze)\n    n = len(maze_arr)\n    start, goal = (0, 0), (n - 1, n - 1)\n    return ai_star(maze_arr, start, goal)\n\n    def bfs(maze_arr, start, goal):\n    \"\"\" \n Implementation of breadth first search algorithm for solving maze problem \n :param maze_arr: search space \n :param start: starting node \n :param goal: goal node \n :return: True if goal can be reached \n \"\"\"\n    from queue import Queue\n    to_be_expanded = Queue()\n    to_be_expanded . put(start)\n    tree = set()\n\n    while not to_be_expanded . empty():\n    node = to_be_expanded . get()\n    if node == goal:\n    return True\n    tree . add(node)\n    neighbors = get_node_neighbors(maze_arr, node)\n    for neighbor in neighbors:\n    if neighbor not in tree:\n    to_be_expanded . put(neighbor)\n    return False\n    def ai_star(maze_arr, start, goal):\n    \"\"\" \n Implementation of A* algorithm for solving maze problem. Heap is used. The value passed to \n a heap is a tuple containing priority (estimated cost) and cell coordinates. \n :param maze_arr: search space \n :param start: starting node \n :param goal: goal node \n :return: True if goal can be reached \n \"\"\"\n    from heapq import heappush, heappop\n    to_be_expanded = []\n    heappush(to_be_expanded, (manhattan_distance(start, goal), 0, 0, start))\n    tree = set()\n\n    while to_be_expanded:\n    _, cost, real_cost, node = heappop(to_be_expanded)\n    if node == goal:\n    return real_cost\n    tree . add(node)\n    neighbors = get_node_neighbors(maze_arr, node)\n    for neighbor in neighbors:\n    if neighbor not in tree:\n    heappush(to_be_expanded, (cost + manhattan_distance(neighbor,\n             goal), cost + 0.99, real_cost + 1, neighbor))\n    return False\n    def manhattan_distance(cell, goal):\n    \"\"\" \n Computes manhattan distance from some cell to the goal. \n :param cell: cell from where the distance is measured \n :param goal: goal node \n :return: absolute integer value of a manhattan distance \n \"\"\"\n    return abs(cell[0] - goal[0]) + abs(cell[1] - goal[1])\n\n    def euclidean_distance(cell, goal):\n    \"\"\" \n Computes euclidean distance from some cell to the goal. \n :param cell: cell from where the distance is measured \n :param goal: goal node \n :return: absolute float value of a euclidean distance \n \"\"\"\n    from math import sqrt\n    return sqrt((cell[0] - goal[0]) * * 2 + (cell[1] - goal[1]) * * 2)\n\n    def maze_str_to_array(maze):\n    \"\"\" \n Function to convert string representation of a maze into multidimensional list. One (1) represents empty \n field, zero (0) represents a wall (impenetrable field) \n :param maze: string representation of a maze \n :return: list representation of a maze. \n \"\"\"\n    return [[1 if char == '.' else 0 for char in row] for row in maze . split('\\n')]\n\n    def get_node_neighbors(maze_arr, parent_node):\n    \"\"\" \n Computes a list of SearchNodes with all valid neighbors (except walls and cells out of board) \n :param maze_arr: a multidim list containing the maze \n :param parent_node: a node for with neighbors are calculated \n :return a list containing all possible neighbors \n \"\"\"\n    n = len(maze_arr)\n    neighbors = []\n    x_0, y_0 = parent_node\n    for dx, dy in [(- 1, 0), (1, 0), (0, - 1), (0, 1)]:\n    x_1 = x_0 + dx\n    y_1 = y_0 + dy\n    if 0 <= x_1 < n and 0 <= y_1 < n and maze_arr[y_1][x_1] == 1:\n    neighbors . append((x_1, y_1))\n    return neighbors\n",
  "59f7597716049833200001eb": "REV = {'6': '9', '9': '6'}\r\nBASE = set(\"01869\")\r\n\r\n\r\ndef isReversible(n):\r\n    s = str(n)\r\n    return (not (set(s) - BASE)  # contains only reversible characters\r\n            # does not contain 6 or 9 right in the middle (only for odd number of digits)\r\n            and (not len(s) % 2 or s[len(s) / / 2] not in \"69\")\r\n            and all(REV . get(c, c) == s[- 1 - i] for i, c in enumerate(s[: len(s) / / 2])))  # symmetric repartition\r\n\r\n    def solve(a, b):\r\n    return sum(isReversible(n) for n in range(a, b))\r\n",
  "57a492607cb1f315ec0000bb": "first = '(?:(?:\\+|00)([1-9][0-9])(?: ))?'\nsecond = '(?:((?(1)[1-9][0-9]|0[1-9][0-9]))(?: ))?'\nthird = '([1-9][0-9]{5})'\nregex_str = r'^{}{}{}$' . format(first, second, third)\n",
  "59f70440bee845599c000085": "PTS = {'A': 30, 'B': 20, 'C': 10, 'D': 5}\r\nMAX_PTS = 200\r\nHAS_BONUS = set('AB')\r\nBONUS_PTS = 20\r\n\r\n\r\ndef find_hack(arr):\r\n    return [name for name, pts, card in arr if pts != min(MAX_PTS, sum(PTS . get(n, 0) for n in card)\r\n                                                          + BONUS_PTS * (len(card) > 4 and set(card) <= HAS_BONUS))]\r\n",
  "59f6d96d27402f9329000081": "import re\n\n\ndef frogify(s):\n    return ' ' . join(' ' . join(re . findall(r'[a-z]+', sentence)[:: - 1]) + punct for sentence, punct in re . findall(r'(.*?)([.!?])', s))\n",
  "587387d169b6fddc16000002": "def splitlist(lst):\r\n    target = sum(lst) / / 2\r\n    l = len(lst)\r\n    best = 0\r\n    for n in range(2 * * l):\r\n    bits = bin(n)[2:]. zfill(l)\r\n    tot = sum((lst[i] for i in range(l) if bits[i] == '1'))\r\n    if best <= tot <= target:\r\n    indices = bits\r\n    best = tot\r\n    a, b = [], []\r\n    for i in range(l):\r\n    if indices[i] == '1':\r\n    a . append(lst[i])\r\n    else:\r\n    b . append(lst[i])\r\n    return a, b\r\n",
  "586e6b54c66d18ff6c0015cd": "def splitlist(l):\r\n    half = sum(l) / / 2\r\n    sums = [(0, [])]\r\n    for i, n in enumerate(l):\r\n    sums = sums + [(m + n, a + [i]) for m, a in sums if m + n <= half]\r\n    if max(s[0] for s in sums) == half:\r\n    break\r\n    sums . sort(key=lambda v: abs(v[0] - half))\r\n    indices = sums[0][1]\r\n    return [n for i, n in enumerate(l) if i in indices], [n for i, n in enumerate(l) if i not in indices]\r\n",
  "5926624c9b424d10390000bf": "def SumEvenFibonacci(limit):\n    a, b, s = 1, 1, 0\n    while a <= limit:\n    if not a % 2:\n        s += a\n    a, b = b, a + b\n    return s\n",
  "59f3178e3640cef6d90000d5": "from itertools import combinations_with_replacement\n\n\ndef find(arr, n):\n    return sum(sum(c) == n for x in range(1, len(arr) + 1) for c in combinations_with_replacement(arr, x))\n",
  "59f38b033640ce9fc700015b": "def is_prime(n):\r\n    return n >= 2 and all(n % i for i in range(2, 1 + int(n * * .5)))\r\n\r\n    def total(arr):\r\n    return sum(n for i, n in enumerate(arr) if is_prime(i))\r\n",
  "59f34ec5a01431ab7600005a": "from math import *\n\n\ndef count(n):\n    return ceil(lgamma(n + 1) / log(10))\n",
  "59f33b86a01431d5ae000032": "from math import log\n\n\ndef half_life(N0, N, t):\n    return t / log(N0 / N, 2)\n",
  "5376b901424ed4f8c20002b7": "def distance(a, b):\r\n    return ((b[0] - a[0]) * * 2 + (b[1] - a[1]) * * 2) * * 0.5\r\n    def iterative_closest(arr):\r\n    n = len(arr)\r\n    mini = ((arr[0], arr[1]), distance(arr[0], arr[1]))\r\n    for i in range(n - 1):\r\n    for j in range(i + 1, n):\r\n    dij = distance(arr[i], arr[j])\r\n    if dij < mini[1]:\r\n    mini = ((arr[i], arr[j]), dij)\r\n    return mini\r\n    def recursive_closest(arr):\r\n    n = len(arr)\r\n    if n <= 3:\r\n        # if the array is less than 3 items\r\n        # use the naive method\r\n    return iterative_closest(arr)\r\n\r\n    # divide the row into two parts\r\n    # and search the closest pair of points in each\r\n    mid = n / / 2\r\n    ml, mr = recursive_closest(arr[: mid]), recursive_closest(arr[mid:])\r\n\r\n    # the closest pair is the one having the minimum\r\n    # distance in both parts\r\n    mlr = ml if ml[1] < mr[1] else mr\r\n    # Now we have to combine the results from\r\n    # the two parts\r\n    # find the points that are close to the median point\r\n    arr1 = [pt for pt in arr if abs(pt[0] - arr[mid][0]) < mlr[1]]\r\n    arr1 . sort(key=lambda pt: pt[1])  # sort it by Y coordinates\r\n    # foreach of the points search within the next 7 points\r\n    # which have the lowest distance\r\n    n1 = len(arr1)\r\n    for i in range(n1 - 1):\r\n    for j in range(1, min(7, n1 - i)):\r\n    dij = distance(arr1[i], arr1[i + j])\r\n    if dij < mlr[1]:\r\n    mlr = ((arr1[i], arr1[i + j]), dij)\r\n    return mlr\r\n    def closest_pair(points):\r\n    arr = sorted(points)\r\n    return recursive_closest(arr)[0]\r\n",
  "59f22b3cf0a83ff3e3003d8c": "def distribute(n, w):\r\n    g, (d, r) = iter(range(w)), divmod(w, n)\r\n    return [[next(g) for _ in range(d + (i < r))] for i in range(n)]\r\n",
  "59f2746e50c8c2b55d000085": "numbers = (\"zeroZERO\" * 3, \"ONEone\" * 3, \"twoTWO\" * 3, \"THREEthree\" * 3, \"fourFOUR\" * 3,\r\n           \"FIVEfive\" * 3, \"sixSIX\" * 3, \"SEVENseven\" * 3, \"eightEIGHT\" * 3, \"NINEnine\" * 3)\r\n\r\n\r\ndef conv(num):\r\n    s = str(num)\r\n    check = (\"13579\", \"02468\")[len(s) & 1]\r\n    return '' . join(d if d in check else numbers[int(d)][: i + 1] for i, d in enumerate(s))\r\n",
  "5715508de1bf8174c1001832": "from itertools import starmap, combinations\nfrom operator import lt, gt\n\n\ndef longest_comb(arr, command):\n    check = lt if command . startswith('<') else gt\n    for i in range(len(arr), 2, - 1):\n        # if all(map(check, x, x[1:])) In Python 3\n    result = [list(x) for x in combinations(arr, i)\n              if all(starmap(check, zip(x, x[1:])))]\n    # Also always annoying to return only the first element when we only have one\n    if result:\n        return result[0] if len(result) == 1 else result\n    return []\n",
  "576b072359b1161a7b000a17": "def generate_diagonal(d, l):\r\n    result = [1] if l else []\r\n    for k in range(1, l):\r\n    result . append(result[- 1] * (d + k) / / k)\r\n    return result\r\n",
  "56bb9b7838dd34d7d8001b3c": "MOVES = {(0, 1), (0, - 1), (1, 0), (- 1, 0)}\r\n\r\n\r\ndef has_exit(maze):\r\n    posSet = {(x, y) for x in range(len(maze))\r\n              for y in range(len(maze[x])) if maze[x][y] == 'k'}\r\n    if len(posSet) != 1:\r\n    raise ValueError(\"There shouldn't be more than one kate\")\r\n\r\n    seen = set(posSet)\r\n    while posSet:\r\n    x, y = posSet . pop()\r\n    if any(not (0 <= x + dx < len(maze) and 0 <= y + dy < len(maze[x + dx])) for dx, dy in MOVES):\r\n    return True\r\n    neighbors = {(x + dx, y + dy) for dx, dy in MOVES if 0 <= x + dx < len(maze) and 0 <= y + dy < len(maze[x + dx])\r\n                 and maze[x + dx][y + dy] == ' '\r\n                 and (x + dx, y + dy) not in seen}\r\n    posSet |= neighbors\r\n    seen |= neighbors\r\n    return False\r\n",
  "5856f3ecf37aec45e6000091": "from collections import deque, Counter\r\n\r\n\r\ndef fill(grid, x, y):\r\n    h, w = len(grid), len(grid[x])\r\n    unexplored = deque([(x, y)])\r\n    size = 0\r\n    while unexplored:\r\n    x, y = unexplored . popleft()\r\n    if 0 <= x < h and 0 <= y < w and grid[x][y] == ' ':\r\n    grid[x][y] = '#'\r\n    unexplored . extend(((x + 1, y), (x, y + 1), (x - 1, y), (x, y - 1)))\r\n    size += x % 2 == 1 and y % 3 == 1\r\n    return size\r\n    def components(diagram):\r\n    grid = [list(line) for line in diagram . split('\\n')]\r\n    cells = ((x, y) for x in range(len(grid)) for y in range(len(grid[x])))\r\n    sizes = Counter(fill(grid, x, y) for x, y in cells if grid[x][y] == ' ')\r\n    return sorted(sizes . items(), reverse=True)\r\n",
  "57024825005264fe9200057d": "def sort_time(arr):\r\n    arr, s = sorted(arr, key=lambda t: t[0]), []\r\n    while arr:\r\n    nextTP = next((i for i, t in enumerate(\r\n        arr) if not s or t[0] >= s[- 1][1]), 0)\r\n    s . append(arr . pop(nextTP))\r\n    return s\r\n",
  "58f625e20290fb29c3000056": "def alt_or(lst):\r\n    return any(lst) if lst else None\r\n",
  "56f2dd31e40b7042ad001026": "def switch_endian(n, bits):\n    out = 0\n    while bits > 7:\n    bits -= 8\n    out <<= 8\n    out |= n & 255\n    n >>= 8\n    return None if n or bits else out\n",
  "59f0ee47a5e12962cb0000bf": "def palin(length, pos):\r\n    left = str(10 * * ((length - 1) / / 2) + (pos - 1))\r\n    right = left[:: - 1][length % 2:]\r\n    return int(left + right)\r\n",
  "59f11118a5e129e591000134": "def repeats(arr):\r\n    return sum([x for x in arr if arr . count(x) == 1])\r\n",
  "59f08f89a5e129c543000069": "from itertools import groupby\n\n\ndef dup(arry):\n    return [\"\" . join(c for c, grouper in groupby(i)) for i in arry]\n",
  "59f04228e63f8ceb92000038": "CUBICS = [1, 1331, 3375, 35937, 59319, 357911, 753571, 5177717, 5359375, 5735339, 9393931, 17373979, 37595375, 37159393753, 99317171591, 175333911173, 397551775977,\r\n          1913551573375, 9735913353977, 11997979755957, 17171515157399, 335571975137771, 1331399339931331, 1951953359359375, 7979737131773191, 11751737113715977, 13337513771953951]\r\nCUBICS = [- x for x in reversed(CUBICS)] + CUBICS\r\n\r\n\r\ndef odd_dig_cubic(a, b):\r\n    return [x for x in CUBICS if a <= x <= b]\r\n",
  "59f061773e532d0c87000d16": "def elevator_distance(array):\r\n    return sum(abs(a - b) for a, b in zip(array, array[1:]))\r\n",
  "58ee4db3e479611e6f000086": "def bit_march(n: int) - > list:\r\n    return [[0] * (8 - n - i) + [1] * n + [0] * i for i in range(8 - n + 1)]\r\n",
  "5470c635304c127cad000f0d": "\"\"\" GRAMMAR\r\n Root ::= Or\r\n Or ::= Str ( '|' Str )?\r\n Str ::= ZeroMul+\r\n ZeroMul ::= Term '*'?\r\n Term ::= Normal | Any | '(' Or ')'\r\n Normal ::= [^()|*.]\r\n Any ::= '.'\r\n \"\"\"\r\n  def parseRegExp(input): return Parser(input). parse()\r\n\r\n   class InvalidRegex (Exception):\r\n        pass\r\n\r\n    class Parser (object):\r\n\r\n    def __init__(self, input): self . tokens = list (input)\r\n\r\n    def parse(self):\r\n    try:\r\n        ret = self . parse_Or()\r\n    except InvalidRegex:\r\n        ret = ''\r\n    return ret if isinstance(ret, RegExp) and not self . tokens else ''\r\n    def pop(self): return self . tokens . pop(0)\r\n    def peek(self): return self . tokens and self . tokens[0]\r\n\r\n    def parse_Or(self):\r\n    or_ = self . parse_Str()\r\n    if self . peek() == '|':\r\n    self . pop()\r\n    or_ = Or(or_, self . parse_Str())\r\n    return or_\r\n    def parse_Str(self):\r\n    seq = []\r\n    while self . peek() and self . peek() not in \"*)|\":\r\n    ret = self . parse_ZeroMul()\r\n    seq . append(ret)\r\n\r\n    return ('' if not seq else\r\n            Str (seq) if len (seq) > 1 else\r\n            seq[0])\r\n\r\n    def parse_ZeroMul(self):\r\n    zm = self . parse_Term()\r\n    if zm is not None and self . peek() == '*':\r\n    self . pop()\r\n    zm = ZeroOrMore(zm)\r\n    return zm\r\n    def parse_Term(self):\r\n    if not self . peek():\r\n        raise InvalidRegex()\r\n    was = self . pop()\r\n    if was == '(':\r\n    if not self . peek() or self . peek() == ')':\r\n        raise InvalidRegex()\r\n    expr = self . parse_Or()\r\n    if not self . peek() or self . peek() != ')':\r\n        raise InvalidRegex()\r\n    self . pop()\r\n\r\n    elif was == '.':\r\n        expr = Any()\r\n    elif was not in \"()*|\":\r\n        expr = Normal(was)\r\n    else:\r\n        raise ValueError(\"Wrong code: you shouldn't reach this statment!\")\r\n\r\n    return expr\r\n",
  "59eb64cba954273cd4000099": "from itertools import combinations\n\n\ndef solve(a, n):\n    return any(sum(c) % n == 0 for i in range(len(a)) for c in combinations(a, i + 1))\n",
  "54f4e56e00ecc43c6d000220": "def ordering_beers(beers):\r\n    assert 0 <= beers < 100\r\n    units = [\"\", \"jeden\", \"dwa\", \"trzy\", \"cztery\", \"piec\", \"szesc\", \"siedem\", \"osiem\", \"dziewiec\",\r\n             \"dziesiec\", \"jedenascie\", \"dwanascie\", \"trzynascie\", \"czternascie\", \"pietnascie\", \"szesnascie\", \"siedemnascie\", \"osiemnascie\", \"dziewietnascie\"]\r\n    tens = [\"\", \"\", \"dwadziescia\", \"trzydziesci\", \"czterdziesci\", \"piecdziesiat\",\r\n            \"szescdziesiat\", \"siedemdziesiat\", \"osiemdziesiat\", \"dziewiecdziesiat\"]\r\n\r\n    if beers == 0:\r\n    order = \"Woda mineralna\"\r\n    elif beers == 1:\r\n    order = \"Jedno piwo\"\r\n    elif beers < 20:\r\n    order = units[beers] + \" piw\"\r\n    else:\r\n    order = tens[beers / / 10] + \" \" * bool(beers % 10) + units[beers % 10] + \" piw\"\r\n    if beers % 10 in [2, 3, 4] and beers not in [12, 13, 14]:\r\n    order += \"a\"\r\n    return order . capitalize() + \" poprosze\"\r\n",
  "5951d30ce99cf2467e000013": "def pythagorean_triple(integers):\r\n    a, b, c = sorted(integers)\r\n    return a * a + b * b == c * c\r\n",
  "59b6ae2e5227dd0fbc000005": "from math import log\n\n\ndef power_law(p1, p2, x3):\n    (x1, y1), (x2, y2) = p1, p2\n    x1 += 1e-9\n    y1 += 1e-9\n    return round(y1 * (y2 / y1) * * log(x3 / x1, x2 / x1))\n",
  "55143152820d22cdf00001bb": "def count_nines(n):\r\n    num = 0\r\n    l = len(str(n))\r\n    i = l\r\n    while i > 0:\r\n    k = 10 * * i\r\n    m = 10 * * (i - 1)\r\n    num += n / / k * (i * m)\r\n    n = n % k\r\n    if n >= k - m:\r\n    num += n % m + 1\r\n    i -= 1\r\n    return int(num)\r\n",
  "5826f54cc60c7e5266000baf": "from math import sqrt\r\n\r\n\r\ndef minimum_perimeter(area):\r\n    a, b = 0, area\r\n    while a <= sqrt(area):\r\n    a += 1\r\n    if a * b == area:\r\n    p = 2 * (a + b)\r\n    if not area % (a + 1):\r\n    b = area / (a + 1)\r\n    return p\r\n",
  "57cb12aa40e3020bb4001d2e": "from collections import Counter\r\n\r\n\r\ndef sorted_brands(history):\r\n    brands = [x['brand'] for x in history]\r\n    counter = Counter(brands)\r\n    return sorted(set(brands), key=lambda x: (- counter[x], brands . index(x)))\r\n",
  "5839cd780426f5d0ec00009a": "def blocks_to_collect(level):\r\n    answer = {\r\n        'total': sum([(i + 3 + i) * * 2 for i in range(level)]),\r\n        'gold': sum([(i + 3 + i) * * 2 for i in range(0, level, 4)]),\r\n        'diamond': sum([(i + 3 + i) * * 2 for i in range(1, level, 4)]),\r\n        'emerald': sum([(i + 3 + i) * * 2 for i in range(2, level, 4)]),\r\n        'iron': sum([(i + 3 + i) * * 2 for i in range(3, level, 4)]),\r\n    }\r\n\r\n    return answer\r\n",
  "578dec07deaed9b17d0001b8": "from gmpy2 import is_prime, next_prime\r\nfrom functools import lru_cache\r\nis_p = lru_cache(maxsize=None)(is_prime)\r\nnext_p = lru_cache(maxsize=None)(next_prime)\r\n\r\n\r\ndef gen(n):\r\n    prime, limit = 2, n >> 1\r\n    while prime <= limit:\r\n    yield prime, n - prime\r\n    prime = next_p(prime)\r\n\r\n    def goldbach_partitions(n):\r\n    return [] if n & 1 else [f\" { p } + { q } \" for p, q in gen(n) if is_p(q)]\r\n",
  "59ec2d112332430ce9000005": "import fractions\r\n\r\n\r\ndef solve(a, b):\r\n    c = fractions . gcd(a, b)\r\n    while c > 1:\r\n    b / /= c\r\n    c = fractions . gcd(a, b)\r\n    return b == 1\r\n",
  "566afbfc8595f2e751000040": "import math\r\n\r\n\r\ndef sum_mult_triangnum(n, m):\r\n    LCM = math . lcm(* [int(i * (i + 1) / 2) for i in range(1, n + 1)])\r\n    return sum(i * LCM for i in range(1, m + 1))\r\n",
  "59eb28fb0a2bffafbb0000d6": "def sortByBinaryOnes(a):\r\n    return sorted(a, key=lambda k: (- bin(k). count('1'), k))\r\n",
  "59e9f404fc3c49ab24000112": "def nerdify(txt):\r\n    return txt . translate(str . maketrans(\"aAeEl\", \"44331\"))\r\n",
  "59e1254d0863c7808d0000ef": "def transform(num, base):\r\n    digits = []\r\n\r\n    while num > 0:\r\n    num, remainder = divmod(num, base)\r\n    digits . append(remainder if remainder < 10 else \"x\")\r\n\r\n    return digits\r\n    def fouriest(i):\r\n    max_fours, base, best = 0, 5, [None, None]\r\n\r\n    while i >= base * * (max_fours):\r\n    digits = transform(i, base)\r\n\r\n    if digits . count(4) > max_fours:\r\n    max_fours = digits . count(4)\r\n    best = base, \"\" . join(map(str, digits[:: - 1]))\r\n\r\n    base += 1\r\n    base, transformed = best\r\n    return \"%s is the fouriest (%s) in base %s\" % (i, transformed, base)\r\n",
  "561bed6a31daa8df7400000e": "def queens(fixQ, S):\r\n\r\n    def areClashing(i, x):\r\n    j, y = qs[i], qs[x]\r\n    return j == y or abs(i - x) == abs(j - y)\r\n\r\n    def dfs(i=0):\r\n    if i == iQ:\r\n        return dfs(i + 1)\r\n    if i == len(qs):\r\n        return 1\r\n    for y in range(S):\r\n    qs[i] = y\r\n    if (not any(areClashing(i, ii) for ii in range(i))\r\n        and (iQ < i or not areClashing(i, iQ))\r\n            and dfs(i + 1)):\r\n        return 1\r\n    iQ, yQ = ord(fixQ[0]) - 97, (int(fixQ[1]) or 10) - 1\r\n    qs = [yQ if i == iQ else 0 for i in range(S)]\r\n    dfs()\r\n    return ',' . join(f\" { chr ( x + 97 ) }{ str ( y + 1 )[ - 1 ] } \" for x, y in enumerate(qs))\r\n",
  "56c89644b2f1981874000046": "import random\r\n\r\n\r\ndef rota(rooms):\r\n    if len(rooms) >= 7:\r\n    return random . sample(rooms, 7)\r\n    return [random . choice(rooms) for i in range(7)]\r\n",
  "59e61c577905df540000016b": "import re\r\n\r\n\r\ndef hungry_seven(arr):\r\n    ss, s = '', '' . join(map(str, arr))\r\n    while ss != s:\r\n    ss, s = s, re . sub(r'(7+)(89)', r'\\2\\1', s)\r\n    return list(map(int, s))\r\n",
  "59e255c07997cb248500008c": "from math import ceil\n\n\ndef order(pizzas, salads, appetizers):\n    tp = 3 * pizzas / 2 + 10 * math . ceil(pizzas / 10)\n    ts = 3 * salads + 5 * appetizers\n    return max(tp, ts)\n",
  "59e72bdcfc3c4974190000d9": "def cog_RPM(cogs, n):\r\n    return [\r\n        cogs[n] / cogs[0] * (- 1 if n % 2 else 1),\r\n        cogs[n] / cogs[- 1] * (1 if (len(cogs) - n) % 2 else - 1),\r\n    ]\r\n",
  "59e77930233243a7b7000026": "def amaro_plan(pirate_num):\r\n    return [1 + 39 * pirate_num / / 2, * (c % 2 for c in range(pirate_num - 1))]\r\n",
  "59d7c910f703c460a2000034": "def solomons_quest(arr):\r\n    pos, lvl = [0, 0], 0\r\n    for dilat, dir, dist in arr:\r\n    lvl += dilat\r\n    pos[dir in [0, 2]] += dist * 2 * * lvl * (- 1) * * (dir in [2, 3])\r\n    return pos\r\n",
  "57c671eaf8392d75b9000033": "from calendar import TextCalendar, month_name\r\n\r\n\r\nclass MyTextCalender (TextCalendar):\r\n    def formatmonthname(self, theyear, themonth, width, _=True):\r\n    return f\" { f' { theyear } { month_name [ themonth ]} ' : ^ { width }} \"\r\n    def formatweekheader(self, _):\r\n    return \"SUN MON TUE WED THU FRI SAT\"\r\n    def formatday(self, day, _, width):\r\n    return (f\" { day : < 2 } \" if day else ''). center(width)\r\n\r\n    def calendar(year, month):\r\n    return MyTextCalender(6). formatmonth(year, month, w=3). rstrip('\\n')\r\n",
  "57c786e858da9e5ed20000ea": "def reverse_number(n):\r\n    sub, var, s = '', 0, '-' * (n[0] == '-')\r\n    for c in n . strip('-'):\r\n    if len(sub) < 2:\r\n    sub += c\r\n    if len(sub) == 2:\r\n    var = (sub[1] > sub[0]) - (sub[1] < sub[0])\r\n    continue\r\n    new_var = (c > sub[- 1]) - (c < sub[- 1])\r\n    if var in (- 1, 1) and var == - new_var:\r\n    s += sub[:: - 1]\r\n    sub = ''\r\n    sub += c\r\n    if new_var in (- 1, 1):\r\n    var = new_var\r\n    return str(int(s + sub[:: - 1]))\r\n",
  "57d63b45ec1670518c000259": "DIRS = dict(zip('NSEW', ((- 1, 0), (1, 0), (0, 1), (0, - 1))))\r\n\r\n\r\ndef find_x(bd):\r\n    X, Y = len(bd), bd and len(bd[0])\r\n    x, y = X >> 1, Y >> 1\r\n    bd = list(map(list, bd))\r\n    while 0 <= x < X and 0 <= y < Y and (d := bd[x][y]) != 'Z':\r\n    if d == 'X':\r\n        return x, y\r\n    bd[x][y] = 'Z'\r\n    (dx, dy), n = DIRS[d[0]], int(d[1:])\r\n    x, y = x + n * dx, y + n * dy\r\n",
  "585e6eb2eec14124ea000120": "def check_generator(gen):\r\n    if gen . gi_frame is None:\r\n    return \"Finished\"\r\n    if gen . gi_frame . f_lasti == - 1:\r\n    return \"Created\"\r\n    return \"Started\"\r\n",
  "58a6a56942fd72afdd000161": "from enum import Enum\r\n\r\n\r\nclass Colors (Enum):\r\n    White = 0\r\n    Black = 1\r\n    class Entry:\r\n\r\n    @ staticmethod\r\n    def parse(amount, index):\r\n    return Entry(amount, Colors((index % 2) ^ 1))\r\n\r\n    def __init__(self, amount, color):\r\n    self . amount = amount\r\n    self . color = color\r\n    def take(self, amount):\r\n    amount = min(amount, self . amount)\r\n    self . amount -= amount\r\n    return amount\r\n    def is_empty(self):\r\n    return not self . amount\r\n    def __repr__(self):\r\n    return f\"( { self . amount } , { self . color } )\"\r\n    class Bag:\r\n\r\n    @ staticmethod\r\n    def parse(compressed):\r\n    return Bag([Entry . parse(e, i) for i, e in enumerate(compressed)][:: - 1])\r\n\r\n    def __init__(self, data):\r\n    self . data = data\r\n    def take(self, amount, color):\r\n    if self . is_empty():\r\n    return 0\r\n    current = self . peek()\r\n    if color != current . color:\r\n    return 0\r\n    amount = current . take(amount)\r\n    if current . is_empty():\r\n    self . data . pop()\r\n    return amount\r\n    def peek(self):\r\n    return 0 if self . is_empty() else self . data[- 1]\r\n\r\n    def is_empty(self):\r\n    return not len(self . data)\r\n\r\n    def __repr__(self):\r\n    return repr(self . peek())\r\n\r\n    def black_and_white(height, width, compressed):\r\n    bag, res = Bag . parse(compressed), []\r\n    while not bag . is_empty():\r\n    row, remaining = [], width\r\n    while remaining:\r\n    amount_black = bag . take(remaining, Colors . Black)\r\n    row . append(amount_black)\r\n    remaining -= amount_black\r\n    amount_white = bag . take(remaining, Colors . White)\r\n    row . append(amount_white)\r\n    remaining -= amount_white\r\n    res . append(row)\r\n    return res\r\n",
  "59e66e48fc3c499ec5000103": "def solve(arr):\r\n    x = 1\r\n    for a in arr:\r\n    x *= len(set(a))\r\n    return x\r\n",
  "59e6aec2b2c32c9d8b000184": "def build_or_buy(hand):\r\n    d = {'bw': 'road', 'bwsg': 'settlement',\r\n         'ooogg': 'city', 'osg': 'development'}\r\n\r\n    res = []\r\n    for r, build in d . items():\r\n    if all(hand . count(i) >= r . count(i) for i in set(r)):\r\n    res . append(build)\r\n    return res\r\n",
  "59e5fe367905df7f5c000072": "class Complex (complex):\r\n    @ property\r\n    def imaginary(self):\r\n    return super(). imag\r\n    def __add__(self, other):\r\n    return Complex(complex(self) + other)\r\n    def __mul__(self, other):\r\n    return Complex(complex(self) * other)\r\n",
  "59e19a747905df23cb000024": "from collections import Counter\r\n\r\n\r\ndef string_letter_count(s):\r\n    cnt = Counter(c for c in s . lower() if c . isalpha())\r\n    return '' . join(str(n) + c for c, n in sorted(cnt . items()))\r\n",
  "582aad136755daf91a000021": "from math import isqrt\r\n\r\n\r\ndef find_sequences(n: int) - > list[list[int]]:\r\n    seq = []\r\n    for k in range(2, isqrt(2 * n) + 1):\r\n    s = n - k * (k - 1) / / 2\r\n    if s % k == 0:\r\n    x = s / / k\r\n    seq . append(list(range(x, x + k)))\r\n    return seq\r\n",
  "56f167455b913928a8000c49": "from itertools import zip_longest as zip\r\n\r\n\r\ndef collatz(n):\r\n    seq = [n % 10]\r\n    while n > 1:\r\n    n = 3 * n + 1 if n % 2 else n / / 2\r\n    seq . append(n % 10 if n > 1 else \".\")\r\n    return map(str, seq)\r\n\r\n    def test_it(arr):\r\n    return \"\\n\" . join(\"|\" . join(a) for a in zip(* map(collatz, arr), fillvalue=\".\"))\r\n",
  "55ef57064cb8418a3f000061": "def divisors(n):\r\n    return sum(2 if i != n / / i else 1 for i in range(1, int(n * * 0.5) + 1) if n % i == 0)\r\n\r\n    def proc_arrInt(arr):\r\n    n_divs = {i: divisors(i) for i in arr}\r\n    max_div = max(n_divs . values())\r\n\r\n    return [len(arr), sum(divisors(i) == 2 for i in arr), [max_div, sorted([i for i, v in n_divs . items() if v == max_div])]]\r\n",
  "572f32ed3bd44719f8000a54": "def sum_pow_dig_seq(num, exp, k):\r\n    seq = []\r\n\r\n    for step in range(k):\r\n    seq . append(num)\r\n    num = sum(int(dig) * * exp for dig in str(num))\r\n\r\n    if num in seq:\r\n    cycle_start = seq . index(num)\r\n    cycle = seq[cycle_start:]\r\n    last_term = cycle[(k - cycle_start) % len(cycle)]\r\n    return [cycle_start, cycle, len(cycle), last_term]\r\n\r\n    return [0, [], 0, num]\r\n",
  "58f301633f5066830c000092": "def get_num(arr):\r\n    c, n, r = 1, 1, {}\r\n    arr . sort()\r\n    for a in arr:\r\n        n *= a\r\n        r[a] = r[a] + 1 if a in r else 1\r\n    for a in r:\r\n        c *= r[a] + 1\r\n    return [n, c - 1, arr[0], n / / arr[0]]\r\n",
  "58a3f0662f949eba5c00004f": "D = {r: c + str(i) for l, c in zip(['vw', 'ux', 'ty', 'szabcde', 'rkjihgf',\r\n                                    'ql', 'pm', 'on'], 'abcdefgh') for i, r in enumerate(l, 1)}\r\n\r\n\r\ndef chess_encryption(s):\r\n    return '' . join(D . get(c, c) for c in s)\r\n",
  "55905b7597175ffc1a00005a": "def page_digits(pages):\n    total = 0\n    start = 0\n    tens = 10\n    while pages > start:\n    total += pages - start\n    start = tens - 1\n    tens *= 10\n    return total\n",
  "55c4a2a2586d8706be0000d0": "class PriceDisplayFraction (object):\r\n    def __init__(self, denominator=16):\r\n    self . d = denominator\r\n    def to_display(self, cents):\r\n    return \"{}/{}\" . format(int(cents) / 100, int((cents % 1) * self . d))\r\n\r\n    def to_internal(self, display):\r\n    cents, num = map(int, display . replace('.', ''). split('/'))\r\n    return cents + num / self . d\r\n",
  "569ff2622f71816610000048": "from collections import OrderedDict\r\n\r\n\r\nclass Array (object):\r\n    def __init__(self, arr=[]):\r\n    self . arr = arr\r\n    self . num_elements = lambda: len(self . arr)\r\n    self . num_values = lambda: len(set(self . arr))\r\n    self . start_end = lambda: [self . arr[0], self . arr[- 1]]\r\n    self . range_ = lambda: [min(self . arr), max(self . arr)]\r\n    inc, dec, maxinc, maxdec = [], [], [], []\r\n    for item in self . arr:\r\n    if len(inc) == 0 or inc[- 1] < item:\r\n        inc += [item]\r\n    else:\r\n        inc = [item]\r\n    if len(inc) > len(maxinc):\r\n        maxinc = inc\r\n    if len(dec) == 0 or dec[- 1] > item:\r\n        dec += [item]\r\n    else:\r\n        dec = [item]\r\n    if len(dec) > len(maxdec):\r\n        maxdec = dec\r\n    self . largest_increas_subseq = lambda: maxinc if len(\r\n        maxinc) > 2 else \"No increasing subsequence\"\r\n    self . largest_decreas_subseq = lambda: maxdec if len(\r\n        maxdec) > 2 else \"No decreasing subsequence\"\r\n    # one-liner ineffficient versions just for the lolZ\r\n    # self.largest_increas_subseq=lambda: (lambda a: a[0] if a and len(a[0])>2 else \"No increasing subsequence\")(sorted(filter(lambda a: len(a)>=3 and all(x<a[y+1] for y,x in enumerate(a[:-1])), [self.arr[x:y+1] for x in xrange(len(self.arr)-2) for y in xrange(2,len(self.arr))]), key=len, reverse=True))\r\n    # self.largest_decreas_subseq=lambda: (lambda a: a[0] if a and len(a[0])>2 else \"No decreasing subsequence\")(sorted(filter(lambda a: len(a)>=3 and all(x>a[y+1] for y,x in enumerate(a[:-1])), [self.arr[x:y+1] for x in xrange(len(self.arr)-2) for y in xrange(2,len(self.arr))]), key=len, reverse=True))\r\n    self . __str__ = lambda: str(OrderedDict([('1.number of elements', self . num_elements()), ('2.number of different values', self . num_values()), ('3.first and last terms', self . start_end(\r\n    )), ('4.range of values', self . range_()), ('5.increas subseq', self . largest_increas_subseq()), ('6.decreas subseq', self . largest_decreas_subseq())]))\r\n",
  "57d6c3fb950d84fcfb0015c8": "from itertools import groupby\n\n\ndef encode(s):\n    return '' . join(k + str(sum(1 for _ in g)) for k, g in groupby(s))\n",
  "59e49b2afc3c494d5d00002a": "def sort_vowels(s):\r\n    try:\r\n    return '\\n' . join('|' + i if i . lower() in 'aioue' else i + '|' for i in s)\r\n    except:\r\n    return ''\r\n",
  "55df9798b87f0f87d100019a": "from gmpy2 import next_prime as np, is_prime as ip\r\n\r\n\r\ndef give_max_h(n, k):\r\n    a, h, d, p, v = 2, 2, [[0, 0]], [], 0\r\n    while a < n:\r\n    p, a = p + [a], np(a)\r\n    while h <= k:\r\n    v = sum(ip(i + 2) and ip(i + h) and ip(i + (2 * h)) for i in p)\r\n    d, h, v = d + [[h, v]] if v == d[0][1] else [[h, v]\r\n                                                 ] if v > d[0][1] else d, h + 2, 0\r\n    return d\r\n",
  "549ee8b47111a81214000941": "from collections import deque\r\nmoves = ((1, 2), (1, - 2), (- 1, 2), (- 1, - 2),\r\n         (2, 1), (2, - 1), (- 2, 1), (- 2, - 1))\r\n\r\n\r\ndef knight(p1, p2):\r\n    x, y = ord(p2[0]) - 97, int(p2[1]) - 1\r\n    left, seen = deque([(ord(p1[0]) - 97, int(p1[1]) - 1, 0)]), set()\r\n    while left:\r\n    i, j, v = left . popleft()\r\n    if i == x and j == y:\r\n        return v\r\n    if (i, j) in seen:\r\n        continue\r\n    seen . add((i, j))\r\n    for a, b in moves:\r\n    if 0 <= i + a < 8 and 0 <= j + b < 8:\r\n    left . append((i + a, j + b, v + 1))\r\n",
  "5550f37131caf073b8000025": "def point_vs_vector_v2(p, v):\r\n    EPS = 10 * * - 9\r\n    (x, y), ((x1, y1), (x2, y2)) = p, v\r\n    res = (x - x1) * (y2 - y1) - (y - y1) * (x2 - x1)\r\n    return (- 1) * * (res < 0) * (abs(res) > EPS) if abs(x1 - x2) + abs(y1 - y2) > EPS else None\r\n",
  "571a551a196bb0567f000603": "class Tree (object):\r\n    def __init__(self, root, left=None, right=None):\r\n    assert root and isinstance(root, Node)\r\n    assert left is None or isinstance(\r\n        left, Tree) and left . _max(). root < root\r\n    assert right is None or isinstance(\r\n        right, Tree) and root < right . _min(). root\r\n    self . left = left\r\n    self . root = root\r\n    self . right = right\r\n    def is_leaf(self):\r\n    return not self . left and not self . right\r\n    def _max(self):\r\n    tree = self\r\n    while tree . right:\r\n    tree = tree . right\r\n    return tree\r\n    def _min(self):\r\n    tree = self\r\n    while tree . left:\r\n    tree = tree . left\r\n    return tree\r\n    def __str__(self):\r\n    if self . is_leaf():\r\n    return \"[%s]\" % self . root\r\n    return \"[%s %s %s]\" % (\r\n        self . left if self . left else \"_\",\r\n        self . root,\r\n        self . right if self . right else \"_\")\r\n\r\n    def __eq__(self, other):\r\n    if not other:\r\n    return False\r\n    return (\r\n        self . root == other . root and\r\n        self . left == other . left and\r\n        self . right == other . right)\r\n\r\n    def __ne__(self, other):\r\n    return not (self == other)\r\n\r\n    class Node (object):\r\n    def __init__(self, value):\r\n    self . value = value\r\n    def __str__(self):\r\n    return str(self . value)\r\n\r\n    def __lt__(self, other):\r\n    return self . value < other . value\r\n    def __eq__(self, other):\r\n    return self . value == other . value\r\n",
  "553291f451ab4fbcdc0001c6": "def gen(n, d):\r\n    if d == 0 or n == 1:\r\n    yield [d] * n\r\n    else:\r\n    for x in range(d + 1):\r\n    for y in gen(n - 1, d - x):\r\n    yield [x] + y\r\n    def indices(n, d):\r\n    return list(gen(n, d))\r\n",
  "569e8353166da6908500003d": "from itertools import permutations\r\n\r\n\r\ndef rearranger(k, * args):\r\n    perms = permutations(map(str, args), len(args))\r\n    divisible_by_k = filter(lambda x: int('' . join(x)) % k == 0, perms)\r\n    try:\r\n    rearranged = min(divisible_by_k, key=lambda x: int('' . join(x)))\r\n    return 'Rearrangement: {} generates: {} divisible by {}' . format(', ' . join(rearranged), '' . join(rearranged), k)\r\n    except ValueError:\r\n    return \"There is no possible rearrangement\"\r\n",
  "57b2a9631fae8a30fa000013": "from collections import Counter\nfrom itertools import pairwise\n\n\ndef cut_rope(length, m, n):\n    cuts = sorted([0, * range(m, length, m), * range(n, length, n), length])\n    return {f' { k } cm': v for k, v in Counter(b - a for a, b in pairwise(cuts)). items() if k}\n",
  "583a47342fb0ba1418000060": "def convert(n):\r\n    ds = list(map(int, reversed(str(n))))\r\n    return [sum(ds[:: 4]) - sum(ds[2:: 4]), sum(ds[1:: 4]) - sum(ds[3:: 4])]\r\n",
  "573248f48e531896770001f9": "import numpy as np\r\n\r\n\r\ndef get_matrix_product(a, b):\r\n    try:\r\n    return np . array(a). dot(np . array(b)). tolist()\r\n    except:\r\n    return None\r\n",
  "589d5c80c31aa590e300006b": "def subsets_parity(n, k):\r\n    return 'EVEN' if ~ n & k else 'ODD'\r\n",
  "554e5ef27daf4082f6000071": "class Point:\r\n    __slots__ = ['x', 'y']\r\n\r\n    def __init__(self, x, y):\r\n    self . x = x\r\n    self . y = y\r\n    def colinear(self, p, q):\r\n    t1 = (self . x - p . x) * (self . y - q . y)\r\n    t2 = (self . x - q . x) * (self . y - p . y)\r\n    return abs(t1 - t2) <= 1e-9\r\n    def within(self, p, q):\r\n    if p . x <= self . x <= q . x or p . x >= self . x >= q . x:\r\n    return p . y <= self . y <= q . y or p . y >= self . y >= q . y\r\n    return False\r\n    def point_in_vector(point, vector):\r\n    a = Point(* point)\r\n    b = Point(* vector[0])\r\n    c = Point(* vector[1])\r\n    return a . colinear(b, c) and a . within(b, c)\r\n",
  "580ec64394291d946b0002a1": "def mysterious_pattern(m, n):\r\n    rows = [[' '] * m for _ in range(n)]\r\n    a, b = 1, 1\r\n    for i in range(m):\r\n    rows[a % n][i] = 'o'\r\n    a, b = b, a + b\r\n    rows = ['' . join(r). rstrip() for r in rows]\r\n    return '\\n' . join(rows). strip('\\n')\r\n",
  "59e270da7997cba3d3000041": "from itertools import groupby\r\n\r\n\r\ndef zero_plentiful(arr):\r\n    r = [len(list(g)) > 3 for k, g in groupby(arr) if k == 0]\r\n    return all(r) * len(r)\r\n",
  "585894545a8a07255e0002f1": "EQUIV_PTS = {same: src for src, seq in (\r\n    ('A', 'CGI'), ('B', 'DFH')) for same in seq}\r\n\r\nALL = set('ABCDEFGHI')\r\nLINKED_TO = {'A': ('BC', 'DG', 'EI', 'F', 'H'),\r\n             'B': ('A', 'C', 'D', 'EH', 'F', 'G', 'I'),\r\n             'C': ('BA', 'D', 'EG', 'FI', 'H'),\r\n             'D': ('A', 'B', 'C', 'EF', 'G', 'H', 'I'),\r\n             'E': tuple('ABCDFGHI'),\r\n             'F': ('A', 'B', 'C', 'ED', 'G', 'H', 'I'),\r\n             'G': ('DA', 'B', 'EC', 'F', 'HI'),\r\n             'H': ('A', 'EB', 'C', 'D', 'F', 'G', 'I'),\r\n             'I': ('EA', 'B', 'FC', 'D', 'HG')\r\n             }\r\n\r\n\r\ndef DFS(c, depth, root, seens, patterns):\r\n    if depth > len(ALL):\r\n        return\r\n    patterns[root][depth] += 1\r\n    seens . add(c)\r\n    toExplore = '' . join(next((n for n in seq if n not in seens), '')\r\n                          for seq in LINKED_TO[c])\r\n    for nextC in toExplore:\r\n    DFS(nextC, depth + 1, root, seens, patterns)\r\n    seens . discard(c)\r\n\r\n    PATTERNS = {}\r\n    for c in \"ABE\":\r\n    PATTERNS[c] = [0] * 10\r\n    DFS(c, 1, c, set(), PATTERNS)\r\n\r\n    def count_patterns_from(start, length):\r\n    if not (0 < length < 10) or start not in ALL:\r\n        return 0\r\n    actualStart = EQUIV_PTS . get(start, start)\r\n    return PATTERNS[actualStart][length]\r\n",
  "59e1b9ce7997cbecb9000014": "def cog_RPM(l):\r\n    return (- 1 + len(l) % 2 * 2) * l[0] / l[- 1]\r\n",
  "59e0dbb72a7acc3610000017": "from fractions import gcd\n\n\ndef coprimes(n):\n    return [i for i in range(1, n + 1) if gcd(n, i) == 1]\n",
  "59decdf40863c76ae3000080": "import re\r\nls = [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\",\r\n      \"Seven\", \"Eight\", \"Nine\", \"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\"]\r\n\r\n\r\ndef max_consec_zeros(n):\r\n    return ls[max(map(lambda x: len(x), re . findall(r'0*', bin(int(n))[2:])))]\r\n",
  "59e0069781618a7950000995": "from collections import Counter\r\n\r\n\r\ndef play_if_enough(hand, play):\r\n    h = Counter(hand)\r\n    p = Counter(play)\r\n    if p & h == p:\r\n    h . subtract(p)\r\n    return (True, \"\" . join(h . elements()))\r\n    return (False, hand)\r\n",
  "546b22225874d24fbd00005b": "def linked_sort(a, b, key=str):\r\n    a[:], b[:] = zip(* sorted(zip(a, b), key=key))\r\n    return a\r\n",
  "56085481f82c1672d000001f": "from math import pow, floor\r\n\r\n\r\ndef max_val_f(range1, range2, hMax, k):\r\n    m, n = range1[0], range1[1]\r\n    p, q = range2[0], range2[1]\r\n    res = []\r\n    for x in range(m, n + 1):\r\n    for y in range(p, q + 1):\r\n    if x != y:\r\n    ab = float(abs(x - y))\r\n    val = pow(floor((x + y) / ab), ab)\r\n    if val <= hMax:\r\n    res . append(val)\r\n    res = list(set(res))\r\n    res . sort()\r\n    return res[- k:]\r\n",
  "59de469cfc3c492da80000c5": "def compress(sentence):\r\n    ref = []\r\n    for i in sentence . lower(). split():\r\n    if i not in ref:\r\n    ref . append(i)\r\n    return '' . join([str(ref . index(n)) for n in sentence . lower(). split()])\r\n",
  "59de795c289ef9197f000c48": "def remove_bmw(string):\r\n    try:\r\n    return string . translate(str . maketrans('', '', \"BMWbmw\"))\r\n    except AttributeError:\r\n    raise TypeError(\"This program only works for text.\")\r\n",
  "570b69d96731d4cf9c001597": "def magicSquare(n):\r\n    if n % 2:\r\n    square = [[0] * n for _ in range(n)]\r\n    for i in range(n * * 2):\r\n    x, y = (2 * (i / / n) - i) % n, (n / / 2 + i - i / / n) % n\r\n    square[x][y] = i + 1\r\n    return square\r\n    else:\r\n    return \"Please enter an odd integer.\"\r\n",
  "570f6436b29c708a32000826": "def first_non_repeated(s):\r\n    for c in s:\r\n    if s . count(c) == 1:\r\n        return c\r\n",
  "59dce15af703c42af6000035": "from itertools import islice, groupby\n\n\ndef eq_all(iterable):\n    return not next(islice(groupby(iterable), 1, None), False)\n",
  "59dbab4d7997cb350000007f": "def isomorph(a, b):\r\n    return [a . index(x) for x in a] == [b . index(y) for y in b]\r\n",
  "5664740e6072d2eebe00001b": "def knights_tour(start, size):\r\n\r\n    MOVES = [(- 2, 1), (- 2, - 1), (- 1, - 2), (1, - 2),\r\n             (2, - 1), (2, 1), (1, 2), (- 1, 2)]\r\n\r\n    def genNeighs(pos): return ((pos[0] + dx, pos[1] + dy)\r\n                                for dx, dy in MOVES if (pos[0] + dx, pos[1] + dy) in Warnsdorf_DP)\r\n\r\n    def travel(pos):\r\n    neighs = sorted((Warnsdorf_DP[n], n) for n in genNeighs(pos))\r\n    for nSubNeighs, neigh in neighs:\r\n    del Warnsdorf_DP[neigh]\r\n    path . append(neigh)\r\n    subNeighs = list(genNeighs(neigh))\r\n    for n in subNeighs:\r\n        Warnsdorf_DP[n] -= 1\r\n    travel(neigh)\r\n    if not Warnsdorf_DP:\r\n    break\r\n    else:\r\n    for n in subNeighs:\r\n        Warnsdorf_DP[n] += 1\r\n    Warnsdorf_DP[path . pop()] = nSubNeighs\r\n    path, Warnsdorf_DP = [start], {(x, y): 0 for x in range(\r\n        size) for y in range(size) if (x, y) != start}\r\n    for pos in Warnsdorf_DP:\r\n        Warnsdorf_DP[pos] = sum(1 for _ in genNeighs(pos))\r\n    travel(start)\r\n\r\n    return path\r\n",
  "59daf400beec9780a9000045": "def name_in_str(str, name):\r\n    it = iter(str . lower())\r\n    return all(c in it for c in name . lower())\r\n",
  "568f2d5762282da21d000011": "from itertools import permutations\r\n\r\n\r\ndef make_array_from_args(* args: int) - > list[int]:\r\n    its = [iter(f' { arg } ') for arg in args]\r\n    result_array = []\r\n    for it in its:\r\n    try:\r\n    value = int(next(it))\r\n    except StopIteration:\r\n    continue\r\n    else:\r\n    its . append(it)\r\n    if value not in result_array:\r\n    result_array . append(value)\r\n    return result_array\r\n    def gta(limit: int, * args: int) - > int:\r\n    arr = make_array_from_args(* args)[: limit]\r\n    return sum(\r\n        sum(p) for i in range(1, limit + 1) for p in permutations(arr, r=i)\r\n    )\r\n",
  "55e47815d7055e1a97000128": "from itertools import combinations\r\n\r\n\r\ndef closest_points3D(points):\r\n    pairs = list(set([tuple(sorted(p)) for p in combinations(points, 2)]))\r\n    dists = [round(sum((i - j) * * 2 for i, j in zip(a, b)) * * 0.5, 5) for a, b in pairs]\r\n    mdist = min(dists)\r\n    return [len(points), sorted([[pairs[i][0], pairs[i][1]] for i, d in enumerate(dists) if d == mdist]), mdist]\r\n",
  "55e4419eb589793709000044": "from collections import defaultdict\r\nfrom itertools import combinations as combo\r\n\r\n\r\ndef closest_points(l):\r\n    d = defaultdict(list)\r\n    for (x1, y1), (x2, y2) in combo(sorted(l), 2):\r\n    d[(x2 - x1) * * 2 + (y2 - y1) * * 2]. append([(x1, y1), (x2, y2)])\r\n    return [len(l), sorted(d[min(d)]), round(min(d) * * .5, 4)]\r\n",
  "58ab2ed1acbab2eacc00010e": "from urllib . request import urlopen\r\nfrom bs4 import BeautifulSoup as bs\r\n\r\n\r\ndef get_member_since(username):\r\n    html = urlopen(f'https://www.codewars.com/users/ { username } ')\r\n    soup = bs(html . read(), \"html.parser\")\r\n    tags = soup . find_all(\"div\", {\"class\": \"stat\"})\r\n    member_tag = [x . text for x in tags if 'Member Since' in x . text][0]\r\n    return member_tag . split(':')[1]\r\n",
  "58296c407da141e2c7000271": "from preloaded import Item\r\n# 0/1 Knapsack Problem\r\n\r\n\r\ndef greedy_thief(items: list[Item], n: int) - > list[Item]:\r\n    dp = [(0, []) for _ in range(n + 1)]\r\n    for item in items:\r\n    for w in range(n, 0, - 1):\r\n    if item . weight <= w:\r\n    x, y = dp[w - item . weight]\r\n    if x + item . price > dp[w][0]:\r\n    dp[w] = (x + item . price, y + [item])\r\n    return dp[n][1]\r\n",
  "59dad2177997cb2a1300008d": "from itertools import count\n\n\ndef fewest_numbers(target):\n    top, n = 1, 1\n    for d in count(1):\n    if n >= target:\n        return d\n    top = 2 * n + 1\n    n += top\n",
  "59da47fa27ee00a8b90000b4": "def solve(s):\r\n    return sum(i + 1 for i, d in enumerate(list(s)) if d in '13579')\r\n",
  "59d9ff9f7905dfeed50000b0": "def solve(arr):\r\n    return [sum(c == chr(97 + i) for i, c in enumerate(w[: 26]. lower())) for w in arr]\r\n",
  "59d902f627ee004281000160": "from functools import cmp_to_key\n\n\ndef cmp(a, b): return int('%i%i' % (b, a)) - int('%i%i' % (a, b))\n\n\ndef largest_arrangement(n): return int('' . join(str(i)\n                                                 for i in sorted(n, key=cmp_to_key(cmp))))\n",
  "58b28e5830473070e5000007": "import re\r\n\r\n\r\ndef frame(score):\r\n    frames = [0, 0]\r\n    for s1, _, s2 in re . findall(r'(\\d+)(\\([\\d,]+\\))?-(\\d+)', score):\r\n    frames[int(s1) < int(s2)] += 1\r\n    return frames\r\n",
  "55e61967663140aafb0001d6": "from gmpy2 import is_prime\r\n\r\n\r\ndef k_thlastDigPrime(k):\r\n    result = [0, 1, 1, 2, 4, 6, 8, 11, 15, 20, 26, 34, 44, 57, 73, 94, 120, 154, 196, 251, 319, 408, 518, 662, 840, 1073, 1361, 1738, 2204, 2814, 3568, 4555, 5775, 7372, 9346, 11930, 15124, 19305, 24473, 31238, 39600, 50546, 64076, 81787, 103679, 132336, 167758, 214126, 271440, 346465, 439201, 560594, 710644, 907062, 1149848, 1467659, 1860495, 2374724,\r\n              3010346, 3842386, 4870844, 6217113, 7881193, 10059502, 12752040, 16276618, 20633236, 26336123, 33385279, 42612744, 54018518, 68948870, 87403800, 111561617, 141422321, 180510490, 228826124, 292072110, 370248448, 472582603, 599074575, 764654716, 969323026, 1237237322, 1568397604, 2001892041, 2537720633, 3239129366, 4106118240, 5241021410, 6643838876]\r\n    while k > 0:\r\n    while not is_prime(int(str(result[-1])[-9:])):\r\n    result += [int(result[-1]+result[-2]-result[-3]+result[-4]-result[-5])]\r\n    k -= 1\r\n    if k > 0:\r\n    result += [int(result[-1]+result[-2]-result[-3]+result[-4]-result[-5])]\r\n    return [len(result), int(str(result[-1])[-9:])]\r\n",
  "589d581680458f695200008e": "import math\nfrom collections import Counter\n\n\ndef sum_or_product(arr):\n    if len(arr) == 1:\n        return arr[0]\n    cs = Counter(arr)\n    while cs[1]:\n    cs[1] -= 1\n    m = int(cs[2] > 1) + \\\n        1 if cs[1] > 0 else min(k for k in cs . keys() if k > 1)\n    cs[m] -= 1\n    cs[m + 1] += 1\n    return math . prod(x * * p for x, p in cs . items() if p > 0)\n",
  "57c3a4431170a30b4e00017f": "from itertools import accumulate\r\nfrom operator import add\r\n\r\n\r\ndef duel(people, guns):\r\n    p = [first_name[0] + last_name[0]\r\n         for first_name, last_name in map(str . split, people)]\r\n    initials = {initial: full_name for initial, full_name in zip(p, people)}\r\n    matrix = [(man, [(i + (guns . index(man) - k) % 8) % 8 for i in accumulate(range(16), add)])\r\n              for k, man in enumerate(p)]\r\n    turn = 0\r\n    while (len_r := len(matrix)) > 1:\r\n    for i, v in enumerate(list(zip(* [t[1] for t in matrix]))[turn]):\r\n    if not v:\r\n    matrix[(i - 1) % len_r] = 0\r\n    matrix[(i + 1) % len_r] = 0\r\n    matrix = list(filter(bool, matrix))\r\n    turn += 1\r\n    return initials . get(matrix[0][0]) if matrix else ''\r\n",
  "55e0467217adf9c3690000f9": "import re\r\n\r\n\r\ndef my_very_own_split(string, delimiter=None):\r\n    if delimiter == '':\r\n        raise ValueError('empty delimiter')\r\n    if delimiter == None:\r\n        delimiter = '\\s+'\r\n    else:\r\n        delimiter = re . escape(delimiter)\r\n    pos = 0\r\n    for m in re . finditer(delimiter, string):\r\n    yield string[pos: m . start()]\r\n    pos = m . end()\r\n    yield string[pos:]\r\n",
  "59d53c3039c23b404200007e": "def is_happy(n):\r\n    seen = set()\r\n    while n not in seen:\r\n    seen . add(n)\r\n    n = sum(int(d) * * 2 for d in str(n))\r\n    return n == 1\r\n    def happy_numbers(n):\r\n    return [x for x in range(1, n + 1) if is_happy(x)]\r\n",
  "57bff92049324c0fd00012fd": "def shortest_time(speed):\r\n    a, b, c, d = sorted(speed)\r\n    return a + b + d + min(2 * b, a + c)\r\n",
  "57b1f617b69bfc08cf00042a": "def sum_of_digits(a, b):\n    def f(n):\n    d, m, s = 0, 1, 0\n    while n:\n    n, r = divmod(n, 10)\n    s += r * 9 * d * 10 * * d / / 2 + r * (r - 1) / / 2 * 10 * * d + r * m\n    m += r * 10 * * d\n    d += 1\n    return s\n    return f(b) - f(max(a - 1, 0))\n",
  "59cd39a7a25c8c117d00020c": "def cartesian_neighbors_distance(x, y, r):\r\n    return {(m * m + n * n) * * 0.5 for m in range(1, r + 1) for n in range(m + 1)}\r\n",
  "58e61f3d8ff24f774400002c": "from operator import add, sub, mul, floordiv as div, lt, le, eq, ne, ge, gt\r\nimport re\r\nTOKENIZER = re . compile(r\"('.*?'|-?\\w+)[:,]?\\s*\")\r\nSKIP_COMMENTS = re . compile(\"\\s*;\")\r\nSPLIT_PROG = re . compile(r'\\n\\s*')\r\n\r\nCMP_FUNCS = {'jmp': lambda x, y: True, 'jne': ne,\r\n             'je': eq, 'jge': ge, 'jg': gt, 'jle': le, 'jl': lt}\r\nMATH_FUNCS = {'add', 'sub', 'mul', 'div', 'inc', 'dec'}\r\nMATH_DCT = {'inc': 'add', 'dec': 'sub'}\r\n\r\nJUMPS_CMD = set(CMP_FUNCS . keys()) | {'call'}\r\nALL_CMDS = {'ret', 'end', 'mov', 'cmp', 'msg'} | JUMPS_CMD\r\n\r\n\r\ndef assembler_interpreter(program):\r\n\r\n    def tokenize(s): return TOKENIZER . findall(SKIP_COMMENTS . split(s)[0])\r\n    def updateCmp(x, y): return {k: op(reg . get(\r\n        x, 0), reg[y] if y . isalpha() else int(y)) for k, op in CMP_FUNCS . items()}\r\n\r\n    def moveTo(cmdJump, lbl): return jumps_lbl[lbl] if cmpDct[cmdJump] else p\r\n\r\n    def updateReg(op, x, y='1', val=None): reg[x] = op(\r\n        reg[x] if val is None else val, reg[y] if y . isalpha() else int(y))\r\n\r\n    p, reg, output, callStackP = 0, {}, '', []\r\n    inst = [cmd for cmd in map(tokenize, SPLIT_PROG . split(program)) if cmd]\r\n    jumps_lbl = {cmd[0]: i for i, cmd in enumerate(\r\n        inst) if cmd[0] not in ALL_CMDS}\r\n    cmpDct = updateCmp('0', '0')\r\n\r\n    while 0 <= p < len(inst):\r\n    cmd, xyl = inst[p][0], inst[p][1:]\r\n\r\n    if cmd == 'mov':\r\n        updateReg(add, xyl[0], xyl[1], 0)\r\n    elif cmd == 'cmp':\r\n        cmpDct = updateCmp(xyl[0], xyl[1])\r\n    elif cmd in MATH_FUNCS:\r\n        updateReg(eval(MATH_DCT . get(cmd, cmd)), * xyl)\r\n    elif cmd in CMP_FUNCS:\r\n        p = moveTo(cmd, xyl[0])\r\n    elif cmd == 'call':\r\n        callStackP . append(p)\r\n        p = moveTo('jmp', xyl[0])\r\n    elif cmd == 'ret':\r\n        p = callStackP . pop()\r\n    elif cmd == 'end':\r\n        return output\r\n    elif cmd == 'msg':\r\n        output += '' . join(s[1: - 1] if s not in reg else str(reg[s])\r\n                            for s in inst[p][1:])\r\n        print(output)\r\n    p += 1\r\n    return - 1\r\n",
  "595120ac5afb2e5c1d000001": "import re\r\nfrom collections import defaultdict\r\nPATTERN = re . compile(r'([^.\\n]+(\\.com?)?\\.\\w*)\\s+(\\d+)')\r\n\r\n\r\ndef count_domains(domains, min_hits=0):\r\n    d_dct = defaultdict(int)\r\n    for k, _, v in PATTERN . findall(domains):\r\n    d_dct[k] += int(v)\r\n    sortedAndFilteredItems = sorted([it for it in d_dct . items(\r\n    ) if it[1] >= min_hits], key=lambda tup: (- tup[1], tup[0]))\r\n    return '\\n' . join(\"{} ({})\" . format(k, v) for k, v in sortedAndFilteredItems)\r\n",
  "59d398bb86a6fdf100000031": "def string_breakers(n, st):\r\n    s = st . replace(' ', '')\r\n    return '\\n' . join(s[i: i + n] for i in range(0, len(s), n))\r\n",
  "55e84ce709a1e37e420000df": "def hash_radSeq(n, k):\r\n    rads = [0] + [1] * n\r\n    for i in range(2, n + 1):\r\n    if rads[i] == 1:\r\n    for j in range(i, n + 1, i):\r\n    rads[j] *= i\r\n    return sorted((r, i) for i, r in enumerate(rads))[k][1]\r\n",
  "58924f2ca8c628f21a0001a1": "import re\r\n\r\n\r\ndef brainfuck_to_c(source):\r\n    # remove comments\r\n    source = re . sub('[^+-<>,.\\[\\]]', '', source)\r\n\r\n    # remove redundant code\r\n    before = ''\r\n    while source != before:\r\n    before = source\r\n    source = re . sub('\\+-|-\\+|<>|><|\\[\\]', '', source)\r\n\r\n    # check braces status\r\n    braces = re . sub('[^\\[\\]]', '', source)\r\n    while braces . count('[]'):\r\n    braces = braces . replace('[]', '')\r\n    if braces:\r\n    return 'Error!'\r\n    # split code into commands\r\n    commands = re . findall('\\++|-+|>+|<+|[.,\\[\\]]', source)\r\n\r\n    # translate to C\r\n    output = []\r\n    indent = 0\r\n    for cmd in commands:\r\n    if cmd[0] in '+-<>':\r\n    line = ('%sp %s= %s;\\n' %\r\n            ('*' if cmd[0] in '+-' else '',\r\n             '+' if cmd[0] in '+>' else '-',\r\n             len(cmd)))\r\n    elif cmd == '.':\r\n    line = 'putchar(*p);\\n'\r\n    elif cmd == ',':\r\n    line = '*p = getchar();\\n'\r\n    elif cmd == '[':\r\n    line = 'if (*p) do {\\n'\r\n    elif cmd == ']':\r\n    line = '} while (*p);\\n'\r\n    indent -= 1\r\n    output . append(' ' * indent + line)\r\n    if cmd == '[':\r\n    indent += 1\r\n    return '' . join(output)\r\n",
  "58e8f020fd89eaa1cf0000c2": "def patience(cards):\r\n    clock, h = [cards[i:: 13] for i in range(13)], 13 - 1\r\n    while len(clock[h]):\r\n    h = ['A', '2', '3', '4', '5', '6', '7', '8', '9',\r\n         '10', 'J', 'Q', 'K']. index(clock[h]. pop())\r\n\r\n    return sum(len(h) for h in clock)\r\n",
  "57b1d750b69bfcf231000204": "def reversal_collatz(step, y):\r\n    bag = {y}\r\n    for _ in range(step):\r\n    bag = {z for x in bag for z in [2 * x] + [(x - 1) / / 3] * (x % 6 == 4)}\r\n    return sorted(bag)\r\n",
  "5521d84b95c172461d0000a4": "def to_bcd(n):\r\n    return '-' * (n < 0) + ' ' . join(bin(x)[2:]. zfill(4) for x in map(int, str(abs(n))))\r\n",
  "59d2fc6c23dacca182000068": "notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]\r\n\r\n\r\ndef chords(root):\r\n    index = notes . index(root)\r\n    major = [notes[index], notes[(index + 4) % 12], notes[(index + 7) % 12]]\r\n    minor = [notes[index], notes[(index + 3) % 12], notes[(index + 7) % 12]]\r\n    return [major, minor]\r\n",
  "56bf3287b5106eb10f000899": "def move_vowels(s):\r\n    return '' . join(sorted(s, key=lambda k: k in 'aeiou'))\r\n",
  "5559e4e4bbb3925164000125": "def fib_rabbits(n, b):\r\n    x, y = 0, 1\r\n    for i in range(n):\r\n    x, y = y, y + b * x\r\n    return x\r\n",
  "57c6b44f58da9ea6c20003da": "from functools import reduce\nfrom operator import mul\n\n\ndef geo_mean(nums, mean):\n    nums . append(mean * (len(nums) + 1) - sum(nums))\n    return reduce(mul, nums) * * (1 / len(nums))\n",
  "55ed875819ae85ca8b00005c": "def multiply_and_filter(seq, multiplier):\r\n    return [num * multiplier for num in seq if type(num) in (int, float)]\r\n",
  "55f9064161541a9e01000001": "import re\n\n\ndef valid_number(input_str):\n    return re . match(r\"\"\" \n [+-]? # optional +/- sign \n \\d* # optional digits \n \\. # decimal point \n \\d\\d # two digits \n $ # end of string \n \"\"\", input_str, re . VERBOSE) is not None\n",
  "56419475931903e9d1000087": "alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\ncorrect = 'ZABCDEFGHIJKLMNOPQRSTUVWXYzabcdefghijklmnopqrstuvwxy'\n\n\ndef one_down(txt):\n    return \"Input is not a string\" if type(txt) != str else txt . translate(str . maketrans(alpha, correct))\n",
  "54b0306c56f22d0bf9000ffb": "def decode(s):\r\n    return '' . join(TOME . get(w, ' ') for w in s . split(' ')) if s else ''\r\n",
  "55a243393fb3e87021000198": "def remember(str_):\r\n    seen = set()\r\n    res = []\r\n    for i in str_:\r\n    res . append(i) if i in seen and i not in res else seen . add(i)\r\n    return res\r\n",
  "57e0206335e198f82b00001d": "def esrever(s):\r\n    return s[: - 1][:: - 1] + s[- 1] if s else ''\r\n",
  "5353212e5ee40d4694001114": "def exchange_with(a, b):\r\n    a[:], b[:] = b[:: - 1], a[:: - 1]\r\n",
  "535742c7e727388cdc000297": "def deck_of_cards(): return [card + \" of \" + suit for card in [\"ace\", \"two\", \"three\", \"four\", \"five\", \"six\",\n                                                               \"seven\", \"eight\", \"nine\", \"ten\", \"jack\", \"queen\", \"king\"] for suit in [\"hearts\", \"spades\", \"diamonds\", \"clubs\"]]\n",
  "59d28768a25c8c51a6000057": "def calc_ms(n):\r\n    return 20 * * n\r\n",
  "591f3a2a6368b6658800020e": "USE_BREAK_DISPLAY = True\r\n\r\n\r\ndef v(c): return {(c[0] + 1, c[1]), (c[0] - 1, c[1])}\r\n\r\n\r\ndef h(c): return {(c[0], c[1] + 1), (c[0], c[1] - 1)}\r\n\r\n\r\ndef neig(c): return {(c[0] + 1, c[1]), (c[0] - 1, c[1]),\r\n                     (c[0], c[1] + 1), (c[0], c[1] - 1)}\r\n\r\n\r\ndef neig2(c): return {(c[0] + i, c[1] + j)\r\n                      for i in {1, - 1, 0} for j in {1, - 1, 0}}\r\n\r\n\r\ndef break_evil_pieces(shape):\r\n    if not shape . strip():\r\n    return []\r\n    (a, b, shape) = interpolate(shape)\r\n    S = {(i, j) for i in range(a) for j in range(b) if shape[i][j] == ' '}\r\n    regions = []\r\n    while S:\r\n    R = set({S . pop()})\r\n    R_ = R\r\n    while R_:\r\n    R_ = {j for i in R_ for j in neig(i) & S} - R\r\n    R . update(R_)\r\n    S = S - R\r\n    boundary = {j for i in R for j in neig2(i)} - R\r\n    min_i = min(i for i, j in boundary)\r\n    max_i = max(i for i, j in boundary) + 1\r\n    min_j = min(j for i, j in boundary)\r\n    max_j = max(j for i, j in boundary) + 1\r\n    if min_i < 0 or min_j < 0 or max_i > a or max_j > b:\r\n    continue\r\n    region = [list(row[min_j: max_j]) for row in shape[min_i: max_i]]\r\n    for i in range(len(region)):\r\n    for j in range(len(region[i])):\r\n    if region[i][j] != ' ' and (i + min_i, j + min_j) not in boundary:\r\n    region[i][j] = ' '\r\n    elif region[i][j] == '+':\r\n    c = (i + min_i, j + min_j)\r\n    if not (h(c) & boundary and v(c) & boundary):\r\n    region[i][j] = '-' if h(c) & boundary else '|'\r\n    regions . append('\\n' . join(\r\n        '' . join(row[:: 2]). rstrip() for row in region[:: 2]))\r\n    return regions\r\n    def interpolate(s):\r\n    shape = s . split('\\n')\r\n    while not shape[0]. strip():\r\n    shape = shape[1:]\r\n    while not shape[- 1]. strip():\r\n    shape = shape[: - 1]\r\n    a = len(shape)\r\n    b = max(len(shape[i]) for i in range(a))\r\n    for i in range(a):\r\n    shape[i] += ' ' * (b - len(shape[i]))\r\n    newshape = [[]] * (2 * a - 1)\r\n    for i in range(2 * a - 1):\r\n    newshape[i] = [' '] * (2 * b - 1)\r\n    if i % 2:\r\n    for j in range(b):\r\n    if shape[i / / 2][j] in '|+' and shape[i / / 2 + 1][j] in '|+':\r\n    newshape[i][2 * j] = '|'\r\n    else:\r\n    for j in range(2 * b - 1):\r\n    if j % 2:\r\n    if shape[i / / 2][j / / 2] in '-+' and shape[i / / 2][j / / 2 + 1] in '-+':\r\n    newshape[i][j] = '-'\r\n    else:\r\n    newshape[i][j] = shape[i / / 2][j / / 2]\r\n    return (2 * a - 1, 2 * b - 1, newshape)\r\n",
  "568d1ee43ee6afb3ad00001d": "from itertools import cycle\n\n\ndef add_check_digit(number):\n    fact = cycle([2, 3, 4, 5, 6, 7])\n    r = sum(int(c) * next(fact) for c in number[:: - 1]) % 11\n    return number + ('0' if not r else 'X' if r == 1 else str(11 - r))\n",
  "599846fbc2bd3a62a4000031": "from itertools import combinations, count\r\nfrom string import digits\r\n\r\n\r\ndef digitalize(n): return frozenset(str(n))\r\n\r\n\r\nseq, used = [0], {0}\r\n\r\n\r\ndef filter_gen(forbidden_digits):\r\n    for n in count():\r\n    if not (n in used or\r\n            digitalize(n) & forbidden_digits):\r\n    yield n\r\n    gens = {c: filter_gen(c)\r\n            for r in range(1, len(digits))\r\n            for c in map(frozenset, combinations(digits, r))}\r\n\r\n    def find_num(n):\r\n    x = seq[- 1]\r\n    for i in range(len(seq), n + 1):\r\n    x = next(gens[digitalize(x)])\r\n    seq . append(x)\r\n    used . add(x)\r\n    return seq[n]\r\n",
  "58cd7f6914e656400100005a": "def find_initial_numbers(divisor, iterations):\n    if not iterations:\n        return divisor, 0\n    a, b = divisor, divisor\n    for _ in range(iterations):\n    a, b = a + b, a\n    return a, b\n",
  "59cf8bed1a68b75ffb000026": "def solve(s):\r\n    vowels = sorted(c for c in s if c in \"aeiou\")\r\n    consonants = sorted(c for c in s if c not in \"aeiou\")\r\n    part1, part2 = sorted((vowels, consonants), key=len, reverse=True)\r\n    part2 . append('')\r\n    if len(part1) > len(part2):\r\n    return \"failed\"\r\n    return \"\" . join(a + b for a, b in zip(part1, part2))\r\n",
  "59cfc000aeb2844d16000075": "def capitalize(s):\r\n    s = '' . join(c if i % 2 else c . upper() for i, c in enumerate(s))\r\n    return [s, s . swapcase()]\r\n",
  "59cfc09a86a6fdf6df0000f1": "def capitalize(s, ind):\r\n    ind = set(ind)\r\n    return '' . join(c . upper() if i in ind else c for i, c in enumerate(s))\r\n",
  "59cf805aaeb28438fe00001c": "def sum_of_digits(digits):\r\n    d = str(digits)\r\n    return \"\" if digits is None else f' { \" + \" . join ( x for x in d )} = { sum ( map ( int , d ))} '\r\n",
  "54bd06539f075cece0000feb": "def tick_toward(start, target):\r\n    (x, y), (tx, ty), path = start, target, [start]\r\n    while (x, y) != target:\r\n    x = x + (1 if x < tx else - 1 if tx < x else 0)\r\n    y = y + (1 if y < ty else - 1 if ty < y else 0)\r\n    path . append((x, y))\r\n    return path\r\n",
  "587f0871f297a6df780000cd": "def answer(puzzlebox):\r\n    return 42\r\n",
  "56a14f18005af7002f00003f": "def directions(goal):\r\n    y = goal . count(\"N\") - goal . count(\"S\")\r\n    x = goal . count(\"E\") - goal . count(\"W\")\r\n\r\n    return [\"N\"] * y + [\"S\"] * (- y) + [\"E\"] * x + [\"W\"] * (- x)\r\n",
  "58702c0ca44cfc50dc000245": "def pig_latin(word):\r\n    return word[1:] + word[0] + 'ay' if len(word) > 3 else word\r\n",
  "586f61bdfd53c6cce50004ee": "def user_contacts(data):\r\n    return {contact[0]: contact[1] if len(contact) > 1 else None\r\n            for contact in data}\r\n",
  "586ee462d0982081bf001f07": "def fillable(stock, merch, n):\r\n    return stock . get(merch, 0) >= n\r\n",
  "56d30dadc554829d55000578": "def prefix1(a, b):\r\n    cnt = 0\r\n    for i, j in zip(a, b):\r\n    if i == j:\r\n    cnt += 1\r\n    else:\r\n    return cnt\r\n    return cnt\r\n    def prefix2(a, b, num):\r\n    for i in range(num, - 1, - 1):\r\n    if b . startswith(a[: i]):\r\n    return i\r\n    def zfunc(str_):\r\n    z = []\r\n    k = len(str_)\r\n    for i in range(len(str_)):\r\n    z . append(prefix2(str_[i:], str_[: k - i], k - i))\r\n    # z.append(prefix1(str_[i:], str_[: k - i])) #poor timing\r\n    return z\r\n",
  "560ae2027dc9033b5e0000c2": "from math import sqrt\r\nMSG = {\r\n    # a == 0\r\n    0: \"It is a first degree equation. Solution: {}\",  # b != 0 and c != 0\r\n    1: \"The equation is indeterminate\",  # b == 0 and c == 0\r\n    2: \"Impossible situation. Wrong entries\",  # b == 0 and c != 0\r\n    3: \"It is a first degree equation. Solution: 0.0\",  # b != 0 and c == 0\r\n    # a != 0\r\n    4: \"There are no real solutions\",  # \u0394 < 0\r\n    5: \"It has one double solution: {}\",  # \u0394 == 0\r\n    6: \"Two solutions: {}, {}\"  # \u0394 > 0\r\n}\r\n\r\n\r\ndef sec_deg_solver(a, b, c):\r\n    if a:\r\n    delta = b * b - 4 * a * c\r\n    if delta < 0:\r\n    msg = MSG[4]\r\n    elif delta > 0:\r\n    roots = round((- b - sqrt(delta)) / (2 * a),\r\n                  10), round((- b + sqrt(delta)) / (2 * a), 10)\r\n    msg = MSG[6]. format(* sorted(roots))\r\n    else:\r\n    root = round(- b / (2 * a), 10)\r\n    msg = MSG[5]. format(root)\r\n    else:\r\n    if b:\r\n    if c:\r\n    root = round(- c / b, 10)\r\n    msg = MSG[0]. format(root)\r\n    else:\r\n    msg = MSG[3]\r\n    else:\r\n    if c:\r\n    msg = MSG[2]\r\n    else:\r\n    msg = MSG[1]\r\n    return msg\r\n",
  "56d19b2ac05aed1a20000430": "def between_extremes(numbers):\r\n    return max(numbers) - min(numbers)\r\n",
  "571b2ee08d8c9c0d160014ec": "def sexy_name(name):\r\n    name_score = sum(SCORES . get(a, 0) for a in name . upper())\r\n    if name_score >= 600:\r\n    return 'THE ULTIMATE SEXIEST'\r\n    elif name_score >= 301:\r\n    return 'VERY SEXY'\r\n    elif name_score >= 61:\r\n    return 'PRETTY SEXY'\r\n    return 'NOT TOO SEXY'\r\n",
  "54f9cba3c417224c63000872": "def monty_hall(door, guesses):\r\n    return round(100.0 * (len(guesses) - guesses . count(door)) / len(guesses))\r\n",
  "5864af6739c5ab26e80000bf": "def categorize_study(p_value, requirements):\r\n    study_value = p_value * (2 * * (6 - requirements))\r\n\r\n    if study_value < 0.05 and requirements != 0:\r\n    return \"Fine\"\r\n    elif study_value < 0.05 and requirements == 0:\r\n    return \"Needs review\"\r\n    elif study_value > 0.05 and study_value < 0.15:\r\n    return \"Needs review\"\r\n    else:\r\n    return \"Pants on fire\"\r\n",
  "565f1bd8f97d3e59c400014a": "def binary_fingers(s): return [[\"Pinkie\", \"Ring\", \"Middle\", \"Index\", \"Thumb\"][i]\n                               for i, d in enumerate(s . zfill(5)) if int(d)]\n",
  "5864cdc483f7e6df980001c8": "def color_probability(color, texture):\r\n    marbles = {\"smooth\": {\"red\": 1, \"yellow\": 1, \"green\": 1, \"total\": 3},\r\n               \"bumpy\": {\"red\": 4, \"yellow\": 2, \"green\": 1, \"total\": 7}}\r\n    return \"{}\" . format(marbles[texture][color] / marbles[texture][\"total\"])[: 4]\r\n",
  "55caf1fd8063ddfa8e000018": "def arithmetic_sequence_elements(a, r, n):\r\n    return \", \" . join((str(a + r * i) for i in range(n)))\r\n",
  "5596700a386158e3aa000011": "def binary_pyramid(m, n):\r\n    return bin(sum(int(bin(i)[2:]) for i in range(m, n + 1)))[2:]\r\n",
  "59cf0ba5d751dffef300001f": "from collections import Counter\r\n\r\n\r\ndef verticalHistogramOf(s):\r\n\r\n    def buildLine(h):\r\n    return ' ' . join(h and ' *' [cnts[k] >= h] or k for k in keys). rstrip()\r\n\r\n    cnts = Counter(filter(str . isupper, s))\r\n    keys = sorted(cnts)\r\n    m = max(cnts . values(), default=0)\r\n    return '\\n' . join(map(buildLine, reversed(range(m + 1))))\r\n",
  "53f17f5b59c3fcd589000390": "class SecureList (list):\r\n    def __getitem__(self, key):\r\n    ret = list(self)[key]\r\n    del self[key]\r\n    return ret\r\n    def __repr__(self):\r\n    ret = list(self). __repr__()\r\n    del self[:]\r\n    return ret\r\n    def __str__(self):\r\n    ret = list(self). __str__()\r\n    del self[:]\r\n    return ret\r\n",
  "5637b03c6be7e01d99000046": "SWAP = {'i': '1', 'I': '1', 'o': '0', 'O': '0', 's': '5', 'S': '5'}\r\n\r\n\r\ndef make_password(phrase):\r\n    return '' . join(SWAP . get(a[0], a[0]) for a in phrase . split())\r\n",
  "59ce11ea9f0cbc8a390000ed": "n = 500000\r\nsieve, PRIMES = [0] * (n / / 2 + 1), [0, 2]\r\nfor i in range(3, n + 1, 2):\r\n    if not sieve[i / / 2]:\r\n    PRIMES . append(i)\r\n    for j in range(i * * 2, n + 1, i * 2):\r\n        sieve[j / / 2] = 1\r\n    DOMINANTS = []\r\n    for p in PRIMES:\r\n    if p >= len(PRIMES):\r\n        break\r\n    DOMINANTS . append(PRIMES[p])\r\n\r\n    def solve(a, b):\r\n    return sum(p for p in DOMINANTS if a <= p <= b)\r\n",
  "59cdb2b3a25c8c6d56000005": "def find_unknown_number(x, y, z):\r\n    return (x * 70 + y * 21 + z * 15) % 105 or 105\r\n",
  "59ccf051dcc4050f7800008f": "def div_sum(n):\r\n    divs = set()\r\n    for x in range(2, int(n * * 0.5) + 1):\r\n    if n % x == 0:\r\n    divs . add(x)\r\n    divs . add(n / / x)\r\n    return sum(divs)\r\n\r\n    def buddy(start, limit):\r\n    for n in range(start, limit + 1):\r\n    buddy = div_sum(n)\r\n\r\n    if buddy > n and div_sum(buddy) == n:\r\n    return [n, buddy]\r\n\r\n    return \"Nothing\"\r\n",
  "559656796d8fb52e17000003": "def transpose(arr):\r\n    return [list(i) for i in zip(* arr)]\r\n",
  "558445a88826e1376b000011": "def age(x, y):\r\n    return (x * y) / (y - 1)\r\n",
  "568dc69683322417eb00002c": "def triple_x(s: str) - > bool:\r\n    return 0 <= s . find(\"x\") == s . find(\"xxx\")\r\n",
  "56a29b237e9e997ff2000048": "rooms = {\"Room_1\": {\"Guest_Name\": \"Hardik\", \"Room_Number\": \"69\", \"Hotel\": \"Royal Inn\"},\r\n         \"Room_2\": {\"Guest_Name\": \"Hridhik\", \"Room_Number\": \"369\", \"Hotel\": \"Sandesh The Prince\"},\r\n         \"Room_3\": {\"Guest_Name\": \"Pratham\", \"Room_Number\": \"96\", \"Hotel\": \"The Quorum\"},\r\n         \"Room_4\": {\"Guest_Name\": \"Ruturaj\", \"Room_Number\": \"14\", \"Hotel\": \"Radisson Blu\"}}\r\n",
  "58630e2ae88af44d2b0000ea": "def is_divisible(wall_length, pixel_size):\r\n    return wall_length % pixel_size == 0\r\n",
  "58659b1261cbfc8bfc00020a": "def my_add(a, b):\r\n    try:\r\n    return a + b\r\n    except TypeError:\r\n    return None\r\n",
  "55c1d030da313ed05100005d": "from math import pi\r\n\r\n\r\nclass Sphere (object):\r\n    def __init__(self, radius, mass):\r\n    self . radius = radius\r\n    self . mass = mass\r\n    self . volume = 4 * pi * self . radius * * 3 / 3\r\n    self . surface = 4 * pi * self . radius * * 2\r\n    def get_radius(self):\r\n    return self . radius\r\n    def get_mass(self):\r\n    return self . mass\r\n    def get_volume(self):\r\n    return round(self . volume, 5)\r\n    def get_surface_area(self):\r\n    return round(self . surface, 5)\r\n    def get_density(self):\r\n    return round(self . mass / self . volume, 5)\r\n",
  "55a89dd69fdfb0d5ce0000ac": "def types(x):\r\n    return type(x). __name__\r\n",
  "55acfc59c3c23d230f00006d": "def get_ascii(c):\r\n    return ord(c)\r\n",
  "55b105503da095817e0000b6": "def count_vowels(s=''):\r\n    return sum(x . lower() in 'aeoui' for x in s) if type(s) == str else None\r\n",
  "5571f712ddf00b54420000ee": "import math\n\n\ndef loose_change(cents):\n    if cents < 0:\n    cents = 0\n    cents = int(cents)\n\n    change = {}\n\n    change['Quarters'] = cents / / 25\n    cents = cents % 25\n    change['Dimes'] = cents / / 10\n    cents = cents % 10\n    change['Nickels'] = cents / / 5\n    cents = cents % 5\n    change['Pennies'] = cents\n    return change\n",
  "55d8dc4c8e629e55dc000068": "def trigrams(phrase):\r\n    phrase = phrase . replace(\" \", \"_\")\r\n    return \" \" . join([phrase[i: i + 3] for i in range(len(phrase) - 2)])\r\n",
  "59cd155d1a68b70f8e000117": "def middle_me(N, X, Y):\r\n    if N % 2 == 1:\r\n    return X\r\n    else:\r\n    return Y * (N / / 2) + X + Y * (N / / 2)\r\n",
  "59cd0535328801336e000649": "def interest(principal, interest, periods):\r\n    return [round(principal * (1 + interest * periods)),\r\n            round(principal * (1 + interest) * * periods)]\r\n",
  "5470ae03304c1250b4000e57": "def identify_weapon(character):\r\n    tbl = {\r\n        \"Laval\": \"Laval-Shado Valious\",\r\n        \"Cragger\": \"Cragger-Vengdualize\",\r\n        \"Lagravis\": \"Lagravis-Blazeprowlor\",\r\n        \"Crominus\": \"Crominus-Grandorius\",\r\n        \"Tormak\": \"Tormak-Tygafyre\",\r\n        \"LiElla\": \"LiElla-Roarburn\"\r\n    }\r\n\r\n    return tbl . get(character, \"Not a character\")\r\n",
  "55a996e0e8520afab9000055": "def cookie(x):\r\n    return \"Who ate the last cookie? It was %s!\" % {str: \"Zach\", float: \"Monica\", int: \"Monica\"}. get(type(x), \"the dog\")\r\n",
  "5908242330e4f567e90000a3": "from numpy import *\n\n\ndef circleIntersection(a, b, r): return (lambda s: int(\n    max(0, r * r * (s - sin(s)))))(2 * arccos(hypot(* array(a) - b) / 2 / r))\n",
  "54f0d5447872e8ce9f00013d": "import math\r\n\r\n\r\ndef factorial(n):\r\n    if n >= 0:\r\n    return math . factorial(n)\r\n",
  "58039f8efca342e4f0000023": "def changer(s):\r\n    return s . lower(). translate(str . maketrans('abcdefghijklmnopqrstuvwxyz', 'bcdEfghIjklmnOpqrstUvwxyzA'))\r\n",
  "5890d8bc9f0f422cf200006b": "def excludingVatPrice(price):\r\n    return round(price / 1.15, 2) if price else - 1\r\n",
  "586beb5ba44cfc44ed0006c3": "def sum_even_numbers(seq):\r\n    return sum(n for n in seq if not n % 2)\r\n",
  "550e9fd127c656709400024d": "def cube_sum(n, m):\r\n    n, m = sorted([n, m])\r\n    return sum(i * * 3 for i in range(n + 1, m + 1))\r\n",
  "57e92812750fcc051800004d": "def pak(s):\r\n    return \" pak \" . join(s . split(\" \"))\r\n",
  "58983deb128a54b530000be6": "brackets = {\"}\": \"{\", \"]\": \"[\", \")\": \"(\"}\r\n\r\n\r\ndef braces_status(s):\r\n    stack = []\r\n\r\n    for c in s:\r\n    if c in \"[({\":\r\n    stack . append(c)\r\n    elif c in \"])}\":\r\n    if not stack or stack . pop() != brackets[c]:\r\n    return False\r\n    return not stack\r\n",
  "58a8807c5336a3f613000157": "def square(n): return sum(n for i in range(n))\n",
  "597754ba62f8a19c98000030": "def vowel_change(s, c):\r\n    return s . translate(str . maketrans(\"aiueo\", c * 5))\r\n",
  "55c353487fe3cc80660001d4": "def capitals_first(string):\r\n    return ' ' . join([word for word in string . split() if word[0]. isupper()] + [word for word in string . split() if word[0]. islower()])\r\n",
  "569924899aa8541eb200003f": "def quicksum(packet):\r\n    result = 0\r\n    for idx, char in enumerate(packet, 1):\r\n    if char . isupper():\r\n    result += idx * (ord(char) - 64)\r\n    elif char == \" \":\r\n    continue\r\n    else:\r\n    return 0\r\n    return result\r\n",
  "58e43389acfd3e81d5000a88": "from math import pi\n\n\ndef circle_circumference(circle):\n    return round(2 * circle . radius * pi, 6)\n",
  "554e52e7232cdd05650000a0": "def lowest_product(input):\r\n    length = len(input)\r\n\r\n    if length < 4:\r\n    return \"Number is too small\"\r\n    def muller(fourchar):\r\n    prod = 1\r\n    for num in fourchar:\r\n    prod *= int(num)\r\n    return prod\r\n    return min([muller(input[i: i + 4]) for i in range(length - 3)])\r\n",
  "557af4c6169ac832300000ba": "def remove_rotten(bag_of_fruits):\r\n    return [x . replace('rotten', ''). lower() for x in bag_of_fruits] if bag_of_fruits else []\r\n",
  "559576d984d6962f8c00003c": "def arr2bin(arr):\r\n    for x in arr:\r\n    if (type(x) != int):\r\n    return False\r\n    return '{0:b}' . format(sum(arr))\r\n",
  "55c5b03f8c28da9a51000045": "def find_sum(* args):\r\n    return - 1 if any(x < 0 for x in args) else sum(args)\r\n",
  "56b1eb19247c01493a000065": "def unique_sum(lst):\r\n    return sum(set(lst)) if lst else None\r\n",
  "5514e5b77e6b2f38e0000ca9": "def up_array(a):\r\n    if not a or any(not 0 <= x < 10 for x in a):\r\n        return\r\n    for i in range(1, len(a) + 1):\r\n    a[- i] = (a[- i] + 1) % 10\r\n    if a[- i]:\r\n        break\r\n    else:\r\n        a[: 0] = [1]\r\n    return a\r\n",
  "547fb94931cce5f5de00024f": "def tug_o_war(teams):\r\n    (a, b) = (sum(team) for team in teams)\r\n    if a == b:\r\n    a = teams[0][0]\r\n    b = teams[1][- 1]\r\n    return \"Team 1 wins!\" if a > b else \"Team 2 wins!\" if a < b else \"It's a tie!\"\r\n",
  "559f44187fa851efad000087": "def seven_ate9(str_):\r\n    while str_ . find('797') != - 1:\r\n    str_ = str_ . replace('797', '77')\r\n    return str_\r\n",
  "5569b10074fe4a6715000054": "from collections import Counter\n\n\ndef count(array):\n    return Counter(array)\n",
  "59cc4c5aaeb284b9a1000089": "def show(digits, size):\r\n    line = ' ' + '-' * size + ' '\r\n    space = ' ' * (size + 2)\r\n    l_sp = '|' + ' ' * (size + 1)\r\n    sp_r = ' ' * (size + 1) + '|'\r\n    l__r = '|' + ' ' * size + '|'\r\n    level_1 = {str(k): space if str(k) in '14' else line for k in range(10)}\r\n    level_2 = {str(k): sp_r if str(k) in '1237' else l_sp if str(\r\n        k) in '56' else l__r for k in range(10)}\r\n    level_3 = {str(k): space if str(k) in '170' else line for k in range(10)}\r\n    level_4 = {str(k): sp_r if str(k) in '134579' else l_sp if str(\r\n        k) in '2' else l__r for k in range(10)}\r\n    level_5 = {str(k): space if str(k) in '147' else line for k in range(10)}\r\n\r\n    ans = '' . join([level_1[i] for i in digits]) + '\\n' + \\\r\n        ('' . join([level_2[i] for i in digits]) + '\\n') * size + \\\r\n        '' . join([level_3[i] for i in digits]) + '\\n' + \\\r\n        ('' . join([level_4[i] for i in digits]) + '\\n') * size + \\\r\n        '' . join([level_5[i] for i in digits])\r\n\r\n    while ' \\n' in ans:\r\n        ans = ans . replace(' \\n', '\\n')\r\n    while ans[- 1] == ' ':\r\n        ans = ans[: - 1]\r\n    return ans\r\n",
  "59ca6fda23dacca1e300003e": "def cart_prod(* sets):\r\n    return {()} if not sets else {tuple([x] + list(s)) for x in sets[0] for s in cart_prod(* sets[1:])}\r\n",
  "59cabf6baeb28482b8000017": "from math import sin, pi\n\n\ndef scroller(text, amp, period):\n    return '\\n' . join(' ' * round(amp * (1 + sin((k % period) * 2 * pi / period))) + l for k, l in enumerate(text))\n",
  "5742e725f81ca04d64000c11": "from gmpy2 import is_prime as ip\ndef prime_or_composite(n): return [\"Composite\", \"Probable Prime\"][ip(n)]\n",
  "59ca8e8e1a68b7de740001f4": "def solve(a, b):\r\n    return [a . count(e) for e in b]\r\n",
  "59a9735a485a4d807f00008a": "from operator import add, mul, floordiv as fdiv, pow\r\n\r\n\r\ndef poohbear(s):\r\n\r\n    def updateMem(func, v): mem[p] = func(mem . get(p, 0), v) % 256\r\n    braces, stack = {}, []\r\n    for i, c in enumerate(s):\r\n    if c == 'W':\r\n        stack . append(i)\r\n    if c == 'E':\r\n    braces[i] = stack[- 1]\r\n    braces[stack . pop()] = i\r\n    mem, copy, output = {}, 0, []\r\n    p, i = 0, 0\r\n    while i < len(s):\r\n    cmd = s[i]\r\n    if cmd == '>':\r\n        p += 1\r\n    elif cmd == '<':\r\n        p -= 1\r\n    elif cmd == 'p':\r\n        mem[p] = copy\r\n    elif cmd == 'c':\r\n        copy = mem . get(p, 0)\r\n    elif cmd == 'W':\r\n        i = i if bool(mem . get(p, 0)) else braces[i]\r\n    elif cmd == 'E':\r\n        i = braces[i] if mem . get(p, 0) else i\r\n    elif cmd == 'P':\r\n        output . append(chr(mem . get(p, 0)))\r\n    elif cmd == 'N':\r\n        output . append(str(mem . get(p, 0)))\r\n    elif cmd == '+':\r\n        updateMem(add, 1)\r\n    elif cmd == '-':\r\n        updateMem(add, - 1)\r\n    elif cmd == 'L':\r\n        updateMem(add, 2)\r\n    elif cmd == 'I':\r\n        updateMem(add, - 2)\r\n    elif cmd == 'T':\r\n        updateMem(mul, 2)\r\n    elif cmd == 'V':\r\n        updateMem(fdiv, 2)\r\n    elif cmd == 'Q':\r\n        updateMem(pow, 2)\r\n    elif cmd == 'U':\r\n        updateMem(lambda a, b: int(pow(a, b)), .5)\r\n    elif cmd == 'A':\r\n        updateMem(add, copy)\r\n    elif cmd == 'B':\r\n        updateMem(add, - copy)\r\n    elif cmd == 'Y':\r\n        updateMem(mul, copy)\r\n    elif cmd == 'D':\r\n        updateMem(fdiv, copy)\r\n    i += 1\r\n    return '' . join(output)\r\n",
  "5646ac68901dc5c31a000022": "def big_primefac_div(n):\r\n    bpf, bd = 0, 1\r\n    frac = []\r\n\r\n    if n % 1 != 0:\r\n    return \"The number has a decimal part. No Results\"\r\n    else:\r\n    n = abs(int(n))\r\n    n_copy = n\r\n    i = 2\r\n    while i * i <= n:\r\n    if n % i == 0:\r\n    n / /= i\r\n    frac . append(i)\r\n    else:\r\n    i += 1\r\n    if n > 1:\r\n        frac . append(n)\r\n\r\n    bpf = max(frac)\r\n    bd = n_copy / frac[0]\r\n\r\n    if bpf == 0 or bd == 1:\r\n    return []\r\n    else:\r\n    return [bpf, bd]\r\n",
  "562c04fc8546d8147b000039": "def ds_multof_pfs(a, b):\r\n    return [n for n in range(a, b + 1) if divisor_sum(n) % prime_factor_sum(n) == 0]\r\n\r\n    def divisor_sum(n, p=2, s=0):\r\n    s += 1 + (0 if n == 1 else n)\r\n    while p * p <= n:\r\n    if n % p == 0:\r\n    s += p\r\n    if n / / p != p:\r\n    s += n / / p\r\n    p += 1\r\n    return s\r\n    def prime_factor_sum(n, p=2, s=0):\r\n    while p * p <= n:\r\n    while n % p == 0:\r\n    n / /= p\r\n    s += p\r\n    p += 1\r\n    if n > 1:\r\n    s += n\r\n    return s\r\n",
  "59aa6567485a4d03ff0000ca": "from gmpy2 import is_prime as ip\r\n\r\n\r\ndef naiHai(n):\r\n    a = []\r\n    while n not in a:\r\n    a += [n]\r\n    n = sum(int(i) * * 2 for i in str(n))\r\n    if n == 1:\r\n    return True\r\n    return False\r\n    def solve(a, b):\r\n    return len([i for i in range(a, b) if ip(i) and naiHai(i)])\r\n",
  "59c804d923dacc6c41000004": "def circle(radius):\r\n    return '\\n' . join(\r\n        '' . join('#' if x * * 2 + y * * 2 < radius * * 2 else ' ' for x in range(1 - radius, radius))\r\n        for y in range(1 - radius, radius)\r\n    ) + '\\n' * (radius >= 0)\r\n",
  "59ca888aaeb284bb8f0000aa": "def can_i_play(now_hour, start_hour, end_hour):\r\n    return 0 <= (now_hour - start_hour) % 24 < (end_hour - start_hour) % 24\r\n",
  "59c9e82ea25c8c05860001aa": "def jump_to(x, y):\r\n    n = 0\r\n    while y != x:\r\n    if y % 2 == 0 and y / 2 >= x:\r\n    y /= 2\r\n    else:\r\n    y -= 1\r\n    n += 1\r\n    return n\r\n",
  "57b4d2dad2a31c75f7000223": "def get_number_of_reachable_fields(grid, rows, columns, start_row, start_column):\r\n    reachable, bag, seen = 0, [(start_row, start_column)], {\r\n        (start_row, start_column)}\r\n    while bag:\r\n    x, y = bag . pop()\r\n    reachable += x == rows - 1\r\n    for u, v in (1, 0), (0, 1), (0, - 1):\r\n    m, n = x + u, y + v\r\n    if 0 <= m < rows and 0 <= n < columns \\\r\n            and (m, n) not in seen and grid[m][n]:\r\n    bag . append((m, n))\r\n    seen . add((m, n))\r\n    return reachable\r\n",
  "58b16300a470d47498000811": "def count_divisors(n):\n    \"\"\"Counts the integer points under the parabola xy = n. \n    Because the region is symmetric about x = y, it is only necessary to sum up \n    to that point (at n^{1/2}), and double it. By this method, a square region is \n    counted twice, and thus subtracted off the total. \n    \"\"\"\n    r = int(n * * (1 / 2))\n    return 2 * sum(n / / i for i in range(1, r + 1)) - r * r\n",
  "58f9f9f58b33d1b9cf00019d": "from functools import reduce\r\n\r\n\r\ndef count_find_num(primesL, limit):\r\n    base_num = reduce((lambda a, b: a * b), primesL, 1)\r\n    if base_num > limit:\r\n    return []\r\n    nums = [base_num]\r\n    for i in primesL:\r\n    for n in nums:\r\n    num = n * i\r\n    while (num <= limit) and (num not in nums):\r\n    nums . append(num)\r\n    num *= i\r\n    return [len(nums), max(nums)]\r\n",
  "5916c21917db4a0ad800002d": "def hungry_foxes(farm):\r\n    def eat(s):\r\n    ps = s . split('X')\r\n    r = 'X' . join(p . replace('C', '.') if 'F' in p else p for p in ps)\r\n    return r . replace('F', '.') if len(ps) > 1 else r\r\n    parts = farm . replace('[', '|['). replace(']', ']|'). split('|')\r\n    parts[:: 2] = eat('|' . join(parts[:: 2])). split('|')\r\n    parts[1:: 2] = map(eat, parts[1:: 2])\r\n    return '' . join(parts)\r\n",
  "59c919326bddd238e9000103": "def jump_to(n):\r\n    return n > 1 and int((4 * n - 6) * * .5)\r\n",
  "56b012bbee8829c4ea00002c": "LETTERS = 'abcdefgh'  # Defining some constants\nNUMBERS = '87654321'\nW, B = WB = 'Pp'\nEMPTY, CAPTURE = '.x'\nWHITEHOME = '12'\nBLACKHOME = '87'\nJUMP = '54'\n\n\ndef pawn_move_tracker(moves):\n    board = {letter + number:  # Representing board as\n             B if number == BLACKHOME[1] else  # a dictionary for easy\n             W if number == WHITEHOME[1] else EMPTY  # access\n             for letter in LETTERS for number in NUMBERS}\n    whitemove = True  # Move side switcher\n    for move in moves:\n    target = move[- 2:]  # Finding target\n    mover = move[0] + str(int(move[- 1]) + 1 - whitemove * 2)  # Finding mover\n    if move[- 1] in JUMP[whitemove] and board[mover] == EMPTY:  # Mover for the jump\n    mover = move[0] + str(int(move[- 1]) + 2 - whitemove * 4)\n    if (move[- 1] in (BLACKHOME, WHITEHOME)[whitemove] or  # Is the move valid?\n        board[target] != (EMPTY, WB[whitemove])[move[1] == CAPTURE] or\n            board[mover] != WB[not whitemove]):\n    return \"{} is invalid\" . format(move)\n    whitemove = not whitemove  # Switching side\n    board[mover] = EMPTY  # Empty the source cell\n    board[target] = WB[whitemove]  # Fill the target\n    # Return representation\n    return [[board[letter + number] for letter in LETTERS] for number in NUMBERS]\n",
  "59c633e7dcc4053512000073": "import re\n\n\ndef solve(s):\n    return max(sum(ord(c) - 96 for c in subs) for subs in re . split('[aeiou]+', s))\n",
  "59c8b38423dacc7d95000008": "def isValid(formula):\r\n    return not (\r\n        (1 in formula and 2 in formula) or\r\n        (3 in formula and 4 in formula) or\r\n        (5 in formula and not 6 in formula) or\r\n        (not 5 in formula and 6 in formula) or\r\n        (not 7 in formula and not 8 in formula))\r\n",
  "59be8c08bf10a49a240000b1": "import re\r\n\r\n\r\ndef change_case(label, target):\r\n    if ('_' in label) + ('-' in label) + (label != label . lower()) > 1:\r\n    return\r\n    if target == 'snake':\r\n    return re . sub('([A-Z])', r'_\\1', label . replace('-', '_')). lower()\r\n\r\n    if target == 'kebab':\r\n    return re . sub('([A-Z])', r'-\\1', label . replace('_', '-')). lower()\r\n\r\n    if target == 'camel':\r\n    return re . sub('([_-])([a-z])', lambda m: m . group(2). upper(), label)\r\n",
  "59c62f1bdcc40560a2000060": "def solve(a):\r\n    return sum(1 if v % 2 == 0 else - 1 for v in a if type(v) == int)\r\n",
  "59c7e477dcc40500f50005c7": "def isOddHeavy(arr):\r\n    maxEven = max(filter(lambda n: n % 2 == 0, arr), default=float(\"-inf\"))\r\n    minOdd = min(filter(lambda n: n % 2 == 1, arr), default=float(\"-inf\"))\r\n    return maxEven < minOdd\r\n",
  "582c6b7cfb3179eb6e000027": "def zig_zag_camel(d, h): return max([h * 2, (h * * 2 + d * * 2) * * 0.5])\n",
  "59c6fa6972851e8959000067": "from collections import Counter\r\n\r\n\r\ndef is_zero_balanced(arr):\r\n    c = Counter(arr)\r\n    return bool(arr) and all(c[k] == c[- k] for k in c)\r\n",
  "59c2e2a36bddd2707e000079": "from itertools import count\n\n\ndef solve_for_x(equation):\n    return next(x for n in count(0) for x in [n, - n] if eval(equation . replace(\"x\", str(x)). replace(\"=\", \"==\")))\n",
  "59c5f4e9d751df43cf000035": "import re\n\n\ndef solve(s):\n    return len(max(re . findall(r\"[aeiou]+\", s), key=len, default=\"\"))\n",
  "5546180ca783b6d2d5000062": "def squares(x, n):\r\n    return [x * * (2 * * i) for i in range(n)]\r\n",
  "551e51155ed5ab41450006e1": "def sum_times_tables(table, a, b):\r\n    return sum(table) * (a + b) * (b - a + 1) / / 2\r\n",
  "54f9f4d7c41722304e000bbb": "def first_dup(s):\r\n    for x in s:\r\n    if s . count(x) > 1:\r\n    return x\r\n    return None\r\n",
  "56662e268c0797cece0000bb": "def sum_fibs(n):\r\n    res, x, y = 0, 2, 0\r\n    for _ in range(n / / 3):\r\n    res, x, y = res + x, 4 * x + y, x\r\n    return res\r\n",
  "54bf85e3d5b56c7a05000cf9": "def number(lines):\r\n    return ['%d: %s' % v for v in enumerate(lines, 1)]\r\n",
  "545af3d185166a3dec001190": "def each_cons(lst, n):\r\n    return [lst[i: i + n] for i in range(len(lst) - n + 1)]\r\n",
  "56f19a230cd8bc5814001047": "from datetime import timedelta\r\n\r\n\r\ndef week_start_date(dt):\r\n    return dt - timedelta(days=dt . weekday())\r\n\r\n    def week_end_date(dt):\r\n    return dt + timedelta(days=6 - dt . weekday())\r\n",
  "587c37897f7dc251a0000001": "def map(f, xs): return [f(x) for x in xs]\n",
  "59c3e819d751df54e9000098": "from itertools import groupby\r\n\r\n\r\ndef get_consective_items(items, key):\r\n    items, key = str(items), str(key)\r\n    return max((len(list(l)) for k, l in groupby(items) if k == key), default=0)\r\n",
  "59c3e8c9f5d5e40cab000ca6": "def sum_arrays(array1, array2):\r\n    if not array1:\r\n        return array2\r\n    if not array2:\r\n        return array1\r\n    num = sum(map(lambda x: int('' . join(map(str, x))), [array1, array2]))\r\n    lst = list(map(int, str(abs(num))))\r\n    if num < 0:\r\n        lst[0] *= - 1\r\n    return lst\r\n",
  "59c35ba16bddd219ee000082": "def perimeter(n: int) - > int:\r\n    a, b = 0, 1\r\n    for i in range(n):\r\n    a, b = b, a + b\r\n    return b * 2 + (a + b) * 2\r\n",
  "59c32c609f0cbce0ea000073": "def pythagorean_triplet(n):\r\n    for a in range(3, n):\r\n    for b in range(a + 1, n):\r\n    c = (a * a + b * b) * * 0.5\r\n    if a * b * c > n:\r\n    break\r\n    if c == int(c) and a * b * c == n:\r\n    return [a, b, c]\r\n",
  "59c287b16bddd291c700009a": "def ice_brick_volume(radius, bottle_length, rim_length):\r\n    return (bottle_length - rim_length) * 2 * radius * * 2\r\n",
  "59c191df4f98a8a70b00001e": "class HexCipher:\r\n\r\n    HEX2TEXT = {h: c for c, h in TEXT2HEX . items()}\r\n\r\n    @ classmethod\r\n    def encode(cls, s, n):\r\n    for _ in range(n):\r\n        s = '' . join(TEXT2HEX[c] for c in s)\r\n    return s\r\n    @ classmethod\r\n    def decode(cls, s, n):\r\n    for _ in range(n):\r\n        s = '' . join(HexCipher . HEX2TEXT[s[i: i + 2]]\r\n                      for i in range(0, len(s), 2))\r\n    return s\r\n",
  "59c1302ecb7fb48757000013": "def type_validation(variable, _type):\r\n\r\n    return type(variable). __name__ == _type\r\n",
  "59c03f175fb13337df00002e": "def make_a_window(n):\r\n    top = '-' * (2 * n + 3)\r\n    middle = f\"| { '-' * n } + { '-' * n } |\"\r\n    glasses = [f\"| { '.' * n } | { '.' * n } |\"] * n\r\n    return '\\n' . join([top, * glasses, middle, * glasses, top])\r\n",
  "572a0fd8984419070e000491": "def is_pandigital(n):\r\n    s = str(n)\r\n    return not '0' in s and len(set(s)) == len(s)\r\n\r\n    def pow_root_pandigit(val, n, k):\r\n    res = []\r\n    current = int(round(val * * (1.0 / n), 5)) + 1\r\n    while len(res) < k and current <= 987654321 * * (1.0 / n):\r\n    if is_pandigital(current):\r\n    p = current * * n\r\n    if is_pandigital(p):\r\n    res += [[current, p]]\r\n    current += 1\r\n    return res if len(res) != 1 else res[0]\r\n",
  "58a57c6bcebc069d7e0001fe": "import base91\nimport pip\npip . main(['install', 'base91'])\n\n\ndef b91decode(s): return base91 . decode(s). decode()\ndef b91encode(s): return base91 . encode(s . encode())\n",
  "55ca43fb05c5f2f97f0000fd": "def list_animals(animals):\r\n    list = ''\r\n    for i in range(len(animals)):\r\n    list += str(i + 1) + '. ' + animals[i] + '\\n'\r\n    return list\r\n",
  "5803c0c6ab6c20a06f000026": "def swap_vowel_case(st):\r\n    return \"\" . join(x . swapcase() if x in \"aeiouAEIOU\" else x for x in st)\r\n",
  "5803a6d8db07c59fff00015f": "def starts_with(st, prefix):\r\n    return st . startswith(prefix)\r\n",
  "59bf6b73bf10a4c8e5000047": "# from string import ascii_lowercase as LOWER\r\nLOWER = \"abcdefghijklmnopqrstuvwxyz\"\r\n\r\n\r\ndef encode(message, key, shift, encode=True):\r\n    key = sorted(LOWER, key=f\" { key }{ LOWER } \" . index)\r\n    result = []\r\n    for char in message:\r\n    if char in key:\r\n    i = key . index(char)\r\n    char = key[(i + shift) % 26]\r\n    shift = i + 1 if encode else - (key . index(char) + 1)\r\n    result . append(char)\r\n    return \"\" . join(result)\r\n\r\n    def decode(message, key, shift):\r\n    return encode(message, key, - shift, encode=False)\r\n",
  "59bf97cd4f98a8b1cd00007e": "import collections\r\n\r\n\r\ndef solve(a, b):\r\n    d = collections . defaultdict(list)\r\n    for n in range(a, b):\r\n    d[(sum(k + n / / k for k in range(1, int(n * * 0.5) + 1) if n % k == 0) - (int(n * * 0.5) if int(n * * 0.5) == n * * 0.5 else 0)) / n]. append(n)\r\n    return sum(v[0] for v in d . values() if len(v) > 1)\r\n",
  "54bebed0d5b56c5b2600027f": "from time import time\r\n\r\n\r\nclass Debugger (object):\r\n    attribute_acceses = []\r\n    method_calls = []\r\n\r\n    class Meta (type):\r\n    def __new__(cls, name, bases, atts):\r\n    for k, v in atts . items():\r\n    if callable(v):\r\n        atts[k] = wrapped_method(cls, v)\r\n    atts['__getattribute__'] = wrapped_getattribute(cls)\r\n    atts['__setattr__'] = wrapped_setattr(cls)\r\n    return type . __new__(cls, name, bases, atts)\r\n\r\n    def wrapped_method(c, f):\r\n    def w(* args, * * kwargs):\r\n    a = time()\r\n    r = f(* args, * * kwargs)\r\n    b = time()\r\n    Debugger . method_calls . append(\r\n        {'class': c, 'mehod': f . __name__, 'args': args, 'kwargs': kwargs, 'time': b - a})\r\n    return w\r\n    def wrapped_setattr(c):\r\n    def s(self, k, v):\r\n    object . __setattr__(self, k, v)\r\n    Debugger . attribute_acceses . append(\r\n        {'action': 'set', 'class': c, 'attribute': k, 'value': v})\r\n    return s\r\n    def wrapped_getattribute(c):\r\n    def g(self, k):\r\n    v = object . __getattribute__(self, k)\r\n    Debugger . attribute_acceses . append(\r\n        {'action': 'get', 'class': c, 'attribute': k, 'value': v})\r\n    return v\r\n    return g\r\n",
  "59be6bdc4f98a8a9c700007d": "import re\n\n\ndef remove_chars(s):\n    return re . sub(r'[^a-zA-Z ]', '', s)\n",
  "5897e572948beb7858000089": "def whose_turn(positions):\r\n    return sum(ord(c) for c in positions . replace(\";\", \"\")) % 2 == 0\r\n",
  "59bd84b8a0640e7c49002398": "def t_area(s):\r\n    return (s . count('\\n') - 2) * * 2 / 2\r\n",
  "59bd5dc270a3b7350c00008b": "def check_the_bucket(bucket):\r\n    return 'gold' in bucket\r\n",
  "59bb02f5623654a0dc000119": "def diffs(bird1, bird2):\r\n    return sum(c1 != c2 for c1, c2 in zip(bird1, bird2))\r\n\r\n    def child(bird1, bird2):\r\n    return diffs(bird1, bird2) in [1, 2]\r\n\r\n    def grandchild(bird1, bird2):\r\n    return diffs(bird1, bird2) in [0, 1, 2, 3, 4] if len(bird1) > 1 else bird1 == bird2\r\n",
  "59b843b58bcb7766660000f6": "def read_out(acrostic):\r\n    return \"\" . join(word[0] for word in acrostic)\r\n",
  "59bc0059bf10a498a6000025": "def mutate_my_strings(s1, s2):\r\n    return '\\n' . join([s1] + [s2[: i] + s1[i:] for i, (a, b) in enumerate(zip(s1, s2), 1) if a != b]) + '\\n'\r\n",
  "57ba58d68dcd97e98c00012b": "from bisect import bisect_left\r\n\r\n\r\ndef sieve(n):\r\n    sieve, primes = [0] * (n + 1), []\r\n    for i in range(2, n + 1):\r\n    if not sieve[i]:\r\n    primes . append(i)\r\n    for j in range(i * * 2, n + 1, i):\r\n        sieve[j] = 1\r\n    return primes\r\n    PRIMES = sieve(100000)\r\n\r\n    def prime_primes(n):\r\n    lst = PRIMES[: bisect_left(PRIMES, n)]\r\n    divs = [p / q for i, p in enumerate(lst) for q in lst[i + 1:]]\r\n    return len(divs), int(sum(divs))\r\n",
  "59b24a2158ef58966e00005e": "def shake_tree(tree):\r\n    nuts, tree = [0 for _ in tree[0]], [a . replace('\\\\/', '__') for a in tree]\r\n\r\n    for r, c in [(r, c) for r, row in enumerate(tree) for c, v in enumerate(row) if v == 'o']:\r\n    for k in range(r, len(tree)):\r\n    while tree[k][c] == '\\\\':\r\n        c += 1\r\n    while tree[k][c] == '/':\r\n        c -= 1\r\n    if tree[k][c] == '_':\r\n        break\r\n    else:\r\n    nuts[c] += 1\r\n    return nuts\r\n",
  "56d2f73854d686eb1c00062b": "class WorldClock (object):\r\n\r\n    SPEAKER_H = ['midnight', 'one', 'two', 'three', 'four', 'five',\r\n                 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'noon']\r\n    JOINER = [\" past \", \" to \"]\r\n    SPEAKER_M = {0: '',\r\n                 5: \"five\",\r\n                 10: \"ten\",\r\n                 15: 'quarter',\r\n                 20: 'twenty',\r\n                 25: 'twenty-five',\r\n                 30: 'half'}\r\n\r\n    @ classmethod\r\n    def get_time_text(cls, h, m):\r\n\r\n    x, y = divmod(m, 5)\r\n    m = (x + bool(y)) * 5  # Round to the five minutes upper\r\n    isTo = m > 30  # Differentiate past/to (\"half\" is \"past\")\r\n    if isTo:\r\n    m = 60 - m  # Retro-reading of the minute\r\n    h += 1  # increase hour by one\r\n    # Reduce the hour to 12, but keeping the special case of noon\r\n    h %= (12 + (h == 12))\r\n    sH = cls . SPEAKER_H[h]\r\n    sM = cls . SPEAKER_M[m]\r\n    jn = cls . JOINER[isTo]\r\n\r\n    return jn . join([sM, sH]) if sM else sH\r\n",
  "59b46276afcda204ed000094": "import itertools\r\n\r\n\r\ndef solve(a, b):\r\n    primes = set([2] + [n for n in range(3, b, 2) if all(n % r for r in range(3, int(n * * 0.5) + 1, 2))])\r\n    return sum(sum(map(int, str(x * y))) in primes for x, y in itertools . combinations_with_replacement([p for p in primes if a <= p < b], 2))\r\n",
  "598980a41e55117d93000015": "CODE = dict(zip(['__', '/\\\\', ']3', '(', '|)', '[-', '/=', '(_,', '|-|', '|', '_T', '/<', '|_', '|\\\\/|', '|\\\\|',\r\n            '()', '|^', '()_', '/?', '_\\\\~', '~|~', '|_|', '\\\\/', '\\\\/\\\\/', '><', '`/', '~/_'], ' abcdefghijklmnopqrstuvwxyz'))\r\n\r\n\r\ndef decode(m): return '' . join(CODE[c]\r\n                                for c in reversed(m . replace(m[0], ' '). split()))\r\n",
  "59b8a1bc4f98a8f844000087": "from math import factorial\n\n\ndef exact_p(g1, g2):\n    l = len(g1)\n    full = l * 2\n    \"\"\" \n g, total = g1 + g2, sum(g1) + sum(g2) \n combos = [combo for combo in combinations(g, l)] \n # brute force - timeout \n baseStat = abs(sum(g1) / l - sum(g2) / l) \n testStat = [abs(sum(combo) / l - (total - sum(combo)) / l) for combo in combos] \n return sum(ts >= baseStat for ts in testStat) / len(combos) \n # brute force plus simplification - still timeout \n baseStat = abs(sum(g1) - sum(g2)) \n return sum(abs(sum(combo) * 2 - total) >= baseStat for combo in combos)\\ \n / len(combos) \n \n # if g1 < g2, then only those combos with sum <= g1 or >= g2 are relevant \n # for combo with sum <= g1, the other half must be a combo with sum >= g2 \n # hence answer = 2 * (number of combos with sum <= g1). \n # with non-overlapping ranges, answer = 2 \n \"\"\"\n    totalCombos = factorial(full) / factorial(l) * * 2\n    return 2 / totalCombos\n",
  "56882731514ec3ec3d000009": "COLUMNS, ROWS = 'ABCDEFG', range(6)\r\nLINES = [{(COLUMNS[i + k], ROWS[j]) for k in range(4)}\r\n         for i in range(len(COLUMNS) - 3) for j in range(len(ROWS))] \\\r\n    + [{(COLUMNS[i], ROWS[j + k]) for k in range(4)}\r\n       for i in range(len(COLUMNS)) for j in range(len(ROWS) - 3)] \\\r\n    + [{(COLUMNS[i + k], ROWS[j + k]) for k in range(4)}\r\n       for i in range(len(COLUMNS) - 3) for j in range(len(ROWS) - 3)] \\\r\n    + [{(COLUMNS[i + k], ROWS[j - k]) for k in range(4)}\r\n       for i in range(len(COLUMNS) - 3) for j in range(3, len(ROWS))]\r\n\r\n\r\ndef who_is_winner(pieces_positions):\r\n    players = {}\r\n    board = dict . fromkeys(COLUMNS, 0)\r\n    for position in pieces_positions:\r\n    column, player = position . split('_')\r\n    pos = (column, board[column])\r\n    board[column] += 1\r\n    players . setdefault(player, set()). add(pos)\r\n    if any(line <= players[player] for line in LINES):\r\n    return player\r\n    return \"Draw\"\r\n",
  "5588bd9f28dbb06f43000085": "from copy import deepcopy\r\nimport itertools as it\r\nimport numpy as np\r\n\r\n\r\nclass SudokuError (Exception):\r\n    pass\r\n    class Sudoku (object):\r\n    def __init__(self, board):\r\n    self . board = board\r\n    @ classmethod\r\n    def from_square(cls, board):\r\n    for cell in it . chain(* board):\r\n    if not isinstance(cell, int):\r\n    raise SudokuError('Puzzle contain non digit charcters')\r\n\r\n    cube = [[set(range(1, 10)) if cell == 0 else set([cell])\r\n             for cell in row] for row in board]\r\n    return cls(cube)\r\n\r\n    def rank(self):\r\n    \"\"\" A completely solved board is of rank 0\"\"\"\r\n    return sum(map(len, it . chain(* self . board))) - 9 * 9\r\n    @ property\r\n    def is_solved(self):\r\n    return self . rank() == 0\r\n    def guess(self):\r\n\r\n    min_cell, min_row, min_col = set(range(1, 10)), 0, 0\r\n    for i, row in enumerate(self . board):\r\n    for j, cell in enumerate(row):\r\n    if len(min_cell) > len(cell) >= 2:\r\n    min_cell, min_row, min_col = cell, i, j\r\n    for option in min_cell:\r\n    new_board = deepcopy(self . board)\r\n    new_board[min_row][min_col]. clear()\r\n    new_board[min_row][min_col]. add(option)\r\n    new_sudoku = Sudoku(new_board)\r\n    yield new_sudoku\r\n    def square(self):\r\n    \"\"\" Return the sudoko as readable 2D list of integers: \"\"\"\r\n    return [[list(cell). pop() if len(cell) == 1 else 0 for cell in row] for row in self . board]\r\n\r\n    def reduce_possibilities(self):\r\n    \"\"\" Given a sudoko solution reduce the number of possiblities per cell\"\"\"\r\n    while True:\r\n    before = self . rank()\r\n    # Rows:\r\n    for row in self . board:\r\n    self . reduce_row(row)\r\n\r\n    # Coloumns:\r\n    for row in zip(* self . board):\r\n    self . reduce_row(row)\r\n\r\n    # Boxes:\r\n    boxes_to_rows = []\r\n    for i, j in it . product([0, 1, 2], [0, 1, 2]):\r\n    boxes_to_rows . append([cell for row in self . board[3 * i: 3 * i + 3]\r\n                           for cell in row[3 * j: 3 * j + 3]])\r\n\r\n    for row in boxes_to_rows:\r\n    self . reduce_row(row)\r\n\r\n    # Break test\r\n    after = self . rank()\r\n    if before == after:\r\n    break\r\n    def reduce_row(self, row):\r\n    \"\"\" Minimize number of options for each cell for every row \"\"\"\r\n    # len 1 sets are known, longer sets are unknown:\r\n    known = [cell . copy(). pop() for cell in row if len(cell) == 1]\r\n    known_set = set(known)\r\n    if len(known_set) != len(known):\r\n    raise SudokuError(\"Repeating Value\")\r\n    unknown = [cell for cell in row if len(cell) > 1]\r\n    uknown_set = set(range(1, 10)). difference(known_set)\r\n\r\n    # All known options are remove from the unknown sets:\r\n    for cell in unknown:\r\n    cell . difference_update(known_set)\r\n    if not cell:\r\n    raise SudokuError(\"Cell without possibilities\")\r\n\r\n    # Some more immidate deductions for speedup:\r\n    for k in [1, 2]:\r\n    for nums in it . combinations(uknown_set, k):\r\n    option_counter = 0\r\n    aditional_options = False\r\n    cell_ref = []\r\n    for cell in unknown:\r\n    if set(nums). issubset(cell):\r\n    option_counter += 1\r\n    cell_ref . append(cell)\r\n    elif set(nums). intersection(cell):\r\n    aditional_options = True\r\n    if option_counter == k and not aditional_options:\r\n    for cell in cell_ref:\r\n    cell . clear()\r\n    cell . update(nums)\r\n\r\n    def solve(sudoku):\r\n        # breakout if sudoko is unsolvable:\r\n    try:\r\n    sudoku . reduce_possibilities()\r\n    except SudokuError:\r\n    return\r\n    # or complete solution have been found:\r\n    if sudoku . is_solved:\r\n    return sudoku\r\n    # Recurse over following options:\r\n    solution = None\r\n    for next_guess in sudoku . guess():\r\n    result = solve(next_guess)\r\n    if result:\r\n    if solution:\r\n    raise SudokuError(\"More than one solution\")\r\n    else:\r\n    solution = result\r\n    return solution\r\n    def sudoku_solver(puzzle):\r\n    sudoku = Sudoku . from_square(puzzle)\r\n    solution = solve(sudoku)\r\n    if solution is None:\r\n    raise SudokuError(\"No valid solution is possible\")\r\n    else:\r\n    return solution . square()\r\n",
  "55171d87236c880cea0004c6": "def solve(puzzle):\r\n\r\n    def guessAt():\r\n    _, x, y = min((len(s), x, y) for x, row in enumerate(grid)\r\n                  for y, s in enumerate(row) if s)\r\n    return x, y, grid[x][y]. pop()\r\n\r\n    def isValid():\r\n    return all(bool(s) ^ bool(ans[x][y]) for x, row in enumerate(grid) for y, s in enumerate(row))\r\n\r\n    def filterGridSets(i, j, v):\r\n    nonlocal counts\r\n    counts += 1\r\n    ans[i][j] = v\r\n    xS, yS = i / / 3 * 3, j / / 3 * 3\r\n    for z in range(9):\r\n    for a, b in ((i, z), (z, j), (xS + z / / 3, yS + z % 3)):  # in row, in col, in square\r\n    grid[a][b]. discard(v)\r\n\r\n    grid = [[{puzzle[x][y]} if puzzle[x][y] else {1, 2, 3, 4, 5, 6, 7, 8, 9}\r\n             for y in range(9)] for x in range(9)]\r\n    stk, counts, ans = [], 0, [[0] * 9 for _ in range(9)]\r\n\r\n    while counts != 81:\r\n\r\n    change = True\r\n    while change:\r\n    change = False\r\n    for x in range(9):\r\n    for y in range(9):\r\n    if len(grid[x][y]) == 1:\r\n    change = True\r\n    filterGridSets(x, y, grid[x][y]. pop())\r\n    if counts == 81:\r\n        break\r\n    if isValid():\r\n    x, y, guess = guessAt()\r\n    stk . append(([[set(s) for s in r] for r in grid], [r[:]\r\n                 for r in ans], x, y, guess, counts))\r\n    grid[x][y]. clear()\r\n    filterGridSets(x, y, guess)\r\n    else:\r\n    grid, ans, x, y, guess, counts = stk . pop()\r\n    grid[x][y]. discard(guess)\r\n\r\n    return ans\r\n",
  "59669eba1b229e32a300001a": "def wire_DHD_SG1(grid):\r\n    neighbourhood = {\r\n        dx + 1j * dy for dx in range(- 1, 2) for dy in range(- 1, 2)}\r\n    # Convert grid\r\n    start, end, maze = 0, 0, {}\r\n    for x, l in enumerate(grid . splitlines()):\r\n    for y, c in enumerate(l):\r\n    maze[x + 1j * y] = c\r\n    if c == 'S':\r\n        start = x + 1j * y\r\n    if c == 'G':\r\n        end = x + 1j * y\r\n    height, width = x + 1, y + 1\r\n    # Search for shortest path\r\n    bag, dists, prec = {start}, {start: 0}, {start: 0}\r\n    while bag:\r\n    pos = bag . pop()\r\n    for dz in neighbourhood:\r\n    z, new_dist = pos + dz, dists[pos] + abs(dz)\r\n    if new_dist >= dists . get(end, float('inf')):\r\n        continue\r\n    if maze . get(z, 'X') != 'X' and new_dist < dists . get(z, float('inf')):\r\n    bag . add(z)\r\n    prec[z], dists[z] = pos, new_dist\r\n    # Reconstruct path\r\n    if end not in prec:\r\n        return \"Oh for crying out loud...\"\r\n    pos = prec[end]\r\n    while pos != start:\r\n    maze[pos] = 'P'\r\n    pos = prec[pos]\r\n    return '\\n' . join('' . join(maze[x + y * 1j]\r\n                                 for y in range(width))\r\n                       for x in range(height))\r\n",
  "59b8614a5227dd64dc000008": "def min_distance(n):\r\n    x = [i for i in range(1, n + 1) if n % i == 0]\r\n    return min(j - i for i, j in zip(x, x[1:]))\r\n",
  "54baad292c471514820000a3": "def create_number_class(alphabet):\r\n    n = len(alphabet)\r\n\r\n    class Number (object):\r\n    def __init__(self, s):\r\n    if isinstance(s, str):\r\n    v = 0\r\n    for c in s:\r\n    v = v * n + alphabet . index(c)\r\n    else:\r\n    v = s\r\n    self . value = v\r\n    def __add__(self, other):\r\n    return Number(self . value + other . value)\r\n\r\n    def __sub__(self, other):\r\n    return Number(self . value - other . value)\r\n\r\n    def __mul__(self, other):\r\n    return Number(self . value * other . value)\r\n\r\n    def __floordiv__(self, other):\r\n    return Number(self . value / / other . value)\r\n\r\n    def __str__(self):\r\n    ret = []\r\n    v = int(self . value)\r\n    while v:\r\n    (v, r) = divmod(v, n)\r\n    ret . append(alphabet[r])\r\n    return '' . join(reversed(ret or alphabet[0]))\r\n\r\n    def convert_to(self, cls):\r\n    return cls(self . value)\r\n\r\n    return Number\r\n",
  "5574835e3e404a0bed00001b": "from math import sqrt, ceil\n\n\ndef get_participants(n: int) - > int:\n    return ceil((1 + sqrt(1 + 8 * n)) / 2) if n > 0 else 0\n",
  "5595cd8f1fc2033caa000052": "def is_possible(expression):\r\n    expression = expression . replace(\"!\", \"1^\")\r\n    expression = expression . replace(\"OR\", \"|\")\r\n    expression = expression . replace(\"AND\", \"&\")\r\n\r\n    vrs = \"\" . join({x for x in expression if x . islower()})\r\n    n = len(vrs)\r\n\r\n    for i in range(2 * * n):\r\n    if eval(expression . translate(str . maketrans(vrs, bin(i)[2:]. zfill(n)))):\r\n    return True\r\n    return False\r\n",
  "5589d3fa7e8b653faf0000cc": "class InvoicePrinter (object):\r\n    @ staticmethod\r\n    def get_credit_rows(invoice):\r\n    return [row for row in invoice . rows if is_credit(row)]\r\n\r\n    @ staticmethod\r\n    def get_debit_rows(invoice):\r\n    return [row for row in invoice . rows if is_debit(row)]\r\n\r\n    @ staticmethod\r\n    def get_free_rows(invoice):\r\n    return [row for row in invoice . rows if not (is_debit(row) or is_credit(row))]\r\n\r\n    @ staticmethod\r\n    def get_sub_total(invoice):\r\n    return sum([row . value for row in invoice . rows])\r\n\r\n    @ staticmethod\r\n    def get_tax_total(invoice):\r\n    return sum([row . value for row in invoice . rows if is_taxable(row)]) * invoice . tax_rate\r\n    @ staticmethod\r\n    def get_grand_total(invoice):\r\n    return InvoicePrinter . get_sub_total(invoice) + InvoicePrinter . get_tax_total(invoice)\r\n\r\n    @ staticmethod\r\n    def generate_invoice(invoice):\r\n    lines = 0\r\n    items = 0\r\n    tax_rate = round(invoice . tax_rate, 2)\r\n\r\n    for row in InvoicePrinter . get_credit_rows(invoice):\r\n    lines += 1\r\n    items += row . quantity\r\n    yield printable_row(row, tax_rate)\r\n\r\n    for row in InvoicePrinter . get_debit_rows(invoice):\r\n    lines += 1\r\n    items += row . quantity\r\n    yield printable_row(row, tax_rate)\r\n\r\n    for row in InvoicePrinter . get_free_rows(invoice):\r\n    lines += 1\r\n    items += row . quantity\r\n    yield printable_row(row, tax_rate)\r\n\r\n    yield (\"Lines\", str(lines))\r\n    yield (\"Items\", str(items))\r\n    yield (\"Sub Total\", \"{:.2f}\" . format(InvoicePrinter . get_sub_total(invoice)))\r\n    yield (\"Tax\", \"{:.2f}\" . format(InvoicePrinter . get_tax_total(invoice)))\r\n    yield (\"Total\", \"{:.2f}\" . format(InvoicePrinter . get_grand_total(invoice)))\r\n\r\n    from itertools import count\r\n    class InvoiceRow (object):\r\n    new_id = count()\r\n\r\n    def __init__(self, description, unit_cost, quantity=1, taxable=True):\r\n    self . id = next(InvoiceRow . new_id)\r\n    self . description = description\r\n    self . quantity = quantity\r\n    self . unit_cost = unit_cost\r\n    self . taxable = taxable\r\n    self . value = unit_cost * quantity\r\n    class Invoice (object):\r\n    def __init__(self, tax_rate=0.20):\r\n    self . tax_rate = tax_rate\r\n    self . rows = []\r\n\r\n    def add_row(self, row):\r\n    self . rows . append(row)\r\n\r\n    def is_debit(row):\r\n    return row . value < 0\r\n    def is_credit(row):\r\n    return row . value > 0\r\n    def is_taxable(row):\r\n    return row . taxable\r\n    def printable_cost(cost):\r\n    return f\" { cost : .2 f } \" if cost else \"Gratis\"\r\n    def printable_row(row, rate):\r\n    if not row . taxable:\r\n        rate = 0\r\n    return (\r\n        row . description,\r\n        f\" { row . quantity :,} \",\r\n        f\" { row . unit_cost :, .2 f } \",\r\n        f\" { rate :, .2 f } \",\r\n        f\" { row . quantity * row . unit_cost :, .2 f } \",\r\n        f\" { row . quantity * row . unit_cost * ( 1 + rate ):, .2 f } \")\r\n",
  "59b7ae14bf10a402d40000f3": "def isPrime(n): return all(n % p for p in [2] + list(range(3, int(n * * .5) + 1))) if n > 2 else n == 2\ndef is_twinprime(n): return isPrime(n) and (isPrime(n - 2) or isPrime(n + 2))\n",
  "5573f28798d3a46a4900007a": "from collections import deque\r\n\r\n\r\ndef find_shortest_path(grid, start_node, end_node):\r\n    if not grid:\r\n        return []\r\n    w, h = len(grid), len(grid[0])\r\n    prev, bag = {start_node: None}, deque([start_node])\r\n    while bag:\r\n    node = bag . popleft()\r\n    if node == end_node:\r\n    path = []\r\n    while node:\r\n    path . append(node)\r\n    node = prev[node]\r\n    return path[:: - 1]\r\n    x, y = node . position . x, node . position . y\r\n    for i, j in (0, 1), (1, 0), (0, - 1), (- 1, 0):\r\n    m, n = x + i, y + j\r\n    if not (0 <= m < w and 0 <= n < h):\r\n        continue\r\n    next_node = grid[m][n]\r\n    if next_node not in prev and next_node . passable:\r\n    prev[next_node] = node\r\n    bag . append(next_node)\r\n",
  "52bef5e3588c56132c0003bc": "from collections import deque\r\n\r\n\r\ndef tree_by_levels(node):\r\n    if not node:\r\n    return []\r\n    res, queue = [], deque([node,])\r\n    while queue:\r\n    n = queue . popleft()\r\n    res . append(n . value)\r\n    if n . left is not None:\r\n    queue . append(n . left)\r\n    if n . right is not None:\r\n    queue . append(n . right)\r\n    return res\r\n",
  "59b7571bbf10a48c75000070": "def tops(msg):\r\n    i, d, s = 1, 5, ''\r\n    while i < len(msg):\r\n    s += msg[i]\r\n    i += d\r\n    d += 4\r\n    return s[:: - 1]\r\n",
  "59b72376460387017e000062": "def is_hollow(x):\r\n    while x and x[0] != 0 and x[- 1] != 0:\r\n        x = x[1: - 1]\r\n    return len(x) > 2 and set(x) == {0}\r\n",
  "59b710ed70a3b7dd8f000027": "def is_all_possibilities(arr):\r\n    return bool(arr) and set(arr) == set(range(len(arr)))\r\n",
  "559ee79ab98119dd0100001d": "def decoder(encoded, marker):\r\n    ss = encoded . split(marker)\r\n    return '' . join(ss[:: 2]) + '' . join(ss[1:: 2])[:: - 1]\r\n",
  "588f5a38ec641b411200005b": "def how_many_years(date1, date2):\r\n    return abs(int(date1 . split('/')[0]) - int(date2 . split('/')[0]))\r\n",
  "546d15cebed2e10334000ed9": "import re\r\n\r\n\r\ndef solve_runes(runes):\r\n    for d in sorted(set(\"0123456789\") - set(runes)):\r\n    toTest = runes . replace(\"?\", d)\r\n    if re . search(r'([^\\d]|\\b)0\\d+', toTest):\r\n        continue\r\n    l, r = toTest . split(\"=\")\r\n    if eval(l) == eval(r):\r\n        return int(d)\r\n    return - 1\r\n",
  "5765870e190b1472ec0022a2": "def path_finder(maze):\r\n    matrix = list(map(list, maze . splitlines()))\r\n    stack, length = [[0, 0]], len(matrix)\r\n    while len(stack):\r\n    x, y = stack . pop()\r\n    if matrix[x][y] == '.':\r\n    matrix[x][y] = 'x'\r\n    for x, y in (x, y - 1), (x, y + 1), (x - 1, y), (x + 1, y):\r\n    if 0 <= x < length and 0 <= y < length:\r\n    stack . append((x, y))\r\n    return matrix[length - 1][length - 1] == 'x'\r\n",
  "57fd6c4fa5372ead1f0004aa": "import re\r\nPATTERNS = [re . compile(r'(?i)ci|ce|c(?!h)'),\r\n            re . compile(r'(?i)ph'),\r\n            re . compile(r'(?i)(?<!\\b[a-z]{1})(?<!\\b[a-z]{2})e\\b|([a-z])\\1'),\r\n            re . compile(r'(?i)th|w[rh]?'),\r\n            re . compile(r'(?i)ou|an|ing\\b|\\bsm')]\r\n\r\nCHANGES = {\"ci\": \"si\", \"ce\": \"se\", \"c\": \"k\",  # Week 1\r\n           \"ph\": \"f\",  # Week 2\r\n           \"th\": \"z\", \"wr\": \"r\", \"wh\": \"v\", \"w\": \"v\",  # Week 4\r\n           \"ou\": \"u\", \"an\": \"un\", \"ing\": \"ink\", \"sm\": \"schm\"}  # Week 5\r\n\r\n\r\ndef change(m):\r\n    tok = m . group(0)\r\n    rep = CHANGES . get(tok . lower(), \"\" if None in m . groups() else m . group()[\r\n                        0])  # default value used for week 3 only\r\n    if tok[0]. isupper():\r\n        rep = rep . title()\r\n    return rep\r\n    def siegfried(week, txt):\r\n    for n in range(week):\r\n    txt = PATTERNS[n]. sub(change, txt)\r\n    return txt\r\n",
  "59b11f57f322e5da45000254": "def ones_complement(n):\r\n    return n . translate(str . maketrans(\"01\", \"10\"))\r\n",
  "59b5896322f6bbe260002aa0": "def find_the_secret(f):\r\n    for string in f . __code__ . co_consts:\r\n    if string is not None and len(string) == 32:\r\n    return string\r\n",
  "5426d7a2c2c7784365000783": "def balanced_parens(n):\r\n    ''' \r\n    To construct all the possible strings with n pairs of balanced parentheses \r\n    this function makes use of a stack of items with the following structure: \r\n    (current, left, right) \r\n    Where: \r\n    current is the string being constructed \r\n    left is the count of '(' remaining \r\n    right is the count of ')' remaining \r\n    '''\r\n    stack = [('', n, 0)]\r\n    result = []\r\n\r\n    # Loop until we run out of items in the stack\r\n    while stack:\r\n    current, left, right = stack . pop()\r\n\r\n    # if no '(' or ')' left to add, add current to the result\r\n    if left == 0 and right == 0:\r\n    result . append(current)\r\n\r\n    # if we can, add a '(' and return to the stack\r\n    if left > 0:\r\n    stack . append((current + '(', left - 1, right + 1))\r\n\r\n    # if we can, add a ')' and return to the stack\r\n    if right > 0:\r\n    stack . append((current + ')', left, right - 1))\r\n\r\n    return result\r\n",
  "59b44d00bf10a439dd00006f": "from itertools import accumulate\n\n\ndef add(lst):\n    return list(accumulate(lst))\n",
  "59a3e2897ac7fd05f800005f": "def validate_bet(game, text):\r\n    n, m = game\r\n    if set(text) <= set('1234567890, '):\r\n    nums = sorted(map(int, text . replace(',', ' '). split()))\r\n    if len(nums) == len(set(nums)) == n and 1 <= min(nums) < max(nums) <= m:\r\n    return nums\r\n",
  "56c30ad8585d9ab99b000c54": "def work_on_strings(a, b):\r\n    new_a = [letter if b . lower(). count(letter . lower()) %\r\n             2 == 0 else letter . swapcase() for letter in a]\r\n    new_b = [letter if a . lower(). count(letter . lower()) %\r\n             2 == 0 else letter . swapcase() for letter in b]\r\n    return '' . join(new_a) + '' . join(new_b)\r\n",
  "59b401e24f98a813f9000026": "def compute_depth(n):\r\n    i = 0\r\n    digits = set()\r\n    while len(digits) < 10:\r\n    i += 1\r\n    digits . update(str(n * i))\r\n    return i\r\n",
  "59b2ae6b1b5ca3ca240000c1": "def is_prime_happy(n):\r\n    return n in [5, 25, 32, 71, 2745, 10623, 63201, 85868]\r\n",
  "59b2883c5e2308b54d000013": "def is_onion_array(a):\r\n    return all(a[i] + a[- i - 1] <= 10 for i in range(len(a) / / 2))\r\n",
  "59b166f0a35510270800018d": "def find_area(points):\r\n    return sum((p2 . X - p1 . X) * (p1 . Y + p2 . Y) / 2 for p1, p2 in zip(points, points[1:]))\r\n",
  "5893933e1a88084be10001a3": "import re\n\n\ndef validate(domain):\n    return re . match(''' \n (?=^.{,253}$) # max. length 253 chars \n (?!^.+\\.\\d+$) # TLD is not fully numerical \n (?=^[^-.].+[^-.]$) # doesn't start/end with '-' or '.' \n (?!^.+(\\.-|-\\.).+$) # levels don't start/end with '-' \n (?:[a-z\\d-] # uses only allowed chars \n {1,63}(\\.|$)) # max. level length 63 chars \n {2,127} # max. 127 levels \n ''', domain, re . X | re . I)\n",
  "55807f415ff687ecac00005f": "from itertools import groupby\r\n\r\n\r\ndef squash(c):\r\n    try:\r\n        return sum(float(v) for v in c)\r\n    except:\r\n        return '-'\r\n\r\n    def squish(idx, k, g):\r\n    return [k if i == idx else squash(r) for i, r in enumerate(zip(* g))]\r\n    def pivot(table, idx):\r\n    def key(r): return r[idx]\r\n    return [squish(idx, * g) for g in groupby(sorted(table, key=key), key)]\r\n",
  "58a3b7185973c23795000049": "def DPC_sequence(s):\r\n    from math import lcm, gcd\r\n    from functools import reduce\r\n    d, p, c = [], [], []\r\n    dpc, h = [d, p, c], {\"D\": 0, \"P\": 1, \"C\": 2}\r\n    for i, e in enumerate(s):\r\n        dpc[h[e]]. append(i + 1)\r\n    n = reduce(lcm, d, 1)\r\n    return - 1 if any(gcd(m, n) != 1 for m in p) or any(gcd(m, n) == 1 or n % m == 0 for m in c) else n\r\n",
  "584dee06fe9c9aef810001e8": "GREEN = [0, 1]\np, f, s = 1, 5, 6\n\n\ndef green(n):\n    global p, f, s\n    while n >= len(GREEN):\n    q = 10 * p\n    # f, s = f**2 % q, (1 - (s-1)**2) % q\n    f, s = pow(f, 2, q), 2 * s - pow(s, 2, q)\n    if s < 0:\n        s += q\n    GREEN . extend(sorted(n for n in (f, s) if n > p))\n    p = q\n    return GREEN[n]\n",
  "553e0c3c8b8c2e1745000005": "def show_relationship(male, female):\r\n    dct = {1: 'Friendship', 2: 'Love', 3: 'Affection',\r\n           4: 'Marriage', 5: 'Enemies', 6: 'Siblings'}\r\n    common_letters = set(male) & set(female)\r\n    m = sum(1 for c in male if c not in common_letters)\r\n    fm = sum(1 for c in female if c not in common_letters)\r\n    return dct . get((m + fm) % 6, 'Siblings')\r\n",
  "536c6b8749aa8b3c2600029a": "def sort_string(s, ordering):\r\n    answer = ''\r\n    for o in ordering:\r\n    answer += o * s . count(o)\r\n    s = s . replace(o, '')\r\n    return answer + s\r\n",
  "57507369b0b6d1b5a60001b3": "def decompose_single_strand(dna):\r\n    return '\\n' . join('Frame {}: {}' . format(k + 1, frame(dna, k)) for k in range(3))\r\n\r\n    def frame(s, k):\r\n    return ' ' . join(([s[: k]] if k else []) + [s[i: i + 3] for i in range(k, len(s), 3)])\r\n",
  "5469e0798a3502f4a90005c9": "from collections import deque\ndef rotate(data, n):\n    data = deque(data)\n    data.rotate(n) \n    return list(data)",
  "59affdeb7d3c9de7ca0000ec": "def func(l):\r\n    n = sum(l) / / len(l)\r\n    return [n] + [format(n, f) for f in \"box\"]\r\n",
  "546dbd81018e956b51000077": "def add(a): return lambda b: lambda f: lambda x: a(f)(b(f)(x))\r\n\r\n\r\ndef mul(a): return lambda b: lambda f: a(b(f))\r\ndef pow(a): return lambda b: b(a)\r\n",
  "54f5f22a00ecc4184c000034": "from fractions import Fraction\n\n\ndef expand(x, digit):\n    step = 0\n    fact = 1\n    expo = Fraction(1)\n    n = 10 * * len(str(x). split('.')[- 1])\n    x = Fraction(int(x * n), n)\n    while expo . numerator < 10 * * (digit - 1):\n    step += 1\n    fact *= step\n    expo += x * * step / fact\n    return [expo . numerator, expo . denominator]\n",
  "59b139d69c56e8939700009d": "def get_exponent(n, p):\r\n    if p > 1:\r\n    x = 0\r\n    while not n % p:\r\n    x += 1\r\n    n / /= p\r\n    return x\r\n",
  "59b06d83cf33953dbb000010": "def is_centered(arr, n):\r\n    l = int(len(arr) / 2) if len(arr) % 2 == 0 else int((len(arr) - 1) / 2)\r\n    return any(sum(arr[i: - i]) == n for i in range(1, l + 1)) or sum(arr) == n\r\n",
  "589b137753a9a4ab5700009a": "def sum_to_infinity(sequence):\r\n    return round(sequence[0] / (1 - (sequence[1] / sequence[0])), 3) if abs(sequence[1] / sequence[0]) < 1 else \"No Solutions\"\r\n",
  "5683838837b2d1db32000021": "def something_acci(num_digits):\r\n    a, b, c, d, e, f = 1, 1, 2, 2, 3, 3\r\n    count = 6\r\n    while True:\r\n    sf = str(f)\r\n    if len(sf) >= num_digits:\r\n    return (count, len(sf))\r\n    a, b, c, d, e, f = b, c, d, e, f, d * e * f - a * b * c\r\n    count += 1\r\n",
  "59b0a6da44a4b7080300008a": "def to24hourtime(hour, minute, period):\r\n    return '%02d%02d' % (hour % 12 + 12 * (period == 'pm'), minute)\r\n",
  "59b0ab12cf3395ef68000081": "from datetime import datetime\n\n\ndef to12hourtime(t):\n    return datetime . strptime(t, '%H%M'). strftime('%I:%M %p'). lstrip('0'). lower()\n",
  "59b0b7cd2a00d219ab0000c5": "def spinning_rings(inner_max, outer_max):\r\n    inner = inner_max\r\n    outer = 1\r\n    moves = 1\r\n    while inner != outer:\r\n    if outer > inner_max:\r\n    jump = outer_max + 1 - outer\r\n    elif inner > outer_max:\r\n    jump = inner - outer_max\r\n    elif inner > outer:\r\n    jump = (inner - outer + 1) / / 2\r\n    elif inner == (outer_max + 1 - outer):\r\n    jump = inner\r\n    else:\r\n    jump = min(inner + 1, outer_max + 1 - outer)\r\n    outer = (outer + jump) % (outer_max + 1)\r\n    inner = (inner - jump) % (inner_max + 1)\r\n    moves += jump\r\n    return moves\r\n",
  "59b0492f7d3c9d7d4a0000bd": "def is_madhav_array(arr):\n    nTerms = ((1 + 8 * len(arr)) * * .5 - 1) / 2\n    return (len(arr) > 1 and not nTerms % 1 and\n            len({sum(arr[int(i * (i + 1) / / 2): int(i * (i + 1) / / 2) + i + 1]) for i in range(int(nTerms))}) == 1)\n",
  "59afff65f1c8274f270020f5": "from itertools import count\n\n\ndef spinning_rings(inner_max, outer_max):\n    return next(i for i in count(1) if i % (outer_max + 1) == - i % (inner_max + 1))\n",
  "59ad13d5589d2a1d84000020": "def reverse_fizz_buzz(array):\r\n    fizz = array . index(\r\n        \"Fizz\") if \"Fizz\" in array else array . index(\"FizzBuzz\")\r\n    buzz = array . index(\r\n        \"Buzz\") if \"Buzz\" in array else array . index(\"FizzBuzz\")\r\n    return (fizz + 1, buzz + 1)\r\n",
  "59922d2ab14298db2b00003a": "def three_amigos(numbers):\r\n    return min(\r\n        ([a, b, c] for a, b, c in zip(numbers, numbers[1:],\r\n         numbers[2:]) if a & 1 == b & 1 == c & 1),\r\n        key=lambda triple: max(triple) - min(triple),\r\n        default=[])\r\n",
  "59ad7d2e07157af687000070": "def sentencify(words):\r\n    res = ' ' . join(words) + '.'\r\n    return res[0]. upper() + res[1:]\r\n",
  "543e8390386034b63b001f31": "def get_char_count(s):\r\n    counts = {}\r\n    for c in (c . lower() for c in s if c . isalnum()):\r\n    counts[c] = counts[c] + 1 if c in counts else 1\r\n    m = {}\r\n    for k, v in counts . items():\r\n    m[v] = sorted(m[v] + [k]) if v in m else [k]\r\n    return m\r\n",
  "56e60e54517a8c167e00154d": "l = {'one': 5, 'two': 4, 'three': 3, 'four': 2, 'five': 1, 'six': 0}\r\ny = {'hhh': '----o----', 'hht': '---- ----',\r\n     'htt': '---------', 'ttt': '----x----'}\r\n\r\n\r\ndef oracle(arr):\r\n    s = [''] * 6\r\n    for x in arr:\r\n        s[l[x[0]]] = y['' . join(sorted(x[1:]))]\r\n    return '\\n' . join(s)\r\n",
  "544483c6435206617a00012c": "from collections import defaultdict\n\n\ndef factorise(x):\n    factors = defaultdict(int)\n    f = 2\n    while f * f <= x:\n    while x % f == 0:\n    factors[f] += 1\n    x / /= f\n    f += 2 if f != 2 else 1\n    if x > 1:\n    factors[x] += 1\n    return factors\n\n    def trailing_zeros(number, base):\n        # every time a number is powered up by base, a zero is added\n        # e.g. base 4: 10 = 4(dec), 100 = 16(dec), 1000 = 64(dec)\n        # 6! = 6*5*4*3*2*1 = 2*3*5*4*3*2*1 = 5*4*4*3*3 = powered up by 4 twice => 2 zeroes\n        # technique in counting how many 2s:\n        # multiple of 2 contributes one 2\n        # multiple of 4 contributes additional 2\n        # multiple of 8 contributes additional 2 etc\n        # e.g. 17!: 17//2 + 17//4 + 17//8 + 17//16 = 8 + 4 + 2 + 1 = 15\n        # then divide 15 by number of 2s required by each base power-up\n    basefactors = factorise(base)\n    answer = float(\"inf\")\n    for bf in basefactors:\n    bfx = bf\n    temp = 0\n    while number >= bfx:\n    temp += number / / bfx\n    bfx *= bf\n    answer = min(answer, temp / / basefactors[bf])\n    return answer\n",
  "59ac15a0570190481d000049": "def calc_rot_time(box):\r\n    def neighbours(z): return {z + 1j * * d for d in range(4)}\r\n    time, fresh, rotten = 0, set(), set()\r\n    for x, row in enumerate(box):\r\n    for y, orange in enumerate(row):\r\n    if orange == 1:\r\n        fresh . add(x + 1j * y)\r\n    if orange == 2:\r\n        rotten . add(x + 1j * y)\r\n    while fresh and rotten:\r\n    time += 1\r\n    rotten . update(* map(neighbours, rotten))\r\n    rotten &= fresh\r\n    fresh -= rotten\r\n    return - 1 if fresh else time\r\n",
  "56af6e4198909ab73200013f": "from gmpy2 import is_prime\n\n\ndef valid_mersenne(n):\n    return is_prime(2 * * n - 1)\n",
  "5983cba828b2f1fd55000114": "def odd_one(arr):\r\n    return next((i for i, v in enumerate(arr) if v & 1), - 1)\r\n",
  "5235c913397cbf2508000048": "OPS = '+-*/'\r\n\r\n\r\nclass Calculator:\r\n    def evaluate(self, s):\r\n    ''' \r\n Evaluate an expression. \r\n \r\n Converts the expression to reverse polish notation \r\n using the shunting yard algorithm, evaluating each operator \r\n as it is produced. \r\n '''\r\n    nums = []\r\n    ops, precs = [], []\r\n\r\n    for token in s . split():\r\n    if token[0]. isdigit() or token[0] == '.':\r\n    nums . append(float(token))\r\n    elif token == '(':\r\n        # special case, no need to add precedence\r\n    ops . append('(')\r\n    elif token == ')':\r\n    while ops[- 1] != '(':\r\n    precs . pop()\r\n    self . _evaluate_op(nums, ops . pop())\r\n    ops . pop()\r\n    elif token in OPS:\r\n        # sneaky integer division\r\n    prec = OPS . index(token) / / 2\r\n    while ops and ops[- 1] != '(' and precs[- 1] >= prec:\r\n    precs . pop()\r\n    self . _evaluate_op(nums, ops . pop())\r\n    ops . append(token)\r\n    precs . append(prec)\r\n\r\n    for op in reversed(ops):\r\n    self . _evaluate_op(nums, op)\r\n\r\n    return nums[0]\r\n\r\n    def _evaluate_op(self, nums, op):\r\n    b, a = nums . pop(), nums . pop()\r\n    if op == '+':\r\n    nums . append(a + b)\r\n    elif op == '-':\r\n    nums . append(a - b)\r\n    elif op == '*':\r\n    nums . append(a * b)\r\n    else:\r\n    nums . append(a / b)\r\n",
  "59ab0ca4243eae9fec000088": "from bisect import bisect\r\n\r\n\r\ndef sieve(n):\r\n    sieve, primes = [0] * (n + 1), []\r\n    for i in range(2, n + 1):\r\n    if not sieve[i]:\r\n    primes . append(i)\r\n    for j in range(i * * 2, n + 1, i):\r\n        sieve[j] = 1\r\n    return primes\r\n    PRIMES = sieve(1000000)\r\n\r\n    def summationOfPrimes(n):\r\n    return sum(PRIMES[: bisect(PRIMES, n)])\r\n",
  "58a5aeb893b79949eb0000f1": "def shared_bits(a, b):\r\n    return bin(a & b). count('1') > 1\r\n",
  "59aa2cccd0a5ffdfa000005b": "def global_estimate(estimates):\r\n    x, y = map(sum, zip(* estimates))\r\n    return (x, (x + y) / 2, y)\r\n",
  "556c04c72ee1147ff20000c9": "def valid(a):\r\n    d = {}\r\n    day_length = len(a[0])\r\n    group_size = len(a[0][0])\r\n    golfers = {g for p in a[0] for g in p}\r\n\r\n    for day in a:\r\n    if len(day) != day_length:\r\n        return False\r\n    for group in day:\r\n    if len(group) != group_size:\r\n        return False\r\n    for player in group:\r\n    if player not in golfers:\r\n        return False\r\n    if player not in d:\r\n    d[player] = set(group)\r\n    else:\r\n    if len(d[player] & set(group)) > 1:\r\n        return False\r\n    else:\r\n        d[player]. add(group)\r\n    return True\r\n",
  "56f1b3c94d0c330e4a000e95": "from fractions import gcd\r\n\r\n\r\ndef min_special_mult(arr):\r\n    try:\r\n    arr = [abs(int(x)) for x in arr if x is not None]\r\n    return reduce(lambda x, y: x * y / gcd(x, y), arr)\r\n    except ValueError:\r\n    invalids = [x for x in arr if isinstance(x, str) and not x . isdigit()]\r\n    if len(invalids) == 1:\r\n    return \"There is 1 invalid entry: {}\" . format(invalids[0])\r\n    else:\r\n    return \"There are {} invalid entries: {}\" . format(len(invalids), invalids)\r\n",
  "56055244356dc5c45c00001e": "def parse(values, criteria):\r\n    if type(criteria) in [int, float] or (type(criteria) is str and criteria[0] not in \"<>\"):\r\n    return [item for item in values if item == criteria]\r\n\r\n    rel = criteria . translate(None, \"0123456789.\")\r\n    limit = float(criteria . translate(None, \"<>=\"))\r\n\r\n    if rel == \"<>\":\r\n    return [item for item in values if item < > limit]\r\n    elif rel == \"<=\":\r\n    return [item for item in values if item <= limit]\r\n    elif rel == \">=\":\r\n    return [item for item in values if item >= limit]\r\n    elif rel == \"<\":\r\n    return [item for item in values if item < limit]\r\n    elif rel == \">\":\r\n    return [item for item in values if item > limit]\r\n\r\n    def count_if(values, criteria):\r\n    return len(parse(values, criteria))\r\n\r\n    def sum_if(values, criteria):\r\n    return sum(parse(values, criteria))\r\n\r\n    def average_if(values, criteria):\r\n    return sum(parse(values, criteria)) * 1.0 / len(parse(values, criteria))\r\n",
  "56d060d90f9408fb3b000b03": "import re\nmy_regexp = (r'(?P<sign>[+\\-]?)'\n             r'(?P<coeff>\\d*)'\n             r'x'\n             r'(?:\\^(?P<exp>\\d+))?')\n\n\ndef as_int(s): return int(s) if s else 1\n\n\ndef derivative(eq):\n    result = ''\n    for monom in re . finditer(my_regexp, eq):\n    sign, coeff, exp = monom . groups()\n    coeff, exp = map(as_int, (coeff, exp))\n    coeff *= exp\n    exp -= 1\n    result += ('{sign}{coeff}' if exp == 0 else\n               '{sign}{coeff}x' if exp == 1 else\n               '{sign}{coeff}x^{exp}'\n               ). format(sign=sign, coeff=coeff, exp=exp)\n    return result if result else '0'\n",
  "55722d67355421ab510001ac": "from collections import deque\r\n\r\n\r\ndef loose_change(coins_list, amount_of_change):\r\n    q = deque([(0, amount_of_change)])\r\n\r\n    while q:\r\n    l, a = q . popleft()\r\n    if a == 0:\r\n    return l\r\n    q . extend((l + 1, a - i) for i in coins_list if a >= i)\r\n",
  "59a9919107157a45220000e1": "def find_all(array, n):\r\n    return [index for index, item in enumerate(array) if item == n]\r\n",
  "55b2d9bd2d3e974dfb000030": "def Guess_it(n, m):\r\n    result = []\r\n    for x in range(0, n + 1):\r\n    b, r, g = 4 * n + x - m, m - 3 * n - 2 * x, x\r\n    if all(y >= 0 for y in (b, r, g)):\r\n    result . append([g, r, b])\r\n    return result\r\n",
  "5838b5eb1adeb6b7220000f5": "def id_best_users(* args):\r\n    from collections import Counter\r\n    sum_counts = Counter(sum(args, []))\r\n\r\n    common_set = set . intersection(* (set(arg) for arg in args))\r\n\r\n    common_users = [user for user, _ in sum_counts . most_common()\r\n                    if user in common_set]\r\n\r\n    from itertools import groupby\r\n    return [[count, sorted(users)] for count, users in\r\n            groupby(common_users, sum_counts . get)]\r\n",
  "56ef9790740d30a7ff000199": "class Node:\r\n    def __init__(self, data, child_nodes=None):\r\n    self . data = data\r\n    self . child_nodes = [] if child_nodes is None else child_nodes\r\n    def tree_to_list(tree_root):\r\n    queue = []\r\n    result = []\r\n\r\n    if tree_root:\r\n    queue . append(tree_root)\r\n    result . append(tree_root . data)\r\n\r\n    while len(queue) != 0:\r\n    tree = queue . pop(0)\r\n\r\n    for child in tree . child_nodes:\r\n    queue . append(child)\r\n    result . append(child . data)\r\n\r\n    return result\r\n",
  "53fe3578d5679bf04900093f": "def rotate_in_place(matrix):\r\n    for r, row in enumerate(zip(* matrix)):\r\n    matrix[r] = list(reversed(row))\r\n    return matrix\r\n",
  "572cc218aedd20cc83000679": "def flatten(dictionary):\r\n    result = {}\r\n    for k, v in dictionary . items():\r\n    if v == {}:\r\n    result[k] = \"\"\r\n    elif isinstance(v, dict):\r\n    for l, w in flatten(v). items():\r\n    result[k + '/' + l] = w\r\n    else:\r\n    result[k] = v\r\n    return result\r\n",
  "59a96d71dbe3b06c0200009c": "def generateShape(integer):\r\n    return '\\n' . join('+' * integer for i in range(integer))\r\n",
  "5708e3f53f100874b60015ff": "def bracket_pairs(string):\r\n    brackets = {}\r\n    open_brackets = []\r\n\r\n    for i, c in enumerate(string):\r\n    if c == '(':\r\n    open_brackets . append(i)\r\n    elif c == ')':\r\n    if not open_brackets:\r\n    return False\r\n    brackets[open_brackets . pop()] = i\r\n    return False if open_brackets else brackets\r\n",
  "56b3b27cadd4ad275500000c": "from re import compile, finditer\r\nOMIT = {'a', 'the', 'on', 'at', 'of', 'upon', 'in', 'as'}\r\nREGEX = compile(r'[a-z]+')\r\n\r\n\r\ndef word_count(s):\r\n    return sum(a . group() not in OMIT for a in finditer(REGEX, s . lower()))\r\n",
  "570f1c56cd0531d88e000832": "def fibfusc(n, num_digits=None):\r\n    if n < 2:\r\n        return (1 - n, n)\r\n    b = bin(n)[2:]\r\n\r\n    x, y = fibfusc(int(b[0]))\r\n    for bit in b[1:]:\r\n    if bit == \"1\":\r\n    x, y = (- y * (2 * x + 3 * y), (x + 2 * y) * (x + 4 * y))\r\n    else:\r\n    x, y = ((x + y) * (x - y), y * (2 * x + 3 * y))\r\n    if num_digits:\r\n    x, y = x % 10 * * num_digits - 10 * * num_digits, y % 10 * * num_digits\r\n    return x, y\r\n",
  "570f147ccd0531d55d000788": "from gmpy2 import fib\n\n\ndef fibfusc(n):\n    return - fib(n * 2 - 2) if n else 1, fib(n * 2)\n",
  "5818d00a559ff57a2f000082": "class Pell (object):\r\n    @ staticmethod\r\n    def get(n):\r\n    x, y = 0, 1\r\n    for i in range(n):\r\n    x, y = y, x + 2 * y\r\n    return x\r\n",
  "58a0f18091e53d2ad1000039": "from distutils . version import LooseVersion\n\n\ndef sort_ranks(ranks):\n    return sorted(ranks, key=LooseVersion)\n",
  "59a9466f589d2af4c50001d8": "ls = ['11', '13', '17', '19', '23', '29', '31', '37', '41', '43',\r\n      '47', '53', '59', '61', '67', '71', '73', '79', '83', '89', '97']\r\n\r\n\r\ndef solve(a, b):\r\n    i = a\r\n    s = 0\r\n    while i < b:\r\n    if (i * i - i) % 100 == 0 and str(i)[: 2] in ls and str(i * i)[: 2] in ls:\r\n    s += 1\r\n    i += 1\r\n    return s\r\n",
  "5848947d59fdc010fe00023e": "def is_leap(y): return y % 4 == 0 and y % 100 != 0 or y % 400 == 0\n",
  "599febdc3f64cd21d8000117": "NUM = [\"zero\", \"one\", \"two\", \"three\", \"four\",\r\n       \"five\", \"six\", \"seven\", \"eight\", \"nine\"]\r\n\r\n\r\ndef numbers_of_letters(n):\r\n    s = '' . join(NUM[i] for i in map(int, str(n)))\r\n    return [s] + (numbers_of_letters(len(s)) if len(s) != n else [])\r\n",
  "587ac5616d360f6bed000088": "class Grid ():\r\n    def __init__(self, width, height):\r\n    self . cols = width\r\n    self . rows = height\r\n    self . body = [['0' for y in range(width)] for x in range(height)]\r\n\r\n    def plot_point(self, x, y):\r\n    self . body[y - 1][x - 1] = 'X'\r\n    def __repr__(self):\r\n    return \"\" . join([\"{}\\n\" . format(\"\" . join(self . body[r])) for r in range(self . rows)])[: - 1]\r\n\r\n    @ property\r\n    def grid(self):\r\n    return self . __repr__()\r\n",
  "596570c424ae4501f700003d": "from collections import defaultdict\r\n\r\n\r\ndef find_similar_dogs(breed):\r\n    simil = defaultdict(set)\r\n    for dog, v in dogs . items():\r\n    if dog != breed:\r\n    simil[len(v & dogs[breed])]. add(dog)\r\n    return simil[max(simil)]\r\n",
  "5301329926d12b90cc000908": "def cumulative_triangle(n):\r\n    return n * (n * n + 1) / 2\r\n",
  "586f5808aa04285bc800009d": "from collections import Counter\r\n\r\n\r\ndef modes(data):\r\n    cnts = Counter(data)\r\n    mx, mn = max(cnts . values()), min(cnts . values())\r\n    return sorted([k for k in cnts if cnts[k] == mx and cnts[k] != mn])\r\n",
  "56dc4f570a10feaf0a000850": "def morse_converter(s):\r\n    it = ['-----', '.----', '..---', '...--', '....-',\r\n          '.....', '-....', '--...', '---..', '----.']\r\n    return int('' . join(str(it . index(s[i: i + 5])) for i in range(0, len(s), 5)))\r\n",
  "53574972e727385ad10002ca": "def spoken(greeting): return greeting . title() + '.'\n\n\ndef shouted(greeting): return greeting . upper() + '!'\n\n\ndef whispered(greeting): return greeting . lower() + '.'\ndef greet(style, msg): return style(msg)\n",
  "57c0484849324c4174000b18": "from math import pi\n\n\ndef whatpimeans(alpha='abcdefghijklmnopqrstuvwxyz'):\n    # Create a dictionnary linking alphabet to 'secret encryption'\n    # dico = {85:'a', 24:'b',32:'c', [...],10:'z'}\n    dico = dict(zip([85, 24, 32, 64, 11, 52, 91, 79, 78, 99, 62, 27, 74, 35, 14,\n                     16, 66, 81, 19, 39, 13, 33, 45, 49, 95, 10], alpha . upper()))\n\n    # Take the number PI as string, reverse the string and prepare it for decoding\n    crypt = str(pi). replace('.', '')[:: - 1]\n    # Group 2 by 2 to form a list\n    code = [int(crypt[i: i + 2]) for i in range(0, len(crypt), 2)]\n    # Take the modified string and try to decode\n    return '' . join(dico[binom] for binom in code)  # hopefully...\n",
  "54b45c37041df0caf800020f": "from fractions import gcd\n\n\ndef binary_gcd(x, y):\n    return bin(gcd(x, y)). count('1')\n",
  "58439be66f5fc42e30000076": "def letter_pattern(words):\r\n    return '' . join(e[0] if len(set(e)) == 1 else '*' for e in zip(* words))\r\n",
  "57d307fb9d84633c5100007a": "def range_parser(string):\r\n    res = []\r\n    for range_ in string . split(','):\r\n    first_last, _, step = range_ . partition(':')\r\n    first, _, last = first_last . partition('-')\r\n    res += range(int(first), int(last or first) + 1, int(step or 1))\r\n    return res\r\n",
  "53cce49fdf221844de0004bd": "def addsup(a1, a2, a3):\r\n    return [[x, y, x + y] for x in a1 for y in a2 if x + y in a3]\r\n",
  "58a9cff7ae929e4ad1000050": "def get_honor(username):\r\n    import requests\r\n    r = requests . get(\r\n        'https://www.codewars.com/api/v1/users/' + username). json()['honor']\r\n    return r\r\n",
  "5705c699cb729350870003b7": "from operator import sub, mul\nfrom functools import reduce\n\n\ndef string_color(string):\n    if len(string) < 2:\n    return None\n    r = sum(map(ord, list(string))) % 256\n    g = reduce(mul, map(ord, list(string))) % 256\n    b = abs(reduce(sub, map(ord, list(string)))) % 256\n    return '{:02X}{:02X}{:02X}' . format(r, g, b)\n",
  "55f2afa960aeea545a000049": "from statistics import pvariance\n\n\ndef variance(words):\n    return round(pvariance(map(len, words)), 4)\n",
  "57197be09906af7c830016de": "def denumerate(enum_list):\r\n    try:\r\n    nums = dict(enum_list)\r\n    maximum = max(nums) + 1\r\n    result = '' . join(nums[a] for a in xrange(maximum))\r\n    if result . isalnum() and len(result) == maximum:\r\n    return result\r\n    except (KeyError, TypeError, ValueError):\r\n    pass\r\n    return False\r\n",
  "546937989c0b6ab3c5000183": "from string import maketrans as mt, ascii_lowercase as lc, ascii_uppercase as uc\n\n\ndef encryptor(key, message):\n    key %= 26\n    return message . translate(mt(lc + uc, lc[key:] + lc[: key] + uc[key:] + uc[: key]))\n",
  "588b72fcd0c108ef8f00009d": "import re\r\nBASE = [['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'],\r\n        ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L', ';', \"'\"],\r\n        ['Z', 'X', 'C', 'V', 'B', 'N', 'M', ',', '.', '?'],\r\n        ['', '', ' ', ' ', ' ', ' ', ' ', '', '', '']]\r\n\r\nKEYBOARD = {(x, y): BASE[y][x]. lower()\r\n            for y in range(len(BASE)) for x in range(len(BASE[y]))}\r\n\r\n\r\ndef key_strokes(lst): return re . sub(r'\\bi\\b|^\\w|[.?]\\W*\\w', lambda m: m . group(\r\n    0). upper(), '' . join(KEYBOARD . get(tup, '') for tup in lst))\r\n",
  "56cf0eb69e14db4897000b97": "from functools import lru_cache\r\nfrom gmpy2 import next_prime, is_prime\r\nnext_p = lru_cache(maxsize=None)(next_prime)\r\nis_p = lru_cache(maxsize=None)(is_prime)\r\n\r\n\r\ndef goldbach(even_number):\r\n    result, p, mid = [], 2, even_number >> 1\r\n    while p <= mid:\r\n    x = even_number - p\r\n    if is_p(x):\r\n    result . append([p, x])\r\n    p = next_p(p)\r\n    return result\r\n",
  "5567e7d0adb11174c50000a7": "# pass in the linked list\n# to access the head of the linked list\n# linked_list.head\ndef search_k_from_end(linked_list, k):\n    head = linked_list . head\n    vals = []\n    while head:\n    vals . append(head . data)\n    head = head . next\n    return vals[- k] if k <= len(vals) else None\n",
  "5498505a43e0fd83620010a9": "def vector_affinity(a, b):\r\n    longer = len(a) if len(a) > len(b) else len(b)\r\n    return len([i for i, j in zip(a, b) if i == j]) / float(longer) if longer > 0 else 1.0\r\n",
  "5676ffaa8da527f234000025": "from itertools import permutations\r\n\r\n\r\ndef sc_perm_comb(num):\r\n    sNum = str(num)\r\n    return sum({int('' . join(p)) for d in range(1, len(sNum) + 1) for p in permutations(sNum, d)})\r\n",
  "59a8dc83ba7b60426b000059": "from functools import partial, reduce\r\nfrom operator import eq, mul\r\n\r\n\r\ndef vector_op(f, * vs):\r\n    return list(map(f, zip(* vs)))\r\n\r\n    iter_mult = partial(reduce, mul)\r\n    iter_eq = partial(reduce, eq)\r\n",
  "583fe48ca20cfc3a230009a1": "from itertools import groupby\r\n\r\n\r\ndef group_ints(lst, key=0):\r\n    return [list(g) for _, g in groupby(lst, lambda a: a < key)]\r\n\r\n    # PEP8: function name should use snake_case\r\n    groupInts = group_ints\r\n",
  "540d0fdd3b6532e5c3000b5b": "import re\r\nP = re . compile(r'\\((-?\\d*)(\\w)\\+?(-?\\d+)\\)\\^(\\d+)')\r\n\r\n\r\ndef expand(expr):\r\n    a, v, b, e = P . findall(expr)[0]\r\n\r\n    if e == '0':\r\n        return '1'\r\n    o = [int(a != '-' and a or a and '-1' or '1'), int(b)]\r\n    e, p = int(e), o[:]\r\n\r\n    for _ in range(e - 1):\r\n    p . append(0)\r\n    p = [o[0] * coef + p[i - 1] * o[1] for i, coef in enumerate(p)]\r\n\r\n    res = '+' . join(f' { coef }{ v } ^ { e - i } ' if i !=\r\n                     e else str(coef) for i, coef in enumerate(p) if coef)\r\n\r\n    return re . sub(r'\\b1(?=[a-z])|\\^1\\b', '', res). replace('+-', '-')\r\n",
  "59a818191c55c44f3900053f": "def true_binary(n):\r\n    return [- 1 if x == '0' else 1 for x in bin(n)[1: - 1]]\r\n",
  "599385ae6ca73b71b8000038": "def ant_bridge(ants, terrain):\r\n    n_ants = len(ants)\r\n\r\n    terrain = terrain . replace('-.', '..')\r\n    terrain = terrain . replace('.-', '..')\r\n\r\n    count = terrain . count('.') % n_ants\r\n    return ants[- count:] + ants[: - count]\r\n",
  "59922ce23bfe2c10d7000057": "def fire_and_fury(tweet):\r\n    if not all(c in 'EFIRUY' for c in tweet):\r\n        return 'Fake tweet.'\r\n    s = [0]\r\n    for i in range(0, len(tweet) - 3):\r\n    if tweet[i: i + 4] == 'FIRE':\r\n    if s[- 1] > 0:\r\n        s[- 1] += 1\r\n    else:\r\n        s . append(1)\r\n    elif tweet[i: i + 4] == 'FURY':\r\n    if s[- 1] < 0:\r\n        s[- 1] -= 1\r\n    else:\r\n        s . append(- 1)\r\n    return 'Fake tweet.' if len(s) == 1 else ' ' . join(['You' + ' and you' * (s[i] - 1) + ' are fired!' if s[i] > 0 else 'I am' + ' really' * (- s[i] - 1) + ' furious.' for i in range(1, len(s))])\r\n",
  "5913152be0b295cf99000001": "from math import log\n\n\ndef divisions(n, divisor):\n    return int(log(n, divisor))\n",
  "59a602dc57019008d900004e": "def transform(s):\r\n    return '' . join(map(str, s))\r\n",
  "53f9a36864b19d8be7000609": "def series_slices(digits, n):\r\n    if n > len(digits):\r\n    raise ValueError\r\n    else:\r\n    return [[int(digit) for digit in digits[i: i + n]] for i in range(0, len(digits) - n + 1)]\r\n",
  "5816f2580e80c5e075000a4f": "from fractions import Fraction\n\n\ndef add_fracs(* args):\n    return str(sum(Fraction(a) for a in args)) if args else ''\n",
  "591748b3f014a2593d0000d9": "from functools import reduce\r\n\r\n\r\nclass Datamining:\r\n\r\n    def __init__(self, train_set):\r\n    self . p = train_set[: 5]\r\n\r\n    def lagrange_interp(self, x):\r\n    return sum(reduce(lambda p, n: p * n, [(x - xi) / (xj - xi) for (i, (xi, yi)) in enumerate(self . p) if j != i], yj) for (j, (xj, yj)) in enumerate(self . p))\r\n\r\n    def predict(self, x):\r\n    return self . lagrange_interp(x)\r\n",
  "57e2afb6e108c01da000026e": "NUMBERS = 'Zero One Two Three Four Five Six Seven Eight Nine Ten' . split()\r\n\r\n\r\ndef expression_out(exp):\r\n    x, op, y = exp . split()\r\n    x, y = NUMBERS[int(x)], NUMBERS[int(y)]\r\n    op = OPERATORS . get(op, \"That's not an operator!\")\r\n    return '%s %s%s' % (x, op, y) if op[- 1] != '!' else op\r\n",
  "58f89357d13bab79dc000208": "from statistics import variance, mean\r\n\r\n\r\nclass Datamining:\r\n    def __init__(self, train_set):\r\n        # This is a simple linear regression model.\r\n        # Notice we're computing the covariance but from Python 3.10\r\n        # the statistics module includes a function for that.\r\n    avg_x = mean(x for x, _ in train_set)\r\n    avg_y = mean(y for _, y in train_set)\r\n    cov = sum((x - avg_x) * (y - avg_y)\r\n              for x, y in train_set) / (len(train_set) - 1)\r\n    self . b1 = cov / variance(x for x, _ in train_set)\r\n    self . b0 = avg_y - self . b1 * avg_x\r\n    def predict(self, x):\r\n    return self . b0 + self . b1 * x\r\n",
  "555c7fa8d8cb57834a000028": "class StatisticalSummary (object):\r\n    def __init__(self, seq):\r\n    self . seq = list(seq)\r\n    for i in reversed(range(len(self . seq))):\r\n    if not isinstance(self . seq[i], (int, float, complex)) or isinstance(self . seq[i], bool):\r\n    self . seq . pop(i)  # Discard every value that is not a number\r\n    self . seq . sort()  # Sort by value\r\n    def __len__(self):  # Follow dunder standard\r\n    return len(self . seq)\r\n\r\n    def median(self):\r\n    if len(self . seq) % 2 == 0:\r\n    return (self . seq[int(len(self . seq) / 2)] + self . seq[int(len(self . seq) / 2 - 1)]) / 2\r\n    else:\r\n    return self . seq[len(self . seq) / / 2]\r\n\r\n    def lower_quartile(self):\r\n        # -1 to adjust for lists staring with index 0\r\n    low = self . seq[(len(self) + 3) / / 4 - 1]\r\n    high = self . seq[(len(self) + 3) / / 4]\r\n    rest_fraction = (len(self) + 3) % 4 / 4\r\n    return (1 - rest_fraction) * low + rest_fraction * high\r\n\r\n    def upper_quartile(self):\r\n        # -1 to adjust for lists staring with index 0\r\n    low = self . seq[(len(self) * 3 + 1) / / 4 - 1]\r\n    high = self . seq[(len(self) * 3 + 1) / / 4]\r\n    rest_fraction = (len(self) * 3 + 1) % 4 / 4\r\n    return (1 - rest_fraction) * low + rest_fraction * high\r\n    def five_figure_summary(self, precision=None):\r\n    if precision == None:\r\n    precision = 16\r\n    self . precision = precision\r\n    return (len(self), round(self . seq[0], self . precision), round(self . seq[- 1], self . precision), round(self . lower_quartile(), self . precision), round(self . median(), self . precision), round(self . upper_quartile(), self . precision))\r\n",
  "58bf3cd9c4492d942a0000de": "def factorsRange(n, m):\r\n    res = {}\r\n\r\n    for num in range(n, m + 1):\r\n    factors = []\r\n\r\n    for div in range(2, num / / 2 + 1):\r\n    if num % div == 0:\r\n    factors . append(div)\r\n\r\n    if len(factors) == 0:\r\n    factors = ['None']\r\n\r\n    res[num] = factors\r\n    return res\r\n",
  "59476f9d7325addc860000b9": "def answer(question, information):\r\n    score, info = max((sum(word in info . lower(). split(\r\n    ) for word in question . lower(). split()), info) for info in information)\r\n    return None if not score else info\r\n",
  "5919f3bf6589022915000023": "import numpy as np\n\n\ndef rotate_against_clockwise(matrix, times):\n    return np . rot90(matrix, times). tolist()\n",
  "584cfac5bd160694640000ae": "def domino_reaction(s):\r\n    return s . replace(\"|\", \"/\", min(len(s . split(\" \")[0]), len(s . split(\"/\")[0])))\r\n",
  "58925dcb71f43f30cd00005f": "def late_clock(* a):\r\n    for h in range(23, - 1, - 1):\r\n    for m in range(59, - 1, - 1):\r\n    x = f' { h :0 2 } '\r\n    y = f' { m :0 2 } '\r\n    s = list(map(int, list(x + y)))\r\n    if sorted(s) == sorted(a):\r\n    return f' { x } : { y } '\r\n",
  "5759513c94aba6a30900094d": "def sum_prod(strexpression):\r\n    return \"%.5e\" % (eval(strexpression))\r\n",
  "5851aae410200111f70006c0": "def short(l): return __import__(\n    \"collections\"). Counter(e for m in l for e in m)\n",
  "584d05422609c8890f0000be": "from operator import mul\nfrom math import factorial\nfrom functools import reduce\nfrom collections import Counter\n\n\ndef proc_arr(arr):\n    s = '' . join(sorted(arr))\n    return [factorial(len(arr)) / / reduce(mul, map(factorial, Counter(arr). values())), int(s), int(s[:: - 1])]\n",
  "5808ff71c7cfa1c6aa00006d": "from collections import Counter\n\n\ndef letter_count(s):\n    return Counter(s)\n",
  "5864f90473bd9c4b47000057": "def connect_four_place(columns):\r\n    player, board, placed = 1, [['-'] * 7 for _ in range(6)], [- 1] * 7\r\n    for c in columns:\r\n    player ^= 1\r\n    board[placed[c]][c] = \"YR\" [player]\r\n    placed[c] -= 1\r\n    return board\r\n",
  "549c7ae26d86c7c3ed000b87": "def sum_them(n):\r\n    return 2 * * (n - 1) * (2 * * n - 1)\r\n",
  "587f0abdd8730aafd4000035": "from hashlib import sha256\r\nfrom itertools import permutations\r\n\r\n\r\ndef sha256_cracker(hash, chars):\r\n    for p in permutations(chars, len(chars)):\r\n    current = '' . join(p)\r\n    if sha256(current . encode('utf-8')). hexdigest() == hash:\r\n    return current\r\n",
  "56bdd0aec5dc03d7780010a5": "def next_higher(value):\r\n    s = f'0 { value : b } '\r\n    i = s . rfind('01')\r\n    s = s[: i] + '10' + '' . join(sorted(s[i + 2:]))\r\n    return int(s, 2)\r\n",
  "59218bf66034acb9b7000040": "from itertools import groupby\r\n\r\n\r\ndef shut_the_gate(farm):\r\n    who_eats_whom = {'H': ['A', 'V'], 'R': ['V'], 'C': []}\r\n    runaway_back, runaway_front, farm = [], [], [\r\n        \"\" . join(j) for k, j in groupby(farm)]\r\n\r\n    def doSomeFarm(i=0):\r\n    def do(j, s=False):\r\n    while (j >= 0 if s else j < len(farm)) and farm[j] != '|':\r\n    if farm[j][0] in who_eats_whom[current[0]]:\r\n        farm[j] = '.' * len(farm[j])\r\n    j += [1, - 1][s]\r\n    return j\r\n    while i < len(farm):\r\n    current = farm[i]\r\n    if current[0] in who_eats_whom:\r\n    r, r1 = do(i, 1), do(i)\r\n    if r == - 1 or r1 == len(farm):\r\n    farm[i] = '.' * len(farm[i])\r\n    [runaway_front, runaway_back][r != - 1]. append(current[0])\r\n    i += 1\r\n    doSomeFarm()\r\n    l = len(runaway_back)\r\n    if l:\r\n    if farm[0] != '|':\r\n    farm = ['/'] + \" / \" . join(runaway_back[:: - 1]). split() + farm\r\n    doSomeFarm()\r\n    farm = farm[l * 2:]\r\n    l = len(runaway_front)\r\n    if l:\r\n    if farm[- 1] != '|':\r\n    farm = farm + ['/'] + ' / ' . join(runaway_front). split()\r\n    doSomeFarm()\r\n    farm = farm[: - l * 2]\r\n    return \"\" . join(farm)\r\n",
  "59a2666349ae65ea69000051": "from collections import Counter\n\n\ndef calculate_cart_total(contents):\n    return sum(p * n for p, (_, n) in zip((10, 9, 8, 5), Counter(contents). most_common()))\n",
  "59a2af923203e8220b00008f": "def digit_sum(n):\r\n    return sum(map(int, str(n)))\r\n",
  "59a2a3ba5eb5d4e609000055": "def find_array(arr1, arr2):\r\n    return [arr1[i] for i in arr2 if i < len(arr1)]\r\n",
  "59a20f283203e8bd8c000006": "def generate_sequence(lower, upper):\r\n    return list(range(lower + 1, upper, 2)) + list(range(lower, upper, 2))\r\n",
  "59a1ea8b70e25ef8e3002992": "def describe_the_shape(n):\r\n    return \"this will be a line segment or a dot\" if n < 3 else \\\r\n        \"This shape has %s sides and each angle measures %s\" % (n, (n - 2) * 180 / / n)\r\n",
  "59a1cdde9f922b83ee00003b": "def stanton_measure(arr):\r\n    return arr . count(arr . count(1))\r\n",
  "59a1ec603203e862bb00004f": "def check_concatenated_sum(n, r):\r\n    return abs(n) == sum(int(e * r) for e in str(abs(n)) if r)\r\n",
  "5464cbfb1e0c08e9b3000b3e": "def is_happy(n):\r\n    seen = set()\r\n    while n != 1:\r\n    n = sum(int(d) * * 2 for d in str(n))\r\n    if n not in seen:\r\n        seen . add(n)\r\n    else:\r\n        return False\r\n    return True\r\n",
  "59a151c53f64cdd94c00008f": "def is_inertial(arr):\r\n    mx = max(arr, default=1)\r\n    miO = min((x for x in arr if x % 2 == 1), default=float(\"-inf\"))\r\n    miE2 = max((x for x in arr if x %\r\n               2 == 0 and x != mx), default=float(\"-inf\"))\r\n    return mx % 2 == 0 and miE2 < miO\r\n",
  "58693136b98de0e4910001ab": "from collections import Counter\nfrom string import ascii_lowercase\n\n\ndef decrypt(test_key):\n    cnt = Counter(test_key)\n    return '' . join(str(cnt[a]) for a in ascii_lowercase)\n",
  "55988922d24a02ccd0000063": "def multiply(x, y):\n    s = zero\n    while y:\n    s += y & one and x\n    y >>= one\n    x <<= one\n    return s\n",
  "57339a5226196a7f90001bcf": "def crossover(ns, xs, ys):\r\n    for i in sorted(set(ns)):\r\n    xs, ys = xs[: i] + ys[i:], ys[: i] + xs[i:]\r\n    return xs, ys\r\n",
  "53d2c97d7152a59b64001033": "import sqlite3\r\nfrom contextlib import closing\r\nwith sqlite3 . connect('/tmp/movies.db') as db:\r\n    with closing(db . cursor()) as cursor:\r\n    cursor . execute(''' \r\n CREATE TABLE MOVIES(id INTEGER PRIMARY KEY, \r\n Name TEXT unique, \r\n Year INTEGER, \r\n Rating INTEGER) \r\n ''')\r\n\r\n    movies = [(\"Rise of the Planet of the Apes\", 2011, 77),\r\n              (\"Dawn of the Planet of the Apes\", 2014, 91),\r\n              (\"Alien\", 1979, 97),\r\n              (\"Aliens\", 1986, 98),\r\n              (\"Mad Max\", 1979, 95),\r\n              (\"Mad Max 2: The Road Warrior\", 1981, 100)]\r\n\r\n    cursor . executemany(\r\n        \"INSERT INTO MOVIES(Name, Year, Rating) VALUES(?,?,?)\", movies)\r\n    db . commit()\r\n",
  "56f84d093b164c2e490013cb": "from time import time\r\nfrom functools import wraps\r\n\r\n\r\ndef timer(limit):\r\n    def dec(func):\r\n    @ wraps(func)\r\n    def time_func(* args, * * kwargs):\r\n    time_start = time()\r\n    func(* args, * * kwargs)\r\n    return time() - time_start < limit\r\n    return time_func\r\n    return dec\r\n",
  "56bc72f866a2ab1890000be0": "from itertools import product\n\n\ndef multiiter(* args):\n    return product(* map(range, args))\n",
  "58e93b4706db4d24ee000096": "def days_represented(a):\r\n    return len({i for x, y in a for i in range(x, y + 1)})\r\n",
  "5562b6de2f508f1adc000089": "def riemann_trapezoidal(f, n, a, b):\r\n    dx = (b - a) / n\r\n    return round(sum(f(a + i * dx) + f(a + (i + 1) * dx) for i in range(n)) * dx / 2, 2)\r\n",
  "53efc28911c36ff01e00012c": "import sys\r\n\r\n\r\ndef count_calls(func, * args, * * kwargs):\r\n    \"\"\"Count calls in function func\"\"\"\r\n    calls = [- 1]\r\n    def tracer(frame, event, arg):\r\n    if event == 'call':\r\n    calls[0] += 1\r\n    return tracer\r\n    sys . settrace(tracer)\r\n\r\n    rv = func(* args, * * kwargs)\r\n\r\n    return calls[0], rv\r\n",
  "55caef80d691f65cb6000040": "def geometric_sequence_elements(a, r, n):\r\n    return \", \" . join(str(a * r * * i) for i in range(n))\r\n",
  "57262ca48565846f33001365": "def reverse_list(node):\r\n    res = None\r\n    while node:\r\n    res = Node(node . value, res)\r\n    node = node . next\r\n    return res\r\n",
  "594979a364becbc1ab00003a": "class LCG (object):\r\n    def __init__(self, x):\r\n    self . _seed = x\r\n    def random(self):\r\n    self . _seed = (2 * self . _seed + 3) % 10\r\n    return self . _seed / 10\r\n",
  "599f403119afacf9f1000051": "def next_perfect_square(n):\r\n    return n >= 0 and (int(n * * 0.5) + 1) * * 2\r\n",
  "574e890e296e412a0400149c": "from itertools import permutations\r\nimport math\r\n\r\n\r\ndef equal_to_24(* aceg):\r\n    ops = '+-*/'\r\n    OPS = {\r\n        '+': lambda a, b: a + b,\r\n        '-': lambda a, b: a - b,\r\n        '*': lambda a, b: a * b,\r\n        '/': lambda a, b: a / b if b else math . inf\r\n    }\r\n\r\n    for b in ops:\r\n    for d in ops:\r\n    for f in ops:\r\n    for (a, c, e, g) in permutations(aceg):\r\n    B, D, F = OPS[b], OPS[d], OPS[f]\r\n    for (i, exp) in enumerate(make_exp(a, B, c, D, e, F, g)):\r\n    if exp == 24:\r\n    return make_string(a, b, c, d, e, f, g)[i]\r\n\r\n    return \"It's not possible!\"\r\n    def make_exp(a, b, c, d, e, f, g):\r\n    return [\r\n        f(d(b(a, c), e), g),\r\n        d(b(a, c), f(e, g)),\r\n        b(a, d(c, f(e, g))),\r\n        b(a, f(d(c, e), g)),\r\n        f(b(a, d(c, e)), g)]\r\n\r\n    def make_string(a, b, c, d, e, f, g):\r\n    return [f\"(( { a }{ b }{ c } ) { d }{ e } ) { f }{ g } \",\r\n            f\"( { a }{ b }{ c } ) { d } ( { e }{ f }{ g } )\",\r\n            f\" { a }{ b } ( { c }{ d } ( { e }{ f }{ g } ))\",\r\n            f\" { a }{ b } (( { c }{ d }{ e } ) { f }{ g } )\",\r\n            f\"( { a }{ b } ( { c }{ d }{ e } )) { f }{ g } \"]\r\n",
  "54120de842dff35232000195": "from operator import xor\r\n\r\n\r\ndef choose_move(game_state):\r\n    \"\"\"Chooses a move to play given a game state\"\"\"\r\n    x = reduce(xor, game_state)\r\n    for i, amt in enumerate(game_state):\r\n    if amt ^ x < amt:\r\n    return (i, amt - (amt ^ x))\r\n",
  "57c1f22d8fbb9fd88700009b": "def maxlen(s1, s2):\r\n    sm, lg = sorted((s1, s2))\r\n    return min(max(lg / 3, sm), lg / 2)\r\n",
  "599db0a227ca9f294b0000c8": "from statistics import mean\n\n\ndef test(r):\n    dct = {'l': 0, 'a': 0, 'h': 0}\n    for n in r:\n        dct['lah' [(n > 6) + (n > 8)]] += 1\n    return [round(mean(r), 3), dct] + ['They did well'] * (sum(dct . values()) == dct['h'])\n",
  "599c7f81ca4fa35314000140": "def count_targets(n, sequence):\r\n    return sum(a == b for a, b in zip(sequence, sequence[n:]))\r\n",
  "597c684822bc9388f600010f": "class Dinglemouse (object):\r\n    def __init__(self, first_name, last_name):\r\n    self . first_name = first_name\r\n    self . last_name = last_name\r\n    def get_full_name(self):\r\n    return (self . first_name + ' ' + self . last_name). strip()\r\n",
  "599da159a30addffd00000af": "from math import dist\n\n\ndef collision(x1, y1, radius1, x2, y2, radius2):\n    return radius1 + radius2 >= dist((x1, y1), (x2, y2))\n",
  "57db78d3b43dfab59c001abe": "def coffee_limits(year, month, day):\r\n    h = int(f' { year :0 4 }{ month :0 2 }{ day :0 2 } ')\r\n    return [limit(h, 0xcafe), limit(h, 0xdecaf)]\r\n\r\n    def limit(h, c):\r\n    for i in range(1, 5000):\r\n    h += c\r\n    if 'DEAD' in f' { h : X } ':\r\n    return i\r\n    return 0\r\n",
  "599cf86d01a4108584000064": "def length_of_railway(sounds):\r\n    sounds = sounds . replace('\u545c\u545c\u545c', 'a'). replace('\u54d0\u5f53', 'b')\r\n    result = 0\r\n    speed = 10\r\n    for sound in sounds:\r\n    if sound == 'a':\r\n    speed = 20 if speed != 20 else 10\r\n    elif sound == 'b':\r\n    result += speed\r\n    return result\r\n",
  "599bb194b7a047b04d000077": "def how_many_pizzas(n):\r\n    return 'pizzas: {}, slices: {}' . format(* divmod(n * n / / 8, 8))\r\n",
  "599c20626bd8795ce900001d": "def summy(string_of_ints):\r\n    return sum(map(int, string_of_ints . split()))\r\n",
  "599b4e682b862b8498000021": "from sys import maxunicode as mu\ndigits_not_decimals = [chr(c) for c in range(\n    mu + 1) if chr(c). isdigit() and not chr(c). isdecimal()]\nnumeric_not_digits = [chr(c) for c in range(\n    mu + 1) if chr(c). isnumeric() and not chr(c). isdigit()]\n",
  "51e056fe544cf36c410000fb": "from collections import Counter\nimport re\n\n\ndef top_3_words(text):\n    c = Counter(re . findall(\n        r\"[a-z']+\", re . sub(r\" '+ \", \" \", text . lower())))\n    return [w for w, _ in c . most_common(3)]\n",
  "546d5028ddbcbd4b8d001254": "def partitions(n, k=1, cache={}):\r\n    if k > n:\r\n        return 0\r\n    if n == k:\r\n        return 1\r\n    if (n, k) in cache:\r\n        return cache[n, k]\r\n    return cache . setdefault((n, k), partitions(n, k + 1) + partitions(n - k, k))\r\n",
  "599b1a4a3c5292b4cc0000d5": "def values(n):\r\n    pal = set()\r\n    for i in range(1, int(n * * 0.5)):\r\n    sos = i * i\r\n    while sos < n:\r\n    i += 1\r\n    sos += i * i\r\n    if str(sos) == str(sos)[:: - 1] and sos < n:\r\n    pal . add(sos)\r\n    return len(pal)\r\n",
  "584911a20d8b8f5b70000149": "dic = {\r\n    (0, 0): 'Fizz Buzz',\r\n    (0, 1): 'Fizz',\r\n    (1, 0): 'Buzz',\r\n    (1, 1): 0\r\n}\r\n\r\n\r\ndef fizz_buzz(x): return (\r\n    dic[(min(x % 3, 1), min(x % 5, 1))] or '{}' . format(x))\r\n",
  "56ff322e79989cff16000e39": "import re\r\nREGEX = re . compile(r'\\[(.*?)\\]')\r\n\r\n\r\ndef bracket_buster(strng):\r\n    try:\r\n    return REGEX . findall(strng)\r\n    except TypeError:\r\n    return 'Take a seat on the bench.'\r\n",
  "56431c04ed1454a35d00003b": "def split_workload(workload):\r\n    if not workload:\r\n        return None, None\r\n    diff = sum(workload)\r\n    best_i, best_diff = None, float('inf')\r\n\r\n    for i, work in enumerate(workload):\r\n    if abs(diff) < best_diff:\r\n    best_i, best_diff = i, abs(diff)\r\n\r\n    # For each shift in the workload\r\n    # the difference between workload changes by twice the work shifted\r\n    diff -= 2 * work\r\n    return best_i, best_diff\r\n",
  "528d36d7cc451cd7e4000339": "def most_money(students):\r\n    total = []\r\n    for student in students:\r\n    total . append((student . fives * 5) +\r\n                   (student . tens * 10) + (student . twenties * 20))\r\n\r\n    if min(total) == max(total) and len(students) > 1:\r\n    return \"all\"\r\n    else:\r\n    return students[total . index(max(total))]. name\r\n",
  "5568c4ed1597b393b6000066": "def expand(maze, fill):\n    unit = len(maze) / 2\n    brick = [fill] * unit\n    block = [4 * brick] * unit\n    return block + [brick + row + brick for row in maze] + block\n",
  "561f9d37e4786544e0000035": "def show_me(instname):\r\n    classname = instname . __class__ . __name__\r\n    attrs = \" and\" . join(\", \" . join(attr for attr in sorted(\r\n        instname . __dict__ . keys())). rsplit(\",\", 1))\r\n    return f\"Hi, I'm one of those { classname } s! Have a look at my { attrs } .\"\r\n",
  "56cca888a9d0f25985000036": "from math import lcm\n\n\ndef candies_to_buy(amount_of_kids_invited):\n    return lcm(* range(1, amount_of_kids_invited + 1))\n",
  "57be6a612eaf7cc3af000178": "def is_magical(sq):\r\n    return sum(sq[2: 7: 2]) == sum(sq[:: 4]) == sum(sq[:: 3]) == sum(sq[1:: 3]) == sum(sq[2:: 3]) == sum(sq[: 3]) == sum(sq[3: 6]) == sum(sq[6:])\r\n",
  "558f9f51e85b46e9fa000025": "def difference_of_squares(x):\r\n    r = range(1, x + 1, 1)\r\n    return (sum(r) * * 2) - (sum(z * * 2 for z in r))\r\n",
  "53cf7e37e9876c35a60002c9": "class CurryPartial:\r\n    def __init__(self, func, * args):\r\n    self . func = func\r\n    self . args = args\r\n    def __call__(self, * args):\r\n    return CurryPartial(self . func, * (self . args + args))\r\n\r\n    def __eq__(self, other):\r\n    try:\r\n    return self . func(* self . args) == other\r\n    except TypeError:\r\n    return CurryPartial(self . func, * self . args[: - 1]) == other\r\n    def curry_partial(f, * initial_args):\r\n    \"Curries and partially applies the initial arguments to the function\"\r\n    return CurryPartial(f, * initial_args)\r\n",
  "5995ff073acba5fa3a00011d": "from itertools import combinations\r\nfrom collections import defaultdict\r\n\r\n\r\ndef ulam_sequence(u0, u1, n):\r\n    seq = [u0, u1, u0 + u1]\r\n\r\n    while len(seq) < n:\r\n    candidates = defaultdict(int)\r\n\r\n    for a, b in combinations(seq, 2):\r\n    candidates[a + b] += 1\r\n    for num, pairs in sorted(candidates . items()):\r\n    if num > seq[- 1] and pairs == 1:\r\n    seq . append(num)\r\n    break\r\n    return seq\r\n",
  "59986011d85bdd7fd7000621": "seq = [1, 1]\r\nfor i in range(10 * * 4):\r\n    a, b = seq[i: i + 2]\r\n    seq . extend([a + b, b])\r\n\r\n    stern_brocot = seq . index\r\n",
  "599688d0e2800dda4e0001b0": "masks = [0] * 10\r\nfor i in range(10 * * 4):\r\n    for c in str(i):\r\n    masks[int(c)] |= 1 << i\r\n    def find_num(n):\r\n    seq, x = 1, 0\r\n    for j in range(n):\r\n    M = seq\r\n    for m in masks:\r\n    if x & m:\r\n    M |= m\r\n    x = ~ M & (M + 1)\r\n    seq |= x\r\n    return x . bit_length() - 1\r\n",
  "59974515b4c40be3cc000263": "from fractions import Fraction\r\n\r\n\r\ndef getDivisors(x):\r\n    for n in range(1, int(x * * .5) + 1):\r\n    if not x % n:\r\n    yield n\r\n    if n != x / / n:\r\n        yield x / / n\r\n\r\n    def friendlyNumbers(m, n):\r\n    a, b = sum(getDivisors(m)), sum(getDivisors(n))\r\n    return \"Friendly!\" if a / m == b / n else \"{} {}\" . format(Fraction(a, m), Fraction(b, n))\r\n",
  "59971e64bfccc70748000068": "from operator import mul\r\nfrom functools import reduce\r\n\r\n\r\ndef genSequence(n):\r\n    yield n\r\n    while True:\r\n    n += reduce(mul, [int(d) for d in str(n) if d != '0']) if n > 9 else n\r\n    yield n\r\n    def extract(seq, v):\r\n    return sorted(seq). index(v)\r\n\r\n    def convergence(n):\r\n    gen1, genN = genSequence(1), genSequence(n)\r\n    seq1, seqN = {next(gen1)}, {next(genN)}\r\n    while True:\r\n    a, b = next(gen1), next(genN)\r\n    seq1 . add(a)\r\n    seqN . add(b)\r\n    if a in seqN:\r\n        return extract(seqN, a)\r\n    if b in seq1:\r\n        return extract(seqN, b)\r\n",
  "58691792a44cfcf14700027c": "from itertools import cycle\r\n\r\n\r\nclass Player (RockPaperScissorsPlayer):\r\n    STRATEGIES = {\r\n        'Vitraj Bachchan': 'R',\r\n        'Sven Johanson': 'RRSPPR',\r\n        'Max Janssen': 'P',\r\n        'Bin Jinhao': 'RPRSPS',\r\n        'Jonathan Hughes': 'SRP',\r\n    }\r\n    def __init__(self):\r\n    self . cycle = None\r\n    def get_name(self):\r\n    return \"MyPlayer\"\r\n    def get_shape(self):\r\n    return next(self . cycle)\r\n    def set_new_match(self, opponentName):\r\n    self . cycle = cycle(self . STRATEGIES . get(opponentName, 'S'))\r\n    def set_opponent_shape(self, shape):\r\n    pass\r\n",
  "59971206e06bbf4407002382": "def sum_and_multiply(sum, multiply):\r\n    for x in range(sum + 1):\r\n    if x * (sum - x) == multiply:\r\n    return [x, sum - x]\r\n",
  "5996eb39cdc8eb39f80000a0": "from decimal import Decimal, ROUND_HALF_UP\n\n\ndef round_by_2_decimal_places(n):\n    return n . quantize(Decimal('.01'), rounding=ROUND_HALF_UP)\n",
  "5980d4e258a9f5891e000062": "import ipaddress as ip\r\n\r\n\r\ndef ipsubnet2list(subnet):\r\n    try:\r\n        return list(map(str, ip . ip_network(subnet). hosts()))\r\n    except:\r\n        pass\r\n",
  "5995ceb5d4280d07f6000822": "import re\n\n\ndef AlphaNum_NumAlpha(s):\n    return re . sub(r'[0-9]+|[a-z]', lambda x: alphabet[(int(x . group()) - 1) % 26] if x . group(). isdigit() else str(alphabet . index(x . group()) + 1), s)\n",
  "573c84bf0addf9568d001299": "from collections import deque\r\n\r\n\r\ndef yes_no(arr):\r\n    d, result = deque(arr), []\r\n    while d:\r\n    result . append(d . popleft())\r\n    d . rotate(- 1)\r\n    return result\r\n",
  "5831c204a31721e2ae000294": "def swap(st):\r\n    tr = str . maketrans('aeiou', 'AEIOU')\r\n    return st . translate(tr)\r\n",
  "5993c1d917bc97d05d000068": "def regex_divisible_by(n):\r\n    if n == 1:\r\n    return '^[01]*$'\r\n    G = {(i, (2 * i + j) % n): str(j) for i in range(n) for j in (0, 1)}\r\n    for k in range(n - 1, 0, - 1):\r\n    loop = '' if (k, k) not in G else G[(k, k)] + '*'\r\n    I = {i for i, j in G if i != k and j == k}\r\n    J = {j for i, j in G if i == k and j != k}\r\n    for i in I:\r\n    for j in J:\r\n    if (i, j) in G:\r\n    G[(i, j)] = '(?:%s|%s)' % (G[(i, j)], G[(i, k)] + loop + G[(k, j)])\r\n    else:\r\n    G[(i, j)] = '(?:%s)' % (G[(i, k)] + loop + G[(k, j)])\r\n    G = {c: G[c] for c in G if k not in c}\r\n    return '^%s*$' % G[(0, 0)]\r\n",
  "587fb57e12fc6eadf200009b": "from hashlib import sha256\n\n\ndef to_sha256(s):\n    return sha256(s . encode('utf-8')). hexdigest()\n",
  "541a9774204d12252f00045d": "def i_or_f(arr):\r\n    # Your code here (and maybe somewhere else? Hint, hint)\r\n    try:\r\n    float(arr)\r\n    return True\r\n    except:\r\n    return False\r\n",
  "5592890bb4af624e930000b5": "from itertools import permutations\n\n\ndef k_permutations_of_n(lst: list, k: int) - > list:\n    return [list(p) for p in permutations(lst, k)]\n",
  "5749b2fc8bf8b6fbd3001ff3": "def find_secret_number(low, high, f):\r\n    while low <= high:\r\n    mid = (low + high) / / 2\r\n    r = f . guess_number(mid)\r\n    if r == 'Larger':\r\n        low = mid + 1\r\n    elif r == 'Smaller':\r\n        high = mid - 1\r\n    else:\r\n        return mid\r\n",
  "59952e17f902df0e5f000078": "def passer_rating(att, yds, comp, td, ints):\r\n    def limit(x): return min(max(x, 0), 2.375)\r\n\r\n    att = float(att)  # for python 2 compatibility\r\n    A = ((comp / att) - .3) * 5\r\n    B = ((yds / att) - 3) * .25\r\n    C = (td / att) * 20\r\n    D = 2.375 - ((ints / att) * 25)\r\n\r\n    A, B, C, D = map(limit, (A, B, C, D))\r\n\r\n    return round((A + B + C + D) / 6 * 100, 1)\r\n",
  "56b2abae51646a143400001d": "def mystery(n):\r\n    return n ^ (n >> 1)\r\n\r\n    def mystery_inv(n):\r\n    mask = n >> 1\r\n    while mask != 0:\r\n    n = n ^ mask\r\n    mask = mask >> 1\r\n    return n\r\n\r\n    def name_of_mystery():\r\n    return \"Gray code\"\r\n",
  "5993fb6c4f5d9f770c0000f2": "def sum_no_duplicates(l):\r\n    return sum(n for n in set(l) if l . count(n) == 1)\r\n",
  "572bbd7c72a38bd878000a73": "# Something goes Here ...\r\nclass Fraction:\r\n\r\n    def __init__(self, numerator, denominator):\r\n    g = gcd(numerator, denominator)\r\n    self . top = numerator / g\r\n    self . bottom = denominator / g\r\n    # Equality test\r\n    def __eq__(self, other):\r\n    first_num = self . top * other . bottom\r\n    second_num = other . top * self . bottom\r\n    return first_num == second_num\r\n    # The rest goes here\r\n    def __add__(self, other):\r\n    numerator = self . top * other . bottom + self . bottom * other . top\r\n    denominator = self . bottom * other . bottom\r\n    return Fraction(numerator, denominator)\r\n\r\n    def __str__(self):\r\n    return str(self . top) + \"/\" + str(self . bottom)\r\n\r\n    def gcd(x, y):\r\n    if (y == 0):\r\n    return x\r\n    return gcd(y, x % y)\r\n",
  "59557b2a6e595316ab000046": "def convert_hash_to_array(hash):\r\n    return sorted(map(list, hash . items()))\r\n",
  "5992e11d6ca73b38d50000f0": "import re\n\n\ndef clever_split(s):\n    return re . findall(r'\\[.*?\\]|\\S+', s)\n",
  "5992e103b1429877bb00006b": "def collatz_steps(n, steps):\n    def check(x, prefix):\n    for c in prefix:\n    if x % 2 == 0:\n    if c != 'D':\n        return False\n    x / /= 2\n    else:\n    if c != 'U':\n        return False\n    x = (x * 3 + 1) / / 2\n    return True\n    k = 1\n    for i in range(1, len(steps) + 1):\n    prefix = steps[: i]\n    while not check(n, prefix):\n        n += k\n    k *= 2\n    return n\n",
  "59859f435f5d18ede7000050": "def word_to_bin(word):\r\n    return ['{:08b}' . format(ord(c)) for c in word]\r\n",
  "599266b417bc9785f2000001": "from math import factorial as fact\r\n\r\n\r\ndef tri_bicolor_tiling(n, r, g, b):\r\n    colors, count = ((r, g), (r, b), (b, g)), 0\r\n    for c1, c2 in colors:\r\n    if c1 + c2 <= n:\r\n    m1 = (n - c2) / / c1\r\n    for n1 in range(1, m1 + 1):\r\n    for n2 in range(1, (n - n1 * c1) / / c2 + 1):\r\n    nd = n - n1 * c1 - n2 * c2\r\n    count += fact(nd + n1 + n2) / / (fact(nd) * fact(n1) * fact(n2))\r\n    return count % 12345787\r\n",
  "56b861671d36bb0aa8000819": "from itertools import zip_longest\r\n\r\n\r\ndef reverse_and_combine_text(text):\r\n    words = text . split(' ')\r\n    while len(words) > 1:\r\n    it = map(lambda w: w[:: - 1], words)\r\n    words = [a + b for a, b in zip_longest(it, it, fillvalue='')]\r\n    return words[0]\r\n",
  "59923f1301726f5430000059": "import re\r\n\r\n\r\nclass FSM (object):\r\n    def __init__(self, instructions):\r\n    self . config = {state: [if0, if1, int(out)] for state, if0, if1, out in re . findall(\r\n        r'(\\w+); (\\w+), (\\w+); (\\w+)', instructions)}\r\n\r\n    def run_fsm(self, state, sequence):\r\n    path = [state]\r\n    for i in sequence:\r\n    state = self . config[state][i]\r\n    path . append(state)\r\n    return state, self . config[state][2], path\r\n",
  "598ee7b6ec6cb90dd6000061": "from itertools import groupby\n\n\ndef count_repeats(s):\n    return len(s) - len(list(groupby(s)))\n",
  "568c3498e48a0231d200001f": "def calc_tip(p, r):\n    t = (p + 5) / / 10\n    # t = round((p + 5) / 10)\n    return max(0, (t / 2 - 1) if r == - 1 else t + (- 1) * * (r + 1))\n",
  "567e8dbb9b6f4da558000030": "import re\n\n\ndef six_bit_number(s):\n    return bool(re . match(r'([1-5]?\\d|6[0-3])\\Z', s))\n",
  "55f7eb009e6614447b000099": "def square(number):\r\n    return 2 * * (number - 1)\r\n",
  "55a58505cb237a076100004a": "def find_2nd_largest(arr):\r\n    arr = sorted(i for i in set(arr) if type(i) == int)\r\n    return arr[- 2] if len(arr) > 1 else None\r\n",
  "559af787b4b8eac78b000022": "def count_me(data):\r\n    if not data . isdigit():\r\n    return ''\r\n    result = []\r\n    count = 1\r\n    last = data[0]\r\n\r\n    for char in data[1:]:\r\n    if char == last:\r\n    count += 1\r\n    else:\r\n    result . append(str(count) + last)\r\n    last = char\r\n    count = 1\r\n    result . append(str(count) + last)\r\n\r\n    return '' . join(result)\r\n",
  "59901cd68fc658ab6c000025": "def distribute(m, n):\r\n    if n <= 0:\r\n    return []\r\n    q, r = divmod(max(m, 0), n)\r\n    return [q + (i < r) for i in range(n)]\r\n",
  "527e4141bb2ea5ea4f00072f": "def compute_sum(n):\r\n    return sum(int(c) for i in range(1, n + 1) for c in str(i))\r\n",
  "567e8f7b4096f2b4b1000005": "import re\n\n\ndef eight_bit_number(n):\n    return bool(re . fullmatch(r\"([1-9]?|1\\d|2[0-4])\\d|25[0-5]\", n))\n",
  "5809b62808ad92e31b000031": "def calculate(s):\r\n    return str(sum(int(n) for n in s . replace(\"minus\", \"plus-\"). split(\"plus\")))\r\n\r\n    # I heard here and there that using eval is a very bad practice\u2026\r\n    # return str(eval(s.replace(\"plus\", \"+\").replace(\"minus\", \"-\")))\r\n",
  "586d6cefbcc21eed7a001155": "def longest_repetition(chars):\n    max_char, max_count = '', 0\n    char, count = '', 0\n    for c in chars:\n    if c != char:\n    count, char = 0, c\n    count += 1\n    if count > max_count:\n    max_char, max_count = char, count\n    return max_char, max_count\n",
  "54d1c59aba326343c80000e7": "def divide_numbers(x, y):\r\n    return x / y\r\n",
  "5881460c780e0dd207000084": "def spot_diff(s1, s2):\r\n    return [i for i in range(len(s1)) if s1[i] != s2[i]]\r\n",
  "586ed2dbaa0428f791000885": "def traffic_count(array):\r\n    return [('4:00pm', max(array[: 6])), ('5:00pm', max(array[6: 12])), ('6:00pm', max(array[12: 18])), ('7:00pm', max(array[18:]))]\r\n",
  "598f76a44f613e0e0b000026": "import re\n\n\ndef sum_of_integers_in_string(s):\n    return sum(int(x) for x in re . findall(r\"(\\d+)\", s))\n",
  "59901fb5917839fe41000029": "from itertools import cycle\r\n\r\n\r\ndef numeric_formatter(template, data='1234567890'):\r\n    data = cycle(data)\r\n    return '' . join(next(data) if c . isalpha() else c for c in template)\r\n",
  "57403b5ad67e87b5e7000d1d": "def bubble(l):\r\n    ret = []\r\n    for i in range(len(l) - 1, 0, - 1):\r\n    for j in range(i):\r\n    if l[j] > l[j + 1]:\r\n    l[j], l[j + 1] = l[j + 1], l[j]\r\n    ret . append(l[:])\r\n    return ret\r\n",
  "56ec1e8492446a415e000b63": "from itertools import groupby\n\n\ndef ones_counter(nums):\n    return [sum(g) for k, g in groupby(nums) if k]\n",
  "57e141ad8a8b8d4d150004f6": "import random\r\n\r\n\r\ndef r_p_s_cheat(choice):\r\n    options = {\"rock\": \"paper\", \"paper\": \"scissors\", \"scissors\": \"rock\"}\r\n    return options[choice] if random . randint(1, 10) <= 9 else options[options[choice]]\r\n",
  "58fa5e33a6d84c1324000207": "from gmpy2 import is_prime\n\n\ndef generate_primes(x):\n    return [n for n in range(2, x + 1) if is_prime(n)]\n",
  "55a5bef147d6be698b0000cd": "def flatten_me(lst):\r\n    res = []\r\n    for l in lst:\r\n    if isinstance(l, list):\r\n    res . extend(l)\r\n    else:\r\n    res . append(l)\r\n    return res\r\n",
  "58e440d8acfd3edfb2000aee": "def cross_product(a, b):\r\n    return Vector(\r\n        a . y * b . z - a . z * b . y,\r\n        a . z * b . x - a . x * b . z,\r\n        a . x * b . y - a . y * b . x\r\n    )\r\n",
  "58e3ea29a33b52c1dc0000c0": "def dot_product(a, b):\r\n    return a . x * b . x + a . y * b . y + a . z * b . z\r\n",
  "5785cd91a1b8d5c06e000007": "def re_ordering(name):\r\n    return ' ' . join(sorted(name . split(), key=str . islower))\r\n",
  "58069e4cf3c13ef3a6000168": "def reverse(n):\r\n    m = 0\r\n    while n > 0:\r\n    n, m = n / / 10, m * 10 + n % 10\r\n    return m\r\n",
  "585a29183d357b31f700023f": "def greet_jedi(first, last):\r\n    return \"Greetings, master {}{}\" . format(last[: 3]. capitalize(), first[: 2]. capitalize())\r\n",
  "57520361f2dac757360018ce": "class PokeScan:\r\n    def __init__(self, name, level, pkmntype):\r\n    self . name = name\r\n    self . level = level\r\n    self . pkmntype = pkmntype\r\n    def info(self):\r\n    level_info = \"weak\" if self . level <= 20 else \"fair\" if self . level <= 50 else \"strong\"\r\n    pkmntypes_info = {\"water\": \"wet\", \"fire\": \"fiery\", \"grass\": \"grassy\", }\r\n    return \"{}, a {} and {} Pokemon.\" . format(self . name, pkmntypes_info[self . pkmntype], level_info)\r\n",
  "58a30be22d5b6ca8d9000012": "from fractions import gcd\nfrom itertools import product, starmap\nfrom statistics import mean\n\n\ndef gcd_matrix(a, b):\n    return round(mean(starmap(gcd, product(a, b))), 3)\n",
  "5749b82229d16cbc320015fe": "def chessboard(s):\r\n    N, M = map(int, s . split())\r\n    row = \".*\" * M\r\n    return \"\\n\" . join([row[: M] if i & 1 else row[1: M + 1] for i in range(N)])\r\n",
  "557d9e4d155e2dbf050000aa": "class anything (object):\n    def __init__(self, foo): pass\n    def __eq__(self, other): return True\n    __ne__ = __lt__ = __le__ = __gt__ = __ge__ = __eq__\n",
  "584d88622609c8bda30000cf": "import re\n\n\ndef word_splitter(string1):\n    return re . split('[^\\w\\.-]', string1)\n",
  "55a8a36703fe4c45ed00005b": "def multiple(x):\n    if x % 15 == 0:\n        return \"BangBoom\"\n    if x % 5 == 0:\n        return \"Boom\"\n    if x % 3 == 0:\n        return \"Bang\"\n    return \"Miss\"\n",
  "56b4bae128644b5613000037": "from collections import defaultdict\r\n\r\n\r\ndef repeat_sum(l):\r\n    count = defaultdict(int)\r\n    for l1 in l:\r\n    for val in set(l1):\r\n    count[val] += 1\r\n    return sum(k for k, v in count . items() if v > 1)\r\n",
  "53daa9e5af55c184db00025f": "def is_prime(n):\n    'Return True if n is a prime number otherwise return False'\n    # 0 and 1 are not primes\n    if n < 2:\n    return False\n    # 2 is only even prime so reject all others\n    if n == 2:\n    return True\n    if not n & 1:\n    return False\n    # \u00a0test other possiblities\n    for i in range(3, n):\n    if (n % i) == 0 and n != i:\n    return False\n    return True\n",
  "57e35f1bc763b8ccce000038": "import re\r\n\r\n\r\ndef check_password(s):\r\n    if re . search('^(?=.*?[a-z])(?=.*?[A-Z])(?=.*?\\d)(?=.*?[!@#$%^&*?])[a-zA-Z\\d!@#$%^&*?]{8,20}$', s):\r\n    return 'valid'\r\n    else:\r\n    return 'not valid'\r\n",
  "57e524847fbcc9300300004c": "def solve(): return True\n",
  "5866a58b9cbc02c4f8000cac": "def make_move(sticks):\r\n    return sticks % 4\r\n",
  "578bf2d8daa01a4ee8000046": "from re import sub\r\n\r\n\r\ndef encode(string):\r\n    return sub(r'(.)\\1*', lambda m: str(len(m . group(0))) + m . group(1), string)\r\n\r\n    def decode(string):\r\n    return sub(r'(\\d+)(\\D)', lambda m: m . group(2) * int(m . group(1)), string)\r\n",
  "5620dc848370b4ad750000a1": "def triangular_range(start, stop):\r\n    return {i: i * (i + 1) / 2 for i in range(stop) if start <= i * (i + 1) / 2 <= stop}\r\n",
  "5654d2428be803670a000030": "def guess_my_number(guess, number='123-451-2345'):\r\n    return \"\" . join(c if c in guess + \"-\" else \"#\" for c in number)\r\n",
  "587f1e1f39d444cee6000ad4": "class Vector (object):\r\n    def __init__(self, x, y):\r\n    self . x = x\r\n    self . y = y\r\n    def add(self, vector):\r\n    return Vector(self . x + vector . x, self . y + vector . y)\r\n",
  "56b0f6243196b9d42d000034": "def sum_factorial(lst):\r\n    return sum(map(fac, lst)) if lst else None\r\n    def fac(n):\r\n    return n * fac(n - 1) if n != 0 else 1\r\n",
  "53f103c3ef9ad4014f00013b": "def find_most_frequent(l):\r\n    return set(x for x in set(l) if l . count(x) == max([l . count(y) for y in l]))\r\n",
  "5705ca6a41e5be67720012c0": "def square_it(digits):\r\n    s = str(digits)\r\n    n = len(s) * * 0.5\r\n    if n != int(n):\r\n    return \"Not a perfect square!\"\r\n    n = int(n)\r\n    return \"\\n\" . join(s[i * n: i * n + n] for i in range(int(n)))\r\n",
  "574881a216ac9be096001ade": "def knight_or_knave(said):\r\n    return \"Knight!\" if eval(str(said)) else \"Knave! Do not trust.\"\r\n",
  "5872637c2eefcb1216000081": "def destroyer(input_sets):\r\n    from string import ascii_lowercase as alphabet\r\n    return \" \" . join(c if c not in set . union(* input_sets) else \"_\" for c in alphabet)\r\n",
  "585d7b4685151614190001fd": "def getTotal(costs, items, tax):\r\n    return round(sum(costs . get(e, 0) for e in items) * (1 + tax), 2)\r\n",
  "585ba66ce08bae791b00011b": "def index_finder(l, x):\r\n    return l . index(x, 1)\r\n",
  "585c50e75d0930e6a7000336": "from fractions import gcd\n\n\ndef are_coprime(n, m):\n    return gcd(n, m) == 1\n",
  "594c6ad5d909ca19e200002f": "def byte_to_set(byte):\r\n    return {i for i in range(8) if (byte & (128 >> i))}\r\n",
  "5874657211d7d6176a00012f": "def convert(st):\r\n    return st . replace('o', 'u'). replace('a', 'o')\r\n",
  "58311faba317216aad000168": "def print_nums(* arr):\r\n    if not arr:\r\n        return ''\r\n    ln = len(str(max(arr)))\r\n    return '\\n' . join(str(c). zfill(ln) for c in arr)\r\n",
  "586e0dc9b98de0064b000247": "from bisect import bisect\nfrom statistics import mean\n\n\ndef calculate_grade(scores):\n    return 'FDCBA' [bisect([60, 70, 80, 90], mean(scores))]\n",
  "5848cd33c3689be0dc00175c": "def add(s1, s2):\r\n    return sum(ord(x) for x in s1 + s2)\r\n",
  "55dec8f72ead8624e5000028": "def create_class(class_name, secrets={}):\r\n    if class_name:\r\n    return type(class_name, (), secrets)\r\n",
  "55ddcef532f8678af1000006": "class ReNameAbleClass (object):\r\n    @ classmethod\r\n    def change_class_name(cls, new_name):\r\n    if not (new_name and new_name[0]. isupper() and new_name . isalnum()):\r\n    raise ValueError('Bad class name')\r\n    cls . __name__ = new_name\r\n    @ classmethod\r\n    def __str__(cls):\r\n    return 'Class name is: {}' . format(cls . __name__)\r\n",
  "55ddb0ea5a133623b6000043": "def class_name_changer(cls, new_name):\r\n    assert new_name[0]. isupper() and new_name . isalnum()\r\n    cls . __name__ = new_name\r\n",
  "578de3801499359921000130": "def two_by_two(animals):\r\n    return {x: 2 for x in animals if animals . count(x) > 1} if animals else False\r\n",
  "588e10c5f051b147ff00004b": "def close2zero(t):\r\n    return min(map(int, t . split()), key=lambda t: (abs(t), - t), default=0)\r\n",
  "5870ef72aa04283934000043": "def russian_peasant_multiplication(x, y):\n    product = 0\n    while y != 0:\n    if y % 2 == 1:\n    product += x\n    x += x\n    y / /= 2\n    return product\n",
  "56917304360b39073f00003b": "def calc_pol(pol_str, x=None):\r\n    return \"There is no value for x\" if x == None else \"Result = \" + str(eval(pol_str)) + (\"\" if eval(pol_str) != 0 else \", so {} is a root of {}\" . format(x, pol_str))\r\n",
  "57cded7cf5f4ef768800003c": "def convert_num(number, base):\r\n    try:\r\n    if base == 'hex':\r\n    return hex(number)\r\n    if base == 'bin':\r\n    return bin(number)\r\n    except:\r\n    return 'Invalid number input'\r\n    return 'Invalid base input'\r\n",
  "584a6d9d7d22f8fa09000094": "def f(n):\r\n    return [2 * * i for i in range(n + 1)] + [(2 * * (n + 1)) - 1]\r\n",
  "58811e9cfd05cb5aed0000a4": "import numpy as np\n\n\ndef centroid(c):\n    return np . mean(c, axis=0). round(2). tolist()\n",
  "5666bd1011beb6f768000073": "import datetime\nimport calendar\n\n\ndef day(date):\n    return calendar . day_name[datetime . datetime . strptime(date, \"%Y%m%d\"). weekday()]\n",
  "57785441311a24465e000025": "def make_checkered_board(n):\r\n    line = ['X' for x in range(n)]\r\n    board = [line[:] for y in range(n)]\r\n    for row in range(0, n):\r\n    for col in range(0, n):\r\n    if (row + col) % 2:\r\n    board[row][col] = \"O\"\r\n    return board\r\n",
  "56dc695b2a4504b95000004e": "from string import maketrans, lowercase, uppercase\n\n\ndef caeser(message, key):\n    return message . translate(maketrans(lowercase, uppercase[key:] + uppercase[: key]))\n",
  "56b0bc0826814364a800005a": "def cyclops(n):\r\n    n = bin(n)[2:]\r\n\r\n    return n . count(\"0\") == 1 and n == n[:: - 1]\r\n",
  "580a429e1cb4028481000019": "def could_be(original, another):\r\n\t if not another . strip(): return False\r\n return all ( name in original . split () for name in another . split ())",
  "598e045b8c13926d8c0000e8": "abc = 'abcdefghijklmnopqrstuvwxyz'\r\n\r\n\r\ndef caesar(s, shift):\r\n    # make a translation table with the current shift\r\n    transtable = str . maketrans(abc, abc[shift:] + abc[: shift])\r\n    return s . translate(transtable)\r\n\r\n    def break_caesar(message):\r\n        # sanitize the input\r\n    message = '' . join(c if c . isalpha() else ' ' for c in message). lower()\r\n    # keep track of hits\r\n    hits = []\r\n\r\n    # try all possible shifts\r\n    for shift in range(26):\r\n        # decode the message with the current shift\r\n    decoded = caesar(message, - shift)\r\n    cnt = 0\r\n    for word in decoded . split():\r\n        # count the number of common English words\r\n    if word in WORDS:\r\n    cnt += 1\r\n    # append the result\r\n    hits . append(cnt)\r\n\r\n    # find the most likely shift value\r\n    shift = hits . index(max(hits))\r\n    return shift\r\n",
  "598d91785d4ce3ec4f000018": "def nameValue(myList):\r\n    return [i * sum(map(lambda c: [0, ord(c) - 96][c . isalpha()], w . lower())) for i, w in enumerate(myList, 1)]\r\n",
  "598d6fd5b383eda05c000046": "def presents(a):\r\n    res = [None] * len(a)\r\n    for i, j in enumerate(a, 1):\r\n    res[j - 1] = i\r\n    return res\r\n",
  "579e646353ba33cce2000093": "from itertools import pairwise\n\n\ndef to_brainfuck(s):\n    return '' . join('+-' [a > b] * abs(a - b) + '.' for a, b in pairwise(map(ord, \"\\0\" + s)))\n",
  "598d79f7b1954bc4cc000028": "def ternary(a, c):\r\n    res, p = 0, 1\r\n    while a or c:\r\n    a, x = divmod(a, 3)\r\n    c, y = divmod(c, 3)\r\n    res += (y - x) % 3 * p\r\n    p *= 3\r\n    return res\r\n",
  "598d89971928a085c000001a": "def sort_number(a):\r\n    a = sorted(a)\r\n    return [1] + a if a . pop() != 1 else a + [2]\r\n",
  "598ab728062fc49a22000410": "def pattern_generator(n):\r\n    base, leftBlanks = '' . join(\" \" if i % 2 else \"ox\" [\r\n                                 not i % 4] for i in range(n)), \" \" * (n - 1)\r\n\r\n    upper = ('\\n' . join(leftBlanks + base[: i + 1][:: - 1]\r\n             for i in range(n - 1)) + '\\n') * (n > 1)\r\n    middle = base + base[: n - 1][:: - 1]\r\n    lower = ('\\n' + '\\n' . join(\" \" * i +\r\n             base[: n - i] for i in range(1, n))) * (n > 1)\r\n\r\n    return upper + middle + lower\r\n",
  "598c84db8ba6103bc40000ad": "def lattice_paths(grid):\n    sentinel = [0] * (1 + len(grid[0]))\n    sentinel[1] = 1  # always 1 in the top left corner\n    for i, g in enumerate(grid[0][1:], 2):  # initiate the sentinel array\n    sentinel[i] = sentinel[i - 1] and g\n    for r in grid[1:]:  # runs through the grid\n    for i, v in enumerate(r, 1):\n        # reset value of the sentinel if the node is blocked\n    sentinel[i] = sum(sentinel[i - 1: i + 1]) * v\n    return sentinel[- 1]\n",
  "55dcdd2c5a73bdddcb000044": "def calculate(rectangles):\r\n    xs = sorted(set(x for (x0, y0, x1, y1) in rectangles for x in (x0, x1)))\r\n    inds = {x: i for i, x in enumerate(xs)}\r\n    bins = [[] for _ in range(len(xs) - 1)]\r\n    for x0, y0, x1, y1 in rectangles:\r\n    for j in range(inds[x0], inds[x1]):\r\n    bins[j]. append((y0, y1))\r\n    s = 0\r\n    for i, bin in enumerate(bins):\r\n    if not bin:\r\n        continue\r\n    bin . sort()\r\n    h, y = 0, bin[0][0]\r\n    for y0, y1 in bin:\r\n    h += max(y, y1) - max(y, y0)\r\n    y = max(y, y1)\r\n    s += h * (xs[i + 1] - xs[i])\r\n    return s\r\n",
  "56b5dc75d362eac53d000bc8": "import re\r\n\r\n\r\ndef calculate_string(st):\r\n    st = re . sub(r'[^-+*/\\d.]', '', st)\r\n    result = eval(st)\r\n    return str(int(round(result)))\r\n",
  "57a03b8872292dd851000069": "def nth_smallest(arr, n):\r\n    s = set(arr)\r\n    return sorted(s)[n - 1] if n <= len(s) else None\r\n",
  "57f5e7bd60d0a0cfd900032d": "def missing_no(lst):\r\n    return 5050 - sum(lst)\r\n",
  "58f6e7e455d7597dcc000045": "MOVES = {\"right\": (0, 1), \"down\": (1, 0), \"left\": (0, - 1), \"up\": (- 1, 0)}\r\n\r\n\r\ndef get_password(grid, dirs):\r\n    x, y = next((x, y) for x, r in enumerate(grid)\r\n                for y, c in enumerate(r) if c == 'x')\r\n    pwd = []\r\n    for d in dirs:\r\n    dx, dy = MOVES[d . strip('T')]\r\n    x, y = x + dx, y + dy\r\n    if d . endswith('T'):\r\n        pwd . append(grid[x][y])\r\n    return '' . join(pwd)\r\n",
  "598c1bc6a04cd3b8dd000012": "def restaurant(single_tables, double_tables, visitors):\r\n    kicked = 0\r\n    half = 0\r\n    for i in visitors:\r\n    if i == 1:\r\n    if single_tables > 0:\r\n    single_tables -= 1\r\n    elif double_tables > 0:\r\n    double_tables -= 1\r\n    half += 1\r\n    elif half > 0:\r\n    half -= 1\r\n    else:\r\n    kicked += 1\r\n    if i == 2:\r\n    if double_tables > 0:\r\n    double_tables -= 1\r\n    else:\r\n    kicked += 2\r\n    return kicked\r\n",
  "59887207635904314100007b": "def closest(lst):\r\n    m = min(lst, key=abs)\r\n    return m if m == 0 or - m not in lst else None\r\n",
  "59884371d1d8d3d9270000a5": "from collections import Counter\r\n\r\n\r\ndef shake_tree(tree):\r\n    nutsPos = [p for p, c in enumerate(tree[0]) if c == 'o']\r\n    for line in tree[1:]:\r\n    nutsPos = [p + 1 if line[p] == '\\\\' else p - 1 if line[p]\r\n               == '/' else p for p in nutsPos if line[p] != '_']\r\n\r\n    nuts = Counter(nutsPos)\r\n    return [nuts[p] for p in range(len(tree[0]))]\r\n",
  "54c1bf903f0696f04600068b": "from operator import add, sub, mul, floordiv as div, and_, or_, xor\r\nOP = {'add': add, 'sub': sub, 'mul': mul,\r\n      'div': div, 'and': and_, 'or': or_, 'xor': xor}\r\n\r\n\r\nclass Machine (object):\r\n    def __init__(self, cpu):\r\n    self . cpu = cpu\r\n    def execute(self, instruction):\r\n    cmd, a, b = (instruction . replace(',', ' ') + ' 0 0'). split()[: 3]\r\n    v = self . cpu . read_reg(a) if a in 'abcd' else int(a)\r\n\r\n    if cmd == 'mov':\r\n        self . cpu . write_reg(b, v)\r\n    elif cmd == 'pop':\r\n        self . cpu . write_reg(a, self . cpu . pop_stack(\r\n        )) if a in 'abcd' else self . cpu . pop_stack()\r\n    elif cmd == 'push':\r\n        self . cpu . write_stack(v)\r\n    elif cmd in ['pushr', 'pushrr']:\r\n    for r in ('abcd' if cmd == 'pushr' else 'dcba'):\r\n        self . cpu . write_stack(self . cpu . read_reg(r))\r\n    elif cmd in ['popr', 'poprr']:\r\n    for r in ('abcd' if cmd == 'poprr' else 'dcba'):\r\n        self . cpu . write_reg(r, self . cpu . pop_stack())\r\n    else:\r\n    r = self . cpu . pop_stack(\r\n    ) if cmd[- 1] != 'a' else self . cpu . read_reg('a')\r\n    for _ in range(v - 1):\r\n    r = OP[cmd if cmd[- 1] != 'a' else cmd[: - 1]](r, self . cpu . pop_stack())\r\n    self . cpu . write_reg(b if b in 'abcd' else 'a', r)\r\n",
  "597ccf7613d879c4cb00000f": "import re\r\n\r\n\r\ndef name_or_number(expr):\r\n    return re . fullmatch(r'[a-zA-Z_][a-zA-Z0-9_]*', expr) != None or re . fullmatch(r'\\d+', expr) != None\r\n    def transp_lambda(lmbd):\r\n    if '->' in lmbd:\r\n    ind = lmbd . index('->')\r\n    if ind > 0 and all(name_or_number(e) for e in lmbd[: ind: 2]) and all(c == ',' for c in lmbd[1: ind: 2]):\r\n    res = '(' + '' . join(lmbd[: ind]) + '){'\r\n    lmbd = lmbd[ind + 1:]\r\n    else:\r\n    raise ValueError\r\n    else:\r\n    res = '(){'\r\n    if all(name_or_number(e) for e in lmbd):\r\n    return res + ';' . join(lmbd + ['']) + '}'\r\n    else:\r\n    raise ValueError\r\n    def name_or_number_or_lambda(expr):\r\n    return name_or_number(expr) or (expr[- 1] == '}' and len(expr) > 1)\r\n\r\n    def transpile(expression):\r\n    tokens = re . findall(\r\n        r'[a-zA-Z_][a-zA-Z0-9_]*|[0-9]+(?![a-zA-Z])|[{}(),]|\\-\\>', expression)\r\n    try:\r\n    if not tokens or len('' . join(tokens)) != len(re . sub(r'\\s+', '', expression)):\r\n        raise ValueError\r\n    cur = 0\r\n    while cur < len(tokens):\r\n    if tokens[cur] == '{':\r\n    f_cur = next((k for k, x in enumerate(\r\n        tokens[cur + 1:], cur + 1) if x == '}'), None)\r\n    if f_cur == None:\r\n        raise ValueError\r\n    lmbd = transp_lambda(tokens[cur + 1: f_cur])\r\n    tokens[cur: f_cur + 1] = [lmbd]\r\n\r\n    cur += 1\r\n    if not name_or_number_or_lambda(tokens[0]):\r\n        raise ValueError\r\n    if tokens[- 1]. endswith('}'):\r\n    if tokens[1: 3] == ['(', ')']:\r\n    tokens[- 2:] = [tokens[- 1], ')']\r\n    elif tokens[1] == '(':\r\n    tokens[- 2:] = [',', tokens[- 1], ')']\r\n    else:\r\n    tokens[- 1:] = ['(', tokens[- 1], ')']\r\n\r\n    if (tokens[1] == '(' and tokens[- 1] == ')' and\r\n            (len(tokens[2: - 1]) == 0 or len(tokens[2: - 1]) % 2) and\r\n            all(name_or_number_or_lambda(e)\r\n                for e in tokens[2: - 1: 2]) and all(c == ',' for c in tokens[3: - 1: 2])\r\n        ):\r\n    return '' . join(tokens)\r\n    else:\r\n    raise ValueError\r\n    except:\r\n    return ''\r\n",
  "598a1fc1676fdd837f000e56": "def smallest_doll_size(doll):\r\n    return smallest_doll_size(doll()) if doll() else doll . size\r\n",
  "55a710b462afc49a540000b9": "def corrections(x):\r\n    if x > 0:\r\n    return f' { x } is more than zero.'\r\n    else:\r\n    return f' { x } is equal to or less than zero.'\r\n",
  "5877839c0594a6ead600012c": "def gas_station(obj, cfuel, fcons):\r\n    obj = {k: v for k, v in obj . items(\r\n    ) if v['distance'] <= cfuel * 100 / fcons}\r\n    return min(obj, key=lambda x: (60 - cfuel + 2 * obj[x]['distance'] * fcons / 100) * obj[x]['price']) if obj else None\r\n",
  "598638d7f3a2c489b2000030": "def get_root_property(dict_, v):\r\n    for key in dict_:\r\n    if isinstance(dict_[key], list):\r\n    if v in dict_[key]:\r\n    return key\r\n    elif get_root_property(dict_[key], v):\r\n    return key\r\n",
  "597ab747d1ba5b843f0000ca": "def buy_or_sell(pairs, harvested_fruit):\r\n\r\n    currentFruit = harvested_fruit\r\n    actions = list()\r\n\r\n    for pair in pairs:\r\n\r\n    if currentFruit not in pair:\r\n        return 'ERROR'\r\n    if currentFruit == pair[0]:\r\n\r\n    actions . append('buy')\r\n    currentFruit = pair[1]\r\n\r\n    else:\r\n\r\n    actions . append('sell')\r\n    currentFruit = pair[0]\r\n\r\n    return actions\r\n",
  "563d59dd8e47a5ed220000ba": "def get_sum_of_digits(num):\r\n    return sum(map(int, str(num)))\r\n",
  "59824f384df1741e05000913": "from collections import Counter\r\n\r\n\r\ndef most_common(s):\r\n    count = Counter(s)\r\n    return '' . join(sorted(s, key=lambda c: - count[c]))\r\n",
  "5981a139f5471fd1b2000071": "def task(w, n, c):\r\n    workers = {\"Monday\": \"James\", \"Tuesday\": \"John\",\r\n               \"Wednesday\": \"Robert\", \"Thursday\": \"Michael\", \"Friday\": \"William\"}\r\n    return f\"It is { w } today, { workers [ w ]} , you have to work, you must spray { n } trees and you need { n * c } dollars to buy liquid\"\r\n",
  "587d7544f1be39c48c000109": "import math\r\n\r\n\r\ndef harvester_rescue(data):\r\n    harvester = data['harvester']\r\n    worm, worm_speed = data['worm']\r\n    carryall, carryall_speed = data['carryall']\r\n    if distance(harvester, worm) / worm_speed > distance(harvester, carryall) / carryall_speed + 1:\r\n    return 'The spice must flow! Rescue the harvester!'\r\n    return 'Damn the spice! I\\'ll rescue the miners!'\r\n    def distance(loc1, loc2):\r\n    return math . sqrt((loc1[0] - loc2[0]) * * 2 + (loc1[1] - loc2[1]) * * 2)\r\n",
  "545b342082e55dc9da000051": "def partition(list, classifier_method):\r\n    listTrue = []\r\n    listFalse = []\r\n    for l in list:\r\n    if classifier_method(l):\r\n    listTrue . append(l)\r\n    else:\r\n    listFalse . append(l)\r\n    return listTrue, listFalse\r\n",
  "58d3487a643a3f6aa20000ff": "def minMinMax(arr):\r\n    s, mi, ma = set(arr), min(arr), max(arr)\r\n    return [mi, next(x for x in range(mi + 1, ma) if x not in s), ma]\r\n",
  "5982619d2671576e90000017": "def sponge_meme(seq):\r\n    return '' . join(\r\n        c . lower() if i % 2 else c . upper()\r\n        for i, c in enumerate(seq)\r\n    )\r\n",
  "5818c52e21a33314e00000cb": "def sort_two_arrays(arr1, arr2):\r\n    a1 = sorted([[arr1[i], i] for i in range(len(arr1))])\r\n    a2 = sorted([[arr2[i], i] for i in range(len(arr2))])\r\n    r1 = [arr1[a[1]] for a in a2]\r\n    r2 = [arr2[a[1]] for a in a1]\r\n    return [r1, r2]\r\n",
  "5859aaf04facfeb0d4002051": "def best_parking_spot(arr):\r\n    if arr . count(\"OPEN\") == 1:\r\n    return arr . index(\"OPEN\")\r\n\r\n    corrals = [i for i, v in enumerate(arr) if v == 'CORRAL']\r\n    opens = [i for i, v in enumerate(arr) if v == 'OPEN']\r\n\r\n    result = {}\r\n    for i in range(0, len(opens)):\r\n    for j in range(0, len(corrals)):\r\n    result[opens[i] * 2 + abs(opens[i] - corrals[j]) * 2] = opens[i]\r\n\r\n    return result[min(result . keys())]\r\n",
  "598106cb34e205e074000031": "def count_deaf_rats(town):\r\n    return town . replace(' ', '')[:: 2]. count('O')\r\n",
  "55ec55323c89fc5fbd000019": "def caesar_encode(s, n):\r\n    return ' ' . join('' . join(chr((ord(c) - 97 + n + i) % 26 + 97) for c in w) for i, w in enumerate(s . split(' ')))\r\n",
  "570eb07e127ad107270005fe": "def poly_multiply(p1, p2):\r\n    if not p1 or not p2:\r\n        return []\r\n    n = len(p1) + len(p2) - 1\r\n    p = [0] * n\r\n    for i, a in enumerate(p1):\r\n    for j, b in enumerate(p2):\r\n    p[i + j] += a * b\r\n    return p\r\n",
  "55aea0a123c33fa3400000e7": "def sort_me(arr):\r\n    return sorted(arr, key=lambda elem: str(elem)[- 1])\r\n",
  "5981ff1daf72e8747d000091": "from math import ceil\r\n\r\n\r\nclass Potion:\r\n    def __init__(self, color, volume):\r\n    self . color = color\r\n    self . volume = volume\r\n    def mix(self, other):\r\n\r\n    ratio1 = self . volume / (self . volume + other . volume)\r\n    ratio2 = other . volume / (self . volume + other . volume)\r\n\r\n    r = ceil(self . color[0] * ratio1 + other . color[0] * ratio2)\r\n    g = ceil(self . color[1] * ratio1 + other . color[1] * ratio2)\r\n    b = ceil(self . color[2] * ratio1 + other . color[2] * ratio2)\r\n\r\n    volume = self . volume + other . volume\r\n    return Potion((r, g, b), volume)\r\n",
  "5728a1bc0838ffea270018b2": "def count_inversion(nums):\r\n    return sum(a > b for i, a in enumerate(nums) for b in nums[i + 1:])\r\n",
  "571a2e2df24bdfd4e20001f5": "def poly_derivative(p):\r\n    return [i * x for i, x in enumerate(p)][1:]\r\n",
  "5714041e8807940ff3001140": "def poly_subtract(p, q): return poly_add(p, [- c for c in q])\n",
  "570ac43a1618ef634000087f": "from itertools import zip_longest\n\n\ndef poly_add(p1, p2):\n    return [x + y for x, y in zip_longest(p1, p2, fillvalue=0)]\n",
  "560b000f56b4d8be9e000018": "def get_pid():\r\n    import socket\r\n    return socket . gethostname()\r\n",
  "56d58a16e8f2d6957100093f": "def distance(p1, p2): return ((p2[0] - p1[0]) * * 2 + (p2[1] - p1[1]) * * 2) * * 0.5\n\n\ndef calculate_time(p1, p2):\n    return round(5 * distance(p2, [0, 0]) / distance(p1, p2), 3)\n",
  "57a110eee298a737e2000283": "from operator import mul as str_repeat\n",
  "57b971f68f58135e840001cc": "puzzle = int . __lshift__\n",
  "56d8f14cba01a83cdb0002a2": "def get_positions(n):\r\n    return n % 3, n / / 3 % 3, n / / 9 % 3\r\n",
  "56c30eaef85696bf35000ccf": "def christmas_tree(h):\r\n    return \"\" if h < 3 else \"\\r\\n\" . join([\"\\r\\n\" . join([\" \" * (((5 - y) / / 2) + (h / / 3) - i - 1) + \"*\" * (y + i * 2) for y in [1, 3, 5]]) for i in range(h / / 3)]) + \"\\r\\n\" + \" \" * (h / / 3) + \"###\"\r\n",
  "59811fd8a070625d4c000013": "def integrate(coefficient, exponent):\r\n    return f' { coefficient / / ( exponent + 1 )} x^ { exponent + 1 } '\r\n",
  "5769a78c6f2dea72b3000027": "def is_bouncy(n):\r\n    return sorted(str(n)) != list(str(n)) and sorted(str(n)) != list(str(n))[:: - 1]\r\n",
  "58cbc48930bcf09b7a000117": "def time_per_day(l):\r\n    sum = 0\r\n    for a in l:\r\n    sum += a[1] * a[0] * 0.75\r\n    return round(sum / 300, 2)\r\n",
  "568fca718404ad457c000033": "def find(seq):\r\n    return (min(seq) + max(seq)) * (len(seq) + 1) / 2 - sum(seq)\r\n",
  "58ca77b9c0d640ecd2000b1e": "def procedure(n):\r\n    return sum(int(d) for i in range(n, 101, n) for d in str(i))\r\n",
  "598057c8d95a04f33f00004e": "def function(start_num, end_num):\r\n    return list(range(start_num + 1, end_num))\r\n",
  "58db721b2f449efaf5000038": "table = {\r\n    ' _ _||_ ': '2', ' _ ||_ ': '2', ' _ _|| ': '2',\r\n    ' _ _| _|': '3', ' _ | _|': '3', ' _ _| |': '3',\r\n    ' |_| |': '4', ' | | |': '4',\r\n    ' _ |_ _|': '5', ' _ | _|': '5', ' _ |_ |': '5',\r\n    ' _ |_ |_|': '6', ' _ | |_|': '6', ' _ |_ | |': '6',\r\n    ' _ | |': '7',\r\n    ' _ |_||_|': '8', ' _ | ||_|': '8', ' _ |_|| |': '8',\r\n    ' _ |_| _|': '9', ' _ | | _|': '9', ' _ |_| |': '9',\r\n}\r\n\r\n\r\ndef recognize(s):\r\n    rows = s . splitlines()\r\n    digits = ['' . join(r[k: k + 3] for r in rows)\r\n              for k in range(0, len(rows[0]), 3)]\r\n    return '' . join(table . get(d, '?') for d in digits)\r\n",
  "597eeb0136f4ae84f9000001": "def builder(s, isRef=0):\r\n    out = {}\r\n    for r in s . splitlines():\r\n    for i in range(len(r) / / 3):\r\n    out[i] = out . get(i, '') + r[i * 3: i * 3 + 3]\r\n\r\n    return {s: str(i) for i, s in out . items()} if isRef else out . values()\r\n\r\n    DIGS = builder('''\\ \r\n _ _ _ _ _ _ _ _ \r\n | | | _| _||_||_ |_ ||_||_| \r\n |_| ||_ _| | _||_| ||_| _| \r\n ''', 1)\r\n\r\n    def parse_bank_account(s):\r\n    return int('' . join(DIGS[d] for d in builder(s)))\r\n",
  "597ef546ee48603f7a000057": "def get_most_profit_from_stock_quotes(quotes):\r\n    gain, top = 0, - float('inf')\r\n    for v in reversed(quotes):\r\n    if top < v:\r\n        top = v\r\n    else:\r\n        gain += top - v\r\n    return gain\r\n",
  "57be674b93687de78c0001d9": "from math import log, ceil\n\n\ndef largest_power(N):\n    return ceil(log(N, 3)) - 1\n",
  "597cfe0a38015079a0000006": "def covered_pawns(pawns):\r\n    pawns = set(pawns)\r\n    return len({p for p in pawns for x, y in [map(ord, p)] if {chr(x - 1) + chr(y - 1), chr(x + 1) + chr(y - 1)} & pawns})\r\n",
  "597c82c5213e128eed000072": "def most_customers(dannys_pitch):\r\n    x, y = dannys_pitch\r\n    def sign(n): return int(n / abs(n)) if n != 0 else 0\r\n    if abs(x) > 2 or abs(y) > 2:\r\n        return [[0, 0]]\r\n    if x == 0 and y == 0:\r\n        return [[- 1, - 1], [- 1, 0], [- 1, 1], [0, - 1], [0, 1], [1, - 1], [1, 0], [1, 1]]\r\n    if abs(x) == abs(y):\r\n        return sorted([[x - sign(x), y], [x, y - sign(y)], [x - sign(x), y - sign(y)]])\r\n    if abs(x) > abs(y):\r\n        return [[x - sign(x), y]]\r\n    if abs(x) < abs(y):\r\n        return [[x, y - sign(y)]]\r\n\r\n    pass\r\n    # z.\r\n",
  "597d75744f4190857a00008d": "def paint_letterboxes(start, finish):\r\n    xs = [0] * 10\r\n    for n in range(start, finish + 1):\r\n    for i in str(n):\r\n    xs[int(i)] += 1\r\n    return xs\r\n",
  "57b988048f5813799600004f": "# sumArround = 0 1 2 3 4 5 6 7 8\r\nSURVIVAL_DICT = {0: [0, 0, 0, 1, 0, 0, 0, 0, 0],\r\n                 1: [0, 0, 1, 1, 0, 0, 0, 0, 0]}\r\n\r\n\r\ndef get_generation(cells, generation):\r\n    maxI, maxJ = len(cells), len(cells[0])\r\n\r\n    def sumArround(i, j):\r\n    return sum(cells[(i + a) % maxI][(j + b) % maxJ] for a in range(- 1, 2) for b in range(- 1, 2)) - cells[i][j]\r\n\r\n    return cells if generation == 0 else get_generation([[SURVIVAL_DICT[cells[i][j]][sumArround(i, j)] for j in range(maxJ)] for i in range(maxI)], generation - 1)\r\n",
  "597770e98b4b340e5b000071": "class FileNameExtractor:\r\n    @ staticmethod\r\n    def extract_file_name(fname):\r\n    return fname . split('_', 1)[1]. rsplit('.', 1)[0]\r\n",
  "597bb84522bc93b71e00007e": "def StringMerge(string1, string2, letter):\r\n    return string1[: string1 . index(letter)] + string2[string2 . index(letter):]\r\n",
  "59752e1f064d1261cb0000ec": "def what_time_is_it(angle):\r\n    hr = int(angle / / 30)\r\n    mn = int((angle % 30) * 2)\r\n    if hr == 0:\r\n    hr = 12\r\n    return '{:02d}:{:02d}' . format(hr, mn)\r\n",
  "58fff63f4c5d026cc200000f": "def frogs_jumping(stones):\r\n\r\n    path = []\r\n    i = len(stones) - 1\r\n    while i > 0:\r\n    if i > 1 and stones[i] - stones[i - 2] == 2:\r\n    dist = jmp = 2\r\n    else:\r\n    dist, jmp = stones[i] - stones[i - 1], 1\r\n    i -= jmp\r\n    path . append(dist)\r\n\r\n    return \"\" . join(map(str, path[:: - 1]))\r\n",
  "597a660f59873cc353000061": "from collections import Counter\r\nCOLORS = 'Red', 'Green', 'Blue'\r\nIDX = 0, 1, 2\r\n\r\n\r\ndef get_major_minor(colors):\r\n    c = Counter(max(IDX, key=lambda i: c[i * 2: i * 2 + 2]) for c in colors)\r\n    return '+' . join(COLORS[i] for i, _ in c . most_common(2))\r\n\r\n    def get_colors(col_arr):\r\n    return ',' . join(map(get_major_minor, col_arr))\r\n",
  "59799cb9429e83b7e500010c": "from functools import reduce\r\nimport math\r\n# The Money Changing Problem Revisited: Computing the Frobenius Number in Time O(k a1)*\r\n# https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.389.4933&rep=rep1&type=pdf\r\n\r\n\r\ndef min_price(coins):\r\n    # edge case\r\n    if 1 in coins:\r\n    return 1\r\n    if reduce(math . gcd, coins) != 1:\r\n    return - 1\r\n    coins = sorted(set(coins))\r\n    a1 = coins[0]\r\n    k = len(coins)\r\n\r\n    n_arr = [float(\"inf\") for _ in range(a1)]\r\n    n_arr[0] = 0\r\n    for i in range(1, k):\r\n    d = math . gcd(a1, coins[i])\r\n    for r in range(d):\r\n    n = min(n_arr[q] for q in range(a1) if q % d == r)\r\n\r\n    if n < float(\"inf\"):\r\n    for j in range(a1 / / d + 1):\r\n    n += coins[i]\r\n    p = n % a1\r\n    n = min(n, n_arr[p])\r\n    n_arr[p] = n\r\n    best = max(x for x in n_arr if x < float(\"inf\"))\r\n    return best - a1 + 1\r\n",
  "595877be60d17855980013d3": "def euclidean_distance(point1, point2):\r\n    return round(sum((b - a) * * 2 for a, b in zip(point1, point2)) * * 0.5, 2)\r\n",
  "595bbea8a930ac0b91000130": "def calculate_1RM(w, r):\n    if r == 0:\n        return 0\n    if r == 1:\n        return w\n    return round(max([\n        w * (1 + r / 30),  # Epley\n        100 * w / (101.3 - 2.67123 * r),  # McGlothin\n        w * r * * 0.10  # Lombardi\n    ]))\n",
  "5571d9fc11526780a000011a": "from __future__ import annotations\r\nfrom collections . abc import Sequence\r\nimport re\r\n\r\n\r\nclass Being:\r\n    def __init__(self, api):\r\n    self . api = api\r\n    def __getattr__(self, item):\r\n    return self . api(item)\r\n\r\n    class Relation:\r\n    def __init__(self, name: str, api):\r\n    self . name = name\r\n    self . api = api\r\n    def __getattr__(self, other):\r\n    return self . api(self . name, other)\r\n\r\n    class Related:\r\n    def __init__(self, api):\r\n    self . api = api\r\n    def __getattr__(self, name):\r\n    return Relation(name, self . api)\r\n\r\n    class Having:\r\n    def __init__(self, api):\r\n    self . n = 1\r\n    self . api = api\r\n    def __getattr__(self, name):\r\n    obj = Thing(name, length=self . n, being=f\"is_ { name } \")\r\n    self . api(obj)\r\n    return obj\r\n    class Archive:\r\n    def __init__(self, name):\r\n    self . name = name\r\n    self . _history = []\r\n\r\n    def __call__(self, msg):\r\n    self . _history . append(msg)\r\n\r\n    class Ability:\r\n    def __init__(self, name, master, api):\r\n    self . name = name\r\n    self . master = master\r\n    self . api = api\r\n    self . method = None\r\n    self . archive = None\r\n    def _late_init(self, method, archive=None):\r\n    self . method = method\r\n    if archive:\r\n    self . archive = Archive(archive)\r\n    self . api(archive, self . archive)\r\n    return self . master\r\n    def __call__(self, * args, * * kwargs):\r\n    msg = self . method(self . master, * args, * * kwargs)\r\n    if self . archive:\r\n    self . archive(msg)\r\n    return msg\r\n    class Can:\r\n    def __init__(self, master, api_ability, api_archive):\r\n    self . master = master\r\n    self . api_ability = api_ability\r\n    self . api_archive = api_archive\r\n    def __getattr__(self, name):\r\n    ability = Ability(name, self . master, self . api_archive)\r\n    self . api_ability(name, ability)\r\n    return ability . _late_init\r\n    class Thing (Sequence):\r\n    def __init__(self, name: str, length: int = None, being: str = None):\r\n    self . name = name\r\n    self . _len = 1\r\n    self . _instances = [self]\r\n    if length and length > 1:\r\n    self . _len = length\r\n    self . _instances = []\r\n    name_single = name[: len(name) - 1]\r\n    for _ in range(length):\r\n    self . _instances . append(Thing(name_single))\r\n    if being:\r\n    being = being[: len(being) - 1]\r\n\r\n    self . _being = set()\r\n    self . _related = {}\r\n    self . _having = {}\r\n    self . _ability = {}\r\n    self . _archive = {}\r\n\r\n    self . is_a = Being(self . _add_being)\r\n    self . is_not_a = Being(self . _add_not_being)\r\n    self . is_the = Related(self . _add_relation)\r\n    self . being_the = self . is_the\r\n    self . and_the = self . is_the\r\n    self . _has = Having(self . _add_having)\r\n\r\n    self . can = Can(self, self . _add_ability, self . _add_archive)\r\n\r\n    if being:\r\n    for obj in self . _instances:\r\n    obj . _being . add(being)\r\n\r\n    def has(self, n: int):\r\n    self . _has . n = n\r\n    return self . _has\r\n    having = has\r\n    def each(self, func):\r\n    for obj in self . _instances:\r\n    func(obj)\r\n    return self\r\n    def _add_being(self, name: str):\r\n    self . _being . add(f\"is_a_ { name } \")\r\n    return self\r\n    def _add_not_being(self, name: str):\r\n    self . _being . add(f\"is_not_a_ { name } \")\r\n    return self\r\n    def _add_relation(self, name: str, other):\r\n    self . _related[name] = other\r\n    return self\r\n    def _add_having(self, obj):\r\n    self . _having[obj . name] = obj\r\n    def _add_ability(self, name, ability):\r\n    self . _ability[name] = ability\r\n    def _add_archive(self, name, archive):\r\n    self . _archive[name] = archive\r\n    def __getattr__(self, attr):\r\n    if attr . startswith('is_'):\r\n    if attr in self . _being:\r\n    return True\r\n    return False\r\n    if attr in self . _related:\r\n    return self . _related[attr]\r\n    if attr in self . _having:\r\n    return self . _having[attr]\r\n    if attr in self . _ability:\r\n    return self . _ability[attr]\r\n    if attr in self . _archive:\r\n    return self . _archive[attr]. _history\r\n    def __getitem__(self, idx: int):\r\n    assert idx < self . _len\r\n    return self . _instances[idx]\r\n\r\n    def __iter__(self):\r\n    return iter(self . _instances)\r\n\r\n    def __len__(self):\r\n    return self . _len\r\n",
  "5727868888095bdf5c001d3d": "def string_to_int_list(s):\r\n    return [int(n) for n in s . split(\",\") if n]\r\n",
  "587c2d08bb65b5e8040004fd": "def nba_extrap(ppg, mpg):\r\n    return round(48.0 / mpg * ppg, 1) if mpg > 0 else 0\r\n",
  "55cd156ead636caae3000099": "print \"Hello World!\"\ncourse = \"CIS 122\"\nname = \"Intro to Software Design\"\nprint \"Welcome to \" + course + \": \" + name\na = 1.1\nb = 3\nc = a + b\nprint \"The sum of %s and %s is %s\" % (a, b, c)\n\nx_print(\"Hello World!\")\n\nlanguage = \"Python\"\nadjective = \"Fun\"\nx_print(\"Learning\", language, \"is\", adjective)\n\npizzas = 10\nslices_per_pizza = 8\ntotal_slices = pizzas * slices_per_pizza\nx_print(\"There are\", total_slices, \"slices in\", pizzas, \"pizzas.\")\nx_print(total_slices, \": It must be dinner time!\", sep=\"\")\n",
  "5977ef1f945d45158d00011f": "from itertools import zip_longest\n\n\ndef sep_str(st):\n    return [[* cs] for cs in zip_longest(* st . split(), fillvalue='')]\n",
  "59778cb1b061e877c50000cc": "def arr_adder(arr):\r\n    return ' ' . join(map('' . join, zip(* arr)))\r\n",
  "59766edb9bfe7cd5b000006e": "def bad_apples(apples):\n    lst, notFull = [], []\n    for a, b in apples:\n    if (bool(a) ^ bool(b)) and notFull:\n        # One bad and partially full box already present: fill it (as second element)\n        lst[notFull . pop()]. append(a or b)\n    elif a and b:\n        lst . append([a, b])  # 2 good ones: keep as they are\n    elif a or b:\n        notFull . append(len(lst))\n        lst . append([a or b])  # 1 good but no partial box: archive\n    if notFull:\n        lst . pop(notFull . pop())  # If 1 not full box remains: remove it\n    return lst\n",
  "56bdaa2cbe8f29257c000085": "quicksort = sorted\n",
  "56d3f1743323a8399200063f": "# THanks to easter eggs kata ;*\ndef height(n, m):\n    if n >= m:\n    return (2 * * (min(n, m)) - 1)\n    f = 1\n    res = 0\n    for i in range(n):\n    f = f * (m - i) / / (i + 1)\n    res += f\n    return res\n    def solve(emulator):\n    m = emulator . drops\n    n = emulator . eggs\n    h = 0\n    tryh = 0\n    while n and m:\n    tryh = height(n - 1, m - 1) + 1\n    if emulator . drop(h + tryh):\n    n -= 1\n    else:\n    h += tryh\n    m -= 1\n    return (h + 1)\n    # continue here\n",
  "596f72bbe7cd7296d1000029": "def deep_count(a):\r\n    result = 0\r\n    for i in range(len(a)):\r\n    if type(a[i]) is list:\r\n    result += deep_count(a[i])\r\n    result += 1\r\n    return result\r\n",
  "560e80734267381a270000a2": "def flip_bit(value, bit_index):\r\n    return value ^ (1 << (bit_index - 1))\r\n",
  "56bc1acf66a2abc891000561": "def greek_comparator(lhs, rhs):\r\n    return greek_alphabet . index(lhs) - greek_alphabet . index(rhs)\r\n",
  "548ef5b7f33a646ea50000b2": "from collections import Counter\n\n\ndef char_freq(message):\n    return Counter(message)\n",
  "53cf459503f9bbb774000003": "class Python:\r\n    def __init__(self, name):\r\n    self . name = name\r\n",
  "58dced7b702b805b200000be": "def distance_between_points(a, b):\r\n    return ((b . x - a . x) * * 2 + (b . y - a . y) * * 2) * * 0.5\r\n",
  "59759761e30a19cfe1000024": "def aa_percentage(seq, residues=[\"A\", \"I\", \"L\", \"M\", \"F\", \"W\", \"Y\", \"V\"]):\r\n    return round(sum(seq . count(r) for r in residues) / len(seq) * 100)\r\n",
  "582c1092306063791c000c00": "from itertools import count\r\n\r\n\r\ndef num_index(n):\r\n    if (n < 10):\r\n        return n - 1\r\n    c = 0\r\n    for i in count(1):\r\n    c += i * 9 * 10 * * (i - 1)\r\n    if (n < 10 * * (i + 1)):\r\n        return c + (i + 1) * (n - 10 * * i)\r\n\r\n    def find_position(s):\r\n    if not int(s):\r\n        return num_index(int('1' + s)) + 1\r\n    for l in range(1, len(s) + 1):\r\n    poss = []\r\n    for i in range(0, l + 1):\r\n    sdt = s[0: l - i]\r\n    end = s[l - i: l]\r\n    for c in ([end + sdt, str(int(end) - 1) + sdt] if end and int(end) != 0 else [end + sdt]):\r\n    if (c[0] == '0'):\r\n        continue\r\n    ds = c\r\n    n = int(c)\r\n    while (len(ds) < len(s) + l):\r\n        n += 1\r\n        ds += str(n)\r\n    idx = ds . find(s)\r\n    if (idx != - 1):\r\n        poss . append(num_index(int(c)) + idx)\r\n    if (len(poss) > 0):\r\n        return min(poss)\r\n",
  "54b058ce56f22dc6fe0011df": "from functools import lru_cache\n# Not gonna reinvent the wheel\n# Now I can go on codewars while they think I'm still working on it\n# Be a smart intern\n\n\ndef cut_log(p, n):\n    @ lru_cache(maxsize=None)\n    def rec(x):\n    if not x:\n        return 0\n    return max(p[i] + rec(x - i) for i in range(1, x + 1))\n    return rec(n)\n",
  "583dbc028bbc0446f500032b": "def wood_cut(woods, n):\r\n    x = sum(woods) / / n\r\n    while x > 0 and sum(w / / x for w in woods) < n:\r\n    x = max([w / / (w / / x + 1) for w in woods])\r\n    return x\r\n",
  "58acf858154165363c00004e": "def target_game(values):\r\n    a = b = 0\r\n    for n in values:\r\n    a, b = b, max(a + n, b)\r\n    return max(a, b)\r\n",
  "566584e3309db1b17d000027": "from collections import defaultdict\r\nimport re\r\nP = re . compile(r'\\+?(-?\\d*)(x\\^?)?(\\d*)')\r\n\r\n\r\ndef differentiate(eq, x):\r\n\r\n    derivate = defaultdict(int)\r\n    for coef, var, exp in P . findall(eq):\r\n    exp = int(exp or var and '1' or '0')\r\n    coef = int(coef != '-' and coef or coef and '-1' or '1')\r\n\r\n    if exp:\r\n        derivate[exp - 1] += exp * coef\r\n    return sum(coef * x * * exp for exp, coef in derivate . items())\r\n",
  "596ddaccdd42c1cf0e00005c": "def calc(a):\r\n    return sum(x * * (1 + (x >= 0)) * (1 + 2 * (not i % 3)) * (- 1) * * (not i % 5) for i, x in enumerate(a, 1))\r\n",
  "5971b219d5db74843a000052": "from collections import Counter\n\n\ndef added_char(s1, s2):\n    return next((Counter(s2) - Counter(s1)). elements())\n",
  "59727ff285281a44e3000011": "def band_name_generator(name):\r\n    return name . capitalize() + name[1:] if name[0] == name[- 1] else 'The ' + name . capitalize()\r\n",
  "57e5aa1d7fbcc988800001ae": "def unflatten(arr, depth, isLeft=1):\r\n    lst, it = [], enumerate(arr if isLeft else reversed(arr))\r\n    for i, x in it:\r\n    if isinstance(x, list):\r\n    lst . append(unflatten(x, 1, isLeft))\r\n    continue\r\n    n = x % (len(arr) - i)\r\n    if n < 3:\r\n    lst . append(x)\r\n    else:\r\n    gna = [x] + [next(it)[1] for _ in range(n - 1)]\r\n    lst . append(gna if isLeft else gna[:: - 1])\r\n\r\n    if not isLeft:\r\n        lst = lst[:: - 1]\r\n\r\n    return lst if depth == 1 else unflatten(lst, depth - 1, isLeft ^ 1)\r\n",
  "52ffcfa4aff455b3c2000750": "import operator as op\r\nimport re\r\nimport string\r\nRE = re . compile(\r\n    \"\\s*(=>|[-+*\\/\\%=\\(\\)]|[A-Za-z_][A-Za-z0-9_]*|[0-9]*\\.?[0-9]+)\\s*\")\r\n\r\n\r\ndef tokenize(e): return [s for s in RE . findall(e) if not s . isspace()]\r\n\r\n\r\ndef is_ident(t): return t[0] in \"_ \" + string . ascii_letters\r\n\r\n\r\nclass Interpreter:\r\n    def __init__(self):\r\n    self . vars = {}\r\n    self . functions = {}\r\n\r\n    def input(self, expression):\r\n    if \"( fn \" in ' ' . join(tokenize(expression)):\r\n        raise ValueError(\"Cannot declare function in an expression\")\r\n\r\n    while \"(\" in expression:\r\n    if expression . startswith(\"fn \"):\r\n        break\r\n    ptr = idx = expression . index(\"(\")\r\n    start, tofind = expression[: idx] if idx else \"\", 1\r\n    while tofind:\r\n    ptr += 1\r\n    if expression[ptr] == \")\":\r\n        tofind -= 1\r\n    if expression[ptr] == \"(\":\r\n        tofind += 1\r\n    expression = start + \\\r\n        str(self . input(expression[idx + 1: ptr])) + expression[ptr + 1:]\r\n    return self . parse(expression)\r\n\r\n    def parse(self, expression):\r\n    if expression . startswith(\"fn \"):\r\n    name, args, expr = expression . split()[1], expression . split(\r\n        \"=>\")[0]. split()[2:], expression . split(\"=>\")[1]. strip()\r\n    self . functions[name] = {\"expr\": expr, \"args\": args}\r\n\r\n    if name in self . vars:\r\n    raise ValueError(\"Name alreday in use \" + name)\r\n    elif len(args) > len(set(args)):\r\n    raise ValueError(\"Repeated argument \" + expression)\r\n    elif any(t not in args and t not in self . functions for t in tokenize(expr) if is_ident(t)):\r\n    raise ValueError(\"Invalid function\" + expression)\r\n\r\n    return ''\r\n    # Deal with other expressions, find rightmost =\r\n    left, expression = expression . rsplit(\r\n        \"=\", 1) if \"=\" in expression else ('', expression)\r\n    tokens = tokenize(expression)\r\n    if not tokens:\r\n    return ''\r\n    newtokens = []\r\n    while tokens:\r\n    token = tokens . pop()\r\n    if is_ident(token):\r\n    if token in self . functions:\r\n    args = {a: newtokens . pop() for a in self . functions[token][\"args\"]}\r\n    token = self . input(' ' . join(\r\n        [args . get(t, t) for t in tokenize(self . functions[token][\"expr\"])]))\r\n    elif token in self . vars:\r\n    token = self . vars[token]\r\n    else:\r\n    raise ValueError(\"Referenced before assignment : \" + token)\r\n\r\n    newtokens . append(str(token))\r\n\r\n    result = evaluate(' ' . join(newtokens[:: - 1]))\r\n\r\n    if left:\r\n    vv = ' ' . join(left . split()). split(\"=\")\r\n    if any(v in self . functions for v in vv):\r\n        raise ValueError(\"Identifier already in use : \" + v)\r\n\r\n    for v in vv:\r\n        self . vars[v . strip()] = result\r\n    return result\r\n    def evaluate(s):\r\n    OP = {\"*\": op . mul, \"/\": op . truediv,\r\n          \"+\": op . add, \"-\": op . sub, \"%\": op . mod}\r\n\r\n    tokens, stack, result = [w if w in OP else float(\r\n        w) if '.' in w else int(w) for w in s . split()[:: - 1]], [], 0\r\n    while tokens:\r\n    t = tokens . pop()\r\n    stack . append(OP[t](stack . pop(), tokens . pop())\r\n                   if str(t) in '/*%' else t)\r\n    while stack:\r\n    n = stack . pop()\r\n    result = OP[stack . pop() if stack else \"+\"](result, n)\r\n\r\n    return result\r\n",
  "53005a7b26d12be55c000243": "from ast import parse, Expr, Assign, BinOp, Name, Num\r\nfrom operator import add, sub, mul, mod, truediv\r\n\r\n\r\nclass Interpreter:\r\n\r\n    def __init__(self):\r\n    self . vars = {}\r\n\r\n    def input(self, expression):\r\n\r\n    op = {'Sub': sub, 'Add': add, 'Mult': mul, 'Div': truediv, 'Mod': mod}\r\n\r\n    def _eval(node):\r\n\r\n    if isinstance(node, Expr):\r\n    return _eval(node . value)\r\n    if isinstance(node, Name):\r\n    return self . vars[node . id]\r\n    if isinstance(node, Num):\r\n    return node . n\r\n    if isinstance(node, BinOp):\r\n    return op[type(node . op). __name__](_eval(node . left), _eval(node . right))\r\n    if isinstance(node, Assign):\r\n    name = node . targets[0]. id\r\n    self . vars[name] = _eval(node . value)\r\n    return self . vars[name]\r\n\r\n    tree = parse(expression)\r\n    return _eval(tree . body[0]) if len(tree . body) else ''\r\n",
  "5970915e54c27bd71000007b": "from math import pi\r\n\r\n\r\ndef stereometry(r, h):\r\n    area_of_sphere = round(4 * pi * r * * 2, 3)\r\n    area_of_circle = round(pi * (r * * 2 - h * * 2), 3)\r\n    perimeter_of_circle = round(2 * pi * (r * * 2 - h * * 2) * * 0.5, 3)\r\n    return (area_of_sphere, area_of_circle, perimeter_of_circle)\r\n",
  "5970df092ef474680a0000c9": "def alphabetized(s):\r\n    return \"\" . join(sorted(filter(str . isalpha, s), key=str . lower))\r\n",
  "5901f361927288d961000013": "from functools import reduce\nfrom operator import mul\n\n\ndef product(numbers):\n    return reduce(mul, numbers) if numbers else None\n",
  "57f09d0bcedb892791000255": "def pack_basket(basket, pile):\r\n    charges = {0}\r\n    for c in list(map(int, pile . replace('dust', ''). split())):\r\n    charges |= {c + d for d in charges if c + d <= basket}\r\n    return 'The basket weighs %d kilograms' % max(charges)\r\n",
  "5727bb0fe81185ae62000ae3": "def clean_string(s):\r\n    stk = []\r\n    for c in s:\r\n    if c == '#' and stk:\r\n        stk . pop()\r\n    elif c != '#':\r\n        stk . append(c)\r\n    return '' . join(stk)\r\n",
  "52e864d1ffb6ac25db00017f": "def LEFT(a, b): return a >= b\r\n\r\n\r\ndef RIGHT(a, b): return a > b\r\n\r\n\r\nPREC = {'+': 2, '-': 2, '*': 3, '/': 3, '^': 4, '(': 1, ')': 1}\r\n\r\nOP_ASSOCIATION = {'+': LEFT, '-': LEFT, '*': LEFT, '/': LEFT, '^': RIGHT}\r\n\r\n\r\ndef to_postfix(infix):\r\n    stack, output = [], []\r\n    for c in infix:\r\n    prec = PREC . get(c)\r\n\r\n    if prec is None:\r\n        output . append(c)\r\n    elif c == '(':\r\n        stack . append(c)\r\n    elif c == ')':\r\n    while stack and stack[- 1] != '(':\r\n    output . append(stack . pop())\r\n    stack . pop()\r\n    else:\r\n    while stack and OP_ASSOCIATION[c](PREC[stack[- 1]], prec):\r\n    output . append(stack . pop())\r\n    stack . append(c)\r\n\r\n    return '' . join(output + stack[:: - 1])\r\n",
  "59706036f6e5d1e22d000016": "def words_to_marks(s):\r\n    return sum(ord(c) - 96 for c in s)\r\n",
  "524c74f855025e2495000262": "class Poker:\r\n\r\n    value_map = {r: v for r, v in zip(\r\n        '2 3 4 5 6 7 8 9 10 J Q K A' . split(), range(2, 15))}\r\n\r\n    class Card:\r\n    def __init__(self, card):\r\n    self . rank = card[: - 1]\r\n    self . value = Poker . value_map[self . rank]\r\n    self . suit = card[- 1]\r\n\r\n    def __hash__(self):\r\n    return hash(self . rank)\r\n\r\n    def __init__(self, cards):\r\n    self . cards = sorted((Poker . Card(c) for c in cards),\r\n                          key=lambda x: x . value, reverse=True)\r\n    self . rank_count = {r: 0 for r in 'A K Q J 10 9 8 7 6 5 4 3 2' . split()}\r\n    self . suit_count = {s: 0 for s in '\u2660\u2666\u2663\u2665'}\r\n    for card in self . cards:\r\n    self . rank_count[card . rank] += 1\r\n    self . suit_count[card . suit] += 1\r\n    def best_hand(self):\r\n    if hand:\r\n        = self . four_of_a_kind():\r\n    return (\"four-of-a-kind\", hand)\r\n    elif hand:\r\n        = self . full_house():\r\n    return (\"full house\", hand)\r\n    elif flush:\r\n        = self . flush():\r\n    if straight:\r\n        = self . straight(flush):\r\n    return (\"straight-flush\", straight)\r\n    return (\"flush\", [c . rank for c in flush[: 5]])\r\n    elif straight:\r\n        = self . straight(self . cards):\r\n    return (\"straight\", straight)\r\n    elif hand:\r\n        = self . three_of_a_kind():\r\n    return (\"three-of-a-kind\", hand)\r\n    elif r1:\r\n        = self . pair():\r\n    if r2:\r\n        = self . pair(r1[0]):\r\n    return (\"two pair\", [r1[0]] + r2)\r\n    return (\"pair\", r1)\r\n    else:\r\n    return (\"nothing\", [c . rank for c in self . cards[: 5]])\r\n\r\n    def four_of_a_kind(self):\r\n    for rank, count in self . rank_count . items():\r\n    if count == 4:\r\n    tie = [c . rank for c in self . cards if c . rank != rank][0]\r\n    return [rank, tie]\r\n    return []\r\n\r\n    def full_house(self):\r\n    if three:\r\n        = self . three_of_a_kind():\r\n    r3 = three[0]\r\n    if two:\r\n        = self . pair(r3):\r\n    r2 = two[0]\r\n    return [r3, r2]\r\n    return []\r\n\r\n    def flush(self):\r\n    for suit, count in self . suit_count . items():\r\n    if count >= 5:\r\n    return [card for card in self . cards if card . suit == suit]\r\n    return []\r\n\r\n    def straight(self, cards):\r\n    cards = sorted(set(c . rank for c in cards),\r\n                   key=lambda x: self . value_map[x], reverse=True)\r\n    for i in range(len(cards) - 4):\r\n    run = cards[i: i + 5]\r\n    if all(self . value_map[a] - self . value_map[b] == 1 for a, b in zip(run, run[1:])):\r\n    return run\r\n    return []\r\n\r\n    def three_of_a_kind(self):\r\n    for rank, count in self . rank_count . items():\r\n    if count == 3:\r\n    tie = [c . rank for c in self . cards if c . rank != rank][: 2]\r\n    return [rank] + tie\r\n    return []\r\n\r\n    def pair(self, exclude=None):\r\n    for rank, count in self . rank_count . items():\r\n    if count == 2:\r\n    if exclude is not None:\r\n    if rank != exclude:\r\n    tie = [c . rank for c in self . cards if c . rank not in [rank, exclude]][0]\r\n    return [rank, tie]\r\n    else:\r\n    tie = [c . rank for c in self . cards if c . rank != rank][: 3]\r\n    return [rank] + tie\r\n    return []\r\n\r\n    def hand(hole_cards, community_cards):\r\n\r\n    poker = Poker(hole_cards + community_cards)\r\n    return poker . best_hand()\r\n",
  "5739174624fc28e188000465": "class PokerHand (object):\r\n    CARD = \"23456789TJQKA\"\r\n    RESULT = [\"Loss\", \"Tie\", \"Win\"]\r\n\r\n    def __init__(self, hand):\r\n    values = '' . join(sorted(hand[:: 3], key=self . CARD . index))\r\n    suits = set(hand[1:: 3])\r\n    is_straight = values in self . CARD\r\n    is_flush = len(suits) == 1\r\n    self . score = (2 * sum(values . count(card) for card in values)\r\n                    + 13 * is_straight + 15 * is_flush,\r\n                    [self . CARD . index(card) for card in values[:: - 1]])\r\n\r\n    def compare_with(self, other):\r\n    return self . RESULT[(self . score > other . score) - (self . score < other . score) + 1]\r\n",
  "596f6385e7cd727fff0000d6": "def avg_array(arrs):\r\n    return [sum(a) / len(a) for a in zip(* arrs)]\r\n",
  "596f28fd9be8ebe6ec0000c1": "def wave_sort(a):\r\n    a . sort()\r\n    for i in range(1, len(a), 2):\r\n    a[i], a[i - 1] = a[i - 1], a[i]\r\n",
  "596fba44963025c878000039": "def contamination(text, char):\r\n    return char * len(text)\r\n",
  "596e91b48c92ceff0c00001f": "def words_to_hex(words):\r\n    return [f\"# { w [: 3 ]. hex (): 0 < 6 } \" for w in words . encode(). split()]\r\n",
  "596f610441372ee0de00006e": "def de_nico(key, msg):\r\n    ll, order, s = len(key), [sorted(key). index(c) for c in key], ''\r\n    while msg:\r\n    s, msg = s + '' . join(msg[i] for i in order if i < len(msg)), msg[ll:]\r\n    return s . strip()\r\n",
  "596e4ef7b61e25981200009f": "from typing import Tuple\nfrom math import ceil\n\n\ndef aspect_ratio(x: int, y: int) - > Tuple[int, int]:\n    return (ceil(y * 16 / 9), y)\n",
  "54b8204dcd7f514bf2000348": "from itertools import chain\r\n\r\n\r\nclass Simplexer (object):\r\n    BOOLS = [\"true\", \"false\"]\r\n    KEYWORDS = [\"if\", \"else\", \"for\", \"while\", \"return\", \"func\", \"break\"]\r\n    OPERATORS = \"+-*/%()=\"\r\n    SPACE = \" \\n\\t\\c\"\r\n    NUMBER = \"0123456789\"\r\n    CHAR = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_$\"\r\n    def __init__(self, expression):\r\n    self . expression = expression\r\n    self . __data = iter(expression)\r\n\r\n    def __iter__(self):\r\n    self . __data = iter(self . expression)\r\n    return self\r\n    def __next__(self):\r\n    token = self . _nextc()\r\n\r\n    # Operators\r\n    if token in self . OPERATORS:\r\n    return Token(token, \"operator\")\r\n\r\n    # Whitespace\r\n    if token in self . SPACE:\r\n    while self . _peekc() in self . SPACE:\r\n    token += self . _nextc()\r\n    return Token(token, \"whitespace\")\r\n\r\n    # Strings\r\n    if token == '\"':\r\n    token += self . _nextc()\r\n    while token[- 1] != '\"':\r\n    token += self . _nextc()\r\n    return Token(token, \"string\")\r\n\r\n    # Integer\r\n    if token in self . NUMBER:\r\n    while self . _peekc() in self . NUMBER:\r\n    token += self . _nextc()\r\n    return Token(token, \"integer\")\r\n\r\n    if token in self . CHAR:\r\n    while self . _peekc() in self . CHAR + self . NUMBER:\r\n    token += self . _nextc()\r\n    if token in self . BOOLS:\r\n    return Token(token, \"boolean\")\r\n    if token in self . KEYWORDS:\r\n    return Token(token, \"keyword\")\r\n    return Token(token, \"identifier\")\r\n\r\n    def _nextc(self):\r\n    return next(self . __data)\r\n\r\n    def _peekc(self):\r\n        # Peeking shouldn't end the iteration\r\n    try:\r\n    char = next(self . __data)\r\n    self . __data = chain([char], self . __data)\r\n    except:\r\n    char = \"END\"\r\n    return char\r\n",
  "56f1c6034d0c330e4a001059": "import random\nfrom string import hexdigits\n\ndef generate_color_rgb():\n    return '#' + ''.join([random.choice(hexdigits) for i in range(6)])",
  "596d34df24a04ee1e3000a25": "import math\r\n\r\n\r\ndef count(n):\r\n    if n is 0:\r\n        return 0\r\n    x = int(math . log(n, 2))\r\n    return x * 2 * * (x - 1) + n - 2 * * x + 1 + count(n - 2 * * x)\r\n\r\n    def countOnes(left, right):\r\n    return count(right) - count(left - 1)\r\n",
  "5453dce502949307cf000bff": "def nexus(d):\r\n    return min(d, key=lambda x: (abs(x - d[x]), x))\r\n",
  "54cf7f926b85dcc4e2000d9d": "from collections import Counter, namedtuple\r\nfrom heapq import heappush, heappop\r\n\r\n\r\ndef frequencies(strng):\r\n    return list(Counter(strng). items())\r\n\r\n    def freqs2tree(freqs):\r\n    heap, Node = [], namedtuple('Node', 'letter left right')\r\n    for char, weight in freqs:\r\n        heappush(heap, (weight, Node(char, None, None)))\r\n    while len(heap) > 1:\r\n    (w_left, left), (w_right, right) = heappop(heap), heappop(heap)\r\n    heappush(heap, (w_left + w_right, Node(\"\", left, right)))\r\n    return heappop(heap)[1]\r\n\r\n    def encode(freqs, strng):\r\n    def tree2bits(tree, parent_bits=1):\r\n    if tree:\r\n    if tree . letter:\r\n        table[ord(tree . letter)] = bin(parent_bits)[3:]\r\n    tree2bits(tree . left, parent_bits << 1 | 0)\r\n    tree2bits(tree . right, parent_bits << 1 | 1)\r\n\r\n    if len(freqs) > 1:\r\n    table = {}\r\n    tree2bits(freqs2tree(freqs))\r\n    return strng . translate(table)\r\n\r\n    def decode(freqs, bits):\r\n    def tree2strng(tree, parent_bits=1):\r\n    if tree:\r\n    if tree . letter:\r\n        table[parent_bits] = tree . letter\r\n    tree2strng(tree . left, parent_bits << 1 | 0)\r\n    tree2strng(tree . right, parent_bits << 1 | 1)\r\n\r\n    if len(freqs) > 1:\r\n    table, code, strng = {}, 1, []\r\n    tree2strng(freqs2tree(freqs))\r\n    for b in map(int, bits):\r\n    code = code << 1 | b\r\n    if code in table:\r\n    strng . append(table[code])\r\n    code = 1\r\n    return '' . join(strng)\r\n",
  "55df87b23ed27f40b90001e5": "def calc_special(d, b):\r\n    rep = {10: 'd', 8: 'o', 16: 'x'}[b]\r\n    n = format(d, rep)\r\n    while True:\r\n    prod = format(d * int(n, b), rep)\r\n    if n[- 1:] + n[: - 1] == prod:\r\n        return n\r\n    n = prod[- len(n):] + n[- 1:]\r\n",
  "5917a2205ffc30ec3a0000a8": "N = 7\r\nperms = {i: set() for i in range(0, N + 1)}\r\nfor row in __import__('itertools'). permutations(range(1, N + 1), N):\r\n    c, s = 0, 0\r\n    for h in row:\r\n    if h > c:\r\n        c, s = h, s + 1\r\n    perms[0]. add(row)\r\n    perms[s]. add(row)\r\n\r\n    def solve_puzzle(clues):\r\n    rows = [perms[r] & {p[:: - 1] for p in perms[l]}\r\n            for (r, l) in zip(clues[N * 4 - 1: N * 3 - 1: - 1], clues[N: N * 2])]\r\n    cols = [perms[t] & {p[:: - 1] for p in perms[b]}\r\n            for (t, b) in zip(clues[0: N], clues[N * 3 - 1: N * 2 - 1: - 1])]\r\n\r\n    for _ in range(N * N / / 2):\r\n    for r_i in range(N):\r\n    for c_i in range(N):\r\n    common = {r[c_i] for r in rows[r_i]} & {c[r_i] for c in cols[c_i]}\r\n    rows[r_i], cols[c_i] = [r for r in rows[r_i] if r[c_i] in common], [\r\n        c for c in cols[c_i] if c[r_i] in common]\r\n\r\n    for rows1 in __import__('itertools'). product(* rows):\r\n    if all(tuple(r[i] for r in rows1) in cols[i] for i in range(N)):\r\n        return list(list(r) for r in rows1)\r\n",
  "5679d5a3f2272011d700000d": "from itertools import permutations\r\n\r\n\r\ndef solve_puzzle(clues):\r\n    size = 6\r\n    variants = {i: set() for i in range(size + 1)}\r\n    for row in permutations(range(1, size + 1)):\r\n    visible = sum(v >= max(row[: i + 1]) for i, v in enumerate(row))\r\n    variants[visible]. add(row)\r\n    variants[0]. add(row)\r\n\r\n    possible_cols, possible_rows = [], []\r\n    for i in range(size):\r\n    clue_left, clue_right = clues[4 * size - 1 - i], clues[size + i]\r\n    var_left = variants[clue_left]\r\n    var_right = set(map(lambda row: tuple(\r\n        reversed(row)), variants[clue_right]))\r\n    possible_rows . append(var_left . intersection(var_right))\r\n\r\n    clue_top, clue_btm = clues[i], clues[3 * size - 1 - i]\r\n    var_top = variants[clue_top]\r\n    var_btm = set(map(lambda row: tuple(reversed(row)), variants[clue_btm]))\r\n    possible_cols . append(var_top . intersection(var_btm))\r\n\r\n    while any(len(var_row) > 1 for var_row in possible_rows):\r\n    for i in range(size):\r\n    for j in range(size):\r\n    row_set = set(row[j] for row in possible_rows[i])\r\n    col_set = set(col[i] for col in possible_cols[j])\r\n    union_set = row_set . intersection(col_set)\r\n    possible_rows[i] = [row for row in possible_rows[i] if row[j] in union_set]\r\n    possible_cols[j] = [col for col in possible_cols[j] if col[i] in union_set]\r\n\r\n    return tuple(row[0] for row in possible_rows)\r\n",
  "556f4a5baa4ea7afa1000046": "from collections import Counter\r\nfrom itertools import combinations\r\nfrom functools import reduce\r\nfrom operator import mul\r\n\r\n\r\ndef best_pal(array):\r\n    outside, inside = [], ''\r\n    for k, v in Counter(array). items():\r\n    if v > 1:\r\n        outside . append(k * (v / / 2))\r\n    if v % 2:\r\n        inside = max(inside, k)\r\n    outside = '' . join(sorted(outside))\r\n    if outside and outside[- 1] == '0':\r\n        outside = ''\r\n    return int('' . join(outside[:: - 1] + inside + outside))\r\n\r\n    def numeric_palindrome(* args):\r\n    args = list(filter(None, args))\r\n    if len(args) < 2:\r\n        return 0\r\n    if 1 in args:\r\n        args = list(filter(lambda x: x > 1, args)) + [1]\r\n    if len(args) == 1:\r\n        return best_pal(str(args[0]))\r\n    return max(best_pal(str(reduce(mul, test))) for i in range(2, len(args) + 1) for test in combinations(args, i))\r\n",
  "537e18b6147aa838f600001b": "def justify(text, width):\n    ''' \n    Iterates through text, calculating 'n' words at a time that would fit in a line. \n    Caluculates 'extra' remaining characters that would fit and spreads them throughout the line. \n    '''\n    text = text . split()\n    lengths = [len(word) for word in text]\n\n    output = ''  # end output of text\n    while text:\n    line_output = ''  # output of text for each line\n    n = 1  # number of words in line\n    while sum(lengths[0: n + 1]) + n <= width and n < len(text):\n    n += 1  # adds more words to line if they would fit and if its not the last word\n    extra = width - (sum(lengths[0: n]))  # remaining space in line\n    # list of words in line, pop used to remove them from text\n    line = [text . pop(0) for _ in range(n)]\n    del lengths[0: n]  # deletes lengths of used words\n    line_output += line[0]  # adds the first word in line\n    if len(line) > 1 and text:\n\n    base_space = extra / / (len(line) - 1)  # minimum space between words\n    n_extra_space = extra % (len(line) - 1)  # number of words with extra space\n    # list with spaces between each word in order\n    spaces = [' ' * base_space if space >= n_extra_space\n              else ' ' * (base_space + 1) for space in range(len(line) - 1)]\n\n    for i, space in enumerate(spaces):\n        # adds remaining words with space in between them\n    line_output += space + line[i + 1]\n    elif len(line) > 1:\n    line_output = ' ' . join(line)  # if last line, spacing is normal\n    if text:\n    line_output += '\\n'  # if not last line, add '\\n' to end of line\n    output += line_output\n    return output\n",
  "596c26187bd547f3a6000050": "import re\r\n\r\n\r\ndef buy_newspaper(s1, s2):\r\n    p = re . sub(r\"(.)\", r\"\\1?\", s1)\r\n    return - 1 if set(s2) - set(s1) else len(re . findall(p, s2)) - 1\r\n",
  "52f831fa9d332c6591000511": "from collections import Counter\nimport re\nCOMPONENT_RE = (\n    r'('\n    r'[A-Z][a-z]?'\n    r'|'\n    r'\\([^(]+\\)'\n    r'|'\n    r'\\[[^[]+\\]'\n    r'|'\n    r'\\{[^}]+\\}'\n    r')'\n    r'(\\d*)'\n)\n\n\ndef parse_molecule(formula):\n    counts = Counter()\n    for element, count in re . findall(COMPONENT_RE, formula):\n    count = int(count) if count else 1\n    if element[0] in '([{':\n    for k, v in parse_molecule(element[1: - 1]). items():\n    counts[k] += count * v\n    else:\n    counts[element] += count\n    return counts\n",
  "56001790ac99763af400008c": "def largest_sum(arr):\r\n    sum = max_sum = 0\r\n    for n in arr:\r\n    sum = max(sum + n, 0)\r\n    max_sum = max(sum, max_sum)\r\n    return max_sum\r\n",
  "596b8a3fc4cb1de46b000001": "def center(strng, width, fill=' '):\r\n    width -= len(strng)\r\n    right = width / / 2\r\n    left = width - right\r\n    return \"{}{}{}\" . format(left * fill, strng, right * fill)\r\n",
  "596a690510ffee5c0b00006a": "def char_attribute(score):\r\n    return ({\"modifier\": 0, \"maximum_spell_level\": - 1, \"extra_spells\": []} if not score\r\n            else {\"modifier\": score / / 2 - 5,\r\n                  \"maximum_spell_level\": - 1 if score / / 2 - 5 < 0 else min(9, score - 10),\r\n                  \"extra_spells\": [1 + n / / 4 for n in range(score / / 2 - 5)][:: - 1][: 9]})\r\n",
  "596a81352240711f3b00006e": "def bin_mul(m, n):\r\n    if m < n:\r\n        return bin_mul(n, m)\r\n    if n == 0:\r\n        return []\r\n    res = []\r\n    while m > 0:\r\n    if m % 2 == 1:\r\n        res . append(n)\r\n    m = m / / 2\r\n    n *= 2\r\n    return res[:: - 1]\r\n",
  "586214e1ef065414220000a8": "def cut(cake):\r\n\r\n    def DFS(x0, y0, nShape):\r\n    if nShape == nSeeds:\r\n        yield True\r\n    else:\r\n    for h, w in models:\r\n    xN, yN, covSeed = setup(x0, y0, h, w, nShape)\r\n    if covSeed:\r\n    yield from DFS(xN, yN, nShape + 1)\r\n    tearDown(* shapes . pop())\r\n\r\n    def setup(x0, y0, h, w, nShape):\r\n    seedAt = []\r\n    inside = [board[x][y] == 'o' and seedAt . append((x, y)) or (x, y)\r\n              for x, y in ((x0 + x, y0 + y) for y in range(w) for x in range(h))\r\n              if x < lX and y < lY and board[x][y] in BASE]\r\n\r\n    if len(inside) != area or len(seedAt) != 1:\r\n        return 0, 0, 0\r\n    sShape = str(nShape)\r\n    for x, y in inside:\r\n        board[x][y] = sShape\r\n    xN, yN = next(((x, y) for x in range(lX)\r\n                  for y in range(lY) if board[x][y] in BASE), (None, None))\r\n    shapes . append((x0, y0, h, w, seedAt[0]))\r\n    return xN, yN, 1\r\n    def tearDown(x0, y0, h, w, seed):\r\n    for y in range(w):\r\n    for x in range(h):\r\n    a, b = pos = (x0 + x, y0 + y)\r\n    board[a][b] = BASE[pos == seed]\r\n\r\n    def shaper(tup):\r\n    x0, y0, h, w, seed = tup\r\n    return '\\n' . join('' . join(BASE[(x0 + x, y0 + y) == seed] for y in range(w)) for x in range(h))\r\n\r\n    if not cake:\r\n        return []\r\n\r\n    board = list(map(list, cake . split('\\n')))\r\n    nSeeds = sum(r . count('o') for r in board)\r\n    lX, lY = len(board), len(board[0])\r\n    area = lX * lY / nSeeds\r\n    if area % 1:\r\n        return []\r\n\r\n    area = int(area)\r\n    models = [(h, area / / h) for h in range(1, min(lX, area) + 1) if not area % h and area / / h <= lY]\r\n    shapes = []\r\n    BASE = '.o'\r\n    return list(map(shaper, shapes)) if next(DFS(0, 0, 0), False) else []\r\n",
  "5968fb556875980bd900000f": "import numpy as np\r\n\r\n\r\ndef diagonal(ar):\r\n    arr = np . rot90(np . array(ar))\r\n    return np . concatenate([np . diagonal(arr, a) for a in range(len(ar) - 1, - len(ar), - 1)]). tolist()\r\n",
  "596925532f709fccf3000077": "from functools import reduce\n\n\ndef fizzbuzz_plusplus(nums, words):\n    return [\"\" . join(w for n, w in zip(nums, words) if not i % n) or i\n            for i in range(1, reduce(lambda a, b: a * b, nums, 1) + 1)]\n\n    # limit = reduce(lambda a, b: a * b, nums, 1) + 1\n    # result = []\n    # for i in range(1, limit):\n    # s = \"\"\n    # for n, w in zip(nums, words):\n    # if not i % n:\n    # s = f\"{s}{w}\"\n    # result.append(s if s else i)\n    # return result\n",
  "5968bb83c307f0bb86000015": "def nico(key, message):\r\n    res = \"\"\r\n    for x in range(0, len(message), len(key)):\r\n    for i in sorted(key):\r\n    try:\r\n    res += message[x: x + len(key)][key . index(i)]\r\n    except IndexError:\r\n    res += \" \"\r\n    return res\r\n",
  "5966f6343c0702d1dc00004c": "def give_change(money):\r\n    arr = []\r\n    for i in [100, 50, 20, 10, 5, 1]:\r\n    arr = [money / / i] + arr\r\n    money -= arr[0] * i\r\n    return tuple(arr)\r\n",
  "5966eeb31b229e44eb00007a": "def vaporcode(s):\r\n    return \" \" . join(s . replace(\" \", \"\"). upper())\r\n",
  "59665001dc23af735700092b": "import re\r\n\r\n\r\ndef midtown_nav(* start_end):\r\n    sAv, sSt, eAv, eSt = map(int, re . findall(r'\\d+', ' ' . join(start_end)))\r\n    nV, nH = abs(eSt - sSt), abs(eAv - sAv)\r\n    V, H = 'south' if sSt > eSt else 'north', 'east' if sAv > eAv else 'west'\r\n    return f\"Walk { nV } blocks { V } , and { nH } blocks { H } \"\r\n",
  "5963c18ecb97be020b0000a2": "def derive(coefficient, exponent):\r\n    return f' { coefficient * exponent } x^ { exponent - 1 } '\r\n",
  "5967a67c8b0fc0093e000062": "import re\n\n\ndef find_codwars(url):\n    return bool(re . match(r''\n                           '^(https?://)?'  # http(s)://\n                           '([a-z]+\\.)*'  # subdomains\n                           'codwars\\.com'  # codwars.com\n                           '([/?].*)?$'  # directories or querystrings\n                           , url))\n",
  "596776fbb4f24d0d82000141": "def f(x, a, b, c):\r\n    return {a: b, b: c, c: a}[x]\r\n",
  "5665d30b3ea3d84a2c000025": "def gifts(number):\r\n    return sorted(v for k, v in GIFTS . items() if k & number)\r\n",
  "5966ec8e62d030d8530000a7": "def super_sum(D, N):\r\n    # Number of possible combinations of D length from set [0...N]\r\n    num = pow(N, D)\r\n    # 2x average value of a combination; 2x because dividing results in float and loss of precision\r\n    dblAvg = D * (N - 1)\r\n    # Multiply number of possible combinations by the avergae value; now use true division to ensure result is an integer\r\n    return num * dblAvg / / 2\r\n",
  "5966847f4025872c7d00015b": "N = ['zero', 'one', 'two', 'three', 'four',\r\n     'five', 'six', 'seven', 'eight', 'nine']\r\n\r\n\r\ndef average_string(s):\r\n    try:\r\n    return N[sum(N . index(w) for w in s . split()) / / len(s . split())]\r\n    except (ZeroDivisionError, ValueError):\r\n    return 'n/a'\r\n",
  "595f4df2e8f12961ab00007f": "def haiku_wizard(arr):\r\n    return '\\n' . join(' ' . join(words[i / / 10 - 1][i % 10] for i in row) for row in arr)\r\n",
  "5965144da82d479517000001": "import re\n\n\ndef we_rate_dogs(s, rating):\n    return re . sub(r\"\\d+\\/\\d+\", f\" { rating } /10\", s)\n",
  "596549c7743cf369b900021b": "from gmpy2 import is_prime\n\n\ndef twin_prime(n):\n    return sum(is_prime(i) and is_prime(i + 2) for i in range(n))\n",
  "58e230e5e24dde0996000070": "def nextPrime(n):\r\n    while True:\r\n    n += 1\r\n    if n == 2 or (n > 2 and n % 2 and all(n % i for i in range(3, int(n * * 0.5) + 1, 2))):\r\n        return n\r\n",
  "5964d7e633b908e172000046": "def recover(st):\r\n    res = []\r\n    for i in range(len(st)):\r\n    for k, v in alph . items():\r\n    if sorted(k) == sorted(st[i: i + len(k)]):\r\n    res . append(v)\r\n    return '' . join(map(str, res)) or \"No digits found\"\r\n",
  "596343a24489a8b2a00000a2": "def is_it_a_num(s: str) - > str:\r\n    t = '' . join(i for i in s if i . isdigit())\r\n    return t if len(t) == 11 and t[0] == \"0\" else \"Not a phone number\"\r\n",
  "55ea5650fe9247a2ea0000a7": "def unscramble_eggs(word):\r\n    return word . replace('egg', '')\r\n",
  "5963314a51c68a26600000ae": "def longer(s):\r\n    return ' ' . join(sorted(s . split(), key=lambda w: (len(w), w)))\r\n",
  "5962d557be3f8bb0ca000010": "def clean_mean(sample, cutoff):\r\n    mean = sum(sample) / len(sample)\r\n    dev = ((1 / len(sample)) * sum((num - mean) * * 2 for num in sample)) * * (1 / 2)\r\n    cleaned = [num for num in sample if abs(num - mean) <= cutoff * dev]\r\n    if sample == cleaned:\r\n    return round(mean, 2)\r\n    else:\r\n    return clean_mean(cleaned, cutoff)\r\n",
  "595910299197d929a10005ae": "def pizza_rewards(customers, min_orders, min_price):\r\n    return {k for k, v in customers . items() if sum(x >= min_price for x in v) >= min_orders}\r\n",
  "5962bbea6878a381ed000036": "class HighScoreTable:\r\n    def __init__(self, limit):\r\n    self . __limit__ = limit\r\n    self . scores = []\r\n    def update(self, n):\r\n    self . scores . append(n)\r\n    self . scores = sorted(self . scores, reverse=True)[: self . __limit__]\r\n    def reset(self):\r\n    self . scores = []\r\n",
  "537529f42993de0e0b00181f": "def count_inversions(array):\r\n    inv_count = 0\r\n    for i in range(len(array)):\r\n    for j in range(i, len(array)):\r\n    if array[i] > array[j]:\r\n    inv_count += 1\r\n    return inv_count\r\n",
  "56d0a591c6c8b466ca00118b": "def is_triangular(t):\r\n    x = int((t * 2) * * 0.5)\r\n    return t == x * (x + 1) / 2\r\n",
  "596185fe9c3097a345000a18": "from itertools import cycle\r\n\r\n\r\ndef find_pattern(s):\r\n    diffs = [y - x for x, y in zip(s, s[1:])]\r\n    for i in range(1, len(diffs) + 1):\r\n    if len(diffs) % i == 0 and all(a == b for a, b in zip(diffs, cycle(diffs[: i]))):\r\n        return diffs[: i]\r\n",
  "596144f0ada6db581200004f": "from collections import deque\r\n\r\n\r\ndef custom_fib(signature, indexes, n):\r\n    fib = deque(signature)\r\n    for _ in range(n):\r\n    fib . append(sum(map(fib . __getitem__, indexes)))\r\n    fib . popleft()\r\n    return fib[0]\r\n",
  "59619e4609868dd923000041": "def total_bill(s):\r\n    num = s . count('r')\r\n    return (num - num / / 5) * 2\r\n",
  "595e9f258b763bc2d2000032": "def battle(x, y):\r\n    sum_x, sum_y = sum(ord(i) - 64 if i . isupper() else (ord(i) - 96) * 0.5 for i in x), sum(\r\n        ord(i) - 64 if i . isupper() else (ord(i) - 96) * 0.5 for i in y)\r\n    return x if sum_x > sum_y else y if sum_x < sum_y else \"Tie!\"\r\n",
  "595d4823c31ba629d90000d2": "from collections import Counter\r\n\r\n\r\ndef find_rarest_pepe(pepes):\r\n    counts = Counter(pepes)\r\n    rarest = min(counts . values())\r\n    rare_pepes = [pepe for pepe, count in counts . items()\r\n                  if count == rarest < 5]\r\n    return (rare_pepes[0] if len(rare_pepes) == 1\r\n            else sorted(rare_pepes) if rare_pepes\r\n            else 'No rare pepes!')\r\n",
  "595dab6c5834558a5d0000cd": "from statistics import mean, stdev\r\n\r\n\r\ndef t_test(sample, pop_mean, alpha):\r\n    mn, sd, n = mean(sample), stdev(sample), len(sample)\r\n    return 'Good to drink' if abs(mn - pop_mean) * n * * .5 / sd <= t_table[n - 2][alpha] else 'Reject'\r\n",
  "595ddfe2fc339d8a7d000089": "def hamster_me(code, message):\r\n    cache = {k: k + \"1\" for k in code}\r\n    for l in code:\r\n    for i in range(2, 27):\r\n    shifted = chr(97 + (ord(l) - 98 + i) % 26)\r\n    if shifted in cache:\r\n    break\r\n    cache[shifted] = l + str(i)\r\n    return \"\" . join(map(lambda x: cache[x], message))\r\n",
  "595bd047b96bed1f59000001": "from functools import lru_cache\r\n\r\n\r\n@ lru_cache(maxsize=None)\r\ndef maximum_product(n, m=2):\r\n    return n < m or max(x * maximum_product(n - x, x + 1) for x in range(m, n + 1))\r\n",
  "595aa94353e43a8746000120": "def find_deleted_number(arr, mixed_arr):\r\n    return sum(arr) - sum(mixed_arr)\r\n",
  "56a73d2194505c29f600002d": "# Write a string representing a regular expression to detect whether a binary number is divisible by 7\n# It won't be accepted if you code something else like Function\n''' \n    FSM -> regex conversion \n    FSM - states = {0,1,2,3,4,5,6} # first n bits modulo 7 \n    - input = {0, 1} \n    - init state = 0 \n    - final state = 0 \n    - state-transition function \n    state: 0, in: 0 -> 0 \n    state: 0, in: 1 -> 1 \n    ... \n    state: 3, in: 0 -> 6 # 3 * 2 = 6, 11 + in: 0 -> 110 \n    state: 3, in: 1 -> 0 # 3 * 2 + 1 = 7 mod 7 = 0, 11 + in: 1 -> 111 \n    state: 4, in: 0 -> 1 # 4 * 2 = 8 mod 7 = 1, 100 + in: 0 -> 1000 \n    state: 4, in: 1 -> 2 # 4 * 2 + 1 = 9 mod 7 = 2, 100 + in: 1 -> 1001 \n    ... \n    https://cs.stackexchange.com/questions/2016/how-to-convert-finite-automata-to-regular-expressions \n    '''\nsolution = '\\A((0|1(0(111|01)*(00|110))*(1|0(111|01)*10)(01*0(0|11(111|01)*10|(10|11(111|01)*(00|110))(0(111|01)*(00|110))*(1|0(111|01)*10)))*1)0*)+\\Z'\n",
  "58a08e622e7fb654a300000e": "def sort_grades(gs):\r\n    return sorted(gs, key=grade)\r\n\r\n    def grade(v):\r\n    if v == 'VB':\r\n        return - 2\r\n    if v == 'V0':\r\n        return - 1\r\n    if v == 'V0+':\r\n        return 0\r\n    return int(v[1:])\r\n",
  "595b3f0ad26b2d817400002a": "def grille(msg, code):\r\n    return '' . join(msg[- 1 - i] for i, c in enumerate(bin(code)[:: - 1]) if c == '1' and i < len(msg))[:: - 1]\r\n",
  "52f677797c461daaf7000740": "from math import gcd\n\n\ndef solution(a):\n    return gcd(* a) * len(a)\n",
  "55e29a6b4d99b59e98000089": "def ascii_cipher(message, key):\r\n    sign, n, rot = key / / abs(key), abs(key), - 1\r\n    while n > 1:\r\n    rot, n = [(max(i, rot), n / / i) for i in range(2, n + 1) if n % i == 0][0]\r\n\r\n    return '' . join(chr((ord(c) + rot * sign) % 128) for c in message)\r\n",
  "571640812ad763313600132b": "def alex_mistakes(katas, time):\n    mistakes = 0\n    pushup_time = 5\n    time_left = time - katas * 6\n    while time_left >= pushup_time:\n    time_left -= pushup_time\n    pushup_time *= 2\n    mistakes += 1\n    return mistakes\n",
  "5959b637030042889500001d": "from collections import Counter\r\nEXECUTIONS_ORDER = [('Z', Counter(\"ZERO\"), '0'),\r\n                    ('W', Counter(\"TWO\"), '2'),\r\n                    ('U', Counter(\"FOUR\"), '4'),\r\n                    ('X', Counter(\"SIX\"), '6'),\r\n                    ('G', Counter(\"EIGHT\"), '8'),\r\n                    ('O', Counter(\"ONE\"), '1'),\r\n                    ('H', Counter(\"THREE\"), '3'),\r\n                    ('F', Counter(\"FIVE\"), '5'),\r\n                    ('V', Counter(\"SEVEN\"), '7'),\r\n                    ('I', Counter(\"NINE\"), '9')]\r\n\r\n\r\ndef original_number(s):\r\n    ans, count, executions = [], Counter(s), iter(EXECUTIONS_ORDER)\r\n    while count:\r\n    c, wordCount, value = next(executions)\r\n    ans . extend([value] * count[c])\r\n    for _ in range(count[c]):\r\n        count -= wordCount\r\n    return '' . join(sorted(ans))\r\n",
  "589e4d646642d144a90000d8": "def running_average():\n    count = 0\n    total = 0\n    def avg(new):\n    nonlocal count, total\n    count += 1\n    total += new\n    return round(total / count, 2)\n    return avg\n",
  "58bf9bd943fadb2a980000a7": "def who_is_paying(name):\r\n    return [name, name[0: 2]] if len(name) > 2 else [name]\r\n",
  "5956d127a817c7c51b000026": "class Student:\r\n\r\n    def __init__(self, first_name, last_name, grades=[]):\r\n    self . first_name = first_name\r\n    self . last_name = last_name\r\n    self . grades = grades[:]\r\n\r\n    def add_grade(self, grade):\r\n    self . grades . append(grade)\r\n\r\n    def get_average(self):\r\n    return sum(self . grades) / len(self . grades)\r\n",
  "59568be9cc15b57637000054": "def elder_age(m, n, l, t, s=0):\n    if m > n:\n        m, n = n, m\n    if m < 2 or not n & (n - 1):  # n is a power of 2\n    s, p = max(s - l, 0), max(n + s - l - 1, 0)\n    return (p - s + 1) * (s + p) / / 2 * m % t\n    p = 1 << n . bit_length() - 1  # Biggest power of 2 lesser than n\n    if m < p:\n        return (elder_age(m, p, l, t, s) + elder_age(m, n - p, l, t, s + p)) % t\n    return (elder_age(p, p, l, t, s) + elder_age(m - p, n - p, l, t, s) +\n            elder_age(p, n - p, l, t, s + p) + elder_age(m - p, p, l, t, s + p)) % t\n",
  "59564f3bcc15b5591a00004a": "def filter_even_length_words(words):\r\n    return [word for word in words if len(word) % 2 == 0]\r\n",
  "59564a286e595346de000079": "def mobile_keyboard(s):\r\n    lookup = {\r\n        c: i\r\n        for s in \"1,2abc,3def,4ghi,5jkl,6mno,7pqrs,8tuv,9wxyz,*,0,#\" . split(\",\")\r\n        for i, c in enumerate(s, start=1)\r\n    }\r\n    return sum(lookup[c] for c in s)\r\n",
  "59549d482a68fe3bc2000146": "from functools import lru_cache\r\n\r\n\r\ndef distribution_of(gold):\r\n    mini = lru_cache(maxsize=None)(lambda i, j: j -\r\n                                   i and min(maxi(i + 1, j), maxi(i, j - 1)))\r\n    maxi = lru_cache(maxsize=None)(\r\n        lambda i, j: j - i and max(gold[i] + mini(i + 1, j), gold[j - 1] + mini(i, j - 1)))\r\n    return (res := maxi(0, len(gold))), sum(gold) - res\r\n",
  "5954b48ad8e0053403000040": "def jump_to(x): return (n: = - int((1 - (8 * abs(x) + 1) * * .5) / / 2)) + (- ~ n / / 2 - x) % 2 * (n % 2 + 1)\n",
  "58d06bfbc43d20767e000074": "from collections import Counter\n\n\ndef damaged_or_sunk(board, attacks):\n    # Invert board and shift attacks to 0 based indexcing\n    board = board[:: - 1]\n    attacks = [(r - 1, c - 1) for r, c in attacks]\n    # Quantify initial state\n    start_ships = Counter(v for r in board for v in r)\n    # Apply attacks\n    for r, c in attacks:\n    board[c][r] = \"X\"\n    # Quantify end state\n    end_ships = Counter(v for r in board for v in r)\n    # Analyse change in state\n    sunk, damaged, not_touched = 0, 0, 0\n    for id, count in start_ships . items():\n    if id != 0:\n    if end_ships[id] == count:\n    not_touched += 1\n    elif end_ships[id] == 0:\n    sunk += 1\n    else:\n    damaged += 1\n    score = sunk + 0.5 * damaged - not_touched\n    return {'sunk': sunk, 'damaged': damaged, 'not_touched': not_touched, 'points': score}\n",
  "58a65c82586e98266200005b": "from collections import defaultdict\r\n\r\n\r\ndef fix_progression(arr):\r\n    res = 0\r\n    for i in range(len(arr)):\r\n    D = defaultdict(int)\r\n    for j in range(i):\r\n    q, r = divmod(arr[i] - arr[j], i - j)\r\n    if not r:\r\n    D[q] += 1\r\n    res = max(res, D[q])\r\n    return len(arr) - res - 1\r\n",
  "58b626ee2da07adf3e00009c": "def get_candy_position(n, r, c, candy):\r\n    if candy > n:\r\n        return [- 1, - 1, - 1]\r\n\r\n    linIdx = r * c - ((candy - 1) % (r * c) + 1)\r\n    return [(candy - 1) / / (r * c) + 1, linIdx / / c, linIdx % c]\r\n",
  "58aa6141c9eb047fec000133": "def survivor(n):\n    k = 2\n    while n >= k and n % k:\n    n -= n / / k\n    k += 1\n    return n % k > 0\n",
  "59547688d8e005759e000092": "def distribution_of(golds):\r\n    g = golds[:]\r\n    turn, total = 0, [0, 0]\r\n    while g:\r\n    total[turn % 2] += g . pop(- (g[0] < g[- 1]))\r\n    turn += 1\r\n    return total\r\n",
  "58ad0159c9e5b0399b0001b8": "def knight_rescue(N, x, y):\r\n    return any(n % 2 == 0 for n in N) or (x + y) % 2 == 0\r\n",
  "58fea5baf3dff03a6e000102": "import math\n\n\ndef factor_digit(n):\n    if n < 0:\n    return 0\n    if n <= 1:\n    return 1\n    # Kamenetsky formula\n    x = ((n * math . log10(n / math . e) + math . log10(2 * math . pi * n) / 2.0))\n    return math . floor(x) + 1\n",
  "59015f8cc842a3e7f10000a4": "from functools import cache\r\nfrom itertools import groupby\r\nfrom gmpy2 import is_prime as gmpy2_isprime\r\nisprime = cache(gmpy2_isprime)\r\n\r\n\r\ndef simplified_array(a):\r\n    b = [sum(v) for k, v in groupby(a, isprime)]\r\n    return a if a == b else simplified_array(b)\r\n",
  "595467c63074e38ba4000063": "def incomplete_virus(s):\r\n    out = \"\"\r\n    for i, c in enumerate(s):\r\n    if c > \"1\":\r\n    out += \"1\" * (len(s) - i)\r\n    break\r\n    out += c\r\n    return int(out, 2)\r\n",
  "590148d79097384be600001e": "def sort_by_guide(arr, guide):\r\n    it = iter(sorted((y, x) for x, y in zip(arr, guide) if y > 0))\r\n    return [next(it)[1] if y > 0 else x for x, y in zip(arr, guide)]\r\n",
  "590fca79b5f8a69285000465": "def apples_distribution(a, c, m):\r\n    return sum(a % i <= m for i in range(1, min(a, c) + 1))\r\n",
  "582bbdbcc190132e3e0001f3": "def even_binary(s):\r\n    s = s . split()\r\n    e = sorted(filter(lambda b: b[- 1] == '0', s), reverse=True)\r\n    return ' ' . join(map(lambda b: e . pop() if b[- 1] == '0' else b, s))\r\n",
  "56576f82ab83ee8268000059": "def spacey(array):\r\n    return ['' . join(array[: i + 1]) for i in range(len(array))]\r\n",
  "594b898169c1d644f900002e": "import re\r\n   class ParseError (Exception):\r\n        pass\r\n\r\n    def execute (code):\r\n    def parse_and_remove_patterns(code):\r\n    patterns = {}\r\n    for match in re . finditer(r'p(\\d+)([^q]*)q', code):\r\n    name, pattern_code = match . groups ((1, 2))\r\n    if name in patterns:\r\n    raise ParseError(\"duplicate pattern {}\" . format (name))\r\n    patterns[name] = pattern_code\r\n    code = re . sub (r'p\\d+[^q]*q', '', code)\r\n    return code, patterns\r\n    def replace_patterns(code):\r\n    def f(match):\r\n    name = match . group(1)\r\n    if name not in patterns:\r\n    raise ParseError(\"undefined pattern P{}\" . format (name))\r\n    return patterns[name]\r\n    code, patterns = parse_and_remove_patterns(code)\r\n    stack_counter = 1\r\n    while stack_counter < 32 and 'P' in code:\r\n    code = re . sub (r'P(\\d+)', f, code)\r\n    stack_counter += 1\r\n    if 'P' in code:\r\n    raise ParseError(\"infinite recursion detected\")\r\n    return code\r\n    def simplify_code(code):\r\n    code = replace_patterns(code)\r\n    while '(' in code:\r\n    code = re . sub(r'\\(([^()]*)\\)(\\d*)',\r\n                    lambda match : match . group (1 ) * int (match . group (2 ) or 1 ),\r\n                    code)\r\n    code = re . sub(r'([FLR])(\\d+)',\r\n                    lambda match : match . group (1 ) * int (match . group (2 )),\r\n                    code)\r\n    return code\r\n    def compute_path(simplified_code):\r\n    pos, dir = (0, 0 ), (1 , 0 )\r\n    path = [pos]\r\n    for cmd in simplified_code:\r\n    if cmd == 'F':\r\n    pos = tuple (a + b for a, b in zip (pos, dir ))\r\n    path . append(pos)\r\n    elif cmd == 'L':\r\n    dir = (dir [1], - dir [0 ])\r\n    elif cmd == 'R':\r\n    dir = (- dir [1], dir [0 ])\r\n    return path\r\n    def compute_bounding_box(path):\r\n    min_x = min (pos [0] for pos in path)\r\n    min_y = min (pos [1] for pos in path)\r\n    max_x = max (pos [0] for pos in path)\r\n    max_y = max (pos [1] for pos in path)\r\n    return (min_x, min_y), (max_x , max_y )\r\n\r\n    def build_grid(path):\r\n    min_xy, max_xy = compute_bounding_box(path)\r\n    width = max_xy [0] - min_xy [0 ] + 1\r\n    height = max_xy [1] - min_xy [1 ] + 1\r\n    grid = [[' '] * width for _ in range (height)]\r\n    for x, y in path:\r\n    grid [y - min_xy [1 ]][x - min_xy [0 ]] = '*' \r\n    return grid\r\n    def grid_to_string(grid):\r\n    return '\\r\\n' . join ('' . join (row) for row in grid)\r\n\r\n    code = simplify_code(code)\r\n    path = compute_path(code)\r\n    grid = build_grid(path)\r\n    return grid_to_string(grid)\r\n",
  "59530d2401d6039f8600001f": "from math import ceil, log\n\n\ndef how_many_measurements(n):\n    return ceil(log(n, 3))\n",
  "5737f14449fc581de9001845": "def are_contigElemen_closeEnough(arr, abs_error):\r\n    return all(abs(x - y) <= abs_error for x, y in zip(arr, arr[1:]))\r\n\r\n    def simul_close_to2(arr, abs_error, count=0):\r\n\r\n    while not are_contigElemen_closeEnough(arr, abs_error):\r\n    mu = sum(arr) / len(arr)\r\n    arr = [(x + mu) / mu for x in arr]\r\n    count += 1\r\n    return count\r\n",
  "58603c898989d15e9e000475": "primes = [2, 3, 5, 7]\r\n\r\n\r\ndef is_prime(n):\r\n    if n < 2:\r\n    return False\r\n    m = int(n * * .5) + 1\r\n    for p in primes:\r\n    if p >= m:\r\n        break\r\n    if not n % p:\r\n    return False\r\n    q, d = primes[- 1], 4 if (n + 1) % 6 else 2\r\n    while q < m:\r\n    q, d = q + d, 4 - d\r\n    if is_prime(q):\r\n    primes . append(q)\r\n    if not n % q:\r\n    return False\r\n    return True\r\n",
  "5882b052bdeafec15e0000e6": "class Quark (object):\r\n    _COLOR = frozenset([\"red\", \"blue\", \"green\"])\r\n    _FLAVOR = frozenset(['up', 'down', 'strange', 'charm', 'top', 'bottom'])\r\n    baryon_number = 1 / 3\r\n    def __init__(self, color, flavor):\r\n    if color in self . _COLOR:\r\n    self . color = color\r\n    else:\r\n    raise ValueError(f\" { color } is not allowed color for quarks!\")\r\n    if flavor in self . _FLAVOR:\r\n    self . flavor = flavor\r\n    else:\r\n    raise ValueError(f\" { flavor } is not allowed flavor for quarks!\")\r\n\r\n    def interact(self, quark):\r\n    self . color, quark . color = quark . color, self . color\r\n",
  "5899f1df27926b7d000000eb": "def tower_of_hanoi(rings):\r\n    return 2 * * rings - 1\r\n",
  "595249fc10b69f4f7a000003": "def to_query_string(data):\r\n    result = []\r\n    for key, value in sorted(data . items()):\r\n    if not isinstance(value, (list, tuple, set)):\r\n    value = [value]\r\n    for val in value:\r\n    result . append(\"{}={}\" . format(key, val))\r\n    return \"&\" . join(result)\r\n",
  "5951b409aea9beff3f0000c6": "from fractions import gcd\n\n\ndef final_attack_value(x, monster_list):\n    for i in monster_list:\n    x += gcd(i, x) if i > x else i\n    return x\n",
  "58b57f984f353b3dc9000030": "def palindrome(n, s): return (s + s[- 1 - n % 2:: - 1]). center(n, s[0])\n",
  "591b9c07266a3164c90001fe": "import random\r\n\r\n\r\ndef get_featured_projects(all_projects):\r\n    all_projects = all_projects[:]\r\n    random . shuffle(all_projects)\r\n    if len(all_projects) <= 10:\r\n    return all_projects\r\n    result = [p for p, i in zip(\r\n        (p for p in all_projects if p[\"nreceiving_from\"] > 5), range(7))]\r\n    result . extend([p for p, i in zip(\r\n        (p for p in all_projects if p[\"nreceiving_from\"] <= 5), range(10 - len(result)))])\r\n    random . shuffle(result)\r\n    return result\r\n",
  "5950a4bfc6bf4f433f000031": "def shortest_time(n, m, speeds):\r\n    lift, open, close, walk = speeds\r\n    return min(\r\n        # taking the elevator\r\n        abs(m - n) * lift + open + close + (n - 1) * lift + open,\r\n        # walking\r\n        (n - 1) * walk\r\n    )\r\n",
  "594fae1a0462da7beb000046": "def can_jump(arr):\r\n    if arr[0] == 0 or len(arr) == 1:\r\n    return False\r\n    if arr[0] >= len(arr):\r\n    return True\r\n    for jump in range(1, arr[0] + 1):\r\n    if can_jump(arr[jump:]):\r\n    return True\r\n    return False\r\n",
  "59031db02b0070a923000110": "def zero_or_one(n, s): return [sum(x) > n / 2 for x in zip(* s)]\n",
  "594b8e182fa0a0d7fc000875": "def find_e(s):\r\n    return s and str(s . count('e') + s . count('E') or 'There is no \"e\".')\r\n",
  "58aed2cafab8faca1d000e20": "def modified_sum(lst, p):\r\n    return sum(n * * p - n for n in lst)\r\n",
  "5695995cc26a1e90fe00004d": "class Machine:\r\n    def __init__(self):\r\n    self . cmd = dict()\r\n    self . _actions = [lambda x: x + 1, lambda x: 0,\r\n                       lambda x: x / 2, lambda x: x * 100, lambda x: x % 2]\r\n\r\n    def command(self, cmd, num):\r\n    self . last_cmd = cmd\r\n    if cmd in self . cmd:\r\n    return self . _actions[self . cmd[cmd]](num)\r\n    else:\r\n    self . cmd[cmd] = 0\r\n    return self . _actions[self . cmd[cmd]](num)\r\n\r\n    def response(self, res):\r\n    if res == False:\r\n    self . cmd[self . last_cmd] += 1\r\n",
  "563fbac924106b8bf7000046": "from re import sub\r\nignoreList = [\"THE\", \"OF\", \"IN\", \"FROM\", \"BY\",\r\n              \"WITH\", \"AND\", \"OR\", \"FOR\", \"TO\", \"AT\", \"A\"]\r\n\r\n\r\ndef generate_bc(url, separator):\r\n    # remove leading http(s):// and trailing /\r\n    url = sub(\"https?://\", \"\", url . strip(\"/\"))\r\n\r\n    # skip index files\r\n    url = sub(\"/index\\..+$\", \"\", url)\r\n\r\n    # split url for processing\r\n    url = url . split(\"/\")\r\n\r\n    # remove file extensions, anchors and parameters\r\n    url[- 1] = sub(\"[\\.#\\?].*\", \"\", url[- 1])\r\n\r\n    # first element is always \"home\"\r\n    menu = [\"HOME\"]\r\n    # generate breadcrumb items\r\n    for item in url[1:]:\r\n        # replace dashes and set to uppercase\r\n    item = sub(\"-\", \" \", item . upper())\r\n    # create acronym if too long\r\n    if len(item) > 30:\r\n    item = \"\" . join([w[0] for w in item . split() if w not in ignoreList])\r\n    menu . append(item)\r\n\r\n    # generate paths\r\n    path = [\"/\"]\r\n    for i in range(len(url) - 1):\r\n    path . append(path[i] + url[i + 1] + \"/\")\r\n\r\n    # generate html code\r\n    html = []\r\n    for i in range(len(url) - 1):\r\n    html . append(\"<a href=\\\"\" + path[i] + \"\\\">\" + menu[i] + \"</a>\")\r\n    html . append(\"<span class=\\\"active\\\">\" + menu[- 1] + \"</span>\")\r\n\r\n    return separator . join(html)\r\n",
  "587a58d008236e4951000197": "puzzle = []\r\npuzzle . append(puzzle)\r\n",
  "594cd799c08247a55a000004": "def is_john_lying(a, b, s):\r\n    delta = abs(a) + abs(b) - s\r\n    return delta <= 0 and delta % 2 == 0\r\n",
  "594cc999d3cc8c883a00003b": "def how_many_apples(n):\r\n    return n * * n - n + 1 if n != 2 else 7\r\n",
  "536e7c7fd38523be14000ca2": "''' \n some useful information about memory allocation in operating system \n ->There are various algorithms which are implemented by the Operating System in order to find out the holes(continuous empy blocks) \\ \n in the linked list(array in this kata) and allocate them to the processes. \n ->various algorithms used by operating system: \n 1. First Fit Algorithm => First Fit algorithm scans the linked list and whenever it finds the first big enough hole to store a process, it stops scanning and load the process into that hole. \n \n 2. Next Fit Algorithm => Next Fit algorithm is similar to First Fit algorithm except the fact that, Next fit scans the linked list from the node where it previously allocated a hole. \n ( if i have allocated memory of size 8 in previous turn and initial pointer is 3 \\ \n then in next turn os will start searching for next empty hole from position 11(3+8=11) ) \n \n 3. Best Fit Algorithm => The Best Fit algorithm tries to find out the smallest hole possible in the list that can accommodate the size requirement of the process. \n \n 4. Worst Fit Algorithm => it is opposite of Best Fit Algorithm meaning that \\ \n (The worst fit algorithm scans the entire list every time and tries to find out the biggest hole in the list which can fulfill the requirement of the process.) \n \n The first fit and best fit algorithms are the best algorithm among all \n PS. I HAVE IMPLEMENTED Best Fit Algorithm IN JAVASCRIPT AND IMPLEMENTED Next Fit Algorithm in PYTHON :) \n '''\n# Next fit Algorithm\n\n\nclass MemoryManager:\n    def __init__(self, memory):\n    self . storage = [True] * len(memory)\n    self . previous_allocated_index = 0\n    self . allocated = {}\n    self . data = memory\n    def allocate(self, size):\n    find_next = self . process_allocate(self . previous_allocated_index, len(\n        self . data) - size + 1, size)  # start searching from previously allocated block\n    if find_next is not None:\n        return find_next\n    # if we cant find from last index then start searching from starting to previously allocated index\n    from_start = self . process_allocate(\n        0, self . previous_allocated_index - size + 1, size)\n    if from_start is not None:\n        return from_start\n    raise IndexError('caused by insufficient space in storage')\n\n    def process_allocate(self, initial, end, size):\n    for i in range(initial, end):\n    if all(self . storage[i: i + size]):\n    self . previous_allocated_index = i\n    self . storage[i: i + size] = [False] * size\n    self . allocated[i] = i + size\n    return i\n    def release(self, pointer):\n    if self . storage[pointer]:\n        raise RuntimeError(\n            'caused by providing incorrect pointer for releasing memory')\n    size = self . allocated[pointer] - pointer\n    self . storage[pointer: size] = [True] * size\n    self . data[pointer: size] = [None] * size\n    del self . allocated[pointer]\n\n    def read(self, pointer):\n    if self . storage[pointer]:\n        raise RuntimeError(\n            'caused by providing incorrect pointer for reading memory')\n    return self . data[pointer]\n\n    def write(self, pointer, value):\n    if self . storage[pointer]:\n        raise RuntimeError(\n            'caused by providing incorrect pointer for writing memory')\n    self . data[pointer] = value\n",
  "52bb6539a4cf1b12d90005b7": "from scipy . ndimage . measurements import label, find_objects, np\r\n\r\n\r\ndef validate_battlefield(field):\r\n    field = np . array(field)\r\n    return sorted(\r\n        ship . size if min(ship . shape) == 1 else 0\r\n        for ship in (field[pos] for pos in find_objects(label(field, np . ones((3, 3)))[0]))\r\n    ) == [1, 1, 1, 1, 2, 2, 2, 3, 3, 4]\r\n",
  "53e57dada0cb0400ba000688": "from collections import Counter\r\n\r\n\r\ndef listPosition(word):\r\n    l, r, s = len(word), 1, 1\r\n    c = Counter()\r\n\r\n    for i in range(l):\r\n    x = word[(l - 1) - i]\r\n    c[x] += 1\r\n    for y in c:\r\n    if (y < x):\r\n    r += s * c[y] / / c[x]\r\n    s = s * (i + 1) / / c[x]\r\n    return r\r\n",
  "594a5d8f704e4d5561000019": "def build_pyramid(s: str, n: int) - > str:\r\n    w = len(s) * n\r\n    return '\\n' . join('' . join(c * i for c in s). center(w). rstrip() for i in range(1, n + 1))\r\n",
  "5671d975d81d6c1c87000022": "from itertools import permutations\r\n   def check_row(I, x):\r\n        if len(set(I)) < len(I):\r\n            return False\r\n    v, h = 1, I [0]\r\n\r\n      for i in I [1:]:\r\n           if i > h:\r\n                h = i\r\n    v += 1\r\n    return v == x or x == 0\r\n\r\n    def check_grid (a, b, c , d , x , y ):\r\n        # a, b, c, d: 4 rows/ 4 columns\r\n        # x, y: pair of clues\r\n    for i in range(len (a)):\r\n        col = [a [i ], b [i ], c [i ], d [ i ]]\r\n        if not check_row (col , x [i ]) or not check_row (col [:: - 1 ], y [:: - 1 ][i ]):\r\n            return False\r\n    return True\r\n\r\n    def gen_arr (a, b ):\r\n        # generate possible rows based on pair of clues\r\n    L = [1, 2, 3 , 4 ]\r\n       return [o for o in permutations (L)\r\n                if check_row (o, a) and check_row (o [:: - 1 ], b )]\r\n\r\n    def solve_puzzle(clues):\r\n        Rows = [gen_arr (clues [15 - i ], clues [i + 4 ]) for i in range ( 0 , 4 )]\r\n        return [tuple ([a , b , c , d ]) for a in Rows [0 ] for b in Rows [1 ] for c in Rows [ 2 ] for d in Rows [ 3 ] if check_grid ( a , b , c , d , clues [: 4 ], clues [ 8 : 12 ])][ 0 ]",
  "58bf79fdc8bd4432d6000029": "def slogans(p, r):\n    i, s = 0, ''\n    for x in r:\n    s += x\n    if s not in p:\n    i += 1\n    s = x\n    return i + 1\n",
  "56e3cbb5a28956899400073f": "def find_subarr_maxsum(arr):\r\n    subarrs = [arr[i: j + 1]\r\n               for i in range(len(arr)) for j in range(i, len(arr))]\r\n\r\n    maxsum = max((sum(subarr) for subarr in subarrs))\r\n    if maxsum < 0:\r\n    return [[], 0]\r\n    maxes = [subarr for subarr in subarrs if sum(subarr) == maxsum]\r\n    if len(maxes) == 1:\r\n    maxes = maxes[0]\r\n\r\n    return [maxes, maxsum]\r\n",
  "552ec968fcd1975e8100005a": "import re\r\ndict = {\"[\\.,']\": \"\", \"too?\": \"2\", \"fore?\": \"4\", \"oo\": \"00\", \"be\": \"b\",\r\n        \"are\": \"r\", \"you\": \"u\", \"please\": \"plz\", \"people\": \"ppl\",\r\n        \"really\": \"rly\", \"have\": \"haz\", \"know\": \"no\", \"s\": \"z\"}\r\n\r\n\r\ndef n00bify(text):\r\n    for word in dict:\r\n    text = re . sub(word, dict[word], text, flags=re . IGNORECASE)\r\n\r\n    if text[0] in \"hH\":\r\n    text = text . upper()\r\n\r\n    if text[0] in \"wW\":\r\n    text = \"LOL \" + text\r\n    if len(re . sub(\"[\\?!]*\", \"\", text)) >= 32:\r\n    text = re . sub(\"\\A(LOL |)\", \"\\g<1>OMG \", text)\r\n\r\n    text = \" \" . join(w . upper() if i % 2 != 0 else w for i,\r\n                      w in enumerate(text . split()))\r\n\r\n    text = re . sub(\"(\\?|!)\", \"\\g<1>\" * len(text . split()),\r\n                    text). replace(\"!!\", \"!1\")\r\n\r\n    return text\r\n",
  "58dbdccee5ee8fa2f9000058": "def sp_eng(sentence):\r\n    return 'english' in sentence . lower()\r\n",
  "594a1822a2db9e93bd0001d4": "def scratch(lottery):\r\n    return sum(int(n) for lot in lottery for a, b, c, n in [lot . split()] if a == b == c)\r\n",
  "55db7b239a11ac71d600009d": "def give_triang(per):\n    cnt = 0\n    for a in range(3, per):\n    if (2 * a > per):\n        break\n    for b in range(a, per):\n    if (a + 2 * b > per):\n        break\n    c = (a * a + a * b + b * b) * * 0.5\n    if (c == int(c) and a + b + c <= per):\n    cnt += 1\n    return cnt\n",
  "578e55c275ffd11cb3001045": "from math import comb\n''' \n    Consider each square in the board; how many times does it get covered by a Queen across \n    all a*b possible positions of the Queens: \n    First let m be the large dimension of the board, m>=n, n the smaller dimension, and say \n    that m is \"horizontal\" and n is \"vertical\". \n    - Each Queen placement will cover m-1 horizontal squares and n-1 vertical squares, for \n    a total of (m-1+n-1) = (m+n-2) squares. Since there are m*n Queen positions, the Queen \n    placements will cover in total m*n(m+n-2) squares due to horizontal and vertical moves. \n    - Now need to consider diagonal moves: There are 2 possible diagonals in the board, NW-SE and \n    SW-NE. They are identical by symmetry so consider one only. There are a total of (m-n+1) \"full size\" \n    diagonals that each contain n squares; e.g. for 9x4 board there are (9-4+1)=6 diagonals from NW to SE \n    that each contain n=4 squares. Each such diagonal therefore has n positions to place a Queen \n    and with each placement the Queen will cover n-1 such diagonal squares. Thus for the \"full diagonals\" \n    we get (m-n+1)*n*(n-1) squares covered. \n    -Then there are 2 sets of \"partial\" diagonals one at each end of the board. These contain diagonals \n    containing n-1, n-2, ..., 1 square. For example in 9x4 board, we have 1 diagonal of length 3, 1 of length \n    2, 1 of length 1, reaching into the bottom left and top right corners. \n    Each placement of a queen in such diagonal will cover k-1 squares diagonally, i.e. in diagonal of size 3 \n    there are 3 positions for a queen and 3-1 = 2 squares covered by each queen. Therefore each of the 2 \"partial\" \n    diagonal blocks will contribute 3*(3-1) + 2*(2-1) + 1*(1-1) squares. In general, this is (n-1)*(n-1-1)... series \n    which evaluates to 2*math.comb(n,3) by hockey stick formula. Remember there are 2 such regions for a given diagonal \n    direction. \n    -So for *EACH* diagonal direction we get: (m-n+1)*n*(n-1) + 2*2*math.comb(n,3) and since \n    there are 2 diagonal directions we get 2* above result. \n    -Hence adding everything horizontal, vertical, 2*diagonals we get: \n    m*n(m+n-2) + 2 * [ (m-n+1)*n*(n-1) + 2*2*math.comb(n,3) ] \n    = m*n*(m+n-2) + 2*(m-n+1)*n*(n-1) + 8*math.comb(n,3) \n    '''\n\n\ndef chessboard_squares_under_queen_attack(a, b):\n    m, n = max(a, b), min(a, b)\n    return m * n * (m + n - 2) + 2 * (m - n + 1) * n * (n - 1) + 8 * comb(n, 3)\n",
  "5949481f86420f59480000e7": "def oddOrEven(arr):\r\n    return 'even' if sum(arr) % 2 == 0 else 'odd'\r\n",
  "584e93a70f60247eb8000132": "def perfect_square(square):\r\n    l = len(square . split(\"\\n\"))\r\n    return all(\".\" * l == x for x in square . split(\"\\n\"))\r\n",
  "57c18a16c82ce75f4b000020": "from numpy import base_repr\n\n\ndef count_digit(number, digit, base=10, from_base=10):\n    return base_repr(int(number, from_base), base). lower(). count(digit)\n",
  "5877786688976801ad000100": "import re\n\n\ndef words_to_object(s):\n    return \"[\" + re . sub(\"([^ ]+) ([^ ]+)\", r\"{name : '\\1', id : '\\2'},\", s). strip(',') + \"]\"\n",
  "5947d86e07693bcf000000c4": "def puzzle_tiles(width, height):\n    def f():\n    yield ' ' + ' _( )__' * width\n    for i in range(height):\n    if i % 2 == 0:\n    yield ' _|' + ' _|' * width\n    yield '(_' + ' _ (_' * width\n    yield ' |' + '__( )_|' * width\n    else:\n    yield ' |_' + ' |_' * width\n    yield ' _)' + ' _ _)' * width\n    yield ' |' + '__( )_|' * width\n    return '\\n' . join(f())\n",
  "54ce4c6804fcc440a1000ecb": "def encode(s):\r\n    lst = sorted(s[i or len(s):] + s[: i or len(s)]\r\n                 for i in reversed(range(len(s))))\r\n    return '' . join(ss[- 1] for ss in lst), s and lst . index(s) or 0\r\n    def decode(s, n):\r\n    out, lst = [], sorted((c, i) for i, c in enumerate(s))\r\n    for _ in range(len(s)):\r\n    c, n = lst[n]\r\n    out . append(c)\r\n    return '' . join(out)\r\n",
  "59414b46d040b7b8f7000021": "import re\r\nTACODICT = {\r\n    't': 'tomato',\r\n    'l': 'lettuce',\r\n    'c': 'cheese',\r\n    'g': 'guacamole',\r\n    's': 'salsa'\r\n}\r\n\r\n\r\ndef tacofy(word):\r\n    return ['shell'] + [TACODICT . get(c, 'beef') for c in re . sub('[^aeioutlcgs]+', '', word . lower())] + ['shell']\r\n",
  "594093784aafb857f0000122": "def diff(a, b):\r\n    return sorted(set(a) ^ set(b))\r\n",
  "57cc847e58a06b1492000264": "def extract(arr): return '' . join(arr[: 2] + arr[- 2:])\r\n\r\n\r\ndef sort_transform(arr):\r\n    arr = list(map(chr, arr))\r\n    w1 = extract(arr)\r\n    arr . sort()\r\n    w2 = extract(arr)\r\n    return f' { w1 } - { w2 } - { w2 [:: - 1 ]} - { w2 } '\r\n",
  "59473c0a952ac9b463000064": "SWAP = {'j': {'w': 'm', 'p': 'q', 'b': 'd', 's': 'z'},\r\n        't': {'m': 'w', 'q': 'p', 'd': 'b', 'z': 's'}}\r\n\r\n\r\ndef alphabet_war(fight):\r\n    s = 0\r\n    for l, c, r in zip(' ' + fight, fight, fight[1:] + ' '):\r\n    if l + r not in 'tjt':\r\n    c = SWAP . get(l, {}). get(c, c)\r\n    c = SWAP . get(r, {}). get(c, c)\r\n    s += {'w': 4, 'p': 3, 'b': 2, 's': 1, 'm': -\r\n          4, 'q': - 3, 'd': - 2, 'z': - 1}. get(c, 0)\r\n\r\n    return [\"Right side wins!\", \"Left side wins!\"][s > 0] if s else \"Let's fight again!\"\r\n",
  "59474c656ff02b21e20000fc": "def encode(s):\r\n    return ' ' . join(w[- 2:: - 1] + w[- 1] for w in s . split())\r\n",
  "5889177bf148eddd150002cc": "def tiy_fizz_buzz(s):\r\n    return \"\" . join((\"Iron \" * c . isupper() + \"Yard\" * (c . lower() in \"aeiou\")). strip() or c for c in s)\r\n",
  "5945fe7d9b33194f960000df": "def find_gatecrashers(people, invitations):\r\n    crashersSet = {elt for i, li in invitations for elt in [i] + li}\r\n    return [p for p in people if p not in crashersSet]\r\n",
  "58e0f0bf92d04ccf0a000010": "def lost_sheep(friday, saturday, total):\r\n    return total - (sum(friday) + sum(saturday))\r\n",
  "5944f3f8d7b6a5748d000233": "def coordinates(p1, p2, precision=0):\r\n    return round(sum((b - a) * * 2 for a, b in zip(p1, p2)) * * .5, precision)\r\n",
  "59441520102eaa25260000bf": "def unusual_five():\r\n    return len(\"five!\")\r\n",
  "5943bf2895d5f74cfb000032": "from random import *\n\n\ndef random_sub():\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    return dict(zip(s, sample(s, k=26)))\n",
  "5659c6d896bc135c4c00021e": "def next_smaller(n):\n    s = list(str(n))\n    i = j = len(s) - 1\n    while i > 0 and s[i - 1] <= s[i]:\n        i -= 1\n    if i <= 0:\n        return - 1\n    while s[j] >= s[i - 1]:\n        j -= 1\n    s[i - 1], s[j] = s[j], s[i - 1]\n    s[i:] = reversed(s[i:])\n    if s[0] == '0':\n        return - 1\n    return int('' . join(s))\n",
  "59437bd7d8c9438fb5000004": "import re\r\n\r\n\r\ndef alphabet_war(b):\r\n    if '#' not in b:\r\n    return re . sub(r\"[\\[\\]]\", \"\", b)\r\n    p = re . compile('([a-z#]*)\\[([a-z]+)\\](?=([a-z#]*))')\r\n    return '' . join(e[1] if (e[0] + e[2]). count('#') < 2 else '' for e in p . findall(b))\r\n",
  "583a02740b0a9fdf5900007c": "t = ((800, \"lava\"), (120, \"blaze rod\"),\r\n     (80, \"coal\"), (15, \"wood\"), (1, \"stick\"))\r\n\r\n\r\ndef calc_fuel(n):\r\n    s, r = n * 11, {}\r\n    for d, e in t:\r\n    r[e], s = divmod(s, d)\r\n    return r\r\n",
  "57e7d21f6603f6e31f00007c": "def add(a):\r\n    return lambda b: a + b\r\n    def subtract(a):\r\n    return lambda b: a - b\r\n    def multiply(a):\r\n    return lambda b: a * b\r\n    def apply(op):\r\n    return op\r\n",
  "58298e19c983caf4ba000c8d": "def min_umbrellas(weather):\r\n    home = work = 0\r\n    for i, w in enumerate(weather):\r\n    if w not in ['rainy', 'thunderstorms']:\r\n    continue\r\n    if i % 2 == 0:\r\n    work += 1\r\n    home = max(home - 1, 0)\r\n    else:\r\n    home += 1\r\n    work = max(work - 1, 0)\r\n    return home + work\r\n",
  "5941c545f5c394fef900000c": "class Warrior ():\r\n\r\n    def __init__(self):\r\n    self . _experience = 100\r\n    self . rs = [\"Pushover\", \"Novice\", \"Fighter\", \"Warrior\", \"Veteran\",\r\n                 \"Sage\", \"Elite\", \"Conqueror\", \"Champion\", \"Master\", \"Greatest\"]\r\n    self . achievements = []\r\n    def training(self, train):\r\n    if (train[2] > self . level):\r\n        return \"Not strong enough\"\r\n    self . _experience += train[1]\r\n    self . achievements . append(train[0])\r\n    return train[0]\r\n    def battle(self, lvl):\r\n    diff = lvl - self . level\r\n    if (0 >= lvl or lvl > 100):\r\n        return \"Invalid level\"\r\n    if (diff >= 5 and (lvl / / 10) > (self . level / / 10)):\r\n    return \"You've been defeated\"\r\n    if (diff > 0):\r\n    self . _experience += 20 * diff * diff\r\n    return \"An intense fight\"\r\n    if (diff > - 2):\r\n    self . _experience += 5 if diff == - 1 else 10\r\n    return \"A good fight\"\r\n    return \"Easy fight\"\r\n    @ property\r\n    def level(self):\r\n    return self . experience / / 100\r\n    @ property\r\n    def rank(self):\r\n    return self . rs[self . experience / / 1000]\r\n    @ property\r\n    def experience(self):\r\n    return min(10000, self . _experience)\r\n",
  "5940ec284aafb87ef3000028": "def decode(number):\r\n    return ', ' . join(\r\n        str(int(w, 2)) if i % 2 else\r\n        '' . join(chr(int(w[x: x + 3]) - 4) for x in range(0, len(w), 3))\r\n        for i, w in enumerate(str(number). strip('98'). split('98'))\r\n    )\r\n",
  "581951b3704cccfdf30000d2": "def split_without_loss(s, split_p):\r\n    return [i for i in s . replace(split_p . replace('|', ''), split_p). split('|') if i]\r\n",
  "583d171f28a0c04b7c00009c": "from itertools import accumulate\r\n\r\n\r\ndef max_sum(a, ranges):\r\n    prefix = list(accumulate(a, initial=0))\r\n    return max(prefix[j + 1] - prefix[i] for i, j in ranges)\r\n",
  "579ef9607cb1f38113000100": "from math import log2\n\n\ndef operation(a, b, n=0):\n    while log2(a) % 1:\n    n += 1\n    a / /= 2\n    return n + abs(log2(a / b))\n",
  "55f1a53d9c77b0ed4100004e": "def search_perm_mult(n, k):\r\n    # your code here\r\n    return len([x for x in range(n, 0, - 1) if x % k == 0 and sorted([i for i in str(x)]) == sorted([i for i in str(x / / k)])])\r\n",
  "589926bf7a2a3992050014f1": "from math import factorial\n\n\ndef sum_fib(n):\n    a, b, s = 0, 1, 0\n    while n:\n    s += factorial(a)\n    a, b = b, a + b\n    n -= 1\n    return s\n",
  "593c9175933500f33400003e": "def multiples(m, n):\r\n    return [i * n for i in range(1, m + 1)]\r\n",
  "5840946ea3d4c78e90000068": "def game_winners(gryffindor, slytherin):\r\n    g, s = (team[0] + 150 * (team[1] == 'yes')\r\n            for team in [gryffindor, slytherin])\r\n    return 'Gryffindor wins!' if g > s else 'Slytherin wins!' if s > g else \"It's a draw!\"\r\n",
  "593f50f343030bd35e0000c6": "def encode(s):\r\n    return '' . join(str(1 - ord(c) % 2) if c . isalpha() else c for c in s)\r\n",
  "5890579a34a7d44f3b00009e": "def manipulate(n):\r\n    n = str(n)\r\n\r\n    middle = len(n) / / 2\r\n    return int(n[: middle] + '0' * len(n[middle:]))\r\n",
  "593e84f16e836ca9a9000054": "def one_two_three():\n    res = one_two(), one_two()\n    return (1 if res == (1, 1) else\n            2 if res == (1, 2) else\n            3 if res == (2, 1) else\n            one_two_three())\n",
  "593e978a3bb47a8308000b8f": "def rotate_clockwise(m):\r\n    return ['' . join(l[:: - 1]) for l in zip(* m)]\r\n",
  "593e2077edf0d3e2d500002d": "def alphabet_war(r, airstrikes):\r\n    rIdx = [0] * (len(r[0]) + 2)\r\n    for a in airstrikes:\r\n    massacre = {i + d for i, c in enumerate(a, 1)\r\n                for d in range(- 1, 2) if c == '*'}\r\n    for i in massacre:\r\n        rIdx[i] += 1\r\n    return '' . join(r[row][i] if row < len(r) else \"_\" for i, row in enumerate(rIdx[1: - 1]))\r\n",
  "58402cdc5225619d0c0000cb": "def iam(* s, n=0):\r\n    return f'I am { \" very\" * n } { s [ 0 ] } ' if s else lambda * s: iam(* s, n=n + 1)\r\n",
  "57bc802c615f0ba1e3000029": "def faro_cycles(n):\r\n    x, cnt = 2, 1\r\n    while x != 1 and n > 3:\r\n    cnt += 1\r\n    x = x * 2 % (n - 1)\r\n    return cnt\r\n",
  "58552bdb68b034a1a80001fb": "from math import ceil\r\n\r\n\r\ndef cook_pancakes(n, m):\r\n    if m > n:\r\n    return 2\r\n    else:\r\n    return ceil((n / m) * 2)\r\n",
  "58a3cb34623e8c119d0000d5": "def decrypt(s):\r\n    for n in range(1, 11):\r\n    res, mod = divmod(int(str(n) + s), 11)\r\n    if mod == 0:\r\n    return str(res)\r\n    return 'impossible'\r\n",
  "55bc0c54147a98798f00003e": "def substring(s):\r\n    r, rm = [], []\r\n    for i, x in enumerate(s):\r\n    if x in r or len(set(r)) < 2:\r\n    r += x\r\n    else:\r\n    if len(r) > len(rm):\r\n        rm = r[:]\r\n    r = [y for y in r[- 1:: - 1] if y == r[- 1]] + [x]\r\n    if len(r) > len(rm):\r\n        rm = r[:]\r\n    return '' . join(rm)\r\n",
  "52fe629e48970ad2bd0007e6": "def power_mod(b, e, m):\n    res, b = 1, b % m\n    while e > 0:\n    if e & 1:\n        res = res * b % m\n    e >>= 1\n    b = b * b % m\n    return res\n",
  "5518a860a73e708c0a000027": "def last_digit(lst):\r\n    n = 1\r\n    for x in reversed(lst):\r\n    n = x * * (n if n < 4 else n % 4 + 4)\r\n    return n % 10\r\n",
  "55084d3898b323f0aa000546": "def shift_char(c, i):\r\n    r = c\r\n    if ord('a') <= ord(c) <= ord('z'):\r\n    o = (ord(c) - ord('a') + i) % 26\r\n    r = chr(o + ord('a'))\r\n    elif ord('A') <= ord(c) <= ord('Z'):\r\n    o = (ord(c) - ord('A') + i) % 26\r\n    r = chr(o + ord('A'))\r\n    return r\r\n    def encode_str(strng, shift):\r\n    encoded = \"\"\r\n    c = str(strng[0]). lower()\r\n    encoded = c + shift_char(c, shift)\r\n    for s in strng:\r\n    encoded += shift_char(s, shift)\r\n    chunk = len(encoded) / / 5\r\n    if len(encoded) % 5 != 0:\r\n    chunk += 1\r\n    r = [encoded[i * chunk:(i + 1) * chunk] for i in range(5)]\r\n    if (r[4] == \"\"):\r\n    return r[0: - 1]\r\n    else:\r\n    return r\r\n    def decode(arr):\r\n    encoded = \"\" . join(arr)\r\n    result = \"\"\r\n    shift = - (ord(encoded[1]) - ord(encoded[0]) % 26)\r\n    for s in encoded[2:]:\r\n    result += shift_char(s, shift)\r\n    return result\r\n",
  "58b8d22560873d9068000085": "tr = str . maketrans('56789', '45678')\r\n\r\n\r\ndef faulty_odometer(n):\r\n    return int(str(n). translate(tr), 9)\r\n",
  "53c945d750fe7094ee00016b": "from math import gcd\r\n\r\n\r\ndef inverseMod(a, m):\r\n    if gcd(a, m) == 1:\r\n    return pow(a, - 1, m)\r\n",
  "57040e445a726387a1001cf7": "def fusc(n):\n    a, b = 1, 0\n    for i in bin(n)[2:]:\n    if i == '1':\n        b += a\n    else:\n        a += b\n    return b\n",
  "572ced1822719279fa0005ea": "from collections import Counter\r\n\r\n\r\ndef factorization(n):\r\n    res, cur = Counter(), 2\r\n    while n > 1 and n >= cur * * 2:\r\n    if n % cur == 0:\r\n    res[cur] += 1\r\n    n / /= cur\r\n    else:\r\n    cur += (1 if cur == 2 else 2)\r\n\r\n    if n > 1:\r\n        res[n] += 1\r\n    return res\r\n    def arithm_deriv(n):\r\n    return sum(pw * n / / pr for pr, pw in factorization(n). items()) if n > 1 else 1\r\n    def chain_arith_deriv(start, k):\r\n    if arithm_deriv(start) == 1:\r\n    return '{} is a prime number' . format(start)\r\n    res = [start]\r\n    for _ in range(k - 1):\r\n    res . append(arithm_deriv(res[- 1]))\r\n\r\n    return res\r\n",
  "593c0ebf8b90525a62000221": "def group_groceries(groceries):\r\n    categories = {\"fruit\": [], \"meat\": [], \"other\": [], \"vegetable\": []}\r\n    for entry in groceries . split(\",\"):\r\n    category, item = entry . split(\"_\")\r\n    categories[category if category in categories else \"other\"]. append(item)\r\n    return \"\\n\" . join([f\" { category } : { ',' . join ( sorted ( items ))} \" for category, items in categories . items()])\r\n",
  "586c1cf4b98de0399300001d": "def combat(health, damage):\r\n    return max(0, health - damage)\r\n",
  "54acd76f7207c6a2880012bb": "import re\r\n\r\n\r\ndef decodeBitsAdvanced(bits):\r\n    out, bits = '', bits . strip('0')\r\n\r\n    if bits == \"\":\r\n    return bits\r\n    len1, len0 = map(len, re . findall(r'1+', bits)\r\n                     ), map(len, re . findall(r'0+', bits))\r\n    mlen1 = min(len1)\r\n\r\n    mlen0 = min(len0) if len0 else mlen1\r\n    lenbit = max(len1) if max(len1) == min(\r\n        mlen1, mlen0) else float(max(len1)) / 2\r\n    b = re . findall(r'1+|0+', bits)\r\n\r\n    for i in b:\r\n    if len(i) >= lenbit * 2.3 and len(i) > 4 and i[0] == '0':\r\n        out += ' '\r\n    elif len(i) > lenbit and i[0] == '1':\r\n        out += '-'\r\n    elif len(i) > lenbit and i[0] == '0':\r\n        out += ' '\r\n    elif len(i) <= lenbit and i[0] == '1':\r\n        out += '.'\r\n    return out\r\n    def decodeMorse(morseCode):\r\n    return ' ' . join('' . join(MORSE_CODE[l] for l in w . split()) for w in morseCode . split(' '))\r\n",
  "59321f29a010d5aa80000066": "def shortest_arrang(n):\r\n    # For odd n, we can always construct n with 2 consecutive integers.\r\n    if n % 2 == 1:\r\n    return [n / / 2 + 1, n / / 2]\r\n\r\n    # For even n, n is the sum of either an odd number or even number of\r\n    # consecutive positive integers. Moreover, this property is exclusive.\r\n    for i in range(3, n / / 2):\r\n    if i % 2 == 1 and n % i == 0:\r\n        # For odd i, if n / i is an integer, then the sequence, which has\r\n        # odd length, is centered around n / i.\r\n    return list(range(n / / i + i / / 2, n / / i - i / / 2 - 1, - 1))\r\n    elif i % 2 == 0 and n % i == i / / 2:\r\n        # For even i, if the remainder of n / i is 1/2, then the sequence\r\n        # (even length) is centered around n / i.\r\n    return list(range(n / / i + i / / 2, n / / i - i / / 2, - 1))\r\n\r\n    # If none of the above are satisfied, then n is a power of 2 and we cannot\r\n    # write it as the sum of two consecutive integers.\r\n    return [- 1]\r\n",
  "581bb3c1c221fb8e790001ef": "from functools import reduce\r\nfrom operator import mul\r\n\r\n\r\ndef select_subarray(arr):\r\n    total = sum(arr)\r\n    m = reduce(mul, arr)\r\n    qs = [\r\n        (abs((m / / x) / (total - x)) if total - x else float(\"inf\"), i)\r\n        for i, x in enumerate(arr)\r\n    ]\r\n    q = min(qs)\r\n    result = [[i, arr[i]] for x, i in qs if x == q[0]]\r\n    return result[0] if len(result) == 1 else result\r\n",
  "585b373ce08bae41b800006e": "class Funnel (object):\r\n\r\n    SIZE = 5\r\n    def __init__(self):\r\n    self . fun = [[None] * (x + 1) for x in range(self . SIZE)]\r\n\r\n    def fill(self, * args):\r\n    genBlanks = ((x, y) for x, r in enumerate(self . fun)\r\n                 for y, v in enumerate(r) if v is None)\r\n\r\n    for v, (x, y) in zip(args, genBlanks):\r\n    self . fun[x][y] = v\r\n    def drip(self):\r\n    y, cnt = 0, sum(v is not None for row in self . fun for v in row)\r\n    drop = self . fun[0][0]\r\n\r\n    for x in range(self . SIZE - 1):\r\n    left = cnt - sum(self . fun[xx][y + xx - x]\r\n                     is not None for xx in range(x, self . SIZE))\r\n    right = cnt - sum(self . fun[xx][y]\r\n                      is not None for xx in range(x, self . SIZE))\r\n\r\n    ySwp, cnt = (y, left) if left >= right else (y + 1, right)\r\n    self . fun[x][y] = self . fun[x + 1][ySwp]\r\n    y = ySwp\r\n    if not cnt:\r\n        break\r\n    self . fun[x + 1][y] = None\r\n    return drop\r\n    def __str__(self):\r\n    return '\\n' . join(f' { \" \" * x } \\\\ { \" \" . join ( \" \" if v is None else str ( v ) for v in r )} /'\r\n                       for x, r in enumerate(reversed(self . fun)))\r\n",
  "593a061b942a27ac940000a7": "def getting_mad(arr):\r\n    xs = sorted(arr)\r\n    return min(b - a for a, b in zip(xs, xs[1:]))\r\n",
  "543e926d38603441590021dd": "from itertools import permutations\r\n\r\n\r\ndef get_words(letters):\r\n    word = \"\" . join(\r\n        qty * char for qty in letters for chars in letters[qty] for char in chars)\r\n    return sorted({\"\" . join(permutation) for permutation in permutations(word)})\r\n",
  "56782b25c05cad45f700000f": "from math import prod, factorial\r\n\r\n\r\ndef comb(x, y):\r\n    return prod(x - i for i in range(y)) / factorial(y)\r\n\r\n    def value_at(poly_spec, x):\r\n    return round(sum(v * comb(x, i) for i, v in enumerate(reversed(poly_spec))), 2)\r\n",
  "5939ab6eed348a945f0007b2": "def longest_word(string_of_words):\r\n    return max(reversed(string_of_words . split()), key=len)\r\n",
  "59392ff00203d9686a0000c6": "from itertools import accumulate\n\n\ndef guess(f, n):\n    return [* accumulate(range(n - 1), lambda x, i: f(i, i + 1) - x, initial=f(0, 1) + f(0, 2) - f(1, 2) >> 1)]\n",
  "5902bc7aba39542b4a00003d": "EATERS = {\"antelope\": {\"grass\"},\r\n          \"big-fish\": {\"little-fish\"},\r\n          \"bug\": {\"leaves\"},\r\n          \"bear\": {\"big-fish\", \"bug\", \"chicken\", \"cow\", \"leaves\", \"sheep\"},\r\n          \"chicken\": {\"bug\"},\r\n          \"cow\": {\"grass\"},\r\n          \"fox\": {\"chicken\", \"sheep\"},\r\n          \"giraffe\": {\"leaves\"},\r\n          \"lion\": {\"antelope\", \"cow\"},\r\n          \"panda\": {\"leaves\"},\r\n          \"sheep\": {\"grass\"}}\r\n\r\n\r\ndef who_eats_who(zoo):\r\n\r\n    ansLst, zooLst, n = [zoo], zoo . split(\",\"), 0\r\n    while n < len(zooLst):\r\n        # Eats on its left\r\n    while n > 0 and zooLst[n - 1] in EATERS . get(zooLst[n], set()):\r\n    ansLst . append(\"{} eats {}\" . format(zooLst[n], zooLst . pop(n - 1)))\r\n    n -= 2\r\n    # Eats on its right\r\n    while n >= 0 and n != len(zooLst) - 1 and zooLst[n + 1] in EATERS . get(zooLst[n], set()):\r\n    ansLst . append(\"{} eats {}\" . format(zooLst[n], zooLst . pop(n + 1)))\r\n\r\n    n += 1  # Nothing to eat, step forward\r\n    return ansLst + [',' . join(zooLst)]\r\n",
  "58df2d65808fbcdfc800004a": "import re\r\nTABLE = str . maketrans('ACGT', 'UGCA')\r\n\r\n\r\ndef protein_synthesis(dna):\r\n    rna = re . findall(r'.{1,3}', dna . translate(TABLE))\r\n    return ' ' . join(rna), ' ' . join(x for x in map(CODON_DICT . get, rna) if x)\r\n",
  "5938f5b606c3033f4700015a": "import re\r\npowers = {\r\n    'w': - 4, 'p': - 3, 'b': - 2, 's': - 1,\r\n    'm': + 4, 'q': + 3, 'd': + 2, 'z': + 1,\r\n}\r\n\r\n\r\ndef alphabet_war(fight):\r\n    fight = re . sub('.(?=\\*)|(?<=\\*).', '', fight)\r\n    result = sum(powers . get(c, 0) for c in fight)\r\n    if result < 0:\r\n    return 'Left side wins!'\r\n    elif result > 0:\r\n    return 'Right side wins!'\r\n    else:\r\n    return \"Let's fight again!\"\r\n",
  "55c0c452de0056d7d800004d": "def church_add(c1): return lambda c2: lambda f: lambda x: c1(f)(c2(f)(x))\r\n\r\n\r\ndef church_mul(c1): return lambda c2: lambda f: c1(c2(f))\r\ndef church_pow(cb): return lambda ce: ce(cb)\r\n",
  "5832514f64a4cecd1c000013": "values = {\r\n    'queen': 9,\r\n    'rook': 5,\r\n    'bishop': 3,\r\n    'knight': 3,\r\n    'pawn': 1,\r\n}\r\n\r\n\r\ndef pieces_value(arr, s):\r\n    return sum(values . get(x[2:], 0) for x in sum(arr, []) if x[0] == s[0])\r\n",
  "545a4c5a61aa4c6916000755": "def gimme(inputArray):\r\n    # Implement this function\r\n    return inputArray . index(sorted(inputArray)[1])\r\n",
  "56fe9d579b7bb6b027000001": "def sc(arr, n):\r\n    for _ in range(n):\r\n    out, vs = [], iter(arr)\r\n    for v in vs:\r\n    if v & 1:\r\n    out . append(3 * v + 1 + next(vs, 0))\r\n    else:\r\n    out . extend((v / / 2, v / / 2))\r\n    arr = out\r\n    return arr\r\n",
  "57aae4facf1fa57b3300005d": "def four_piles(n, y):\r\n    x, r = divmod(n * y, (y + 1) * * 2)\r\n    return [] if r or x == y else [x + y, x - y, x * y, x / / y]\r\n",
  "55b195a69a6cc409ba000053": "from math import factorial as fac\r\n\r\n\r\ndef xCy(x, y):\r\n    return fac(x) / / fac(y) / / fac(x - y)\r\n\r\n    def total_inc_dec(x):\r\n    return 1 + sum([xCy(8 + i, i) + xCy(9 + i, i) - 10 for i in range(1, x + 1)])\r\n",
  "581214d54624a8232100005f": "def matrix(arr):\r\n    for z in range(len(arr)):\r\n    if arr[z][z] < 0:\r\n    arr[z][z] = 0\r\n    else:\r\n    arr[z][z] = 1\r\n    return arr\r\n",
  "59377c53e66267c8f6000027": "def alphabet_war(fight):\r\n    d = {'w': 4, 'p': 3, 'b': 2, 's': 1,\r\n         'm': - 4, 'q': - 3, 'd': - 2, 'z': - 1}\r\n    r = sum(d[c] for c in fight if c in d)\r\n\r\n    return {r == 0: \"Let's fight again!\",\r\n            r > 0: \"Left side wins!\",\r\n            r < 0: \"Right side wins!\"\r\n            }[True]\r\n",
  "5934d648d95386bc8200010b": "import re\r\nKA_PATTERN = re . compile(r'(?![aeiou]+$)([aeiou]+)', re . I)\r\n\r\n\r\ndef ka_co_ka_de_ka_me(word):\r\n    return 'ka' + KA_PATTERN . sub(r'\\1ka', word)\r\n",
  "5702f077e55d30a7af000115": "def count_name(arr, name):\r\n    return arr . count(name)\r\n",
  "566c3f5b9de85fdd0e000026": "def stairs(n):\r\n    return \"\\n\" . join(step(i). rjust(4 * n - 1) for i in range(1, n + 1))\r\n\r\n    def step(n):\r\n    h = \" \" . join(str(i % 10) for i in range(1, n + 1))\r\n    return f\" { h } { h [:: - 1 ]} \"\r\n",
  "593406b8f3d071d83c00005d": "def CountAnimals(s): return sum(int(e) for e in s . split() if e . isdigit())\n",
  "5936371109ca68fe6900000c": "from ipaddress import IPv4Address\n\n\ndef numberAndIPaddress(s):\n    return str(int(IPv4Address(s))) if '.' in s else str(IPv4Address(int(s)))\n",
  "5936256f2e2a27edc9000047": "def sort_string(s):\r\n    a = iter(sorted((c for c in s if c . isalpha()), key=str . lower))\r\n    return '' . join(next(a) if c . isalpha() else c for c in s)\r\n",
  "5830e7feff1a3ce8d4000062": "from math import pi\n\n\ndef ellipse(a, b):\n    return f\"Area: { pi * a * b : .1 f } , perimeter: { pi * ( 1.5 * ( a + b ) - ( a * b ) * * .5 ): .1 f } \"\n",
  "5935ecef7705f9614500002d": "def detect(comment):\r\n    return comment . startswith('Can someone explain')\r\n",
  "5865a407b359c45982000036": "def slogan_maker(array):\r\n    print(array)\r\n    from itertools import permutations\r\n    array = remove_duplicate(array)\r\n    return [' ' . join(element) for element in list(permutations(array, len(array)))]\r\n\r\n    def remove_duplicate(old_list):\r\n    final_list = []\r\n    for num in old_list:\r\n    if num not in final_list:\r\n    final_list . append(num)\r\n    return final_list\r\n",
  "58640340b3a675d9a70000b9": "def remove_vowels(strng):\r\n    return '' . join([i for i in strng if i not in 'aeiou'])\r\n",
  "586566b773bd9cbe2b000013": "def no_repeat(s):\r\n    return next(c for c in s if s . count(c) == 1)\r\n",
  "58d76854024c72c3e20000de": "def reverse_alternate(string):\r\n    return \" \" . join(y[:: - 1] if x % 2 else y for x, y in enumerate(string . split()))\r\n",
  "59016379ee5456d8cc00000f": "def squirrel(h, H, S): return round(H / h * (h * * 2 + S * * 2) * * 0.5, 4)\n",
  "588fe9eaadbbfb44b70001fc": "def read_zalgo(zalgotext):\r\n    return \"\" . join([c for c in zalgotext if c . isascii()])\r\n",
  "58e77c88fd2d893a77000102": "from itertools import accumulate\r\n\r\n\r\ndef rain_volume(towers):\r\n    a = accumulate(towers, max)\r\n    b = accumulate(towers[:: - 1], max)\r\n    a = [max(0, i - j) for i, j in zip(a, towers)]\r\n    b = [max(0, i - j) for i, j in zip(b, towers[:: - 1])]\r\n    return sum(min(i, j) for i, j in zip(a, b[:: - 1]))\r\n",
  "565c4e1303a0a006d7000127": "def number_format(n):\r\n    return f' { n :,} '\r\n",
  "58d3cf477a4ea9bb2f000103": "import numpy as np\r\n\r\n\r\ndef rotate_like_a_vortex(matrix):\r\n    fuck = np . array(matrix)\r\n    for num in range(len(matrix) / / 2):\r\n    fuck[num: len(matrix) - num, num: len(matrix) - num] = np . rot90(\r\n        fuck[num: len(matrix) - num, num: len(matrix) - num], k=1, axes=(0, 1))\r\n    return fuck . tolist()\r\n",
  "586dd5f4a44cfc48bb000011": "def spaghetti_code(plate):\r\n\r\n    def is_noodle(c): return 'A' <= c <= 'Z'\r\n    def is_inside(a, b): return 0 <= a < X and 0 <= b < Y\r\n    def flood(i, j):\r\n    typ_s . add(board[i][j])\r\n    board[i][j] = '_'\r\n    return 1 + sum(flood(x, y) for x, y in [(i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1)]\r\n                   if is_inside(x, y) and is_noodle(board[x][y]))\r\n\r\n    board = [* map(list, plate)]\r\n    X, Y = len(board), board and len(board[0])\r\n    top, typ = 0, \"\"\r\n    for i, r in enumerate(board):\r\n    for j, c in enumerate(r):\r\n    if not is_noodle(c):\r\n        continue\r\n    typ_s = set()\r\n    n = flood(i, j)\r\n    if n > top:\r\n        top, typ = n, (typ_s - {'S'} or {'S'}). pop()\r\n    return typ\r\n",
  "5647c3858d4acbbe550000ad": "# build a DFA (Deterministic Finite Automaton)\n# then use steps from\n# https://stackoverflow.com/questions/34476333/regular-expression-for-binary-numbers-divisible-by-5\n# to reduce the DFA graph to the final regular expression.\n# At the end, the + character has been used, instead of *, to reject empty strings\nPATTERN = r\"^(0|1(10)*(0|11)(01*01|01*00(10)*(0|11))*1)+$\"\n",
  "56a115cadb39a2faa000001e": "def commas(num):\r\n    return \"{:,.3f}\" . format(num). rstrip(\"0\"). rstrip(\".\")\r\n",
  "588c0a38b7cd14085300003f": "import numpy as np\r\ns = np . ones(100000)\r\nfor i in range(2, 100000):\r\n    s[i:: i] += 1\r\n    def div_num(a, b):\r\n    return max(range(a, b + 1), key=lambda i: (s[i], - i), default='Error')\r\n",
  "5933af2db328fbc731000010": "def scf(arr):\r\n    for i in range(2, (min(arr) if arr else 1) + 1):\r\n    if all(x % i == 0 for x in arr):\r\n    return i\r\n    return 1\r\n",
  "557d18803802e873170000a0": "def shorten(string, length, glue=\"...\"):\r\n    if len(string) < length:\r\n    return string\r\n    if length < len(glue) + 2:\r\n    return string[: length]\r\n    l1, l2 = (length - len(glue)) / / 2, (length - len(glue) + 1) / / 2\r\n    return string[: l1] + glue + string[- l2:]\r\n",
  "57e921d8b36340f1fd000059": "def shark(pontoon_distance, shark_distance, you_speed, shark_speed, dolphin):\n    if dolphin:\n    shark_speed = shark_speed / 2\n    shark_eat_time = shark_distance / shark_speed\n    you_safe_time = pontoon_distance / you_speed\n    return \"Shark Bait!\" if you_safe_time > shark_eat_time else \"Alive!\"\n",
  "5711fc7c159cde6ac70003e2": "from itertools import combinations\r\n\r\n\r\ndef find_zero_sum_groups(arr, n):\r\n    combos = sorted(sorted(c)\r\n                    for c in combinations(set(arr), n) if sum(c) == 0)\r\n    return combos if len(combos) > 1 else combos[0] if combos else \"No combinations\" if arr else \"No elements to combine\"\r\n",
  "58e0bd6a79716b7fcf0013b1": "def get_ages(a, b):\n    x = (a + b) / 2\n    y = (a - b) / 2\n    return None if a < 0 or b < 0 or x < 0 or y < 0 else (x, y)\n",
  "587854330594a6fb7e000057": "from math import prod\n\n\ndef math_engine(arr):\n    return 0 if arr is None else prod(a for a in arr if a >= 0) + sum(a for a in arr if a < 0)\n",
  "586a933fc66d187b6e00031a": "import uuid\n\n\ndef generateName():\n    return str(uuid . uuid4())[: 6]\n",
  "592a5f9fa3df0a28730000e7": "D = {\"warrior\": (4, 86), \"knight\": (5, 86), \"wanderer\": (3, 86), \"thief\": (5, 86), \"bandit\": (4, 86),\r\n     \"hunter\": (4, 86), \"sorcerer\": (3, 82), \"pyromancer\": (1, 84), \"cleric\": (2, 84), \"deprived\": (6, 88)}\r\n\r\n\r\ndef count(x): return round(pow(x, 3) * 0.02 +\r\n                           pow(x, 2) * 3.06 + 105.6 * x - 895)\r\n\r\n\r\nmemo = [0, 0, 673, 1363, 2070, 2794, 3535, 4293, 5068, 5861, 6672, 7501]\r\n\r\n\r\ndef need(level):\r\n    while len(memo) <= level:\r\n        memo . append(memo[- 1] + count(len(memo)))\r\n    return memo[level]\r\n\r\n    def souls(character, build):\r\n    level, stats = D[character]\r\n    goal = level + sum(build) - stats\r\n    return f\"Starting as a { character } , level { goal } will require { need ( goal ) - need ( level )} souls.\"\r\n",
  "58587905ed1b4dad6e0000c6": "class SmartTrafficLight:\r\n    def __init__(self, a, b):\r\n    self . a = [] if a[0] == b[0] else sorted((a, b))\r\n\r\n    def turngreen(self):\r\n    if self . a:\r\n    return self . a . pop()[1]\r\n",
  "5763a557f716cad8fb00039d": "from preloaded import nums\r\nimport numpy as np\r\n\r\n\r\ndef check_led(a):\r\n    a = np . array(a)\r\n    for i in range(0, len(a[0]), 5):\r\n    digit = a[:, i: i + 5]\r\n    for x in (digit[:: - 1], digit[:, :: - 1], digit[:: - 1, :: - 1]):\r\n    if x . tolist() in nums:\r\n    a[:, i: i + 5] = x\r\n    return a . tolist()\r\n",
  "582933a3c983ca0cef0003de": "def distribution_of_candy(candies):\r\n    steps = 0\r\n    while len(set(candies)) > 1:\r\n    candies = [(a + 1) / / 2 + (b + 1) / / 2\r\n               for a, b in zip(candies, candies[- 1:] + candies)]\r\n    steps += 1\r\n    return [steps, candies . pop()]\r\n",
  "586430a5b3a675296a000395": "def insurance(age, size, num_of_days):\n\n    if num_of_days <= 0:\n    return 0\n    cost = 0\n    one_day_cost = 50\n    if size == \"medium\":\n    one_day_cost += 10\n    elif size != 'economy':\n    one_day_cost += 15\n    if age < 25:\n    one_day_cost += 10\n    cost = one_day_cost * num_of_days\n    return cost\n",
  "57d250e55dc38e288c000081": "def whac_a_mole(a):\r\n    b = []\r\n    for x in a:\r\n    b . extend(x)\r\n    b . sort()\r\n    n = r = h = 0\r\n    for x in b:\r\n    if x - n > 0:\r\n    r += 1\r\n    h ^= 1\r\n    n += not h\r\n    return r\r\n",
  "555b1890a75b930e63000023": "def combos(n):\r\n    if n == 1:\r\n        return [[1]]\r\n    if n == 2:\r\n        return [[1, 1], [2]]\r\n    if n == 3:\r\n        return [[1, 1, 1], [1, 2], [3]]\r\n    if n == 4:\r\n        return [[1, 1, 1, 1], [1, 1, 2], [1, 3], [2, 2], [4]]\r\n    if n == 5:\r\n        return [[1, 1, 1, 1, 1], [1, 1, 1, 2], [1, 1, 3], [1, 2, 2], [1, 4], [2, 3], [5]]\r\n    if n == 6:\r\n        return [[1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 2], [1, 1, 1, 3], [1, 1, 2, 2], [1, 1, 4], [1, 2, 3], [1, 5], [2, 2, 2], [2, 4], [3, 3], [6]]\r\n    if n == 7:\r\n        return [[1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 2], [1, 1, 1, 1, 3], [1, 1, 1, 2, 2], [1, 1, 1, 4], [1, 1, 2, 3], [1, 1, 5], [1, 2, 2, 2], [1, 2, 4], [1, 3, 3], [1, 6], [2, 2, 3], [2, 5], [3, 4], [7]]\r\n    if n == 8:\r\n        return [[1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 2], [1, 1, 1, 1, 1, 3], [1, 1, 1, 1, 2, 2], [1, 1, 1, 1, 4], [1, 1, 1, 2, 3], [1, 1, 1, 5], [1, 1, 2, 2, 2], [1, 1, 2, 4], [1, 1, 3, 3], [1, 1, 6], [1, 2, 2, 3], [1, 2, 5], [1, 3, 4], [1, 7], [2, 2, 2, 2], [2, 2, 4], [2, 3, 3], [2, 6], [3, 5], [4, 4], [8]]\r\n    if n == 9:\r\n        return [[1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 2], [1, 1, 1, 1, 1, 1, 3], [1, 1, 1, 1, 1, 2, 2], [1, 1, 1, 1, 1, 4], [1, 1, 1, 1, 2, 3], [1, 1, 1, 1, 5], [1, 1, 1, 2, 2, 2], [1, 1, 1, 2, 4], [1, 1, 1, 3, 3], [1, 1, 1, 6], [1, 1, 2, 2, 3], [1, 1, 2, 5], [1, 1, 3, 4], [1, 1, 7], [1, 2, 2, 2, 2], [1, 2, 2, 4], [1, 2, 3, 3], [1, 2, 6], [1, 3, 5], [1, 4, 4], [1, 8], [2, 2, 2, 3], [2, 2, 5], [2, 3, 4], [2, 7], [3, 3, 3], [3, 6], [4, 5], [9]]\r\n    if n == 10:\r\n        return [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 2], [1, 1, 1, 1, 1, 1, 1, 3], [1, 1, 1, 1, 1, 1, 2, 2], [1, 1, 1, 1, 1, 1, 4], [1, 1, 1, 1, 1, 2, 3], [1, 1, 1, 1, 1, 5], [1, 1, 1, 1, 2, 2, 2], [1, 1, 1, 1, 2, 4], [1, 1, 1, 1, 3, 3], [1, 1, 1, 1, 6], [1, 1, 1, 2, 2, 3], [1, 1, 1, 2, 5], [1, 1, 1, 3, 4], [1, 1, 1, 7], [1, 1, 2, 2, 2, 2], [1, 1, 2, 2, 4], [1, 1, 2, 3, 3], [1, 1, 2, 6], [1, 1, 3, 5], [1, 1, 4, 4], [1, 1, 8], [1, 2, 2, 2, 3], [1, 2, 2, 5], [1, 2, 3, 4], [1, 2, 7], [1, 3, 3, 3], [1, 3, 6], [1, 4, 5], [1, 9], [2, 2, 2, 2, 2], [2, 2, 2, 4], [2, 2, 3, 3], [2, 2, 6], [2, 3, 5], [2, 4, 4], [2, 8], [3, 3, 4], [3, 7], [4, 6], [5, 5], [10]]\r\n    if n == 11:\r\n        return [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2], [1, 1, 1, 1, 1, 1, 1, 1, 3], [1, 1, 1, 1, 1, 1, 1, 2, 2], [1, 1, 1, 1, 1, 1, 1, 4], [1, 1, 1, 1, 1, 1, 2, 3], [1, 1, 1, 1, 1, 1, 5], [1, 1, 1, 1, 1, 2, 2, 2], [1, 1, 1, 1, 1, 2, 4], [1, 1, 1, 1, 1, 3, 3], [1, 1, 1, 1, 1, 6], [1, 1, 1, 1, 2, 2, 3], [1, 1, 1, 1, 2, 5], [1, 1, 1, 1, 3, 4], [1, 1, 1, 1, 7], [1, 1, 1, 2, 2, 2, 2], [1, 1, 1, 2, 2, 4], [1, 1, 1, 2, 3, 3], [1, 1, 1, 2, 6], [1, 1, 1, 3, 5], [1, 1, 1, 4, 4], [1, 1, 1, 8], [1, 1, 2, 2, 2, 3], [1, 1, 2, 2, 5], [1, 1, 2, 3, 4], [1, 1, 2, 7], [1, 1, 3, 3, 3], [1, 1, 3, 6], [1, 1, 4, 5], [1, 1, 9], [1, 2, 2, 2, 2, 2], [1, 2, 2, 2, 4], [1, 2, 2, 3, 3], [1, 2, 2, 6], [1, 2, 3, 5], [1, 2, 4, 4], [1, 2, 8], [1, 3, 3, 4], [1, 3, 7], [1, 4, 6], [1, 5, 5], [1, 10], [2, 2, 2, 2, 3], [2, 2, 2, 5], [2, 2, 3, 4], [2, 2, 7], [2, 3, 3, 3], [2, 3, 6], [2, 4, 5], [2, 9], [3, 3, 5], [3, 4, 4], [3, 8], [4, 7], [5, 6], [11]]\r\n    if n == 12:\r\n        return [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 3], [1, 1, 1, 1, 1, 1, 1, 1, 2, 2], [1, 1, 1, 1, 1, 1, 1, 1, 4], [1, 1, 1, 1, 1, 1, 1, 2, 3], [1, 1, 1, 1, 1, 1, 1, 5], [1, 1, 1, 1, 1, 1, 2, 2, 2], [1, 1, 1, 1, 1, 1, 2, 4], [1, 1, 1, 1, 1, 1, 3, 3], [1, 1, 1, 1, 1, 1, 6], [1, 1, 1, 1, 1, 2, 2, 3], [1, 1, 1, 1, 1, 2, 5], [1, 1, 1, 1, 1, 3, 4], [1, 1, 1, 1, 1, 7], [1, 1, 1, 1, 2, 2, 2, 2], [1, 1, 1, 1, 2, 2, 4], [1, 1, 1, 1, 2, 3, 3], [1, 1, 1, 1, 2, 6], [1, 1, 1, 1, 3, 5], [1, 1, 1, 1, 4, 4], [1, 1, 1, 1, 8], [1, 1, 1, 2, 2, 2, 3], [1, 1, 1, 2, 2, 5], [1, 1, 1, 2, 3, 4], [1, 1, 1, 2, 7], [1, 1, 1, 3, 3, 3], [1, 1, 1, 3, 6], [1, 1, 1, 4, 5], [1, 1, 1, 9], [1, 1, 2, 2, 2, 2, 2], [1, 1, 2, 2, 2, 4], [1, 1, 2, 2, 3, 3], [1, 1, 2, 2, 6], [1, 1, 2, 3, 5], [1, 1, 2, 4, 4], [1, 1, 2, 8], [1, 1, 3, 3, 4], [1, 1, 3, 7], [1, 1, 4, 6], [1, 1, 5, 5], [1, 1, 10], [1, 2, 2, 2, 2, 3], [1, 2, 2, 2, 5], [1, 2, 2, 3, 4], [1, 2, 2, 7], [1, 2, 3, 3, 3], [1, 2, 3, 6], [1, 2, 4, 5], [1, 2, 9], [1, 3, 3, 5], [1, 3, 4, 4], [1, 3, 8], [1, 4, 7], [1, 5, 6], [1, 11], [2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 4], [2, 2, 2, 3, 3], [2, 2, 2, 6], [2, 2, 3, 5], [2, 2, 4, 4], [2, 2, 8], [2, 3, 3, 4], [2, 3, 7], [2, 4, 6], [2, 5, 5], [2, 10], [3, 3, 3, 3], [3, 3, 6], [3, 4, 5], [3, 9], [4, 4, 4], [4, 8], [5, 7], [6, 6], [12]]\r\n    if n == 13:\r\n        return [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 4], [1, 1, 1, 1, 1, 1, 1, 1, 2, 3], [1, 1, 1, 1, 1, 1, 1, 1, 5], [1, 1, 1, 1, 1, 1, 1, 2, 2, 2], [1, 1, 1, 1, 1, 1, 1, 2, 4], [1, 1, 1, 1, 1, 1, 1, 3, 3], [1, 1, 1, 1, 1, 1, 1, 6], [1, 1, 1, 1, 1, 1, 2, 2, 3], [1, 1, 1, 1, 1, 1, 2, 5], [1, 1, 1, 1, 1, 1, 3, 4], [1, 1, 1, 1, 1, 1, 7], [1, 1, 1, 1, 1, 2, 2, 2, 2], [1, 1, 1, 1, 1, 2, 2, 4], [1, 1, 1, 1, 1, 2, 3, 3], [1, 1, 1, 1, 1, 2, 6], [1, 1, 1, 1, 1, 3, 5], [1, 1, 1, 1, 1, 4, 4], [1, 1, 1, 1, 1, 8], [1, 1, 1, 1, 2, 2, 2, 3], [1, 1, 1, 1, 2, 2, 5], [1, 1, 1, 1, 2, 3, 4], [1, 1, 1, 1, 2, 7], [1, 1, 1, 1, 3, 3, 3], [1, 1, 1, 1, 3, 6], [1, 1, 1, 1, 4, 5], [1, 1, 1, 1, 9], [1, 1, 1, 2, 2, 2, 2, 2], [1, 1, 1, 2, 2, 2, 4], [1, 1, 1, 2, 2, 3, 3], [1, 1, 1, 2, 2, 6], [1, 1, 1, 2, 3, 5], [1, 1, 1, 2, 4, 4], [1, 1, 1, 2, 8], [1, 1, 1, 3, 3, 4], [1, 1, 1, 3, 7], [1, 1, 1, 4, 6], [1, 1, 1, 5, 5], [1, 1, 1, 10], [1, 1, 2, 2, 2, 2, 3], [1, 1, 2, 2, 2, 5], [1, 1, 2, 2, 3, 4], [1, 1, 2, 2, 7], [1, 1, 2, 3, 3, 3], [1, 1, 2, 3, 6], [1, 1, 2, 4, 5], [1, 1, 2, 9], [1, 1, 3, 3, 5], [1, 1, 3, 4, 4], [1, 1, 3, 8], [1, 1, 4, 7], [1, 1, 5, 6], [1, 1, 11], [1, 2, 2, 2, 2, 2, 2], [1, 2, 2, 2, 2, 4], [1, 2, 2, 2, 3, 3], [1, 2, 2, 2, 6], [1, 2, 2, 3, 5], [1, 2, 2, 4, 4], [1, 2, 2, 8], [1, 2, 3, 3, 4], [1, 2, 3, 7], [1, 2, 4, 6], [1, 2, 5, 5], [1, 2, 10], [1, 3, 3, 3, 3], [1, 3, 3, 6], [1, 3, 4, 5], [1, 3, 9], [1, 4, 4, 4], [1, 4, 8], [1, 5, 7], [1, 6, 6], [1, 12], [2, 2, 2, 2, 2, 3], [2, 2, 2, 2, 5], [2, 2, 2, 3, 4], [2, 2, 2, 7], [2, 2, 3, 3, 3], [2, 2, 3, 6], [2, 2, 4, 5], [2, 2, 9], [2, 3, 3, 5], [2, 3, 4, 4], [2, 3, 8], [2, 4, 7], [2, 5, 6], [2, 11], [3, 3, 3, 4], [3, 3, 7], [3, 4, 6], [3, 5, 5], [3, 10], [4, 4, 5], [4, 9], [5, 8], [6, 7], [13]]\r\n    if n == 14:\r\n        return [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 5], [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2], [1, 1, 1, 1, 1, 1, 1, 1, 2, 4], [1, 1, 1, 1, 1, 1, 1, 1, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 6], [1, 1, 1, 1, 1, 1, 1, 2, 2, 3], [1, 1, 1, 1, 1, 1, 1, 2, 5], [1, 1, 1, 1, 1, 1, 1, 3, 4], [1, 1, 1, 1, 1, 1, 1, 7], [1, 1, 1, 1, 1, 1, 2, 2, 2, 2], [1, 1, 1, 1, 1, 1, 2, 2, 4], [1, 1, 1, 1, 1, 1, 2, 3, 3], [1, 1, 1, 1, 1, 1, 2, 6], [1, 1, 1, 1, 1, 1, 3, 5], [1, 1, 1, 1, 1, 1, 4, 4], [1, 1, 1, 1, 1, 1, 8], [1, 1, 1, 1, 1, 2, 2, 2, 3], [1, 1, 1, 1, 1, 2, 2, 5], [1, 1, 1, 1, 1, 2, 3, 4], [1, 1, 1, 1, 1, 2, 7], [1, 1, 1, 1, 1, 3, 3, 3], [1, 1, 1, 1, 1, 3, 6], [1, 1, 1, 1, 1, 4, 5], [1, 1, 1, 1, 1, 9], [1, 1, 1, 1, 2, 2, 2, 2, 2], [1, 1, 1, 1, 2, 2, 2, 4], [1, 1, 1, 1, 2, 2, 3, 3], [1, 1, 1, 1, 2, 2, 6], [1, 1, 1, 1, 2, 3, 5], [1, 1, 1, 1, 2, 4, 4], [1, 1, 1, 1, 2, 8], [1, 1, 1, 1, 3, 3, 4], [1, 1, 1, 1, 3, 7], [1, 1, 1, 1, 4, 6], [1, 1, 1, 1, 5, 5], [1, 1, 1, 1, 10], [1, 1, 1, 2, 2, 2, 2, 3], [1, 1, 1, 2, 2, 2, 5], [1, 1, 1, 2, 2, 3, 4], [1, 1, 1, 2, 2, 7], [1, 1, 1, 2, 3, 3, 3], [1, 1, 1, 2, 3, 6], [1, 1, 1, 2, 4, 5], [1, 1, 1, 2, 9], [1, 1, 1, 3, 3, 5], [1, 1, 1, 3, 4, 4], [1, 1, 1, 3, 8], [1, 1, 1, 4, 7], [1, 1, 1, 5, 6], [1, 1, 1, 11], [1, 1, 2, 2, 2, 2, 2, 2], [1, 1, 2, 2, 2, 2, 4], [1, 1, 2, 2, 2, 3, 3], [1, 1, 2, 2, 2, 6], [1, 1, 2, 2, 3, 5], [1, 1, 2, 2, 4, 4], [1, 1, 2, 2, 8], [1, 1, 2, 3, 3, 4], [1, 1, 2, 3, 7], [1, 1, 2, 4, 6], [1, 1, 2, 5, 5], [1, 1, 2, 10], [1, 1, 3, 3, 3, 3], [1, 1, 3, 3, 6], [1, 1, 3, 4, 5], [1, 1, 3, 9], [1, 1, 4, 4, 4], [1, 1, 4, 8], [1, 1, 5, 7], [1, 1, 6, 6], [1, 1, 12], [1, 2, 2, 2, 2, 2, 3], [1, 2, 2, 2, 2, 5], [1, 2, 2, 2, 3, 4], [1, 2, 2, 2, 7], [1, 2, 2, 3, 3, 3], [1, 2, 2, 3, 6], [1, 2, 2, 4, 5], [1, 2, 2, 9], [1, 2, 3, 3, 5], [1, 2, 3, 4, 4], [1, 2, 3, 8], [1, 2, 4, 7], [1, 2, 5, 6], [1, 2, 11], [1, 3, 3, 3, 4], [1, 3, 3, 7], [1, 3, 4, 6], [1, 3, 5, 5], [1, 3, 10], [1, 4, 4, 5], [1, 4, 9], [1, 5, 8], [1, 6, 7], [1, 13], [2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 4], [2, 2, 2, 2, 3, 3], [2, 2, 2, 2, 6], [2, 2, 2, 3, 5], [2, 2, 2, 4, 4], [2, 2, 2, 8], [2, 2, 3, 3, 4], [2, 2, 3, 7], [2, 2, 4, 6], [2, 2, 5, 5], [2, 2, 10], [2, 3, 3, 3, 3], [2, 3, 3, 6], [2, 3, 4, 5], [2, 3, 9], [2, 4, 4, 4], [2, 4, 8], [2, 5, 7], [2, 6, 6], [2, 12], [3, 3, 3, 5], [3, 3, 4, 4], [3, 3, 8], [3, 4, 7], [3, 5, 6], [3, 11], [4, 4, 6], [4, 5, 5], [4, 10], [5, 9], [6, 8], [7, 7], [14]]\r\n    if n == 15:\r\n        return [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 6], [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3], [1, 1, 1, 1, 1, 1, 1, 1, 2, 5], [1, 1, 1, 1, 1, 1, 1, 1, 3, 4], [1, 1, 1, 1, 1, 1, 1, 1, 7], [1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2], [1, 1, 1, 1, 1, 1, 1, 2, 2, 4], [1, 1, 1, 1, 1, 1, 1, 2, 3, 3], [1, 1, 1, 1, 1, 1, 1, 2, 6], [1, 1, 1, 1, 1, 1, 1, 3, 5], [1, 1, 1, 1, 1, 1, 1, 4, 4], [1, 1, 1, 1, 1, 1, 1, 8], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3], [1, 1, 1, 1, 1, 1, 2, 2, 5], [1, 1, 1, 1, 1, 1, 2, 3, 4], [1, 1, 1, 1, 1, 1, 2, 7], [1, 1, 1, 1, 1, 1, 3, 3, 3], [1, 1, 1, 1, 1, 1, 3, 6], [1, 1, 1, 1, 1, 1, 4, 5], [1, 1, 1, 1, 1, 1, 9], [1, 1, 1, 1, 1, 2, 2, 2, 2, 2], [1, 1, 1, 1, 1, 2, 2, 2, 4], [1, 1, 1, 1, 1, 2, 2, 3, 3], [1, 1, 1, 1, 1, 2, 2, 6], [1, 1, 1, 1, 1, 2, 3, 5], [1, 1, 1, 1, 1, 2, 4, 4], [1, 1, 1, 1, 1, 2, 8], [1, 1, 1, 1, 1, 3, 3, 4], [1, 1, 1, 1, 1, 3, 7], [1, 1, 1, 1, 1, 4, 6], [1, 1, 1, 1, 1, 5, 5], [1, 1, 1, 1, 1, 10], [1, 1, 1, 1, 2, 2, 2, 2, 3], [1, 1, 1, 1, 2, 2, 2, 5], [1, 1, 1, 1, 2, 2, 3, 4], [1, 1, 1, 1, 2, 2, 7], [1, 1, 1, 1, 2, 3, 3, 3], [1, 1, 1, 1, 2, 3, 6], [1, 1, 1, 1, 2, 4, 5], [1, 1, 1, 1, 2, 9], [1, 1, 1, 1, 3, 3, 5], [1, 1, 1, 1, 3, 4, 4], [1, 1, 1, 1, 3, 8], [1, 1, 1, 1, 4, 7], [1, 1, 1, 1, 5, 6], [1, 1, 1, 1, 11], [1, 1, 1, 2, 2, 2, 2, 2, 2], [1, 1, 1, 2, 2, 2, 2, 4], [1, 1, 1, 2, 2, 2, 3, 3], [1, 1, 1, 2, 2, 2, 6], [1, 1, 1, 2, 2, 3, 5], [1, 1, 1, 2, 2, 4, 4], [1, 1, 1, 2, 2, 8], [1, 1, 1, 2, 3, 3, 4], [1, 1, 1, 2, 3, 7], [1, 1, 1, 2, 4, 6], [1, 1, 1, 2, 5, 5], [1, 1, 1, 2, 10], [1, 1, 1, 3, 3, 3, 3], [1, 1, 1, 3, 3, 6], [1, 1, 1, 3, 4, 5], [1, 1, 1, 3, 9], [1, 1, 1, 4, 4, 4], [1, 1, 1, 4, 8], [1, 1, 1, 5, 7], [1, 1, 1, 6, 6], [1, 1, 1, 12], [1, 1, 2, 2, 2, 2, 2, 3], [1, 1, 2, 2, 2, 2, 5], [1, 1, 2, 2, 2, 3, 4], [1, 1, 2, 2, 2, 7], [1, 1, 2, 2, 3, 3, 3], [1, 1, 2, 2, 3, 6], [1, 1, 2, 2, 4, 5], [1, 1, 2, 2, 9], [1, 1, 2, 3, 3, 5], [1, 1, 2, 3, 4, 4], [1, 1, 2, 3, 8], [1, 1, 2, 4, 7], [1, 1, 2, 5, 6], [1, 1, 2, 11], [1, 1, 3, 3, 3, 4], [1, 1, 3, 3, 7], [1, 1, 3, 4, 6], [1, 1, 3, 5, 5], [1, 1, 3, 10], [1, 1, 4, 4, 5], [1, 1, 4, 9], [1, 1, 5, 8], [1, 1, 6, 7], [1, 1, 13], [1, 2, 2, 2, 2, 2, 2, 2], [1, 2, 2, 2, 2, 2, 4], [1, 2, 2, 2, 2, 3, 3], [1, 2, 2, 2, 2, 6], [1, 2, 2, 2, 3, 5], [1, 2, 2, 2, 4, 4], [1, 2, 2, 2, 8], [1, 2, 2, 3, 3, 4], [1, 2, 2, 3, 7], [1, 2, 2, 4, 6], [1, 2, 2, 5, 5], [1, 2, 2, 10], [1, 2, 3, 3, 3, 3], [1, 2, 3, 3, 6], [1, 2, 3, 4, 5], [1, 2, 3, 9], [1, 2, 4, 4, 4], [1, 2, 4, 8], [1, 2, 5, 7], [1, 2, 6, 6], [1, 2, 12], [1, 3, 3, 3, 5], [1, 3, 3, 4, 4], [1, 3, 3, 8], [1, 3, 4, 7], [1, 3, 5, 6], [1, 3, 11], [1, 4, 4, 6], [1, 4, 5, 5], [1, 4, 10], [1, 5, 9], [1, 6, 8], [1, 7, 7], [1, 14], [2, 2, 2, 2, 2, 2, 3], [2, 2, 2, 2, 2, 5], [2, 2, 2, 2, 3, 4], [2, 2, 2, 2, 7], [2, 2, 2, 3, 3, 3], [2, 2, 2, 3, 6], [2, 2, 2, 4, 5], [2, 2, 2, 9], [2, 2, 3, 3, 5], [2, 2, 3, 4, 4], [2, 2, 3, 8], [2, 2, 4, 7], [2, 2, 5, 6], [2, 2, 11], [2, 3, 3, 3, 4], [2, 3, 3, 7], [2, 3, 4, 6], [2, 3, 5, 5], [2, 3, 10], [2, 4, 4, 5], [2, 4, 9], [2, 5, 8], [2, 6, 7], [2, 13], [3, 3, 3, 3, 3], [3, 3, 3, 6], [3, 3, 4, 5], [3, 3, 9], [3, 4, 4, 4], [3, 4, 8], [3, 5, 7], [3, 6, 6], [3, 12], [4, 4, 7], [4, 5, 6], [4, 11], [5, 5, 5], [5, 10], [6, 9], [7, 8], [15]]\r\n    if n == 16:\r\n        return [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 7], [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2], [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 4], [1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 2, 6], [1, 1, 1, 1, 1, 1, 1, 1, 3, 5], [1, 1, 1, 1, 1, 1, 1, 1, 4, 4], [1, 1, 1, 1, 1, 1, 1, 1, 8], [1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3], [1, 1, 1, 1, 1, 1, 1, 2, 2, 5], [1, 1, 1, 1, 1, 1, 1, 2, 3, 4], [1, 1, 1, 1, 1, 1, 1, 2, 7], [1, 1, 1, 1, 1, 1, 1, 3, 3, 3], [1, 1, 1, 1, 1, 1, 1, 3, 6], [1, 1, 1, 1, 1, 1, 1, 4, 5], [1, 1, 1, 1, 1, 1, 1, 9], [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], [1, 1, 1, 1, 1, 1, 2, 2, 2, 4], [1, 1, 1, 1, 1, 1, 2, 2, 3, 3], [1, 1, 1, 1, 1, 1, 2, 2, 6], [1, 1, 1, 1, 1, 1, 2, 3, 5], [1, 1, 1, 1, 1, 1, 2, 4, 4], [1, 1, 1, 1, 1, 1, 2, 8], [1, 1, 1, 1, 1, 1, 3, 3, 4], [1, 1, 1, 1, 1, 1, 3, 7], [1, 1, 1, 1, 1, 1, 4, 6], [1, 1, 1, 1, 1, 1, 5, 5], [1, 1, 1, 1, 1, 1, 10], [1, 1, 1, 1, 1, 2, 2, 2, 2, 3], [1, 1, 1, 1, 1, 2, 2, 2, 5], [1, 1, 1, 1, 1, 2, 2, 3, 4], [1, 1, 1, 1, 1, 2, 2, 7], [1, 1, 1, 1, 1, 2, 3, 3, 3], [1, 1, 1, 1, 1, 2, 3, 6], [1, 1, 1, 1, 1, 2, 4, 5], [1, 1, 1, 1, 1, 2, 9], [1, 1, 1, 1, 1, 3, 3, 5], [1, 1, 1, 1, 1, 3, 4, 4], [1, 1, 1, 1, 1, 3, 8], [1, 1, 1, 1, 1, 4, 7], [1, 1, 1, 1, 1, 5, 6], [1, 1, 1, 1, 1, 11], [1, 1, 1, 1, 2, 2, 2, 2, 2, 2], [1, 1, 1, 1, 2, 2, 2, 2, 4], [1, 1, 1, 1, 2, 2, 2, 3, 3], [1, 1, 1, 1, 2, 2, 2, 6], [1, 1, 1, 1, 2, 2, 3, 5], [1, 1, 1, 1, 2, 2, 4, 4], [1, 1, 1, 1, 2, 2, 8], [1, 1, 1, 1, 2, 3, 3, 4], [1, 1, 1, 1, 2, 3, 7], [1, 1, 1, 1, 2, 4, 6], [1, 1, 1, 1, 2, 5, 5], [1, 1, 1, 1, 2, 10], [1, 1, 1, 1, 3, 3, 3, 3], [1, 1, 1, 1, 3, 3, 6], [1, 1, 1, 1, 3, 4, 5], [1, 1, 1, 1, 3, 9], [1, 1, 1, 1, 4, 4, 4], [1, 1, 1, 1, 4, 8], [1, 1, 1, 1, 5, 7], [1, 1, 1, 1, 6, 6], [1, 1, 1, 1, 12], [1, 1, 1, 2, 2, 2, 2, 2, 3], [1, 1, 1, 2, 2, 2, 2, 5], [1, 1, 1, 2, 2, 2, 3, 4], [1, 1, 1, 2, 2, 2, 7], [1, 1, 1, 2, 2, 3, 3, 3], [1, 1, 1, 2, 2, 3, 6], [1, 1, 1, 2, 2, 4, 5], [1, 1, 1, 2, 2, 9], [1, 1, 1, 2, 3, 3, 5], [1, 1, 1, 2, 3, 4, 4], [1, 1, 1, 2, 3, 8], [1, 1, 1, 2, 4, 7], [1, 1, 1, 2, 5, 6], [1, 1, 1, 2, 11], [1, 1, 1, 3, 3, 3, 4], [1, 1, 1, 3, 3, 7], [1, 1, 1, 3, 4, 6], [1, 1, 1, 3, 5, 5], [1, 1, 1, 3, 10], [1, 1, 1, 4, 4, 5], [1, 1, 1, 4, 9], [1, 1, 1, 5, 8], [1, 1, 1, 6, 7], [1, 1, 1, 13], [1, 1, 2, 2, 2, 2, 2, 2, 2], [1, 1, 2, 2, 2, 2, 2, 4], [1, 1, 2, 2, 2, 2, 3, 3], [1, 1, 2, 2, 2, 2, 6], [1, 1, 2, 2, 2, 3, 5], [1, 1, 2, 2, 2, 4, 4], [1, 1, 2, 2, 2, 8], [1, 1, 2, 2, 3, 3, 4], [1, 1, 2, 2, 3, 7], [1, 1, 2, 2, 4, 6], [1, 1, 2, 2, 5, 5], [1, 1, 2, 2, 10], [1, 1, 2, 3, 3, 3, 3], [1, 1, 2, 3, 3, 6], [1, 1, 2, 3, 4, 5], [1, 1, 2, 3, 9], [1, 1, 2, 4, 4, 4], [1, 1, 2, 4, 8], [1, 1, 2, 5, 7], [1, 1, 2, 6, 6], [1, 1, 2, 12], [1, 1, 3, 3, 3, 5], [1, 1, 3, 3, 4, 4], [1, 1, 3, 3, 8], [1, 1, 3, 4, 7], [1, 1, 3, 5, 6], [1, 1, 3, 11], [1, 1, 4, 4, 6], [1, 1, 4, 5, 5], [1, 1, 4, 10], [1, 1, 5, 9], [1, 1, 6, 8], [1, 1, 7, 7], [1, 1, 14], [1, 2, 2, 2, 2, 2, 2, 3], [1, 2, 2, 2, 2, 2, 5], [1, 2, 2, 2, 2, 3, 4], [1, 2, 2, 2, 2, 7], [1, 2, 2, 2, 3, 3, 3], [1, 2, 2, 2, 3, 6], [1, 2, 2, 2, 4, 5], [1, 2, 2, 2, 9], [1, 2, 2, 3, 3, 5], [1, 2, 2, 3, 4, 4], [1, 2, 2, 3, 8], [1, 2, 2, 4, 7], [1, 2, 2, 5, 6], [1, 2, 2, 11], [1, 2, 3, 3, 3, 4], [1, 2, 3, 3, 7], [1, 2, 3, 4, 6], [1, 2, 3, 5, 5], [1, 2, 3, 10], [1, 2, 4, 4, 5], [1, 2, 4, 9], [1, 2, 5, 8], [1, 2, 6, 7], [1, 2, 13], [1, 3, 3, 3, 3, 3], [1, 3, 3, 3, 6], [1, 3, 3, 4, 5], [1, 3, 3, 9], [1, 3, 4, 4, 4], [1, 3, 4, 8], [1, 3, 5, 7], [1, 3, 6, 6], [1, 3, 12], [1, 4, 4, 7], [1, 4, 5, 6], [1, 4, 11], [1, 5, 5, 5], [1, 5, 10], [1, 6, 9], [1, 7, 8], [1, 15], [2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 4], [2, 2, 2, 2, 2, 3, 3], [2, 2, 2, 2, 2, 6], [2, 2, 2, 2, 3, 5], [2, 2, 2, 2, 4, 4], [2, 2, 2, 2, 8], [2, 2, 2, 3, 3, 4], [2, 2, 2, 3, 7], [2, 2, 2, 4, 6], [2, 2, 2, 5, 5], [2, 2, 2, 10], [2, 2, 3, 3, 3, 3], [2, 2, 3, 3, 6], [2, 2, 3, 4, 5], [2, 2, 3, 9], [2, 2, 4, 4, 4], [2, 2, 4, 8], [2, 2, 5, 7], [2, 2, 6, 6], [2, 2, 12], [2, 3, 3, 3, 5], [2, 3, 3, 4, 4], [2, 3, 3, 8], [2, 3, 4, 7], [2, 3, 5, 6], [2, 3, 11], [2, 4, 4, 6], [2, 4, 5, 5], [2, 4, 10], [2, 5, 9], [2, 6, 8], [2, 7, 7], [2, 14], [3, 3, 3, 3, 4], [3, 3, 3, 7], [3, 3, 4, 6], [3, 3, 5, 5], [3, 3, 10], [3, 4, 4, 5], [3, 4, 9], [3, 5, 8], [3, 6, 7], [3, 13], [4, 4, 4, 4], [4, 4, 8], [4, 5, 7], [4, 6, 6], [4, 12], [5, 5, 6], [5, 11], [6, 10], [7, 9], [8, 8], [16]]\r\n    if n == 17:\r\n        return [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 6], [1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 8], [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3], [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 5], [1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4], [1, 1, 1, 1, 1, 1, 1, 1, 2, 7], [1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 3, 6], [1, 1, 1, 1, 1, 1, 1, 1, 4, 5], [1, 1, 1, 1, 1, 1, 1, 1, 9], [1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], [1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 4], [1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 3], [1, 1, 1, 1, 1, 1, 1, 2, 2, 6], [1, 1, 1, 1, 1, 1, 1, 2, 3, 5], [1, 1, 1, 1, 1, 1, 1, 2, 4, 4], [1, 1, 1, 1, 1, 1, 1, 2, 8], [1, 1, 1, 1, 1, 1, 1, 3, 3, 4], [1, 1, 1, 1, 1, 1, 1, 3, 7], [1, 1, 1, 1, 1, 1, 1, 4, 6], [1, 1, 1, 1, 1, 1, 1, 5, 5], [1, 1, 1, 1, 1, 1, 1, 10], [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3], [1, 1, 1, 1, 1, 1, 2, 2, 2, 5], [1, 1, 1, 1, 1, 1, 2, 2, 3, 4], [1, 1, 1, 1, 1, 1, 2, 2, 7], [1, 1, 1, 1, 1, 1, 2, 3, 3, 3], [1, 1, 1, 1, 1, 1, 2, 3, 6], [1, 1, 1, 1, 1, 1, 2, 4, 5], [1, 1, 1, 1, 1, 1, 2, 9], [1, 1, 1, 1, 1, 1, 3, 3, 5], [1, 1, 1, 1, 1, 1, 3, 4, 4], [1, 1, 1, 1, 1, 1, 3, 8], [1, 1, 1, 1, 1, 1, 4, 7], [1, 1, 1, 1, 1, 1, 5, 6], [1, 1, 1, 1, 1, 1, 11], [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2], [1, 1, 1, 1, 1, 2, 2, 2, 2, 4], [1, 1, 1, 1, 1, 2, 2, 2, 3, 3], [1, 1, 1, 1, 1, 2, 2, 2, 6], [1, 1, 1, 1, 1, 2, 2, 3, 5], [1, 1, 1, 1, 1, 2, 2, 4, 4], [1, 1, 1, 1, 1, 2, 2, 8], [1, 1, 1, 1, 1, 2, 3, 3, 4], [1, 1, 1, 1, 1, 2, 3, 7], [1, 1, 1, 1, 1, 2, 4, 6], [1, 1, 1, 1, 1, 2, 5, 5], [1, 1, 1, 1, 1, 2, 10], [1, 1, 1, 1, 1, 3, 3, 3, 3], [1, 1, 1, 1, 1, 3, 3, 6], [1, 1, 1, 1, 1, 3, 4, 5], [1, 1, 1, 1, 1, 3, 9], [1, 1, 1, 1, 1, 4, 4, 4], [1, 1, 1, 1, 1, 4, 8], [1, 1, 1, 1, 1, 5, 7], [1, 1, 1, 1, 1, 6, 6], [1, 1, 1, 1, 1, 12], [1, 1, 1, 1, 2, 2, 2, 2, 2, 3], [1, 1, 1, 1, 2, 2, 2, 2, 5], [1, 1, 1, 1, 2, 2, 2, 3, 4], [1, 1, 1, 1, 2, 2, 2, 7], [1, 1, 1, 1, 2, 2, 3, 3, 3], [1, 1, 1, 1, 2, 2, 3, 6], [1, 1, 1, 1, 2, 2, 4, 5], [1, 1, 1, 1, 2, 2, 9], [1, 1, 1, 1, 2, 3, 3, 5], [1, 1, 1, 1, 2, 3, 4, 4], [1, 1, 1, 1, 2, 3, 8], [1, 1, 1, 1, 2, 4, 7], [1, 1, 1, 1, 2, 5, 6], [1, 1, 1, 1, 2, 11], [1, 1, 1, 1, 3, 3, 3, 4], [1, 1, 1, 1, 3, 3, 7], [1, 1, 1, 1, 3, 4, 6], [1, 1, 1, 1, 3, 5, 5], [1, 1, 1, 1, 3, 10], [1, 1, 1, 1, 4, 4, 5], [1, 1, 1, 1, 4, 9], [1, 1, 1, 1, 5, 8], [1, 1, 1, 1, 6, 7], [1, 1, 1, 1, 13], [1, 1, 1, 2, 2, 2, 2, 2, 2, 2], [1, 1, 1, 2, 2, 2, 2, 2, 4], [1, 1, 1, 2, 2, 2, 2, 3, 3], [1, 1, 1, 2, 2, 2, 2, 6], [1, 1, 1, 2, 2, 2, 3, 5], [1, 1, 1, 2, 2, 2, 4, 4], [1, 1, 1, 2, 2, 2, 8], [1, 1, 1, 2, 2, 3, 3, 4], [1, 1, 1, 2, 2, 3, 7], [1, 1, 1, 2, 2, 4, 6], [1, 1, 1, 2, 2, 5, 5], [1, 1, 1, 2, 2, 10], [1, 1, 1, 2, 3, 3, 3, 3], [1, 1, 1, 2, 3, 3, 6], [1, 1, 1, 2, 3, 4, 5], [1, 1, 1, 2, 3, 9], [1, 1, 1, 2, 4, 4, 4], [1, 1, 1, 2, 4, 8], [1, 1, 1, 2, 5, 7], [1, 1, 1, 2, 6, 6], [1, 1, 1, 2, 12], [1, 1, 1, 3, 3, 3, 5], [1, 1, 1, 3, 3, 4, 4], [1, 1, 1, 3, 3, 8], [1, 1, 1, 3, 4, 7], [1, 1, 1, 3, 5, 6], [1, 1, 1, 3, 11], [1, 1, 1, 4, 4, 6], [1, 1, 1, 4, 5, 5], [1, 1, 1, 4, 10], [1, 1, 1, 5, 9], [1, 1, 1, 6, 8], [1, 1, 1, 7, 7], [1, 1, 1, 14], [1, 1, 2, 2, 2, 2, 2, 2, 3], [1, 1, 2, 2, 2, 2, 2, 5], [1, 1, 2, 2, 2, 2, 3, 4], [1, 1, 2, 2, 2, 2, 7], [1, 1, 2, 2, 2, 3, 3, 3], [1, 1, 2, 2, 2, 3, 6], [1, 1, 2, 2, 2, 4, 5], [1, 1, 2, 2, 2, 9], [1, 1, 2, 2, 3, 3, 5], [1, 1, 2, 2, 3, 4, 4], [1, 1, 2, 2, 3, 8], [1, 1, 2, 2, 4, 7], [1, 1, 2, 2, 5, 6], [1, 1, 2, 2, 11], [1, 1, 2, 3, 3, 3, 4], [1, 1, 2, 3, 3, 7], [1, 1, 2, 3, 4, 6], [1, 1, 2, 3, 5, 5], [1, 1, 2, 3, 10], [1, 1, 2, 4, 4, 5], [1, 1, 2, 4, 9], [1, 1, 2, 5, 8], [1, 1, 2, 6, 7], [1, 1, 2, 13], [1, 1, 3, 3, 3, 3, 3], [1, 1, 3, 3, 3, 6], [1, 1, 3, 3, 4, 5], [1, 1, 3, 3, 9], [1, 1, 3, 4, 4, 4], [1, 1, 3, 4, 8], [1, 1, 3, 5, 7], [1, 1, 3, 6, 6], [1, 1, 3, 12], [1, 1, 4, 4, 7], [1, 1, 4, 5, 6], [1, 1, 4, 11], [1, 1, 5, 5, 5], [1, 1, 5, 10], [1, 1, 6, 9], [1, 1, 7, 8], [1, 1, 15], [1, 2, 2, 2, 2, 2, 2, 2, 2], [1, 2, 2, 2, 2, 2, 2, 4], [1, 2, 2, 2, 2, 2, 3, 3], [1, 2, 2, 2, 2, 2, 6], [1, 2, 2, 2, 2, 3, 5], [1, 2, 2, 2, 2, 4, 4], [1, 2, 2, 2, 2, 8], [1, 2, 2, 2, 3, 3, 4], [1, 2, 2, 2, 3, 7], [1, 2, 2, 2, 4, 6], [1, 2, 2, 2, 5, 5], [1, 2, 2, 2, 10], [1, 2, 2, 3, 3, 3, 3], [1, 2, 2, 3, 3, 6], [1, 2, 2, 3, 4, 5], [1, 2, 2, 3, 9], [1, 2, 2, 4, 4, 4], [1, 2, 2, 4, 8], [1, 2, 2, 5, 7], [1, 2, 2, 6, 6], [1, 2, 2, 12], [1, 2, 3, 3, 3, 5], [1, 2, 3, 3, 4, 4], [1, 2, 3, 3, 8], [1, 2, 3, 4, 7], [1, 2, 3, 5, 6], [1, 2, 3, 11], [1, 2, 4, 4, 6], [1, 2, 4, 5, 5], [1, 2, 4, 10], [1, 2, 5, 9], [1, 2, 6, 8], [1, 2, 7, 7], [1, 2, 14], [1, 3, 3, 3, 3, 4], [1, 3, 3, 3, 7], [1, 3, 3, 4, 6], [1, 3, 3, 5, 5], [1, 3, 3, 10], [1, 3, 4, 4, 5], [1, 3, 4, 9], [1, 3, 5, 8], [1, 3, 6, 7], [1, 3, 13], [1, 4, 4, 4, 4], [1, 4, 4, 8], [1, 4, 5, 7], [1, 4, 6, 6], [1, 4, 12], [1, 5, 5, 6], [1, 5, 11], [1, 6, 10], [1, 7, 9], [1, 8, 8], [1, 16], [2, 2, 2, 2, 2, 2, 2, 3], [2, 2, 2, 2, 2, 2, 5], [2, 2, 2, 2, 2, 3, 4], [2, 2, 2, 2, 2, 7], [2, 2, 2, 2, 3, 3, 3], [2, 2, 2, 2, 3, 6], [2, 2, 2, 2, 4, 5], [2, 2, 2, 2, 9], [2, 2, 2, 3, 3, 5], [2, 2, 2, 3, 4, 4], [2, 2, 2, 3, 8], [2, 2, 2, 4, 7], [2, 2, 2, 5, 6], [2, 2, 2, 11], [2, 2, 3, 3, 3, 4], [2, 2, 3, 3, 7], [2, 2, 3, 4, 6], [2, 2, 3, 5, 5], [2, 2, 3, 10], [2, 2, 4, 4, 5], [2, 2, 4, 9], [2, 2, 5, 8], [2, 2, 6, 7], [2, 2, 13], [2, 3, 3, 3, 3, 3], [2, 3, 3, 3, 6], [2, 3, 3, 4, 5], [2, 3, 3, 9], [2, 3, 4, 4, 4], [2, 3, 4, 8], [2, 3, 5, 7], [2, 3, 6, 6], [2, 3, 12], [2, 4, 4, 7], [2, 4, 5, 6], [2, 4, 11], [2, 5, 5, 5], [2, 5, 10], [2, 6, 9], [2, 7, 8], [2, 15], [3, 3, 3, 3, 5], [3, 3, 3, 4, 4], [3, 3, 3, 8], [3, 3, 4, 7], [3, 3, 5, 6], [3, 3, 11], [3, 4, 4, 6], [3, 4, 5, 5], [3, 4, 10], [3, 5, 9], [3, 6, 8], [3, 7, 7], [3, 14], [4, 4, 4, 5], [4, 4, 9], [4, 5, 8], [4, 6, 7], [4, 13], [5, 5, 7], [5, 6, 6], [5, 12], [6, 11], [7, 10], [8, 9], [17]]\r\n    if n == 18:\r\n        return [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 6], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 7], [1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 6], [1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 9], [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 4], [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 6], [1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 5], [1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 4], [1, 1, 1, 1, 1, 1, 1, 1, 2, 8], [1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 4], [1, 1, 1, 1, 1, 1, 1, 1, 3, 7], [1, 1, 1, 1, 1, 1, 1, 1, 4, 6], [1, 1, 1, 1, 1, 1, 1, 1, 5, 5], [1, 1, 1, 1, 1, 1, 1, 1, 10], [1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3], [1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 5], [1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 4], [1, 1, 1, 1, 1, 1, 1, 2, 2, 7], [1, 1, 1, 1, 1, 1, 1, 2, 3, 3, 3], [1, 1, 1, 1, 1, 1, 1, 2, 3, 6], [1, 1, 1, 1, 1, 1, 1, 2, 4, 5], [1, 1, 1, 1, 1, 1, 1, 2, 9], [1, 1, 1, 1, 1, 1, 1, 3, 3, 5], [1, 1, 1, 1, 1, 1, 1, 3, 4, 4], [1, 1, 1, 1, 1, 1, 1, 3, 8], [1, 1, 1, 1, 1, 1, 1, 4, 7], [1, 1, 1, 1, 1, 1, 1, 5, 6], [1, 1, 1, 1, 1, 1, 1, 11], [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2], [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3], [1, 1, 1, 1, 1, 1, 2, 2, 2, 6], [1, 1, 1, 1, 1, 1, 2, 2, 3, 5], [1, 1, 1, 1, 1, 1, 2, 2, 4, 4], [1, 1, 1, 1, 1, 1, 2, 2, 8], [1, 1, 1, 1, 1, 1, 2, 3, 3, 4], [1, 1, 1, 1, 1, 1, 2, 3, 7], [1, 1, 1, 1, 1, 1, 2, 4, 6], [1, 1, 1, 1, 1, 1, 2, 5, 5], [1, 1, 1, 1, 1, 1, 2, 10], [1, 1, 1, 1, 1, 1, 3, 3, 3, 3], [1, 1, 1, 1, 1, 1, 3, 3, 6], [1, 1, 1, 1, 1, 1, 3, 4, 5], [1, 1, 1, 1, 1, 1, 3, 9], [1, 1, 1, 1, 1, 1, 4, 4, 4], [1, 1, 1, 1, 1, 1, 4, 8], [1, 1, 1, 1, 1, 1, 5, 7], [1, 1, 1, 1, 1, 1, 6, 6], [1, 1, 1, 1, 1, 1, 12], [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3], [1, 1, 1, 1, 1, 2, 2, 2, 2, 5], [1, 1, 1, 1, 1, 2, 2, 2, 3, 4], [1, 1, 1, 1, 1, 2, 2, 2, 7], [1, 1, 1, 1, 1, 2, 2, 3, 3, 3], [1, 1, 1, 1, 1, 2, 2, 3, 6], [1, 1, 1, 1, 1, 2, 2, 4, 5], [1, 1, 1, 1, 1, 2, 2, 9], [1, 1, 1, 1, 1, 2, 3, 3, 5], [1, 1, 1, 1, 1, 2, 3, 4, 4], [1, 1, 1, 1, 1, 2, 3, 8], [1, 1, 1, 1, 1, 2, 4, 7], [1, 1, 1, 1, 1, 2, 5, 6], [1, 1, 1, 1, 1, 2, 11], [1, 1, 1, 1, 1, 3, 3, 3, 4], [1, 1, 1, 1, 1, 3, 3, 7], [1, 1, 1, 1, 1, 3, 4, 6], [1, 1, 1, 1, 1, 3, 5, 5], [1, 1, 1, 1, 1, 3, 10], [1, 1, 1, 1, 1, 4, 4, 5], [1, 1, 1, 1, 1, 4, 9], [1, 1, 1, 1, 1, 5, 8], [1, 1, 1, 1, 1, 6, 7], [1, 1, 1, 1, 1, 13], [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2], [1, 1, 1, 1, 2, 2, 2, 2, 2, 4], [1, 1, 1, 1, 2, 2, 2, 2, 3, 3], [1, 1, 1, 1, 2, 2, 2, 2, 6], [1, 1, 1, 1, 2, 2, 2, 3, 5], [1, 1, 1, 1, 2, 2, 2, 4, 4], [1, 1, 1, 1, 2, 2, 2, 8], [1, 1, 1, 1, 2, 2, 3, 3, 4], [1, 1, 1, 1, 2, 2, 3, 7], [1, 1, 1, 1, 2, 2, 4, 6], [1, 1, 1, 1, 2, 2, 5, 5], [1, 1, 1, 1, 2, 2, 10], [1, 1, 1, 1, 2, 3, 3, 3, 3], [1, 1, 1, 1, 2, 3, 3, 6], [1, 1, 1, 1, 2, 3, 4, 5], [1, 1, 1, 1, 2, 3, 9], [1, 1, 1, 1, 2, 4, 4, 4], [1, 1, 1, 1, 2, 4, 8], [1, 1, 1, 1, 2, 5, 7], [1, 1, 1, 1, 2, 6, 6], [1, 1, 1, 1, 2, 12], [1, 1, 1, 1, 3, 3, 3, 5], [1, 1, 1, 1, 3, 3, 4, 4], [1, 1, 1, 1, 3, 3, 8], [1, 1, 1, 1, 3, 4, 7], [1, 1, 1, 1, 3, 5, 6], [1, 1, 1, 1, 3, 11], [1, 1, 1, 1, 4, 4, 6], [1, 1, 1, 1, 4, 5, 5], [1, 1, 1, 1, 4, 10], [1, 1, 1, 1, 5, 9], [1, 1, 1, 1, 6, 8], [1, 1, 1, 1, 7, 7], [1, 1, 1, 1, 14], [1, 1, 1, 2, 2, 2, 2, 2, 2, 3], [1, 1, 1, 2, 2, 2, 2, 2, 5], [1, 1, 1, 2, 2, 2, 2, 3, 4], [1, 1, 1, 2, 2, 2, 2, 7], [1, 1, 1, 2, 2, 2, 3, 3, 3], [1, 1, 1, 2, 2, 2, 3, 6], [1, 1, 1, 2, 2, 2, 4, 5], [1, 1, 1, 2, 2, 2, 9], [1, 1, 1, 2, 2, 3, 3, 5], [1, 1, 1, 2, 2, 3, 4, 4], [1, 1, 1, 2, 2, 3, 8], [1, 1, 1, 2, 2, 4, 7], [1, 1, 1, 2, 2, 5, 6], [1, 1, 1, 2, 2, 11], [1, 1, 1, 2, 3, 3, 3, 4], [1, 1, 1, 2, 3, 3, 7], [1, 1, 1, 2, 3, 4, 6], [1, 1, 1, 2, 3, 5, 5], [1, 1, 1, 2, 3, 10], [1, 1, 1, 2, 4, 4, 5], [1, 1, 1, 2, 4, 9], [1, 1, 1, 2, 5, 8], [1, 1, 1, 2, 6, 7], [1, 1, 1, 2, 13], [1, 1, 1, 3, 3, 3, 3, 3], [1, 1, 1, 3, 3, 3, 6], [1, 1, 1, 3, 3, 4, 5], [1, 1, 1, 3, 3, 9], [1, 1, 1, 3, 4, 4, 4], [1, 1, 1, 3, 4, 8], [1, 1, 1, 3, 5, 7], [1, 1, 1, 3, 6, 6], [1, 1, 1, 3, 12], [1, 1, 1, 4, 4, 7], [1, 1, 1, 4, 5, 6], [1, 1, 1, 4, 11], [1, 1, 1, 5, 5, 5], [1, 1, 1, 5, 10], [1, 1, 1, 6, 9], [1, 1, 1, 7, 8], [1, 1, 1, 15], [1, 1, 2, 2, 2, 2, 2, 2, 2, 2], [1, 1, 2, 2, 2, 2, 2, 2, 4], [1, 1, 2, 2, 2, 2, 2, 3, 3], [1, 1, 2, 2, 2, 2, 2, 6], [1, 1, 2, 2, 2, 2, 3, 5], [1, 1, 2, 2, 2, 2, 4, 4], [1, 1, 2, 2, 2, 2, 8], [1, 1, 2, 2, 2, 3, 3, 4], [1, 1, 2, 2, 2, 3, 7], [1, 1, 2, 2, 2, 4, 6], [1, 1, 2, 2, 2, 5, 5], [1, 1, 2, 2, 2, 10], [1, 1, 2, 2, 3, 3, 3, 3], [1, 1, 2, 2, 3, 3, 6], [1, 1, 2, 2, 3, 4, 5], [1, 1, 2, 2, 3, 9], [1, 1, 2, 2, 4, 4, 4], [1, 1, 2, 2, 4, 8], [1, 1, 2, 2, 5, 7], [1, 1, 2, 2, 6, 6], [1, 1, 2, 2, 12], [1, 1, 2, 3, 3, 3, 5], [1, 1, 2, 3, 3, 4, 4], [1, 1, 2, 3, 3, 8], [1, 1, 2, 3, 4, 7], [1, 1, 2, 3, 5, 6], [1, 1, 2, 3, 11], [1, 1, 2, 4, 4, 6], [1, 1, 2, 4, 5, 5], [1, 1, 2, 4, 10], [1, 1, 2, 5, 9], [1, 1, 2, 6, 8], [1, 1, 2, 7, 7], [1, 1, 2, 14], [1, 1, 3, 3, 3, 3, 4], [1, 1, 3, 3, 3, 7], [1, 1, 3, 3, 4, 6], [1, 1, 3, 3, 5, 5], [1, 1, 3, 3, 10], [1, 1, 3, 4, 4, 5], [1, 1, 3, 4, 9], [1, 1, 3, 5, 8], [1, 1, 3, 6, 7], [1, 1, 3, 13], [1, 1, 4, 4, 4, 4], [1, 1, 4, 4, 8], [1, 1, 4, 5, 7], [1, 1, 4, 6, 6], [1, 1, 4, 12], [1, 1, 5, 5, 6], [1, 1, 5, 11], [1, 1, 6, 10], [1, 1, 7, 9], [1, 1, 8, 8], [1, 1, 16], [1, 2, 2, 2, 2, 2, 2, 2, 3], [1, 2, 2, 2, 2, 2, 2, 5], [1, 2, 2, 2, 2, 2, 3, 4], [1, 2, 2, 2, 2, 2, 7], [1, 2, 2, 2, 2, 3, 3, 3], [1, 2, 2, 2, 2, 3, 6], [1, 2, 2, 2, 2, 4, 5], [1, 2, 2, 2, 2, 9], [1, 2, 2, 2, 3, 3, 5], [1, 2, 2, 2, 3, 4, 4], [1, 2, 2, 2, 3, 8], [1, 2, 2, 2, 4, 7], [1, 2, 2, 2, 5, 6], [1, 2, 2, 2, 11], [1, 2, 2, 3, 3, 3, 4], [1, 2, 2, 3, 3, 7], [1, 2, 2, 3, 4, 6], [1, 2, 2, 3, 5, 5], [1, 2, 2, 3, 10], [1, 2, 2, 4, 4, 5], [1, 2, 2, 4, 9], [1, 2, 2, 5, 8], [1, 2, 2, 6, 7], [1, 2, 2, 13], [1, 2, 3, 3, 3, 3, 3], [1, 2, 3, 3, 3, 6], [1, 2, 3, 3, 4, 5], [1, 2, 3, 3, 9], [1, 2, 3, 4, 4, 4], [1, 2, 3, 4, 8], [1, 2, 3, 5, 7], [1, 2, 3, 6, 6], [1, 2, 3, 12], [1, 2, 4, 4, 7], [1, 2, 4, 5, 6], [1, 2, 4, 11], [1, 2, 5, 5, 5], [1, 2, 5, 10], [1, 2, 6, 9], [1, 2, 7, 8], [1, 2, 15], [1, 3, 3, 3, 3, 5], [1, 3, 3, 3, 4, 4], [1, 3, 3, 3, 8], [1, 3, 3, 4, 7], [1, 3, 3, 5, 6], [1, 3, 3, 11], [1, 3, 4, 4, 6], [1, 3, 4, 5, 5], [1, 3, 4, 10], [1, 3, 5, 9], [1, 3, 6, 8], [1, 3, 7, 7], [1, 3, 14], [1, 4, 4, 4, 5], [1, 4, 4, 9], [1, 4, 5, 8], [1, 4, 6, 7], [1, 4, 13], [1, 5, 5, 7], [1, 5, 6, 6], [1, 5, 12], [1, 6, 11], [1, 7, 10], [1, 8, 9], [1, 17], [2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 4], [2, 2, 2, 2, 2, 2, 3, 3], [2, 2, 2, 2, 2, 2, 6], [2, 2, 2, 2, 2, 3, 5], [2, 2, 2, 2, 2, 4, 4], [2, 2, 2, 2, 2, 8], [2, 2, 2, 2, 3, 3, 4], [2, 2, 2, 2, 3, 7], [2, 2, 2, 2, 4, 6], [2, 2, 2, 2, 5, 5], [2, 2, 2, 2, 10], [2, 2, 2, 3, 3, 3, 3], [2, 2, 2, 3, 3, 6], [2, 2, 2, 3, 4, 5], [2, 2, 2, 3, 9], [2, 2, 2, 4, 4, 4], [2, 2, 2, 4, 8], [2, 2, 2, 5, 7], [2, 2, 2, 6, 6], [2, 2, 2, 12], [2, 2, 3, 3, 3, 5], [2, 2, 3, 3, 4, 4], [2, 2, 3, 3, 8], [2, 2, 3, 4, 7], [2, 2, 3, 5, 6], [2, 2, 3, 11], [2, 2, 4, 4, 6], [2, 2, 4, 5, 5], [2, 2, 4, 10], [2, 2, 5, 9], [2, 2, 6, 8], [2, 2, 7, 7], [2, 2, 14], [2, 3, 3, 3, 3, 4], [2, 3, 3, 3, 7], [2, 3, 3, 4, 6], [2, 3, 3, 5, 5], [2, 3, 3, 10], [2, 3, 4, 4, 5], [2, 3, 4, 9], [2, 3, 5, 8], [2, 3, 6, 7], [2, 3, 13], [2, 4, 4, 4, 4], [2, 4, 4, 8], [2, 4, 5, 7], [2, 4, 6, 6], [2, 4, 12], [2, 5, 5, 6], [2, 5, 11], [2, 6, 10], [2, 7, 9], [2, 8, 8], [2, 16], [3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 6], [3, 3, 3, 4, 5], [3, 3, 3, 9], [3, 3, 4, 4, 4], [3, 3, 4, 8], [3, 3, 5, 7], [3, 3, 6, 6], [3, 3, 12], [3, 4, 4, 7], [3, 4, 5, 6], [3, 4, 11], [3, 5, 5, 5], [3, 5, 10], [3, 6, 9], [3, 7, 8], [3, 15], [4, 4, 4, 6], [4, 4, 5, 5], [4, 4, 10], [4, 5, 9], [4, 6, 8], [4, 7, 7], [4, 14], [5, 5, 8], [5, 6, 7], [5, 13], [6, 6, 6], [6, 12], [7, 11], [8, 10], [9, 9], [18]]\r\n    if n == 19:\r\n        return [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 6], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 7], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 6], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 6], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 8], [1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 7], [1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 6], [1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 10], [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3], [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 5], [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 4], [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 7], [1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 6], [1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 5], [1, 1, 1, 1, 1, 1, 1, 1, 2, 9], [1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 5], [1, 1, 1, 1, 1, 1, 1, 1, 3, 4, 4], [1, 1, 1, 1, 1, 1, 1, 1, 3, 8], [1, 1, 1, 1, 1, 1, 1, 1, 4, 7], [1, 1, 1, 1, 1, 1, 1, 1, 5, 6], [1, 1, 1, 1, 1, 1, 1, 1, 11], [1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2], [1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4], [1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3], [1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 6], [1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 5], [1, 1, 1, 1, 1, 1, 1, 2, 2, 4, 4], [1, 1, 1, 1, 1, 1, 1, 2, 2, 8], [1, 1, 1, 1, 1, 1, 1, 2, 3, 3, 4], [1, 1, 1, 1, 1, 1, 1, 2, 3, 7], [1, 1, 1, 1, 1, 1, 1, 2, 4, 6], [1, 1, 1, 1, 1, 1, 1, 2, 5, 5], [1, 1, 1, 1, 1, 1, 1, 2, 10], [1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3], [1, 1, 1, 1, 1, 1, 1, 3, 3, 6], [1, 1, 1, 1, 1, 1, 1, 3, 4, 5], [1, 1, 1, 1, 1, 1, 1, 3, 9], [1, 1, 1, 1, 1, 1, 1, 4, 4, 4], [1, 1, 1, 1, 1, 1, 1, 4, 8], [1, 1, 1, 1, 1, 1, 1, 5, 7], [1, 1, 1, 1, 1, 1, 1, 6, 6], [1, 1, 1, 1, 1, 1, 1, 12], [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3], [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 5], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 4], [1, 1, 1, 1, 1, 1, 2, 2, 2, 7], [1, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3], [1, 1, 1, 1, 1, 1, 2, 2, 3, 6], [1, 1, 1, 1, 1, 1, 2, 2, 4, 5], [1, 1, 1, 1, 1, 1, 2, 2, 9], [1, 1, 1, 1, 1, 1, 2, 3, 3, 5], [1, 1, 1, 1, 1, 1, 2, 3, 4, 4], [1, 1, 1, 1, 1, 1, 2, 3, 8], [1, 1, 1, 1, 1, 1, 2, 4, 7], [1, 1, 1, 1, 1, 1, 2, 5, 6], [1, 1, 1, 1, 1, 1, 2, 11], [1, 1, 1, 1, 1, 1, 3, 3, 3, 4], [1, 1, 1, 1, 1, 1, 3, 3, 7], [1, 1, 1, 1, 1, 1, 3, 4, 6], [1, 1, 1, 1, 1, 1, 3, 5, 5], [1, 1, 1, 1, 1, 1, 3, 10], [1, 1, 1, 1, 1, 1, 4, 4, 5], [1, 1, 1, 1, 1, 1, 4, 9], [1, 1, 1, 1, 1, 1, 5, 8], [1, 1, 1, 1, 1, 1, 6, 7], [1, 1, 1, 1, 1, 1, 13], [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2], [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 4], [1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3], [1, 1, 1, 1, 1, 2, 2, 2, 2, 6], [1, 1, 1, 1, 1, 2, 2, 2, 3, 5], [1, 1, 1, 1, 1, 2, 2, 2, 4, 4], [1, 1, 1, 1, 1, 2, 2, 2, 8], [1, 1, 1, 1, 1, 2, 2, 3, 3, 4], [1, 1, 1, 1, 1, 2, 2, 3, 7], [1, 1, 1, 1, 1, 2, 2, 4, 6], [1, 1, 1, 1, 1, 2, 2, 5, 5], [1, 1, 1, 1, 1, 2, 2, 10], [1, 1, 1, 1, 1, 2, 3, 3, 3, 3], [1, 1, 1, 1, 1, 2, 3, 3, 6], [1, 1, 1, 1, 1, 2, 3, 4, 5], [1, 1, 1, 1, 1, 2, 3, 9], [1, 1, 1, 1, 1, 2, 4, 4, 4], [1, 1, 1, 1, 1, 2, 4, 8], [1, 1, 1, 1, 1, 2, 5, 7], [1, 1, 1, 1, 1, 2, 6, 6], [1, 1, 1, 1, 1, 2, 12], [1, 1, 1, 1, 1, 3, 3, 3, 5], [1, 1, 1, 1, 1, 3, 3, 4, 4], [1, 1, 1, 1, 1, 3, 3, 8], [1, 1, 1, 1, 1, 3, 4, 7], [1, 1, 1, 1, 1, 3, 5, 6], [1, 1, 1, 1, 1, 3, 11], [1, 1, 1, 1, 1, 4, 4, 6], [1, 1, 1, 1, 1, 4, 5, 5], [1, 1, 1, 1, 1, 4, 10], [1, 1, 1, 1, 1, 5, 9], [1, 1, 1, 1, 1, 6, 8], [1, 1, 1, 1, 1, 7, 7], [1, 1, 1, 1, 1, 14], [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3], [1, 1, 1, 1, 2, 2, 2, 2, 2, 5], [1, 1, 1, 1, 2, 2, 2, 2, 3, 4], [1, 1, 1, 1, 2, 2, 2, 2, 7], [1, 1, 1, 1, 2, 2, 2, 3, 3, 3], [1, 1, 1, 1, 2, 2, 2, 3, 6], [1, 1, 1, 1, 2, 2, 2, 4, 5], [1, 1, 1, 1, 2, 2, 2, 9], [1, 1, 1, 1, 2, 2, 3, 3, 5], [1, 1, 1, 1, 2, 2, 3, 4, 4], [1, 1, 1, 1, 2, 2, 3, 8], [1, 1, 1, 1, 2, 2, 4, 7], [1, 1, 1, 1, 2, 2, 5, 6], [1, 1, 1, 1, 2, 2, 11], [1, 1, 1, 1, 2, 3, 3, 3, 4], [1, 1, 1, 1, 2, 3, 3, 7], [1, 1, 1, 1, 2, 3, 4, 6], [1, 1, 1, 1, 2, 3, 5, 5], [1, 1, 1, 1, 2, 3, 10], [1, 1, 1, 1, 2, 4, 4, 5], [1, 1, 1, 1, 2, 4, 9], [1, 1, 1, 1, 2, 5, 8], [1, 1, 1, 1, 2, 6, 7], [1, 1, 1, 1, 2, 13], [1, 1, 1, 1, 3, 3, 3, 3, 3], [1, 1, 1, 1, 3, 3, 3, 6], [1, 1, 1, 1, 3, 3, 4, 5], [1, 1, 1, 1, 3, 3, 9], [1, 1, 1, 1, 3, 4, 4, 4], [1, 1, 1, 1, 3, 4, 8], [1, 1, 1, 1, 3, 5, 7], [1, 1, 1, 1, 3, 6, 6], [1, 1, 1, 1, 3, 12], [1, 1, 1, 1, 4, 4, 7], [1, 1, 1, 1, 4, 5, 6], [1, 1, 1, 1, 4, 11], [1, 1, 1, 1, 5, 5, 5], [1, 1, 1, 1, 5, 10], [1, 1, 1, 1, 6, 9], [1, 1, 1, 1, 7, 8], [1, 1, 1, 1, 15], [1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2], [1, 1, 1, 2, 2, 2, 2, 2, 2, 4], [1, 1, 1, 2, 2, 2, 2, 2, 3, 3], [1, 1, 1, 2, 2, 2, 2, 2, 6], [1, 1, 1, 2, 2, 2, 2, 3, 5], [1, 1, 1, 2, 2, 2, 2, 4, 4], [1, 1, 1, 2, 2, 2, 2, 8], [1, 1, 1, 2, 2, 2, 3, 3, 4], [1, 1, 1, 2, 2, 2, 3, 7], [1, 1, 1, 2, 2, 2, 4, 6], [1, 1, 1, 2, 2, 2, 5, 5], [1, 1, 1, 2, 2, 2, 10], [1, 1, 1, 2, 2, 3, 3, 3, 3], [1, 1, 1, 2, 2, 3, 3, 6], [1, 1, 1, 2, 2, 3, 4, 5], [1, 1, 1, 2, 2, 3, 9], [1, 1, 1, 2, 2, 4, 4, 4], [1, 1, 1, 2, 2, 4, 8], [1, 1, 1, 2, 2, 5, 7], [1, 1, 1, 2, 2, 6, 6], [1, 1, 1, 2, 2, 12], [1, 1, 1, 2, 3, 3, 3, 5], [1, 1, 1, 2, 3, 3, 4, 4], [1, 1, 1, 2, 3, 3, 8], [1, 1, 1, 2, 3, 4, 7], [1, 1, 1, 2, 3, 5, 6], [1, 1, 1, 2, 3, 11], [1, 1, 1, 2, 4, 4, 6], [1, 1, 1, 2, 4, 5, 5], [1, 1, 1, 2, 4, 10], [1, 1, 1, 2, 5, 9], [1, 1, 1, 2, 6, 8], [1, 1, 1, 2, 7, 7], [1, 1, 1, 2, 14], [1, 1, 1, 3, 3, 3, 3, 4], [1, 1, 1, 3, 3, 3, 7], [1, 1, 1, 3, 3, 4, 6], [1, 1, 1, 3, 3, 5, 5], [1, 1, 1, 3, 3, 10], [1, 1, 1, 3, 4, 4, 5], [1, 1, 1, 3, 4, 9], [1, 1, 1, 3, 5, 8], [1, 1, 1, 3, 6, 7], [1, 1, 1, 3, 13], [1, 1, 1, 4, 4, 4, 4], [1, 1, 1, 4, 4, 8], [1, 1, 1, 4, 5, 7], [1, 1, 1, 4, 6, 6], [1, 1, 1, 4, 12], [1, 1, 1, 5, 5, 6], [1, 1, 1, 5, 11], [1, 1, 1, 6, 10], [1, 1, 1, 7, 9], [1, 1, 1, 8, 8], [1, 1, 1, 16], [1, 1, 2, 2, 2, 2, 2, 2, 2, 3], [1, 1, 2, 2, 2, 2, 2, 2, 5], [1, 1, 2, 2, 2, 2, 2, 3, 4], [1, 1, 2, 2, 2, 2, 2, 7], [1, 1, 2, 2, 2, 2, 3, 3, 3], [1, 1, 2, 2, 2, 2, 3, 6], [1, 1, 2, 2, 2, 2, 4, 5], [1, 1, 2, 2, 2, 2, 9], [1, 1, 2, 2, 2, 3, 3, 5], [1, 1, 2, 2, 2, 3, 4, 4], [1, 1, 2, 2, 2, 3, 8], [1, 1, 2, 2, 2, 4, 7], [1, 1, 2, 2, 2, 5, 6], [1, 1, 2, 2, 2, 11], [1, 1, 2, 2, 3, 3, 3, 4], [1, 1, 2, 2, 3, 3, 7], [1, 1, 2, 2, 3, 4, 6], [1, 1, 2, 2, 3, 5, 5], [1, 1, 2, 2, 3, 10], [1, 1, 2, 2, 4, 4, 5], [1, 1, 2, 2, 4, 9], [1, 1, 2, 2, 5, 8], [1, 1, 2, 2, 6, 7], [1, 1, 2, 2, 13], [1, 1, 2, 3, 3, 3, 3, 3], [1, 1, 2, 3, 3, 3, 6], [1, 1, 2, 3, 3, 4, 5], [1, 1, 2, 3, 3, 9], [1, 1, 2, 3, 4, 4, 4], [1, 1, 2, 3, 4, 8], [1, 1, 2, 3, 5, 7], [1, 1, 2, 3, 6, 6], [1, 1, 2, 3, 12], [1, 1, 2, 4, 4, 7], [1, 1, 2, 4, 5, 6], [1, 1, 2, 4, 11], [1, 1, 2, 5, 5, 5], [1, 1, 2, 5, 10], [1, 1, 2, 6, 9], [1, 1, 2, 7, 8], [1, 1, 2, 15], [1, 1, 3, 3, 3, 3, 5], [1, 1, 3, 3, 3, 4, 4], [1, 1, 3, 3, 3, 8], [1, 1, 3, 3, 4, 7], [1, 1, 3, 3, 5, 6], [1, 1, 3, 3, 11], [1, 1, 3, 4, 4, 6], [1, 1, 3, 4, 5, 5], [1, 1, 3, 4, 10], [1, 1, 3, 5, 9], [1, 1, 3, 6, 8], [1, 1, 3, 7, 7], [1, 1, 3, 14], [1, 1, 4, 4, 4, 5], [1, 1, 4, 4, 9], [1, 1, 4, 5, 8], [1, 1, 4, 6, 7], [1, 1, 4, 13], [1, 1, 5, 5, 7], [1, 1, 5, 6, 6], [1, 1, 5, 12], [1, 1, 6, 11], [1, 1, 7, 10], [1, 1, 8, 9], [1, 1, 17], [1, 2, 2, 2, 2, 2, 2, 2, 2, 2], [1, 2, 2, 2, 2, 2, 2, 2, 4], [1, 2, 2, 2, 2, 2, 2, 3, 3], [1, 2, 2, 2, 2, 2, 2, 6], [1, 2, 2, 2, 2, 2, 3, 5], [1, 2, 2, 2, 2, 2, 4, 4], [1, 2, 2, 2, 2, 2, 8], [1, 2, 2, 2, 2, 3, 3, 4], [1, 2, 2, 2, 2, 3, 7], [1, 2, 2, 2, 2, 4, 6], [1, 2, 2, 2, 2, 5, 5], [1, 2, 2, 2, 2, 10], [1, 2, 2, 2, 3, 3, 3, 3], [1, 2, 2, 2, 3, 3, 6], [1, 2, 2, 2, 3, 4, 5], [1, 2, 2, 2, 3, 9], [1, 2, 2, 2, 4, 4, 4], [1, 2, 2, 2, 4, 8], [1, 2, 2, 2, 5, 7], [1, 2, 2, 2, 6, 6], [1, 2, 2, 2, 12], [1, 2, 2, 3, 3, 3, 5], [1, 2, 2, 3, 3, 4, 4], [1, 2, 2, 3, 3, 8], [1, 2, 2, 3, 4, 7], [1, 2, 2, 3, 5, 6], [1, 2, 2, 3, 11], [1, 2, 2, 4, 4, 6], [1, 2, 2, 4, 5, 5], [1, 2, 2, 4, 10], [1, 2, 2, 5, 9], [1, 2, 2, 6, 8], [1, 2, 2, 7, 7], [1, 2, 2, 14], [1, 2, 3, 3, 3, 3, 4], [1, 2, 3, 3, 3, 7], [1, 2, 3, 3, 4, 6], [1, 2, 3, 3, 5, 5], [1, 2, 3, 3, 10], [1, 2, 3, 4, 4, 5], [1, 2, 3, 4, 9], [1, 2, 3, 5, 8], [1, 2, 3, 6, 7], [1, 2, 3, 13], [1, 2, 4, 4, 4, 4], [1, 2, 4, 4, 8], [1, 2, 4, 5, 7], [1, 2, 4, 6, 6], [1, 2, 4, 12], [1, 2, 5, 5, 6], [1, 2, 5, 11], [1, 2, 6, 10], [1, 2, 7, 9], [1, 2, 8, 8], [1, 2, 16], [1, 3, 3, 3, 3, 3, 3], [1, 3, 3, 3, 3, 6], [1, 3, 3, 3, 4, 5], [1, 3, 3, 3, 9], [1, 3, 3, 4, 4, 4], [1, 3, 3, 4, 8], [1, 3, 3, 5, 7], [1, 3, 3, 6, 6], [1, 3, 3, 12], [1, 3, 4, 4, 7], [1, 3, 4, 5, 6], [1, 3, 4, 11], [1, 3, 5, 5, 5], [1, 3, 5, 10], [1, 3, 6, 9], [1, 3, 7, 8], [1, 3, 15], [1, 4, 4, 4, 6], [1, 4, 4, 5, 5], [1, 4, 4, 10], [1, 4, 5, 9], [1, 4, 6, 8], [1, 4, 7, 7], [1, 4, 14], [1, 5, 5, 8], [1, 5, 6, 7], [1, 5, 13], [1, 6, 6, 6], [1, 6, 12], [1, 7, 11], [1, 8, 10], [1, 9, 9], [1, 18], [2, 2, 2, 2, 2, 2, 2, 2, 3], [2, 2, 2, 2, 2, 2, 2, 5], [2, 2, 2, 2, 2, 2, 3, 4], [2, 2, 2, 2, 2, 2, 7], [2, 2, 2, 2, 2, 3, 3, 3], [2, 2, 2, 2, 2, 3, 6], [2, 2, 2, 2, 2, 4, 5], [2, 2, 2, 2, 2, 9], [2, 2, 2, 2, 3, 3, 5], [2, 2, 2, 2, 3, 4, 4], [2, 2, 2, 2, 3, 8], [2, 2, 2, 2, 4, 7], [2, 2, 2, 2, 5, 6], [2, 2, 2, 2, 11], [2, 2, 2, 3, 3, 3, 4], [2, 2, 2, 3, 3, 7], [2, 2, 2, 3, 4, 6], [2, 2, 2, 3, 5, 5], [2, 2, 2, 3, 10], [2, 2, 2, 4, 4, 5], [2, 2, 2, 4, 9], [2, 2, 2, 5, 8], [2, 2, 2, 6, 7], [2, 2, 2, 13], [2, 2, 3, 3, 3, 3, 3], [2, 2, 3, 3, 3, 6], [2, 2, 3, 3, 4, 5], [2, 2, 3, 3, 9], [2, 2, 3, 4, 4, 4], [2, 2, 3, 4, 8], [2, 2, 3, 5, 7], [2, 2, 3, 6, 6], [2, 2, 3, 12], [2, 2, 4, 4, 7], [2, 2, 4, 5, 6], [2, 2, 4, 11], [2, 2, 5, 5, 5], [2, 2, 5, 10], [2, 2, 6, 9], [2, 2, 7, 8], [2, 2, 15], [2, 3, 3, 3, 3, 5], [2, 3, 3, 3, 4, 4], [2, 3, 3, 3, 8], [2, 3, 3, 4, 7], [2, 3, 3, 5, 6], [2, 3, 3, 11], [2, 3, 4, 4, 6], [2, 3, 4, 5, 5], [2, 3, 4, 10], [2, 3, 5, 9], [2, 3, 6, 8], [2, 3, 7, 7], [2, 3, 14], [2, 4, 4, 4, 5], [2, 4, 4, 9], [2, 4, 5, 8], [2, 4, 6, 7], [2, 4, 13], [2, 5, 5, 7], [2, 5, 6, 6], [2, 5, 12], [2, 6, 11], [2, 7, 10], [2, 8, 9], [2, 17], [3, 3, 3, 3, 3, 4], [3, 3, 3, 3, 7], [3, 3, 3, 4, 6], [3, 3, 3, 5, 5], [3, 3, 3, 10], [3, 3, 4, 4, 5], [3, 3, 4, 9], [3, 3, 5, 8], [3, 3, 6, 7], [3, 3, 13], [3, 4, 4, 4, 4], [3, 4, 4, 8], [3, 4, 5, 7], [3, 4, 6, 6], [3, 4, 12], [3, 5, 5, 6], [3, 5, 11], [3, 6, 10], [3, 7, 9], [3, 8, 8], [3, 16], [4, 4, 4, 7], [4, 4, 5, 6], [4, 4, 11], [4, 5, 5, 5], [4, 5, 10], [4, 6, 9], [4, 7, 8], [4, 15], [5, 5, 9], [5, 6, 8], [5, 7, 7], [5, 14], [6, 6, 7], [6, 13], [7, 12], [8, 11], [9, 10], [19]]\r\n    if n == 20:\r\n        return [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 6], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 7], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 6], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 6], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 8], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 7], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 6], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 7], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 6], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 9], [1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 4, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 8], [1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 7], [1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 6], [1, 1, 1, 1, 1, 1, 1, 1, 1, 11], [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2], [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4], [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 6], [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 5], [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 4, 4], [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 8], [1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 3, 4], [1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 7], [1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 6], [1, 1, 1, 1, 1, 1, 1, 1, 2, 5, 5], [1, 1, 1, 1, 1, 1, 1, 1, 2, 10], [1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 6], [1, 1, 1, 1, 1, 1, 1, 1, 3, 4, 5], [1, 1, 1, 1, 1, 1, 1, 1, 3, 9], [1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4], [1, 1, 1, 1, 1, 1, 1, 1, 4, 8], [1, 1, 1, 1, 1, 1, 1, 1, 5, 7], [1, 1, 1, 1, 1, 1, 1, 1, 6, 6], [1, 1, 1, 1, 1, 1, 1, 1, 12], [1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3], [1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 5], [1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 4], [1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 7], [1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3], [1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 6], [1, 1, 1, 1, 1, 1, 1, 2, 2, 4, 5], [1, 1, 1, 1, 1, 1, 1, 2, 2, 9], [1, 1, 1, 1, 1, 1, 1, 2, 3, 3, 5], [1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 4], [1, 1, 1, 1, 1, 1, 1, 2, 3, 8], [1, 1, 1, 1, 1, 1, 1, 2, 4, 7], [1, 1, 1, 1, 1, 1, 1, 2, 5, 6], [1, 1, 1, 1, 1, 1, 1, 2, 11], [1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 4], [1, 1, 1, 1, 1, 1, 1, 3, 3, 7], [1, 1, 1, 1, 1, 1, 1, 3, 4, 6], [1, 1, 1, 1, 1, 1, 1, 3, 5, 5], [1, 1, 1, 1, 1, 1, 1, 3, 10], [1, 1, 1, 1, 1, 1, 1, 4, 4, 5], [1, 1, 1, 1, 1, 1, 1, 4, 9], [1, 1, 1, 1, 1, 1, 1, 5, 8], [1, 1, 1, 1, 1, 1, 1, 6, 7], [1, 1, 1, 1, 1, 1, 1, 13], [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2], [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 4], [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3], [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 6], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 5], [1, 1, 1, 1, 1, 1, 2, 2, 2, 4, 4], [1, 1, 1, 1, 1, 1, 2, 2, 2, 8], [1, 1, 1, 1, 1, 1, 2, 2, 3, 3, 4], [1, 1, 1, 1, 1, 1, 2, 2, 3, 7], [1, 1, 1, 1, 1, 1, 2, 2, 4, 6], [1, 1, 1, 1, 1, 1, 2, 2, 5, 5], [1, 1, 1, 1, 1, 1, 2, 2, 10], [1, 1, 1, 1, 1, 1, 2, 3, 3, 3, 3], [1, 1, 1, 1, 1, 1, 2, 3, 3, 6], [1, 1, 1, 1, 1, 1, 2, 3, 4, 5], [1, 1, 1, 1, 1, 1, 2, 3, 9], [1, 1, 1, 1, 1, 1, 2, 4, 4, 4], [1, 1, 1, 1, 1, 1, 2, 4, 8], [1, 1, 1, 1, 1, 1, 2, 5, 7], [1, 1, 1, 1, 1, 1, 2, 6, 6], [1, 1, 1, 1, 1, 1, 2, 12], [1, 1, 1, 1, 1, 1, 3, 3, 3, 5], [1, 1, 1, 1, 1, 1, 3, 3, 4, 4], [1, 1, 1, 1, 1, 1, 3, 3, 8], [1, 1, 1, 1, 1, 1, 3, 4, 7], [1, 1, 1, 1, 1, 1, 3, 5, 6], [1, 1, 1, 1, 1, 1, 3, 11], [1, 1, 1, 1, 1, 1, 4, 4, 6], [1, 1, 1, 1, 1, 1, 4, 5, 5], [1, 1, 1, 1, 1, 1, 4, 10], [1, 1, 1, 1, 1, 1, 5, 9], [1, 1, 1, 1, 1, 1, 6, 8], [1, 1, 1, 1, 1, 1, 7, 7], [1, 1, 1, 1, 1, 1, 14], [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3], [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 5], [1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 4], [1, 1, 1, 1, 1, 2, 2, 2, 2, 7], [1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3], [1, 1, 1, 1, 1, 2, 2, 2, 3, 6], [1, 1, 1, 1, 1, 2, 2, 2, 4, 5], [1, 1, 1, 1, 1, 2, 2, 2, 9], [1, 1, 1, 1, 1, 2, 2, 3, 3, 5], [1, 1, 1, 1, 1, 2, 2, 3, 4, 4], [1, 1, 1, 1, 1, 2, 2, 3, 8], [1, 1, 1, 1, 1, 2, 2, 4, 7], [1, 1, 1, 1, 1, 2, 2, 5, 6], [1, 1, 1, 1, 1, 2, 2, 11], [1, 1, 1, 1, 1, 2, 3, 3, 3, 4], [1, 1, 1, 1, 1, 2, 3, 3, 7], [1, 1, 1, 1, 1, 2, 3, 4, 6], [1, 1, 1, 1, 1, 2, 3, 5, 5], [1, 1, 1, 1, 1, 2, 3, 10], [1, 1, 1, 1, 1, 2, 4, 4, 5], [1, 1, 1, 1, 1, 2, 4, 9], [1, 1, 1, 1, 1, 2, 5, 8], [1, 1, 1, 1, 1, 2, 6, 7], [1, 1, 1, 1, 1, 2, 13], [1, 1, 1, 1, 1, 3, 3, 3, 3, 3], [1, 1, 1, 1, 1, 3, 3, 3, 6], [1, 1, 1, 1, 1, 3, 3, 4, 5], [1, 1, 1, 1, 1, 3, 3, 9], [1, 1, 1, 1, 1, 3, 4, 4, 4], [1, 1, 1, 1, 1, 3, 4, 8], [1, 1, 1, 1, 1, 3, 5, 7], [1, 1, 1, 1, 1, 3, 6, 6], [1, 1, 1, 1, 1, 3, 12], [1, 1, 1, 1, 1, 4, 4, 7], [1, 1, 1, 1, 1, 4, 5, 6], [1, 1, 1, 1, 1, 4, 11], [1, 1, 1, 1, 1, 5, 5, 5], [1, 1, 1, 1, 1, 5, 10], [1, 1, 1, 1, 1, 6, 9], [1, 1, 1, 1, 1, 7, 8], [1, 1, 1, 1, 1, 15], [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2], [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 4], [1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3], [1, 1, 1, 1, 2, 2, 2, 2, 2, 6], [1, 1, 1, 1, 2, 2, 2, 2, 3, 5], [1, 1, 1, 1, 2, 2, 2, 2, 4, 4], [1, 1, 1, 1, 2, 2, 2, 2, 8], [1, 1, 1, 1, 2, 2, 2, 3, 3, 4], [1, 1, 1, 1, 2, 2, 2, 3, 7], [1, 1, 1, 1, 2, 2, 2, 4, 6], [1, 1, 1, 1, 2, 2, 2, 5, 5], [1, 1, 1, 1, 2, 2, 2, 10], [1, 1, 1, 1, 2, 2, 3, 3, 3, 3], [1, 1, 1, 1, 2, 2, 3, 3, 6], [1, 1, 1, 1, 2, 2, 3, 4, 5], [1, 1, 1, 1, 2, 2, 3, 9], [1, 1, 1, 1, 2, 2, 4, 4, 4], [1, 1, 1, 1, 2, 2, 4, 8], [1, 1, 1, 1, 2, 2, 5, 7], [1, 1, 1, 1, 2, 2, 6, 6], [1, 1, 1, 1, 2, 2, 12], [1, 1, 1, 1, 2, 3, 3, 3, 5], [1, 1, 1, 1, 2, 3, 3, 4, 4], [1, 1, 1, 1, 2, 3, 3, 8], [1, 1, 1, 1, 2, 3, 4, 7], [1, 1, 1, 1, 2, 3, 5, 6], [1, 1, 1, 1, 2, 3, 11], [1, 1, 1, 1, 2, 4, 4, 6], [1, 1, 1, 1, 2, 4, 5, 5], [1, 1, 1, 1, 2, 4, 10], [1, 1, 1, 1, 2, 5, 9], [1, 1, 1, 1, 2, 6, 8], [1, 1, 1, 1, 2, 7, 7], [1, 1, 1, 1, 2, 14], [1, 1, 1, 1, 3, 3, 3, 3, 4], [1, 1, 1, 1, 3, 3, 3, 7], [1, 1, 1, 1, 3, 3, 4, 6], [1, 1, 1, 1, 3, 3, 5, 5], [1, 1, 1, 1, 3, 3, 10], [1, 1, 1, 1, 3, 4, 4, 5], [1, 1, 1, 1, 3, 4, 9], [1, 1, 1, 1, 3, 5, 8], [1, 1, 1, 1, 3, 6, 7], [1, 1, 1, 1, 3, 13], [1, 1, 1, 1, 4, 4, 4, 4], [1, 1, 1, 1, 4, 4, 8], [1, 1, 1, 1, 4, 5, 7], [1, 1, 1, 1, 4, 6, 6], [1, 1, 1, 1, 4, 12], [1, 1, 1, 1, 5, 5, 6], [1, 1, 1, 1, 5, 11], [1, 1, 1, 1, 6, 10], [1, 1, 1, 1, 7, 9], [1, 1, 1, 1, 8, 8], [1, 1, 1, 1, 16], [1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3], [1, 1, 1, 2, 2, 2, 2, 2, 2, 5], [1, 1, 1, 2, 2, 2, 2, 2, 3, 4], [1, 1, 1, 2, 2, 2, 2, 2, 7], [1, 1, 1, 2, 2, 2, 2, 3, 3, 3], [1, 1, 1, 2, 2, 2, 2, 3, 6], [1, 1, 1, 2, 2, 2, 2, 4, 5], [1, 1, 1, 2, 2, 2, 2, 9], [1, 1, 1, 2, 2, 2, 3, 3, 5], [1, 1, 1, 2, 2, 2, 3, 4, 4], [1, 1, 1, 2, 2, 2, 3, 8], [1, 1, 1, 2, 2, 2, 4, 7], [1, 1, 1, 2, 2, 2, 5, 6], [1, 1, 1, 2, 2, 2, 11], [1, 1, 1, 2, 2, 3, 3, 3, 4], [1, 1, 1, 2, 2, 3, 3, 7], [1, 1, 1, 2, 2, 3, 4, 6], [1, 1, 1, 2, 2, 3, 5, 5], [1, 1, 1, 2, 2, 3, 10], [1, 1, 1, 2, 2, 4, 4, 5], [1, 1, 1, 2, 2, 4, 9], [1, 1, 1, 2, 2, 5, 8], [1, 1, 1, 2, 2, 6, 7], [1, 1, 1, 2, 2, 13], [1, 1, 1, 2, 3, 3, 3, 3, 3], [1, 1, 1, 2, 3, 3, 3, 6], [1, 1, 1, 2, 3, 3, 4, 5], [1, 1, 1, 2, 3, 3, 9], [1, 1, 1, 2, 3, 4, 4, 4], [1, 1, 1, 2, 3, 4, 8], [1, 1, 1, 2, 3, 5, 7], [1, 1, 1, 2, 3, 6, 6], [1, 1, 1, 2, 3, 12], [1, 1, 1, 2, 4, 4, 7], [1, 1, 1, 2, 4, 5, 6], [1, 1, 1, 2, 4, 11], [1, 1, 1, 2, 5, 5, 5], [1, 1, 1, 2, 5, 10], [1, 1, 1, 2, 6, 9], [1, 1, 1, 2, 7, 8], [1, 1, 1, 2, 15], [1, 1, 1, 3, 3, 3, 3, 5], [1, 1, 1, 3, 3, 3, 4, 4], [1, 1, 1, 3, 3, 3, 8], [1, 1, 1, 3, 3, 4, 7], [1, 1, 1, 3, 3, 5, 6], [1, 1, 1, 3, 3, 11], [1, 1, 1, 3, 4, 4, 6], [1, 1, 1, 3, 4, 5, 5], [1, 1, 1, 3, 4, 10], [1, 1, 1, 3, 5, 9], [1, 1, 1, 3, 6, 8], [1, 1, 1, 3, 7, 7], [1, 1, 1, 3, 14], [1, 1, 1, 4, 4, 4, 5], [1, 1, 1, 4, 4, 9], [1, 1, 1, 4, 5, 8], [1, 1, 1, 4, 6, 7], [1, 1, 1, 4, 13], [1, 1, 1, 5, 5, 7], [1, 1, 1, 5, 6, 6], [1, 1, 1, 5, 12], [1, 1, 1, 6, 11], [1, 1, 1, 7, 10], [1, 1, 1, 8, 9], [1, 1, 1, 17], [1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2], [1, 1, 2, 2, 2, 2, 2, 2, 2, 4], [1, 1, 2, 2, 2, 2, 2, 2, 3, 3], [1, 1, 2, 2, 2, 2, 2, 2, 6], [1, 1, 2, 2, 2, 2, 2, 3, 5], [1, 1, 2, 2, 2, 2, 2, 4, 4], [1, 1, 2, 2, 2, 2, 2, 8], [1, 1, 2, 2, 2, 2, 3, 3, 4], [1, 1, 2, 2, 2, 2, 3, 7], [1, 1, 2, 2, 2, 2, 4, 6], [1, 1, 2, 2, 2, 2, 5, 5], [1, 1, 2, 2, 2, 2, 10], [1, 1, 2, 2, 2, 3, 3, 3, 3], [1, 1, 2, 2, 2, 3, 3, 6], [1, 1, 2, 2, 2, 3, 4, 5], [1, 1, 2, 2, 2, 3, 9], [1, 1, 2, 2, 2, 4, 4, 4], [1, 1, 2, 2, 2, 4, 8], [1, 1, 2, 2, 2, 5, 7], [1, 1, 2, 2, 2, 6, 6], [1, 1, 2, 2, 2, 12], [1, 1, 2, 2, 3, 3, 3, 5], [1, 1, 2, 2, 3, 3, 4, 4], [1, 1, 2, 2, 3, 3, 8], [1, 1, 2, 2, 3, 4, 7], [1, 1, 2, 2, 3, 5, 6], [1, 1, 2, 2, 3, 11], [1, 1, 2, 2, 4, 4, 6], [1, 1, 2, 2, 4, 5, 5], [1, 1, 2, 2, 4, 10], [1, 1, 2, 2, 5, 9], [1, 1, 2, 2, 6, 8], [1, 1, 2, 2, 7, 7], [1, 1, 2, 2, 14], [1, 1, 2, 3, 3, 3, 3, 4], [1, 1, 2, 3, 3, 3, 7], [1, 1, 2, 3, 3, 4, 6], [1, 1, 2, 3, 3, 5, 5], [1, 1, 2, 3, 3, 10], [1, 1, 2, 3, 4, 4, 5], [1, 1, 2, 3, 4, 9], [1, 1, 2, 3, 5, 8], [1, 1, 2, 3, 6, 7], [1, 1, 2, 3, 13], [1, 1, 2, 4, 4, 4, 4], [1, 1, 2, 4, 4, 8], [1, 1, 2, 4, 5, 7], [1, 1, 2, 4, 6, 6], [1, 1, 2, 4, 12], [1, 1, 2, 5, 5, 6], [1, 1, 2, 5, 11], [1, 1, 2, 6, 10], [1, 1, 2, 7, 9], [1, 1, 2, 8, 8], [1, 1, 2, 16], [1, 1, 3, 3, 3, 3, 3, 3], [1, 1, 3, 3, 3, 3, 6], [1, 1, 3, 3, 3, 4, 5], [1, 1, 3, 3, 3, 9], [1, 1, 3, 3, 4, 4, 4], [1, 1, 3, 3, 4, 8], [1, 1, 3, 3, 5, 7], [1, 1, 3, 3, 6, 6], [1, 1, 3, 3, 12], [1, 1, 3, 4, 4, 7], [1, 1, 3, 4, 5, 6], [1, 1, 3, 4, 11], [1, 1, 3, 5, 5, 5], [1, 1, 3, 5, 10], [1, 1, 3, 6, 9], [1, 1, 3, 7, 8], [1, 1, 3, 15], [1, 1, 4, 4, 4, 6], [1, 1, 4, 4, 5, 5], [1, 1, 4, 4, 10], [1, 1, 4, 5, 9], [1, 1, 4, 6, 8], [1, 1, 4, 7, 7], [1, 1, 4, 14], [1, 1, 5, 5, 8], [1, 1, 5, 6, 7], [1, 1, 5, 13], [1, 1, 6, 6, 6], [1, 1, 6, 12], [1, 1, 7, 11], [1, 1, 8, 10], [1, 1, 9, 9], [1, 1, 18], [1, 2, 2, 2, 2, 2, 2, 2, 2, 3], [1, 2, 2, 2, 2, 2, 2, 2, 5], [1, 2, 2, 2, 2, 2, 2, 3, 4], [1, 2, 2, 2, 2, 2, 2, 7], [1, 2, 2, 2, 2, 2, 3, 3, 3], [1, 2, 2, 2, 2, 2, 3, 6], [1, 2, 2, 2, 2, 2, 4, 5], [1, 2, 2, 2, 2, 2, 9], [1, 2, 2, 2, 2, 3, 3, 5], [1, 2, 2, 2, 2, 3, 4, 4], [1, 2, 2, 2, 2, 3, 8], [1, 2, 2, 2, 2, 4, 7], [1, 2, 2, 2, 2, 5, 6], [1, 2, 2, 2, 2, 11], [1, 2, 2, 2, 3, 3, 3, 4], [1, 2, 2, 2, 3, 3, 7], [1, 2, 2, 2, 3, 4, 6], [1, 2, 2, 2, 3, 5, 5], [1, 2, 2, 2, 3, 10], [1, 2, 2, 2, 4, 4, 5], [1, 2, 2, 2, 4, 9], [1, 2, 2, 2, 5, 8], [1, 2, 2, 2, 6, 7], [1, 2, 2, 2, 13], [1, 2, 2, 3, 3, 3, 3, 3], [1, 2, 2, 3, 3, 3, 6], [1, 2, 2, 3, 3, 4, 5], [1, 2, 2, 3, 3, 9], [1, 2, 2, 3, 4, 4, 4], [1, 2, 2, 3, 4, 8], [1, 2, 2, 3, 5, 7], [1, 2, 2, 3, 6, 6], [1, 2, 2, 3, 12], [1, 2, 2, 4, 4, 7], [1, 2, 2, 4, 5, 6], [1, 2, 2, 4, 11], [1, 2, 2, 5, 5, 5], [1, 2, 2, 5, 10], [1, 2, 2, 6, 9], [1, 2, 2, 7, 8], [1, 2, 2, 15], [1, 2, 3, 3, 3, 3, 5], [1, 2, 3, 3, 3, 4, 4], [1, 2, 3, 3, 3, 8], [1, 2, 3, 3, 4, 7], [1, 2, 3, 3, 5, 6], [1, 2, 3, 3, 11], [1, 2, 3, 4, 4, 6], [1, 2, 3, 4, 5, 5], [1, 2, 3, 4, 10], [1, 2, 3, 5, 9], [1, 2, 3, 6, 8], [1, 2, 3, 7, 7], [1, 2, 3, 14], [1, 2, 4, 4, 4, 5], [1, 2, 4, 4, 9], [1, 2, 4, 5, 8], [1, 2, 4, 6, 7], [1, 2, 4, 13], [1, 2, 5, 5, 7], [1, 2, 5, 6, 6], [1, 2, 5, 12], [1, 2, 6, 11], [1, 2, 7, 10], [1, 2, 8, 9], [1, 2, 17], [1, 3, 3, 3, 3, 3, 4], [1, 3, 3, 3, 3, 7], [1, 3, 3, 3, 4, 6], [1, 3, 3, 3, 5, 5], [1, 3, 3, 3, 10], [1, 3, 3, 4, 4, 5], [1, 3, 3, 4, 9], [1, 3, 3, 5, 8], [1, 3, 3, 6, 7], [1, 3, 3, 13], [1, 3, 4, 4, 4, 4], [1, 3, 4, 4, 8], [1, 3, 4, 5, 7], [1, 3, 4, 6, 6], [1, 3, 4, 12], [1, 3, 5, 5, 6], [1, 3, 5, 11], [1, 3, 6, 10], [1, 3, 7, 9], [1, 3, 8, 8], [1, 3, 16], [1, 4, 4, 4, 7], [1, 4, 4, 5, 6], [1, 4, 4, 11], [1, 4, 5, 5, 5], [1, 4, 5, 10], [1, 4, 6, 9], [1, 4, 7, 8], [1, 4, 15], [1, 5, 5, 9], [1, 5, 6, 8], [1, 5, 7, 7], [1, 5, 14], [1, 6, 6, 7], [1, 6, 13], [1, 7, 12], [1, 8, 11], [1, 9, 10], [1, 19], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2, 4], [2, 2, 2, 2, 2, 2, 2, 3, 3], [2, 2, 2, 2, 2, 2, 2, 6], [2, 2, 2, 2, 2, 2, 3, 5], [2, 2, 2, 2, 2, 2, 4, 4], [2, 2, 2, 2, 2, 2, 8], [2, 2, 2, 2, 2, 3, 3, 4], [2, 2, 2, 2, 2, 3, 7], [2, 2, 2, 2, 2, 4, 6], [2, 2, 2, 2, 2, 5, 5], [2, 2, 2, 2, 2, 10], [2, 2, 2, 2, 3, 3, 3, 3], [2, 2, 2, 2, 3, 3, 6], [2, 2, 2, 2, 3, 4, 5], [2, 2, 2, 2, 3, 9], [2, 2, 2, 2, 4, 4, 4], [2, 2, 2, 2, 4, 8], [2, 2, 2, 2, 5, 7], [2, 2, 2, 2, 6, 6], [2, 2, 2, 2, 12], [2, 2, 2, 3, 3, 3, 5], [2, 2, 2, 3, 3, 4, 4], [2, 2, 2, 3, 3, 8], [2, 2, 2, 3, 4, 7], [2, 2, 2, 3, 5, 6], [2, 2, 2, 3, 11], [2, 2, 2, 4, 4, 6], [2, 2, 2, 4, 5, 5], [2, 2, 2, 4, 10], [2, 2, 2, 5, 9], [2, 2, 2, 6, 8], [2, 2, 2, 7, 7], [2, 2, 2, 14], [2, 2, 3, 3, 3, 3, 4], [2, 2, 3, 3, 3, 7], [2, 2, 3, 3, 4, 6], [2, 2, 3, 3, 5, 5], [2, 2, 3, 3, 10], [2, 2, 3, 4, 4, 5], [2, 2, 3, 4, 9], [2, 2, 3, 5, 8], [2, 2, 3, 6, 7], [2, 2, 3, 13], [2, 2, 4, 4, 4, 4], [2, 2, 4, 4, 8], [2, 2, 4, 5, 7], [2, 2, 4, 6, 6], [2, 2, 4, 12], [2, 2, 5, 5, 6], [2, 2, 5, 11], [2, 2, 6, 10], [2, 2, 7, 9], [2, 2, 8, 8], [2, 2, 16], [2, 3, 3, 3, 3, 3, 3], [2, 3, 3, 3, 3, 6], [2, 3, 3, 3, 4, 5], [2, 3, 3, 3, 9], [2, 3, 3, 4, 4, 4], [2, 3, 3, 4, 8], [2, 3, 3, 5, 7], [2, 3, 3, 6, 6], [2, 3, 3, 12], [2, 3, 4, 4, 7], [2, 3, 4, 5, 6], [2, 3, 4, 11], [2, 3, 5, 5, 5], [2, 3, 5, 10], [2, 3, 6, 9], [2, 3, 7, 8], [2, 3, 15], [2, 4, 4, 4, 6], [2, 4, 4, 5, 5], [2, 4, 4, 10], [2, 4, 5, 9], [2, 4, 6, 8], [2, 4, 7, 7], [2, 4, 14], [2, 5, 5, 8], [2, 5, 6, 7], [2, 5, 13], [2, 6, 6, 6], [2, 6, 12], [2, 7, 11], [2, 8, 10], [2, 9, 9], [2, 18], [3, 3, 3, 3, 3, 5], [3, 3, 3, 3, 4, 4], [3, 3, 3, 3, 8], [3, 3, 3, 4, 7], [3, 3, 3, 5, 6], [3, 3, 3, 11], [3, 3, 4, 4, 6], [3, 3, 4, 5, 5], [3, 3, 4, 10], [3, 3, 5, 9], [3, 3, 6, 8], [3, 3, 7, 7], [3, 3, 14], [3, 4, 4, 4, 5], [3, 4, 4, 9], [3, 4, 5, 8], [3, 4, 6, 7], [3, 4, 13], [3, 5, 5, 7], [3, 5, 6, 6], [3, 5, 12], [3, 6, 11], [3, 7, 10], [3, 8, 9], [3, 17], [4, 4, 4, 4, 4], [4, 4, 4, 8], [4, 4, 5, 7], [4, 4, 6, 6], [4, 4, 12], [4, 5, 5, 6], [4, 5, 11], [4, 6, 10], [4, 7, 9], [4, 8, 8], [4, 16], [5, 5, 5, 5], [5, 5, 10], [5, 6, 9], [5, 7, 8], [5, 15], [6, 6, 8], [6, 7, 7], [6, 14], [7, 13], [8, 12], [9, 11], [10, 10], [20]]\r\n    if n == 21:\r\n        return [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 6], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 7], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 6], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 6], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 8], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 7], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 6], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 7], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 6], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 9], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 4, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 8], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 7], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 6], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 6], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 4, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 8], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 3, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 7], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 6], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 5, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 10], [1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 6], [1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 4, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 9], [1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 8], [1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 7], [1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6], [1, 1, 1, 1, 1, 1, 1, 1, 1, 12], [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3], [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 5], [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 4], [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 7], [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 6], [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 4, 5], [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 9], [1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 3, 5], [1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 4], [1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 8], [1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 7], [1, 1, 1, 1, 1, 1, 1, 1, 2, 5, 6], [1, 1, 1, 1, 1, 1, 1, 1, 2, 11], [1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 4], [1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 7], [1, 1, 1, 1, 1, 1, 1, 1, 3, 4, 6], [1, 1, 1, 1, 1, 1, 1, 1, 3, 5, 5], [1, 1, 1, 1, 1, 1, 1, 1, 3, 10], [1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 5], [1, 1, 1, 1, 1, 1, 1, 1, 4, 9], [1, 1, 1, 1, 1, 1, 1, 1, 5, 8], [1, 1, 1, 1, 1, 1, 1, 1, 6, 7], [1, 1, 1, 1, 1, 1, 1, 1, 13], [1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2], [1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 4], [1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3], [1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 6], [1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 5], [1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 4, 4], [1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 8], [1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 3, 4], [1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 7], [1, 1, 1, 1, 1, 1, 1, 2, 2, 4, 6], [1, 1, 1, 1, 1, 1, 1, 2, 2, 5, 5], [1, 1, 1, 1, 1, 1, 1, 2, 2, 10], [1, 1, 1, 1, 1, 1, 1, 2, 3, 3, 3, 3], [1, 1, 1, 1, 1, 1, 1, 2, 3, 3, 6], [1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 5], [1, 1, 1, 1, 1, 1, 1, 2, 3, 9], [1, 1, 1, 1, 1, 1, 1, 2, 4, 4, 4], [1, 1, 1, 1, 1, 1, 1, 2, 4, 8], [1, 1, 1, 1, 1, 1, 1, 2, 5, 7], [1, 1, 1, 1, 1, 1, 1, 2, 6, 6], [1, 1, 1, 1, 1, 1, 1, 2, 12], [1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 5], [1, 1, 1, 1, 1, 1, 1, 3, 3, 4, 4], [1, 1, 1, 1, 1, 1, 1, 3, 3, 8], [1, 1, 1, 1, 1, 1, 1, 3, 4, 7], [1, 1, 1, 1, 1, 1, 1, 3, 5, 6], [1, 1, 1, 1, 1, 1, 1, 3, 11], [1, 1, 1, 1, 1, 1, 1, 4, 4, 6], [1, 1, 1, 1, 1, 1, 1, 4, 5, 5], [1, 1, 1, 1, 1, 1, 1, 4, 10], [1, 1, 1, 1, 1, 1, 1, 5, 9], [1, 1, 1, 1, 1, 1, 1, 6, 8], [1, 1, 1, 1, 1, 1, 1, 7, 7], [1, 1, 1, 1, 1, 1, 1, 14], [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3], [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 5], [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 4], [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 7], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3], [1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 6], [1, 1, 1, 1, 1, 1, 2, 2, 2, 4, 5], [1, 1, 1, 1, 1, 1, 2, 2, 2, 9], [1, 1, 1, 1, 1, 1, 2, 2, 3, 3, 5], [1, 1, 1, 1, 1, 1, 2, 2, 3, 4, 4], [1, 1, 1, 1, 1, 1, 2, 2, 3, 8], [1, 1, 1, 1, 1, 1, 2, 2, 4, 7], [1, 1, 1, 1, 1, 1, 2, 2, 5, 6], [1, 1, 1, 1, 1, 1, 2, 2, 11], [1, 1, 1, 1, 1, 1, 2, 3, 3, 3, 4], [1, 1, 1, 1, 1, 1, 2, 3, 3, 7], [1, 1, 1, 1, 1, 1, 2, 3, 4, 6], [1, 1, 1, 1, 1, 1, 2, 3, 5, 5], [1, 1, 1, 1, 1, 1, 2, 3, 10], [1, 1, 1, 1, 1, 1, 2, 4, 4, 5], [1, 1, 1, 1, 1, 1, 2, 4, 9], [1, 1, 1, 1, 1, 1, 2, 5, 8], [1, 1, 1, 1, 1, 1, 2, 6, 7], [1, 1, 1, 1, 1, 1, 2, 13], [1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3], [1, 1, 1, 1, 1, 1, 3, 3, 3, 6], [1, 1, 1, 1, 1, 1, 3, 3, 4, 5], [1, 1, 1, 1, 1, 1, 3, 3, 9], [1, 1, 1, 1, 1, 1, 3, 4, 4, 4], [1, 1, 1, 1, 1, 1, 3, 4, 8], [1, 1, 1, 1, 1, 1, 3, 5, 7], [1, 1, 1, 1, 1, 1, 3, 6, 6], [1, 1, 1, 1, 1, 1, 3, 12], [1, 1, 1, 1, 1, 1, 4, 4, 7], [1, 1, 1, 1, 1, 1, 4, 5, 6], [1, 1, 1, 1, 1, 1, 4, 11], [1, 1, 1, 1, 1, 1, 5, 5, 5], [1, 1, 1, 1, 1, 1, 5, 10], [1, 1, 1, 1, 1, 1, 6, 9], [1, 1, 1, 1, 1, 1, 7, 8], [1, 1, 1, 1, 1, 1, 15], [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2], [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 4], [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3], [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 6], [1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 5], [1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4], [1, 1, 1, 1, 1, 2, 2, 2, 2, 8], [1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 4], [1, 1, 1, 1, 1, 2, 2, 2, 3, 7], [1, 1, 1, 1, 1, 2, 2, 2, 4, 6], [1, 1, 1, 1, 1, 2, 2, 2, 5, 5], [1, 1, 1, 1, 1, 2, 2, 2, 10], [1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 3], [1, 1, 1, 1, 1, 2, 2, 3, 3, 6], [1, 1, 1, 1, 1, 2, 2, 3, 4, 5], [1, 1, 1, 1, 1, 2, 2, 3, 9], [1, 1, 1, 1, 1, 2, 2, 4, 4, 4], [1, 1, 1, 1, 1, 2, 2, 4, 8], [1, 1, 1, 1, 1, 2, 2, 5, 7], [1, 1, 1, 1, 1, 2, 2, 6, 6], [1, 1, 1, 1, 1, 2, 2, 12], [1, 1, 1, 1, 1, 2, 3, 3, 3, 5], [1, 1, 1, 1, 1, 2, 3, 3, 4, 4], [1, 1, 1, 1, 1, 2, 3, 3, 8], [1, 1, 1, 1, 1, 2, 3, 4, 7], [1, 1, 1, 1, 1, 2, 3, 5, 6], [1, 1, 1, 1, 1, 2, 3, 11], [1, 1, 1, 1, 1, 2, 4, 4, 6], [1, 1, 1, 1, 1, 2, 4, 5, 5], [1, 1, 1, 1, 1, 2, 4, 10], [1, 1, 1, 1, 1, 2, 5, 9], [1, 1, 1, 1, 1, 2, 6, 8], [1, 1, 1, 1, 1, 2, 7, 7], [1, 1, 1, 1, 1, 2, 14], [1, 1, 1, 1, 1, 3, 3, 3, 3, 4], [1, 1, 1, 1, 1, 3, 3, 3, 7], [1, 1, 1, 1, 1, 3, 3, 4, 6], [1, 1, 1, 1, 1, 3, 3, 5, 5], [1, 1, 1, 1, 1, 3, 3, 10], [1, 1, 1, 1, 1, 3, 4, 4, 5], [1, 1, 1, 1, 1, 3, 4, 9], [1, 1, 1, 1, 1, 3, 5, 8], [1, 1, 1, 1, 1, 3, 6, 7], [1, 1, 1, 1, 1, 3, 13], [1, 1, 1, 1, 1, 4, 4, 4, 4], [1, 1, 1, 1, 1, 4, 4, 8], [1, 1, 1, 1, 1, 4, 5, 7], [1, 1, 1, 1, 1, 4, 6, 6], [1, 1, 1, 1, 1, 4, 12], [1, 1, 1, 1, 1, 5, 5, 6], [1, 1, 1, 1, 1, 5, 11], [1, 1, 1, 1, 1, 6, 10], [1, 1, 1, 1, 1, 7, 9], [1, 1, 1, 1, 1, 8, 8], [1, 1, 1, 1, 1, 16], [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3], [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 5], [1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 4], [1, 1, 1, 1, 2, 2, 2, 2, 2, 7], [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3], [1, 1, 1, 1, 2, 2, 2, 2, 3, 6], [1, 1, 1, 1, 2, 2, 2, 2, 4, 5], [1, 1, 1, 1, 2, 2, 2, 2, 9], [1, 1, 1, 1, 2, 2, 2, 3, 3, 5], [1, 1, 1, 1, 2, 2, 2, 3, 4, 4], [1, 1, 1, 1, 2, 2, 2, 3, 8], [1, 1, 1, 1, 2, 2, 2, 4, 7], [1, 1, 1, 1, 2, 2, 2, 5, 6], [1, 1, 1, 1, 2, 2, 2, 11], [1, 1, 1, 1, 2, 2, 3, 3, 3, 4], [1, 1, 1, 1, 2, 2, 3, 3, 7], [1, 1, 1, 1, 2, 2, 3, 4, 6], [1, 1, 1, 1, 2, 2, 3, 5, 5], [1, 1, 1, 1, 2, 2, 3, 10], [1, 1, 1, 1, 2, 2, 4, 4, 5], [1, 1, 1, 1, 2, 2, 4, 9], [1, 1, 1, 1, 2, 2, 5, 8], [1, 1, 1, 1, 2, 2, 6, 7], [1, 1, 1, 1, 2, 2, 13], [1, 1, 1, 1, 2, 3, 3, 3, 3, 3], [1, 1, 1, 1, 2, 3, 3, 3, 6], [1, 1, 1, 1, 2, 3, 3, 4, 5], [1, 1, 1, 1, 2, 3, 3, 9], [1, 1, 1, 1, 2, 3, 4, 4, 4], [1, 1, 1, 1, 2, 3, 4, 8], [1, 1, 1, 1, 2, 3, 5, 7], [1, 1, 1, 1, 2, 3, 6, 6], [1, 1, 1, 1, 2, 3, 12], [1, 1, 1, 1, 2, 4, 4, 7], [1, 1, 1, 1, 2, 4, 5, 6], [1, 1, 1, 1, 2, 4, 11], [1, 1, 1, 1, 2, 5, 5, 5], [1, 1, 1, 1, 2, 5, 10], [1, 1, 1, 1, 2, 6, 9], [1, 1, 1, 1, 2, 7, 8], [1, 1, 1, 1, 2, 15], [1, 1, 1, 1, 3, 3, 3, 3, 5], [1, 1, 1, 1, 3, 3, 3, 4, 4], [1, 1, 1, 1, 3, 3, 3, 8], [1, 1, 1, 1, 3, 3, 4, 7], [1, 1, 1, 1, 3, 3, 5, 6], [1, 1, 1, 1, 3, 3, 11], [1, 1, 1, 1, 3, 4, 4, 6], [1, 1, 1, 1, 3, 4, 5, 5], [1, 1, 1, 1, 3, 4, 10], [1, 1, 1, 1, 3, 5, 9], [1, 1, 1, 1, 3, 6, 8], [1, 1, 1, 1, 3, 7, 7], [1, 1, 1, 1, 3, 14], [1, 1, 1, 1, 4, 4, 4, 5], [1, 1, 1, 1, 4, 4, 9], [1, 1, 1, 1, 4, 5, 8], [1, 1, 1, 1, 4, 6, 7], [1, 1, 1, 1, 4, 13], [1, 1, 1, 1, 5, 5, 7], [1, 1, 1, 1, 5, 6, 6], [1, 1, 1, 1, 5, 12], [1, 1, 1, 1, 6, 11], [1, 1, 1, 1, 7, 10], [1, 1, 1, 1, 8, 9], [1, 1, 1, 1, 17], [1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2], [1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 4], [1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3], [1, 1, 1, 2, 2, 2, 2, 2, 2, 6], [1, 1, 1, 2, 2, 2, 2, 2, 3, 5], [1, 1, 1, 2, 2, 2, 2, 2, 4, 4], [1, 1, 1, 2, 2, 2, 2, 2, 8], [1, 1, 1, 2, 2, 2, 2, 3, 3, 4], [1, 1, 1, 2, 2, 2, 2, 3, 7], [1, 1, 1, 2, 2, 2, 2, 4, 6], [1, 1, 1, 2, 2, 2, 2, 5, 5], [1, 1, 1, 2, 2, 2, 2, 10], [1, 1, 1, 2, 2, 2, 3, 3, 3, 3], [1, 1, 1, 2, 2, 2, 3, 3, 6], [1, 1, 1, 2, 2, 2, 3, 4, 5], [1, 1, 1, 2, 2, 2, 3, 9], [1, 1, 1, 2, 2, 2, 4, 4, 4], [1, 1, 1, 2, 2, 2, 4, 8], [1, 1, 1, 2, 2, 2, 5, 7], [1, 1, 1, 2, 2, 2, 6, 6], [1, 1, 1, 2, 2, 2, 12], [1, 1, 1, 2, 2, 3, 3, 3, 5], [1, 1, 1, 2, 2, 3, 3, 4, 4], [1, 1, 1, 2, 2, 3, 3, 8], [1, 1, 1, 2, 2, 3, 4, 7], [1, 1, 1, 2, 2, 3, 5, 6], [1, 1, 1, 2, 2, 3, 11], [1, 1, 1, 2, 2, 4, 4, 6], [1, 1, 1, 2, 2, 4, 5, 5], [1, 1, 1, 2, 2, 4, 10], [1, 1, 1, 2, 2, 5, 9], [1, 1, 1, 2, 2, 6, 8], [1, 1, 1, 2, 2, 7, 7], [1, 1, 1, 2, 2, 14], [1, 1, 1, 2, 3, 3, 3, 3, 4], [1, 1, 1, 2, 3, 3, 3, 7], [1, 1, 1, 2, 3, 3, 4, 6], [1, 1, 1, 2, 3, 3, 5, 5], [1, 1, 1, 2, 3, 3, 10], [1, 1, 1, 2, 3, 4, 4, 5], [1, 1, 1, 2, 3, 4, 9], [1, 1, 1, 2, 3, 5, 8], [1, 1, 1, 2, 3, 6, 7], [1, 1, 1, 2, 3, 13], [1, 1, 1, 2, 4, 4, 4, 4], [1, 1, 1, 2, 4, 4, 8], [1, 1, 1, 2, 4, 5, 7], [1, 1, 1, 2, 4, 6, 6], [1, 1, 1, 2, 4, 12], [1, 1, 1, 2, 5, 5, 6], [1, 1, 1, 2, 5, 11], [1, 1, 1, 2, 6, 10], [1, 1, 1, 2, 7, 9], [1, 1, 1, 2, 8, 8], [1, 1, 1, 2, 16], [1, 1, 1, 3, 3, 3, 3, 3, 3], [1, 1, 1, 3, 3, 3, 3, 6], [1, 1, 1, 3, 3, 3, 4, 5], [1, 1, 1, 3, 3, 3, 9], [1, 1, 1, 3, 3, 4, 4, 4], [1, 1, 1, 3, 3, 4, 8], [1, 1, 1, 3, 3, 5, 7], [1, 1, 1, 3, 3, 6, 6], [1, 1, 1, 3, 3, 12], [1, 1, 1, 3, 4, 4, 7], [1, 1, 1, 3, 4, 5, 6], [1, 1, 1, 3, 4, 11], [1, 1, 1, 3, 5, 5, 5], [1, 1, 1, 3, 5, 10], [1, 1, 1, 3, 6, 9], [1, 1, 1, 3, 7, 8], [1, 1, 1, 3, 15], [1, 1, 1, 4, 4, 4, 6], [1, 1, 1, 4, 4, 5, 5], [1, 1, 1, 4, 4, 10], [1, 1, 1, 4, 5, 9], [1, 1, 1, 4, 6, 8], [1, 1, 1, 4, 7, 7], [1, 1, 1, 4, 14], [1, 1, 1, 5, 5, 8], [1, 1, 1, 5, 6, 7], [1, 1, 1, 5, 13], [1, 1, 1, 6, 6, 6], [1, 1, 1, 6, 12], [1, 1, 1, 7, 11], [1, 1, 1, 8, 10], [1, 1, 1, 9, 9], [1, 1, 1, 18], [1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3], [1, 1, 2, 2, 2, 2, 2, 2, 2, 5], [1, 1, 2, 2, 2, 2, 2, 2, 3, 4], [1, 1, 2, 2, 2, 2, 2, 2, 7], [1, 1, 2, 2, 2, 2, 2, 3, 3, 3], [1, 1, 2, 2, 2, 2, 2, 3, 6], [1, 1, 2, 2, 2, 2, 2, 4, 5], [1, 1, 2, 2, 2, 2, 2, 9], [1, 1, 2, 2, 2, 2, 3, 3, 5], [1, 1, 2, 2, 2, 2, 3, 4, 4], [1, 1, 2, 2, 2, 2, 3, 8], [1, 1, 2, 2, 2, 2, 4, 7], [1, 1, 2, 2, 2, 2, 5, 6], [1, 1, 2, 2, 2, 2, 11], [1, 1, 2, 2, 2, 3, 3, 3, 4], [1, 1, 2, 2, 2, 3, 3, 7], [1, 1, 2, 2, 2, 3, 4, 6], [1, 1, 2, 2, 2, 3, 5, 5], [1, 1, 2, 2, 2, 3, 10], [1, 1, 2, 2, 2, 4, 4, 5], [1, 1, 2, 2, 2, 4, 9], [1, 1, 2, 2, 2, 5, 8], [1, 1, 2, 2, 2, 6, 7], [1, 1, 2, 2, 2, 13], [1, 1, 2, 2, 3, 3, 3, 3, 3], [1, 1, 2, 2, 3, 3, 3, 6], [1, 1, 2, 2, 3, 3, 4, 5], [1, 1, 2, 2, 3, 3, 9], [1, 1, 2, 2, 3, 4, 4, 4], [1, 1, 2, 2, 3, 4, 8], [1, 1, 2, 2, 3, 5, 7], [1, 1, 2, 2, 3, 6, 6], [1, 1, 2, 2, 3, 12], [1, 1, 2, 2, 4, 4, 7], [1, 1, 2, 2, 4, 5, 6], [1, 1, 2, 2, 4, 11], [1, 1, 2, 2, 5, 5, 5], [1, 1, 2, 2, 5, 10], [1, 1, 2, 2, 6, 9], [1, 1, 2, 2, 7, 8], [1, 1, 2, 2, 15], [1, 1, 2, 3, 3, 3, 3, 5], [1, 1, 2, 3, 3, 3, 4, 4], [1, 1, 2, 3, 3, 3, 8], [1, 1, 2, 3, 3, 4, 7], [1, 1, 2, 3, 3, 5, 6], [1, 1, 2, 3, 3, 11], [1, 1, 2, 3, 4, 4, 6], [1, 1, 2, 3, 4, 5, 5], [1, 1, 2, 3, 4, 10], [1, 1, 2, 3, 5, 9], [1, 1, 2, 3, 6, 8], [1, 1, 2, 3, 7, 7], [1, 1, 2, 3, 14], [1, 1, 2, 4, 4, 4, 5], [1, 1, 2, 4, 4, 9], [1, 1, 2, 4, 5, 8], [1, 1, 2, 4, 6, 7], [1, 1, 2, 4, 13], [1, 1, 2, 5, 5, 7], [1, 1, 2, 5, 6, 6], [1, 1, 2, 5, 12], [1, 1, 2, 6, 11], [1, 1, 2, 7, 10], [1, 1, 2, 8, 9], [1, 1, 2, 17], [1, 1, 3, 3, 3, 3, 3, 4], [1, 1, 3, 3, 3, 3, 7], [1, 1, 3, 3, 3, 4, 6], [1, 1, 3, 3, 3, 5, 5], [1, 1, 3, 3, 3, 10], [1, 1, 3, 3, 4, 4, 5], [1, 1, 3, 3, 4, 9], [1, 1, 3, 3, 5, 8], [1, 1, 3, 3, 6, 7], [1, 1, 3, 3, 13], [1, 1, 3, 4, 4, 4, 4], [1, 1, 3, 4, 4, 8], [1, 1, 3, 4, 5, 7], [1, 1, 3, 4, 6, 6], [1, 1, 3, 4, 12], [1, 1, 3, 5, 5, 6], [1, 1, 3, 5, 11], [1, 1, 3, 6, 10], [1, 1, 3, 7, 9], [1, 1, 3, 8, 8], [1, 1, 3, 16], [1, 1, 4, 4, 4, 7], [1, 1, 4, 4, 5, 6], [1, 1, 4, 4, 11], [1, 1, 4, 5, 5, 5], [1, 1, 4, 5, 10], [1, 1, 4, 6, 9], [1, 1, 4, 7, 8], [1, 1, 4, 15], [1, 1, 5, 5, 9], [1, 1, 5, 6, 8], [1, 1, 5, 7, 7], [1, 1, 5, 14], [1, 1, 6, 6, 7], [1, 1, 6, 13], [1, 1, 7, 12], [1, 1, 8, 11], [1, 1, 9, 10], [1, 1, 19], [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [1, 2, 2, 2, 2, 2, 2, 2, 2, 4], [1, 2, 2, 2, 2, 2, 2, 2, 3, 3], [1, 2, 2, 2, 2, 2, 2, 2, 6], [1, 2, 2, 2, 2, 2, 2, 3, 5], [1, 2, 2, 2, 2, 2, 2, 4, 4], [1, 2, 2, 2, 2, 2, 2, 8], [1, 2, 2, 2, 2, 2, 3, 3, 4], [1, 2, 2, 2, 2, 2, 3, 7], [1, 2, 2, 2, 2, 2, 4, 6], [1, 2, 2, 2, 2, 2, 5, 5], [1, 2, 2, 2, 2, 2, 10], [1, 2, 2, 2, 2, 3, 3, 3, 3], [1, 2, 2, 2, 2, 3, 3, 6], [1, 2, 2, 2, 2, 3, 4, 5], [1, 2, 2, 2, 2, 3, 9], [1, 2, 2, 2, 2, 4, 4, 4], [1, 2, 2, 2, 2, 4, 8], [1, 2, 2, 2, 2, 5, 7], [1, 2, 2, 2, 2, 6, 6], [1, 2, 2, 2, 2, 12], [1, 2, 2, 2, 3, 3, 3, 5], [1, 2, 2, 2, 3, 3, 4, 4], [1, 2, 2, 2, 3, 3, 8], [1, 2, 2, 2, 3, 4, 7], [1, 2, 2, 2, 3, 5, 6], [1, 2, 2, 2, 3, 11], [1, 2, 2, 2, 4, 4, 6], [1, 2, 2, 2, 4, 5, 5], [1, 2, 2, 2, 4, 10], [1, 2, 2, 2, 5, 9], [1, 2, 2, 2, 6, 8], [1, 2, 2, 2, 7, 7], [1, 2, 2, 2, 14], [1, 2, 2, 3, 3, 3, 3, 4], [1, 2, 2, 3, 3, 3, 7], [1, 2, 2, 3, 3, 4, 6], [1, 2, 2, 3, 3, 5, 5], [1, 2, 2, 3, 3, 10], [1, 2, 2, 3, 4, 4, 5], [1, 2, 2, 3, 4, 9], [1, 2, 2, 3, 5, 8], [1, 2, 2, 3, 6, 7], [1, 2, 2, 3, 13], [1, 2, 2, 4, 4, 4, 4], [1, 2, 2, 4, 4, 8], [1, 2, 2, 4, 5, 7], [1, 2, 2, 4, 6, 6], [1, 2, 2, 4, 12], [1, 2, 2, 5, 5, 6], [1, 2, 2, 5, 11], [1, 2, 2, 6, 10], [1, 2, 2, 7, 9], [1, 2, 2, 8, 8], [1, 2, 2, 16], [1, 2, 3, 3, 3, 3, 3, 3], [1, 2, 3, 3, 3, 3, 6], [1, 2, 3, 3, 3, 4, 5], [1, 2, 3, 3, 3, 9], [1, 2, 3, 3, 4, 4, 4], [1, 2, 3, 3, 4, 8], [1, 2, 3, 3, 5, 7], [1, 2, 3, 3, 6, 6], [1, 2, 3, 3, 12], [1, 2, 3, 4, 4, 7], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 11], [1, 2, 3, 5, 5, 5], [1, 2, 3, 5, 10], [1, 2, 3, 6, 9], [1, 2, 3, 7, 8], [1, 2, 3, 15], [1, 2, 4, 4, 4, 6], [1, 2, 4, 4, 5, 5], [1, 2, 4, 4, 10], [1, 2, 4, 5, 9], [1, 2, 4, 6, 8], [1, 2, 4, 7, 7], [1, 2, 4, 14], [1, 2, 5, 5, 8], [1, 2, 5, 6, 7], [1, 2, 5, 13], [1, 2, 6, 6, 6], [1, 2, 6, 12], [1, 2, 7, 11], [1, 2, 8, 10], [1, 2, 9, 9], [1, 2, 18], [1, 3, 3, 3, 3, 3, 5], [1, 3, 3, 3, 3, 4, 4], [1, 3, 3, 3, 3, 8], [1, 3, 3, 3, 4, 7], [1, 3, 3, 3, 5, 6], [1, 3, 3, 3, 11], [1, 3, 3, 4, 4, 6], [1, 3, 3, 4, 5, 5], [1, 3, 3, 4, 10], [1, 3, 3, 5, 9], [1, 3, 3, 6, 8], [1, 3, 3, 7, 7], [1, 3, 3, 14], [1, 3, 4, 4, 4, 5], [1, 3, 4, 4, 9], [1, 3, 4, 5, 8], [1, 3, 4, 6, 7], [1, 3, 4, 13], [1, 3, 5, 5, 7], [1, 3, 5, 6, 6], [1, 3, 5, 12], [1, 3, 6, 11], [1, 3, 7, 10], [1, 3, 8, 9], [1, 3, 17], [1, 4, 4, 4, 4, 4], [1, 4, 4, 4, 8], [1, 4, 4, 5, 7], [1, 4, 4, 6, 6], [1, 4, 4, 12], [1, 4, 5, 5, 6], [1, 4, 5, 11], [1, 4, 6, 10], [1, 4, 7, 9], [1, 4, 8, 8], [1, 4, 16], [1, 5, 5, 5, 5], [1, 5, 5, 10], [1, 5, 6, 9], [1, 5, 7, 8], [1, 5, 15], [1, 6, 6, 8], [1, 6, 7, 7], [1, 6, 14], [1, 7, 13], [1, 8, 12], [1, 9, 11], [1, 10, 10], [1, 20], [2, 2, 2, 2, 2, 2, 2, 2, 2, 3], [2, 2, 2, 2, 2, 2, 2, 2, 5], [2, 2, 2, 2, 2, 2, 2, 3, 4], [2, 2, 2, 2, 2, 2, 2, 7], [2, 2, 2, 2, 2, 2, 3, 3, 3], [2, 2, 2, 2, 2, 2, 3, 6], [2, 2, 2, 2, 2, 2, 4, 5], [2, 2, 2, 2, 2, 2, 9], [2, 2, 2, 2, 2, 3, 3, 5], [2, 2, 2, 2, 2, 3, 4, 4], [2, 2, 2, 2, 2, 3, 8], [2, 2, 2, 2, 2, 4, 7], [2, 2, 2, 2, 2, 5, 6], [2, 2, 2, 2, 2, 11], [2, 2, 2, 2, 3, 3, 3, 4], [2, 2, 2, 2, 3, 3, 7], [2, 2, 2, 2, 3, 4, 6], [2, 2, 2, 2, 3, 5, 5], [2, 2, 2, 2, 3, 10], [2, 2, 2, 2, 4, 4, 5], [2, 2, 2, 2, 4, 9], [2, 2, 2, 2, 5, 8], [2, 2, 2, 2, 6, 7], [2, 2, 2, 2, 13], [2, 2, 2, 3, 3, 3, 3, 3], [2, 2, 2, 3, 3, 3, 6], [2, 2, 2, 3, 3, 4, 5], [2, 2, 2, 3, 3, 9], [2, 2, 2, 3, 4, 4, 4], [2, 2, 2, 3, 4, 8], [2, 2, 2, 3, 5, 7], [2, 2, 2, 3, 6, 6], [2, 2, 2, 3, 12], [2, 2, 2, 4, 4, 7], [2, 2, 2, 4, 5, 6], [2, 2, 2, 4, 11], [2, 2, 2, 5, 5, 5], [2, 2, 2, 5, 10], [2, 2, 2, 6, 9], [2, 2, 2, 7, 8], [2, 2, 2, 15], [2, 2, 3, 3, 3, 3, 5], [2, 2, 3, 3, 3, 4, 4], [2, 2, 3, 3, 3, 8], [2, 2, 3, 3, 4, 7], [2, 2, 3, 3, 5, 6], [2, 2, 3, 3, 11], [2, 2, 3, 4, 4, 6], [2, 2, 3, 4, 5, 5], [2, 2, 3, 4, 10], [2, 2, 3, 5, 9], [2, 2, 3, 6, 8], [2, 2, 3, 7, 7], [2, 2, 3, 14], [2, 2, 4, 4, 4, 5], [2, 2, 4, 4, 9], [2, 2, 4, 5, 8], [2, 2, 4, 6, 7], [2, 2, 4, 13], [2, 2, 5, 5, 7], [2, 2, 5, 6, 6], [2, 2, 5, 12], [2, 2, 6, 11], [2, 2, 7, 10], [2, 2, 8, 9], [2, 2, 17], [2, 3, 3, 3, 3, 3, 4], [2, 3, 3, 3, 3, 7], [2, 3, 3, 3, 4, 6], [2, 3, 3, 3, 5, 5], [2, 3, 3, 3, 10], [2, 3, 3, 4, 4, 5], [2, 3, 3, 4, 9], [2, 3, 3, 5, 8], [2, 3, 3, 6, 7], [2, 3, 3, 13], [2, 3, 4, 4, 4, 4], [2, 3, 4, 4, 8], [2, 3, 4, 5, 7], [2, 3, 4, 6, 6], [2, 3, 4, 12], [2, 3, 5, 5, 6], [2, 3, 5, 11], [2, 3, 6, 10], [2, 3, 7, 9], [2, 3, 8, 8], [2, 3, 16], [2, 4, 4, 4, 7], [2, 4, 4, 5, 6], [2, 4, 4, 11], [2, 4, 5, 5, 5], [2, 4, 5, 10], [2, 4, 6, 9], [2, 4, 7, 8], [2, 4, 15], [2, 5, 5, 9], [2, 5, 6, 8], [2, 5, 7, 7], [2, 5, 14], [2, 6, 6, 7], [2, 6, 13], [2, 7, 12], [2, 8, 11], [2, 9, 10], [2, 19], [3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 6], [3, 3, 3, 3, 4, 5], [3, 3, 3, 3, 9], [3, 3, 3, 4, 4, 4], [3, 3, 3, 4, 8], [3, 3, 3, 5, 7], [3, 3, 3, 6, 6], [3, 3, 3, 12], [3, 3, 4, 4, 7], [3, 3, 4, 5, 6], [3, 3, 4, 11], [3, 3, 5, 5, 5], [3, 3, 5, 10], [3, 3, 6, 9], [3, 3, 7, 8], [3, 3, 15], [3, 4, 4, 4, 6], [3, 4, 4, 5, 5], [3, 4, 4, 10], [3, 4, 5, 9], [3, 4, 6, 8], [3, 4, 7, 7], [3, 4, 14], [3, 5, 5, 8], [3, 5, 6, 7], [3, 5, 13], [3, 6, 6, 6], [3, 6, 12], [3, 7, 11], [3, 8, 10], [3, 9, 9], [3, 18], [4, 4, 4, 4, 5], [4, 4, 4, 9], [4, 4, 5, 8], [4, 4, 6, 7], [4, 4, 13], [4, 5, 5, 7], [4, 5, 6, 6], [4, 5, 12], [4, 6, 11], [4, 7, 10], [4, 8, 9], [4, 17], [5, 5, 5, 6], [5, 5, 11], [5, 6, 10], [5, 7, 9], [5, 8, 8], [5, 16], [6, 6, 9], [6, 7, 8], [6, 15], [7, 7, 7], [7, 14], [8, 13], [9, 12], [10, 11], [21]]\r\n",
  "55e1990978c60e5052000011": "from itertools import groupby\r\n\r\n\r\ndef merge(line):\r\n    merged = []\r\n    for k, g in groupby(v for v in line if v):\r\n    g = list(g)\r\n    n, r = divmod(len(g), 2)\r\n    if n:\r\n        merged . extend([k * 2] * n)\r\n    if r:\r\n        merged . append(k)\r\n    return merged + [0] * (len(line) - len(merged))\r\n",
  "59325dc15dbb44b2440000af": "import re\n\n\ndef is_alt(s):\n    return not re . search('[aeiou]{2}|[^aeiou]{2}', s)\n",
  "5932c94f6aa4d1d786000028": "def perfect_roots(n):\r\n    return (n * * 0.125) % 1 == 0\r\n",
  "58cfa5bd1c694fe474000146": "def socialist_distribution(population, minimum):\r\n    if minimum > sum(population) / / len(population):\r\n    return []\r\n    while min(population) < minimum:\r\n    population[population . index(min(population))] += 1\r\n    population[population . index(max(population))] -= 1\r\n    return population\r\n",
  "58b65c5e8b98b2e4fa000034": "def unlucky_number(n):\r\n    return sum(not ('4' in s or '7' in s) for s in map(str, range(0, n + 1, 13)))\r\n",
  "5931614bb2f657c18c0001c3": "import re\r\nreg = re . compile(r\"c|[a-z]?C[a-z]?\")\r\n\r\n\r\ndef cut_cancer_cells(s):\r\n    return reg . sub(\"\", s)\r\n",
  "57cc40b2f8392dbf2a0003ce": "def check(a, x):\r\n    return x in a\r\n",
  "5930d8a4b8c2d9e11500002a": "def find_the_key(message, code):\r\n    diffs = \"\" . join(str(c - ord(m) + 96) for c, m in zip(code, message))\r\n    for size in range(1, len(code) + 1):\r\n    key = diffs[: size]\r\n    if (key * len(code))[: len(code)] == diffs:\r\n    return int(key)\r\n",
  "57cebf1472f98327760003cd": "from itertools import combinations\r\n\r\n\r\ndef count_col_triang(a):\r\n    p, r = {}, {}\r\n    for xy, col in a:\r\n    p[col] = p . get(col, []) + [xy]\r\n    for k in p:\r\n    r[k] = sum(1 for c in combinations(p[k], 3) if triangle(* c))\r\n    mx = max(r . values())\r\n    return [len(a), len(p), sum(r . values()), sorted(k for k in r if r[k] == mx) + [mx] if mx else []]\r\n\r\n    def triangle(a, b, c):\r\n    return area(* [((p[0] - q[0]) * * 2 + (p[1] - q[1]) * * 2) * * 0.5 for p, q in [(a, b), (a, c), (b, c)]]) > 0.0\r\n    def area(a, b, c):\r\n    s = 0.5 * (a + b + c)\r\n    return round(max((s * ((s - a) * (s - b) * (s - c))), 0.0) * * 0.5, 4)\r\n",
  "592fd8f752ee71ac7e00008a": "def covfefe(s):\r\n    return s . replace(\"coverage\", \"covfefe\") if \"coverage\" in s else s + \" covfefe\"\r\n",
  "58fdcc51b4f81a0b1e00003e": "class Game ():\r\n\r\n    def __init__(self, n):\r\n    k = 2 * n + 1\r\n    self . board = {frozenset(k * r + 1 + c + d for d in (0, n, n + 1, k))\r\n                    for r in range(n) for c in range(n)}\r\n\r\n    def play(self, lines):\r\n    lines = set(lines)\r\n    while 1:\r\n    for cell in self . board:\r\n    stick = cell - lines\r\n    if len(stick) <= 1:\r\n    lines |= stick\r\n    self . board . remove(cell)\r\n    break\r\n    else:\r\n        break\r\n    return sorted(lines)\r\n",
  "5717924a1c2734e78f000430": "from itertools import product\r\n\r\n\r\ndef proc_seq(* args):\r\n    nums = set(int('' . join(l))\r\n               for l in product(* (str(a) for a in args)) if l[0] != '0')\r\n    if len(nums) == 1:\r\n        return [1, nums . pop()]\r\n    return [len(nums), min(nums), max(nums), sum(nums)]\r\n",
  "592eccf7d6a5403edf000aa1": "class Arith (object):\r\n    # Constant names and associated ranges for natural numbers\r\n    zero_nine = (\"zero,one,two,three,four,five,six,seven,eight,nine\", 0, 10, 1)\r\n    ten_nineteen = (\r\n        \"ten,eleven,twelve,thirteen,fourteen,fifteen,sixteen,seventeen,eighteen,nineteen\", 10, 20, 1)\r\n    tens = (\"twenty,thirty,forty,fifty,sixty,seventy,eighty,ninety\", 20, 91, 10)\r\n    hundreds = (\"one hundred,two hundred,three hundred,four hundred,five hundred,six hundred,seven hundred,eight hundred,nine hundred,one thousand\", 100, 1001, 100)\r\n\r\n    @ classmethod\r\n    def gen_vals(cls):\r\n    \"\"\"Generates a tuple of name and value for each value from largest to smallest\"\"\"\r\n    for target in [cls . hundreds, cls . tens, cls . ten_nineteen, cls . zero_nine]:\r\n    for name, value in zip(reversed(target[0]. split(\",\")), reversed(range(* target[1:]))):\r\n    yield name, value\r\n    @ classmethod\r\n    def extract(cls, s):\r\n    \"\"\"Extracts the numerical value of s\"\"\"\r\n    total = 0\r\n    for name, value in cls . gen_vals():\r\n    if name in s:\r\n    total += value\r\n    s = s . replace(name, \"\")\r\n    return total\r\n    @ classmethod\r\n    def encode(cls, n):\r\n    \"\"\"Encodes the string value of n\"\"\"\r\n    s = []\r\n    for name, value in cls . gen_vals():\r\n    if n >= value:\r\n    s . append(name)\r\n    n -= value\r\n    if len(s) > 0 and s[- 1] == \"zero\":\r\n        # Remove trailing zeros\r\n    s = s[: - 1]\r\n\r\n    if len(s) > 1:\r\n    if \" \" in s[0]:\r\n        # Found a hundred or thousand marker\r\n    s = [s[0]] + [\"and\"] + s[1:]\r\n    return \" \" . join(s)\r\n\r\n    def __init__(self, s):\r\n    self . value = self . extract(s)\r\n\r\n    def add(self, s):\r\n    return self . encode(self . value + self . extract(s))\r\n",
  "55cf3b567fc0e02b0b00000b": "def prod(n):\r\n    ret = [{1.}]\r\n    for i in range(1, n + 1):\r\n    ret . append({(i - x) * j for x, s in enumerate(ret) for j in s})\r\n    return ret[- 1]\r\n\r\n    def part(n):\r\n    p = sorted(prod(n))\r\n    return \"Range: %d Average: %.2f Median: %.2f\" % \\\r\n        (p[- 1] - p[0], sum(p) / len(p), (p[len(p) / / 2] + p[~ len(p) / / 2]) / 2)\r\n",
  "59279aea8270cc30080000df": "def freeway_game(km, kph, cars):\n    t = km / kph\n    c = 0\n    for dt, speed in cars:\n    d = km - (t - dt / 60) * speed\n    if dt <= 0:\n    c += d > 0\n    else:\n    c -= d < 0\n    return c\n",
  "587c0d396d360f3cc600003f": "def euler(stop, step_size):\r\n    def f(x): return 5 + 2 * x + 3 * x * * 2\r\n    n = int(stop / / step_size)\r\n    prev = 0\r\n    for i in range(n + 1):\r\n    prev += step_size * f(step_size * i)\r\n    return prev\r\n",
  "55f9ee4d8f3bbabf2200000c": "import math\r\n\r\n\r\ndef mCarlo3D_pi(lst):\r\n    R = max(abs(r) for pt in lst for r in pt)\r\n    inPts = sum(sum(r * * 2 for r in pt) <= R * * 2 for pt in lst)\r\n    approxPi = 6.0 * inPts / len(lst)\r\n    relError = abs(approxPi - math . pi) / math . pi * 100\r\n    return [len(lst), R, inPts, round(approxPi, 4), \"{}%\" . format(round(relError, 2)), relError < 5]\r\n",
  "592edfda5be407b9640000b2": "from itertools import cycle\nfrom string import ascii_lowercase\n\n\ndef decode(code, key):\n    keys = cycle(map(int, str(key)))\n    return '' . join(ascii_lowercase[n - next(keys) - 1] for n in code)\n",
  "57fe50d000d05166720000b1": "def sabb(stg, value, happiness):\r\n    sabbatical = (value + happiness +\r\n                  sum(1 for c in stg if c in \"sabbatical\")) > 22\r\n    return \"Sabbatical! Boom!\" if sabbatical else \"Back to your desk, boy.\"\r\n",
  "592eaf848c91f248ca000012": "class Arith ():\r\n    def __init__(self, first):\r\n    self . NUMS = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\",\r\n                   \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"]\r\n    self . first = first\r\n    def add(self, second):\r\n    return self . NUMS[self . NUMS . index(self . first) + self . NUMS . index(second)]\r\n",
  "592e830e043b99888600002d": "from itertools import cycle\n\n\ndef encode(message, key):\n    return [ord(a) - 96 + int(b) for a, b in zip(message, cycle(str(key)))]\n",
  "592dcbfedc403be22f00018f": "def how_to_find_them(rt):\n    return {d: rt[d] if d in rt\n            else (rt[\"a\"] * * 2 + rt[\"b\"] * * 2) * * .5 if d == \"c\"\n            else (rt[\"c\"] * * 2 - rt[(set(\"ab\") - {d}). pop()] * * 2) * * .5 for d in \"abc\"}\n",
  "592e2446dc403b132d0000be": "from operator import mul\nfrom functools import reduce\n\n\ndef maximum_product(arr):\n    prod_dct = {x: reduce(mul, arr[: i] + arr[i + 1:], 1)\n                for i, x in enumerate(arr)}\n    return max(arr, key=lambda x: (prod_dct[x], - x))\n",
  "562c5ea7b5fe27d303000054": "from itertools import permutations\r\n\r\n\r\ndef ssc_forperm(arr):\r\n    perms = set(p for p in permutations(arr))\r\n    values = [sum((x + 1) * y for x, y in enumerate(i)) for i in perms]\r\n    return [{\"total perm\": len(perms)}, {\"total ssc\": sum(values)}, {\"max ssc\": max(values)}, {\"min ssc\": min(values)}]\r\n",
  "5681e4ff81ba1b0cdb000031": "from functools import lru_cache\r\n\r\n\r\ndef score_pow(n):\r\n    return sum(i * * int(d) for i, d in enumerate(str(n), 1))\r\n\r\n    def score_prod(n):\r\n    return sum(i * int(d) for i, d in enumerate(str(n), 1))\r\n\r\n    @ lru_cache(None)\r\n    def div_sum(n):\r\n    total = 0\r\n    for div in range(1, n / / 2 + 1):\r\n    if n % div == 0:\r\n        total += div\r\n    return total + n\r\n    def find_int(a, b, k):\r\n    res = [n for n in range(a, b + 1) if score_pow(n) * k %\r\n           div_sum(score_prod(n)) == 0]\r\n    return len(res), res\r\n",
  "59245b3c794d54b06600002a": "def trotter(n):\r\n    i, numStr, numList = 0, '', [\r\n        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\r\n    if n == 0:\r\n    return ('INSOMNIA')\r\n    while all([i in numStr for i in numList]) != True:\r\n    i += 1\r\n    numStr = numStr + str(n * i)\r\n    return (i * n)\r\n",
  "592c6d71d2c6d91643000009": "def cost_of_carpet(l, w, r, c):\r\n    w, l = sorted((w, l))\r\n    return \"error\" if r < w or w == 0 else round((l if r < l else w) * r * c, 2)\r\n",
  "59280c056d6c5a74ca000149": "import numpy as np\r\n\r\n\r\ndef solve_eq(eq):\r\n    a = np . array([arr[: 3] for arr in eq])\r\n    b = np . array([arr[- 1] for arr in eq])\r\n    return [round(x) for x in np . linalg . solve(a, b)]\r\n",
  "58d4785a2285e7795c00013b": "def to_twos_complement(binary, bits):\r\n    return int(binary . replace(' ', ''), 2) - 2 * * bits * int(binary[0])\r\n\r\n    def from_twos_complement(n, bits):\r\n    return '{:0{}b}' . format(n & 2 * * bits - 1, bits)\r\n",
  "54f9173aa58bce9031001548": "from itertools import takewhile\n\n\ndef take_while(arr, pred_fun):\n    return list(takewhile(pred_fun, arr))\n",
  "59290e641a640c53d000002c": "def is_even(x):\r\n    return all(int(i) % 2 == 0 for i in str(x))\r\n    def even_digit_squares(a, b):\r\n    first = int(a * * (1 / 2)) + 1\r\n    last = int(b * * (1 / 2)) + 1\r\n    return sorted([x * x for x in range(first, last) if is_even(x * x)])\r\n",
  "582fdcc039f654905400001e": "from collections import defaultdict\r\nSQUARES = [x * * 2 for x in range(1, 3163)]\r\nDIGITS = defaultdict(int)\r\nfor sqr in SQUARES:\r\n    DIGITS['' . join(sorted(str(sqr)))] += 1\r\n    def sort_by_perfsq(arr):\r\n    return sorted(arr, key=lambda n: (- DIGITS['' . join(sorted(str(n)))], n))\r\n",
  "585b989c45376c73e30000d1": "def count_presents(prod, presents):\r\n    time = sum(prod . values()) * 24\r\n    pres_count = 0\r\n    for i in sorted(presents):\r\n    t = int(i[: 2]) + (int(i[3: 5]) / 60) + (int(i[6:]) / 3600)\r\n    if t <= time:\r\n    pres_count += 1\r\n    time -= t\r\n    return pres_count\r\n",
  "592bdf59912f2209710000e9": "def find_the_key(messages, secrets):\r\n    return '' . join(sorted({a + b for a, b in map(sorted, zip('' . join(messages), '' . join(secrets))) if a != b}))\r\n",
  "59098c39d8d24d12b6000020": "def dot(n, m):\n    sep = '+---' * n + '+'\n    dot = '| o ' * n + '|'\n    return '\\n' . join([sep, dot] * m + [sep])\n",
  "592c1dfb912f22055b000099": "def unlock(message): return message . lower(). translate(\n    message . maketrans(\"abcdefghijklmnopqrstuvwxyz\", \"22233344455566677778889999\"))\n",
  "59269e371a640c0e98000085": "from itertools import accumulate\nfrom operator import xor\n\n\ndef x_plus_y(s):\n    return sum(accumulate(map(int, s), xor))\n",
  "58ff1c8b13b001a5a50005b4": "def sort_animals(input):\r\n    return sorted(input, key=lambda x: (x . number_of_legs, x . name))\r\n",
  "592b7b16281da94068000107": "def encode(str, key):\r\n    key = key . lower() + key . upper()\r\n    dict = {char: key[i - 1] if i % 2 else key[i + 1]\r\n            for i, char in enumerate(key)}\r\n    return '' . join(dict . get(char, char) for char in str)\r\n\r\n    decode = encode\r\n",
  "592a6ad46d6c5a62b600003f": "dict = {i[0]: i[1] for i in ['GA', 'DE', 'RY', 'PO', 'LU', 'KI', 'AG', 'ED', 'YR', 'OP',\r\n                             'UL', 'IK', 'ga', 'de', 'ry', 'po', 'lu', 'ki', 'ag', 'ed', 'yr', 'op', 'ul', 'ik']}\r\n\r\n\r\ndef encode(s):\r\n    return '' . join([dict[i] if i in dict else i for i in s])\r\n\r\n    def decode(s):\r\n    return '' . join([dict[i] if i in dict else i for i in s])\r\n",
  "592a33e549fe9840a8000ba1": "def is_even(n):\r\n    return not n & 1\r\n",
  "592915cc1fad49252f000006": "def no_ifs_no_buts(a, b):\r\n    d = {a < b: 'smaller than', a == b: 'equal to', a > b: 'greater than'}\r\n    return f' { a } is { d [ True ]} { b } '\r\n",
  "580435ab150cca22650001fb": "def filter_lucky(lst): return [n for n in lst if '7' in str(n)]\n",
  "5901555b63bf404a66000029": "def light_bulbs(lights, n):\r\n\r\n    return lights if not n else light_bulbs([b ^ lights[i - 1] for i, b in enumerate(lights)], n - 1)\r\n",
  "592786effb1f93349b0000b2": "def hamming_rotate(a, b):\r\n\r\n    def hamming_dist(i):\r\n    return sum(d != b[(j + i) % len(a)] for j, d in enumerate(a))\r\n\r\n    return min(range(len(a)), key=hamming_dist)\r\n",
  "592645498270ccd7950000b4": "def typist(s):\r\n    up = False\r\n    t = len(s)\r\n    for c in s:\r\n    if c . isupper() and not up:\r\n    up = True\r\n    t += 1\r\n    elif c . islower() and up:\r\n    up = False\r\n    t += 1\r\n    return t\r\n",
  "5925acf31a9825d616000e74": "def kill_count(counselors, jason):\r\n    return [x for x, y in counselors if y < jason]\r\n",
  "587a75dbcaf9670c32000292": "def filter_words(st):\r\n    return ' ' . join(st . capitalize(). split())\r\n",
  "59252121fb1f93fc8200013a": "LOOP = (0, 0, 5, 5, 10, 10, 15, 15, 20, 25, 25, 30, 30, 35, 40)\r\n\r\n\r\ndef find_max_sum(n):\r\n    q, r = divmod(n, 15)\r\n    return 45 * q + LOOP[r]\r\n",
  "5680781b6b7c2be860000036": "def vowel_indices(word):\r\n    return [i for i, x in enumerate(word, 1) if x . lower() in 'aeiouy']\r\n",
  "56459c0df289d97bd7000083": "def generator(start, stop, step):\r\n    if step == 0:\r\n    return []\r\n    if stop < start:\r\n    return list(range(start, stop - 1, - step))\r\n    return list(range(start, stop + 1, step))\r\n",
  "592538b3071ba54511000219": "def isPrime(n):\r\n    return n == 2 or n > 2 and n & 1 and all(n % p for p in range(3, int(n * * .5 + 1), 2))\r\n\r\n    def prime_product(n):\r\n    return next((x * (n - x) for x in range(n >> 1, 1, - 1) if isPrime(x) and isPrime(n - x)), 0)\r\n",
  "5925138effaed0de490000cf": "def tiaosheng(failed_counter):\n    count = 0\n    jumps = 0\n    while count < 60:\n    count += 1\n    jumps += 1\n    if jumps in failed_counter:\n    count += 3\n    return jumps\n",
  "54162d1333c02486a700011d": "def penultimate(a):\r\n    return a[- 2]\r\n",
  "55afed09237df73343000042": "def is_lucky(n):\r\n    return n % 9 == 0\r\n",
  "57a6633153ba33189e000074": "from collections import Counter\n\n\ndef ordered_count(input):\n    return list(Counter(input). items())\n",
  "5809c661f15835266900010a": "def double_every_other(l):\r\n    return [x * 2 if i % 2 else x for i, x in enumerate(l)]\r\n",
  "57a06b07cf1fa58b2b000252": "def is_it_letter(s):\r\n    return s . isalpha()\r\n",
  "57a1ae8c7cb1f31e4e000130": "def get_min_max(seq):\r\n    return min(seq), max(seq)\r\n",
  "5738f5ea9545204cec000155": "def count_letters_and_digits(s):\r\n    return sum(map(str . isalnum, s))\r\n",
  "5840586b5225616069000001": "def highest_value(a, b):\r\n    return max(a, b, key=lambda s: sum(map(ord, s)))\r\n",
  "57b71a89b69bfc92c7000170": "def get_number_of_squares(n):\n    s, i = 0, 0\n    while s < n:\n    i += 1\n    s += i * * 2\n    return i - 1\n",
  "592421cb7312c23a990000cf": "from re import sub\r\n\r\n\r\ndef look_and_say_sequence(s, n):\r\n    for _ in range(1, n):\r\n    s = sub(r'(.)\\1*', lambda m: str(len(m . group(0))) + m . group(1), s)\r\n    return s\r\n",
  "55f2a1c2cb3c95af75000045": "from math import gcd\r\n\r\n\r\ndef greatest(x, y, n):\r\n    lcm = (x * y) / / gcd(x, y)\r\n    return (n / / lcm) * lcm if (n / / lcm) * lcm < n else 0\r\n    def smallest(x, y, n):\r\n    lcm = (x * y) / / gcd(x, y)\r\n    return lcm + (n / / lcm) * (lcm)\r\n",
  "579e3476cf1fa55592000045": "from fractions import gcd as find_GCF\n",
  "5912ded3f9f87fd271000120": "def count_correct_characters(s, t):\r\n    assert len(s) == len(t)\r\n    return sum(a == b for a, b in zip(s, t))\r\n",
  "5922828c80a27c049c000078": "def look_and_say_and_sum(N):\r\n    l = [1]\r\n    for n in range(N - 1):\r\n    result = [1, l[0]]\r\n    for i in range(1, len(l)):\r\n    if l[i] == result[- 1]:\r\n    result[- 2] += 1\r\n    else:\r\n    result += [1, l[i]]\r\n    l = result\r\n    return sum(l)\r\n",
  "57cc4853fa9fc57a6a0002c2": "def small_enough(a, limit):\r\n    return max(a) <= limit\r\n",
  "5921c0bc6b8f072e840000c0": "def sequence_classifier(arr):\n    if all(arr[i] == arr[i + 1] for i in range(len(arr) - 1)):\n        return 5\n    if all(arr[i] < arr[i + 1] for i in range(len(arr) - 1)):\n        return 1\n    if all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1)):\n        return 2\n    if all(arr[i] > arr[i + 1] for i in range(len(arr) - 1)):\n        return 3\n    if all(arr[i] >= arr[i + 1] for i in range(len(arr) - 1)):\n        return 4\n    return 0\n",
  "58738d518ec3b4bf95000192": "from collections import deque\r\nimport re\r\nTOKENIZER = re . compile(r'(R+|F+|L+|\\)|\\()(\\d*)')\r\n\r\n\r\ndef parseCode(code):\r\n    cmds = [[]]\r\n    for cmd, n in TOKENIZER . findall(code):\r\n    s, r = cmd[0], int(n or '1') + len(cmd) - 1\r\n    if cmd == '(':\r\n        cmds . append([])\r\n    elif cmd == ')':\r\n        lst = cmds . pop()\r\n        cmds[- 1]. extend(lst * r)\r\n    else:\r\n        cmds[- 1] += [(s, r)]\r\n    return cmds[0]\r\n\r\n    def execute(code):\r\n\r\n    pos, dirs = (0, 0), deque([(0, 1), (1, 0), (0, - 1), (- 1, 0)])\r\n    seens = {pos}\r\n\r\n    for s, r in parseCode(code):\r\n    if s == 'F':\r\n    for _ in range(r):\r\n    pos = tuple(z + dz for z, dz in zip(pos, dirs[0]))\r\n    seens . add(pos)\r\n    else:\r\n    dirs . rotate((r % 4) * (- 1) * * (s == 'R'))\r\n\r\n    miX, maX = min(x for x, y in seens), max(x for x, y in seens)\r\n    miY, maY = min(y for x, y in seens), max(y for x, y in seens)\r\n\r\n    return '\\r\\n' . join('' . join('*' if (x, y) in seens else ' ' for y in range(miY, maY + 1))\r\n                         for x in range(miX, maX + 1))\r\n",
  "58a3e2978bdda5a0d9000187": "from collections import Counter\r\n\r\n\r\ndef factors(n):\r\n    for i in [2] + list(range(3, int(n * * 0.5) + 1, 2)):\r\n    while not n % i:\r\n    yield i\r\n    n = n / / i\r\n    if n > 2:\r\n        yield n\r\n\r\n    def prime_operations(x, y):\r\n    C = Counter(factors(x))\r\n    C . subtract(Counter(factors(y)))\r\n    return sum(map(abs, C . values()))\r\n",
  "58870c87c81516bbdb0000d8": "from collections import Counter\r\nfrom math import isqrt\r\n\r\n\r\ndef mask(x):\r\n    return sorted(Counter(str(x)). values())\r\n\r\n    def construct_square(s):\r\n    m, r = mask(s), range(isqrt(10 * * ~ - len(s)), isqrt(10 * * len(s)) + 1)\r\n    return (m := mask(s)) and max((n * n for n in r if mask(n * n) == m), default=- 1)\r\n",
  "5895326bcc949f496b00003e": "from scipy . ndimage import convolve\n\n\ndef box_blur(image):\n    return (convolve(image, [[1, 1, 1]] * 3)[1: - 1, 1: - 1] / / 9). tolist()\n",
  "556206664efbe6376700005c": "CHARS = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\r\n def from10(n, b):\r\n\t if b == 10: return n\r\n new = ''\r\n while n:\r\n\t\t new += str(CHARS[n % b])\r\n\t\t n / /= b\r\n return new[:: - 1]\r\n\r\n def to10(n, b):\r\n\t num = 0\r\n for i, d in enumerate(str(n)[:: - 1]):\r\n\t\t num += int(CHARS . index(d)) * (b * * i)\r\n\t return num \r\n def is_polydivisible ( s , b ):\r\n\t for i in range ( 1 , len ( s ) + 1 ):\r\n\t\t if to10 ( s [: i ], b ) % i != 0 : return False \r\n return True \r\n def get_polydivisible ( n , b ):\r\n\t if n == 1 : return '0' \r\n i = 0 \r\n poly = []\r\n\t while len ( poly ) < n :\r\n\t\t fr = str ( from10 ( i , b ))\r\n\t\t if is_polydivisible ( str ( fr ), b ): \r\n\t\t\t poly . append ( fr )\r\n\t\t\t i += 1 \r\n else : i += 1 \r\n return poly [ - 1 ]",
  "54de279df565808f8b00126a": "PATTERN = re . compile(r'^(0|1(01*0)*1)*$')\n",
  "591eab1d192fe0435e000014": "def escape(carpark):\n\n    car, stairs, start, moves, x = - 1, - 1, - 1, [], 0\n    while x < len(carpark):\n        # Use string to avoid troubles with absence of 1 or 2\n    line = '' . join(map(str, carpark[x]))\n    stairs = line . find(\"1\")  # Search for stairs\n    if start == - 1:\n        # Do this only while the car had not been found yet\n        start = line . find(\"2\")\n    if start >= 0:\n        # Car found, start moving the \"car\" and declare that the car has been already found (start = -2)\n        car, start = start, - 2\n    if start == - 2:\n    if x == len(carpark) - 1:  # Car is at ground level\n    if car != len(carpark[x]) - 1:\n        # Move the car to the exit if needed\n        moves . append(\"R\" + str(len(carpark[x]) - 1 - car))\n    return moves\n    moves . append([\"L\", \"R\"][stairs - car > 0] +\n                   str(abs(stairs - car)))  # Archive the move needed\n    car, comingFrom = stairs, x  # Move the car to the stair, collect the current level\n    while carpark[x][car] == 1:\n        x += 1  # Go down while stairs are present\n    moves . append(\"D\" + str(x - comingFrom))  # Archive the whole descent\n    else:\n        x += 1  # If you reach this, car has not been found yet, so serach one level \"lower\"\n",
  "591e62eef99b994288000057": "from math import log\r\n\r\n\r\ndef find_divs(mx=10 * * 3):\r\n    def is_prime(n): return n == 2 or all(n % k for k in [2] + [* range(3, int(n * * .5) + 1, 2)])\r\n\r\n    marg = int(mx * * .5)\r\n    res = {k for k in range(2, mx + 1) if is_prime(k)}\r\n    res = res | {d * * pw for d in res if d <= marg for pw in range(2, int(log(mx, d)) + 1)}\r\n\r\n    return res\r\n    DIVS = find_divs()\r\n\r\n    def guess_what(n):\r\n    return sum(x <= n for x in DIVS)\r\n",
  "591e8c715b1d254f9e00005e": "def round_and_round(n, a, b):\r\n    return (a + b) % n or n\r\n",
  "58fef91f184b6dcc07000179": "def avg_diags(m):\r\n    a1, a2, l, l1, l2 = 0, 0, len(m), 0, 0\r\n    for i in range(0, l):\r\n    if i & 1:\r\n    if m[i][i] >= 0:\r\n        a1 += m[i][i]\r\n        l1 += 1\r\n    else:\r\n    if m[l - i - 1][i] < 0:\r\n        a2 += m[len(m) - i - 1][i]\r\n        l2 += 1\r\n    return [round(a1 / l1) if l1 > 0 else - 1, round(abs(a2) / l2) if l2 > 0 else - 1]\r\n",
  "56b0f5f84de0afafce00004e": "from fractions import gcd\n\n\ndef relatively_prime(n, l):\n    return [x for x in l if gcd(n, x) == 1]\n",
  "53d16bd82578b1fb5b00128c": "def grader(x):\n    if 0.9 <= x <= 1:\n        return \"A\"\n    elif 0.8 <= x < 0.9:\n        return \"B\"\n    elif 0.7 <= x < 0.8:\n        return \"C\"\n    elif 0.6 <= x < 0.7:\n        return \"D\"\n    else:\n        return \"F\"\n",
  "591d3375e51f4a0940000052": "import numpy as np\n\n\ndef sum_of_threes(n):\n    s = np . base_repr(n, 3)\n    if '2' in s:\n        return 'Impossible'\n    return '+' . join(['3^{}' . format(i) for i, d in enumerate(s[:: - 1]) if d == '1'][:: - 1])\n",
  "572caa2672a38ba648001dcd": "def f(n):\n    res = 1\n    i = 2\n    while n != 1:\n    k = 0\n    while n % i == 0:\n    k += 1\n    n / /= i\n    if k != 0:\n    res *= k * i * * (k - 1)\n    i += 1\n    return res\n",
  "591c075a94414c1617000063": "def turns_on_road(x, y):\n    if [x, y] == [0, 0]:\n        return 0\n    if x > 0 and - x + 1 < y <= x:\n        return 4 * x - 3\n    if x < 0 and x <= y < - x:\n        return 4 * (- x) - 1\n    if y > 0 and - y <= x < y:\n        return 4 * y - 2\n    if y < 0 and y < x <= - y + 1:\n        return 4 * (- y)\n",
  "5917fbed9f4056205a00001e": "import itertools\r\n\r\n\r\ndef bananas(s):\r\n    result = set()\r\n\r\n    for comb in itertools . combinations(range(len(s)), len(s) - 6):\r\n    arr = list(s)\r\n\r\n    for i in comb:\r\n    arr[i] = '-'\r\n    candidate = '' . join(arr)\r\n\r\n    if candidate . replace('-', '') == 'banana':\r\n    result . add(candidate)\r\n\r\n    return result\r\n",
  "58ca658cc0d6401f2700045f": "def find_multiples(integer, limit):\r\n    return list(range(integer, limit + 1, integer))\r\n",
  "58a3b28b2f949e21b3000001": "PIECES_MOVES = {1: [(1, 0), (- 1, 0), (0, 1), (0, - 1)],\r\n                - 1: [(1, 1), (- 1, - 1), (- 1, 1), (1, - 1)]}\r\n\r\n\r\ndef bishops_and_rooks(chessboard):\r\n\r\n    def theRootOfAllEvil(r, c):\r\n    evilIsHere . add((r, c))\r\n    for dr, dc in PIECES_MOVES[chessboard[r][c]]:\r\n    for i in range(1, 8):\r\n    x, y = r + dr * i, c + dc * i\r\n    if not (0 <= x < 8 and 0 <= y < 8) or chessboard[x][y] != 0:\r\n        break\r\n    evilIsHere . add((x, y))\r\n\r\n    evilIsHere = set()\r\n    for r in range(8):\r\n    for c in range(8):\r\n    if chessboard[r][c] != 0:\r\n        theRootOfAllEvil(r, c)\r\n\r\n    return 64 - len(evilIsHere)\r\n",
  "591aa1752afcb02fa300002a": "def thue_morse(n):\r\n\t out = \"0\"\r\n while len ( out ) < n :\r\n\t\t out += out . replace ( '1' , '2' ). replace ( '0' , '1' ). replace ( '2' , '0' )\r\n\t\r\n\t return out [: n ]",
  "590b8d5cee471472f40000aa": "def up_down_col_sort(m):\r\n    f = []\r\n    for i in m:\r\n    for j in i:\r\n    f += [j]\r\n    f = sorted(f)\r\n    a = len(m)\r\n    d = 0\r\n    g = []\r\n    for i in range(0, len(f), a):\r\n    if d == 0:\r\n    g += [f[i: i + a]]\r\n    d += 1\r\n    else:\r\n    g += [f[i: i + a][:: - 1]]\r\n    d = 0\r\n    return [list(i) for i in zip(* g)]\r\n",
  "591a86bfe76dc98f24000030": "def censor_this(text, forbidden_words):\r\n    return ' ' . join([w if w . lower() not in forbidden_words else '*' * len(w) for w in text . split()])\r\n",
  "590bb735517888ae6b000012": "def sum_prod_diags(m):\r\n    s, n = 0, len(m)\r\n    for d in 0, - 1:\r\n    for x in range(n):\r\n    h = v = 1\r\n    for u in range(n - x):\r\n    h *= m[u ^ d][x + u]\r\n    if x:\r\n        v *= m[(x + u) ^ d][u]\r\n    s += (d | 1) * (h + v)\r\n    return s\r\n",
  "5603002927a683441f0000cb": "def check_availability(schedule, current_time):\r\n    for tb, te in schedule:\r\n    if tb <= current_time < te:\r\n    return te\r\n    return True\r\n",
  "58e3f824a33b52c1dc0001c0": "from math import pi\n\n\ndef circle_area(circle):\n    return pi * circle . radius * * 2\n",
  "5919427e5ffc30804900005f": "def finding_k(arr):\r\n    for n in range(max(arr) - 1, 0, - 1):\r\n    if len({x % n for x in arr}) == 1:\r\n        return n\r\n    return - 1\r\n",
  "59175441e76dc9f9bc00000f": "def atomic_number(electrons):\r\n    result = []\r\n    i = 1\r\n    while electrons > 0:\r\n    result . append(min(2 * (i * * 2), electrons))\r\n    electrons -= result[- 1]\r\n    i += 1\r\n    return result\r\n",
  "57fb2c822b5314e2bb000027": "import re\r\n\r\n\r\ndef replace(s):\r\n    dic = {'!': '?', '?': '!'}\r\n    r = re . findall(r'[!]+|[/?]+', s)\r\n    for i in r[:]:\r\n    ii = dic[i[0]] * len(i)\r\n    if ii in r:\r\n    r[r . index(ii)] = ' ' * len(i)\r\n    return '' . join(r)\r\n",
  "58bf67eb68d8469e3c000041": "def find_duplicate_phone_numbers(phone_numbers):\r\n    stan = [a . upper(). translate(str . maketrans('ABCDEFGHIJKLMNOPRSTUVWXY',\r\n                                                   '222333444555666777888999')). replace('-', '') for a in phone_numbers]\r\n    return sorted(['{}-{}:{}' . format(a[: 3], a[3:], stan . count(a)) for a in set(stan) if stan . count(a) > 1])\r\n",
  "5893e7578afa367a61000036": "def almost_increasing_sequence(sequence):\n    save, first = - float('inf'), True\n    for i, x in enumerate(sequence):\n    if x > save:\n        save = x\n    elif first:\n    if i == 1 or x > sequence[i - 2]:\n        save = x\n    first = False\n    else:\n        return False\n    return True\n",
  "5889f08eb71a7dcee600006c": "from collections import deque\r\nPOS = [(3, 2), (1, 2), (0, 1), (1, 0), (3, 0), (2, 1)]\r\n\r\n\r\ndef volleyball_positions(formation, k):\r\n    players = deque([formation[x][y] for x, y in POS])\r\n    players . rotate(k % 6)\r\n    baseForm = [l[:] for l in formation]\r\n    for i, (x, y) in enumerate(POS):\r\n        baseForm[x][y] = players[i]\r\n\r\n    return baseForm\r\n",
  "5889902f53ad4a227100003f": "from itertools import combinations\n\n\ndef strings_crossover(arr, result):\n    return sum(1 for s1, s2 in combinations(arr, 2) if all(r in (x, y) for x, y, r in zip(s1, s2, result)))\n",
  "57fb44a12b53146fe1000136": "def balance(left, right):\r\n    left_count = left . count(\"!\") * 2 + left . count(\"?\") * 3\r\n    right_count = right . count(\"!\") * 2 + right . count(\"?\") * 3\r\n    if (left_count > right_count):\r\n    return \"Left\"\r\n    elif (right_count > left_count):\r\n    return \"Right\"\r\n    else:\r\n    return \"Balance\"\r\n",
  "5915686ed2563aa6650000ab": "def evil_code_medal(user_time, gold, silver, bronze):\r\n    for medal, time in [[\"Gold\", gold], [\"Silver\", silver], [\"Bronze\", bronze]]:\r\n    if user_time < time:\r\n    return medal\r\n    return \"None\"\r\n",
  "57fb04649610ce369a0006b8": "def remove(s): return ' ' . join(\n    r for r, _ in __import__('re'). findall(r'((!*)\\w+\\2)', s))\n",
  "58ad388555bf4c80e800001e": "def cut_the_ropes(a):\r\n    if not a:\r\n    return []\r\n    m = min(a)\r\n    return [len(a)] + cut_the_ropes([x - m for x in a if x > m])\r\n",
  "589d74722cae97a7260000d9": "import re\r\npattern = re . compile('o(.*?)d(.*?)d')\r\n\r\n\r\ndef odd(s):\r\n    n = 0\r\n    while pattern . search(s):\r\n    n += 1\r\n    s = pattern . sub(r'\\1\\2', s, count=1)\r\n    return n\r\n",
  "54bb6f887e5a80180900046b": "def longest_palindrome(s):\n    \"\"\"Manacher algorithm - Complexity O(n)\"\"\"\n    # Transform S into T.\n    # For example, S = \"abba\", T = \"^#a#b#b#a#$\".\n    # ^ and $ signs are sentinels appended to each end to avoid bounds checking\n    T = '#' . join('^{}$' . format(s))\n    n = len(T)\n    P = [0] * n\n    C = R = 0\n    for i in range(1, n - 1):\n    P[i] = (R > i) and min(R - i, P[2 * C - i])  # equals to i' = C - (i-C)\n    # Attempt to expand palindrome centered at i\n    while T[i + 1 + P[i]] == T[i - 1 - P[i]]:\n    P[i] += 1\n    # If palindrome centered at i expand past R,\n    # adjust center based on expanded palindrome.\n    if i + P[i] > R:\n    C, R = i, i + P[i]\n\n    # Find the maximum element in P.\n    maxLen, centerIndex = max((n, i) for i, n in enumerate(P))\n    return maxLen\n",
  "58aa8368ae929ea2e00000d9": "def nth_chandos_number(n):\r\n    return int((bin(n) + \"0\")[2:], 5)\r\n",
  "589425c2561a35dd1a0000a2": "def bishop_and_pawn(bishop, pawn):\r\n    return abs(ord(bishop[0]) - ord(pawn[0])) == abs(int(bishop[1]) - int(pawn[1]))\r\n",
  "5897e394fcc4b9c310000051": "def bishop_diagonal(a, b):\r\n    a, b = sorted([['abcdefgh' . index(f), '12345678' . index(r)]\r\n                  for f, r in [a, b]])\r\n    m = int((b[1] - a[1]) / (b[0] - a[0])) if abs(a[1] - b[1]\r\n                                                  ) == abs(a[0] - b[0]) and abs(a[1] - b[1]) else 0\r\n    if m:\r\n    while all(0 < e < 7 for e in a):\r\n        a = [a[0] - 1, a[1] - m]\r\n    while all(0 < e < 7 for e in b):\r\n        b = [b[0] + 1, b[1] + m]\r\n    return ['abcdefgh' [c] + '12345678' [r] for c, r in [a, b]]\r\n",
  "55217af7ecb43366f8000f76": "def get_num(n):\r\n    return sum({'0': 1, '6': 1, '9': 1, '8': 2}. get(d, 0) for d in str(n))\r\n",
  "5913ffb2cb1475215c000039": "def count_triangles(n):\r\n    return [8, 44, 124, 268, 492, 816, 1256, 1832, 2560, 3460, 4548, 5844, 7364, 9128, 11152, 13456, 16056, 18972, 22220, 25820, 29788, 34144, 38904, 44088, 49712, 55796, 62356, 69412, 76980, 85080, 93728, 102944, 112744, 123148, 134172, 145836, 158156, 171152, 184840, 199240, 214368, 230244, 246884, 264308, 282532, 301576, 321456, 342192, 363800, 386300, 409708, 434044, 459324, 485568, 512792, 541016, 570256, 600532, 631860, 664260, 697748, 732344, 768064, 804928, 842952, 882156, 922556, 964172, 1007020, 1051120, 1096488, 1143144, 1191104, 1240388, 1291012, 1342996, 1396356, 1451112, 1507280, 1564880, 1623928, 1684444, 1746444, 1809948, 1874972, 1941536, 2009656, 2079352, 2150640, 2223540, 2298068, 2374244, 2452084, 2531608, 2612832, 2695776, 2780456, 2866892, 2955100, 3045100, 3136908][n-1]\r\n",
  "591404294ef3051cbe000035": "from math import sqrt\n\n\ndef triangular_sum(n):\n    return sqrt(2 * (sqrt(8 * n + 1) - 1)) % 2 == 0\n",
  "59157809f05d9a8ad7000096": "def powerset(nums):\r\n    if not nums:\r\n    return [[]]\r\n    l = powerset(nums[1:])\r\n    a = nums[0]\r\n    return l + [[a] + q for q in l]\r\n",
  "591575f6d64db0431c000009": "from functools import cache\n# Basically fibonacci with the previous 6\n\n\n@ cache\ndef throwing_dice(n):\n    return n == 0 or sum(map(throwing_dice, range(max(0, n - 6), n)))\n",
  "56d98b555492513acf00077d": "time_units = {'ms': 1, 's': 1000, 'm': 60000, 'h': 3600000, 'd': 86400000}\r\ndist_units = {'mm': 1, 'cm': 10, 'dm': 100, 'm': 1000, 'km': 1000000}\r\n\r\n\r\ndef testit(a):\r\n    if all(unit(x) in time_units for x in a):\r\n    return sorted(a, key=lambda x: val(x) * time_units[unit(x)])\r\n    if all(unit(x) in dist_units for x in a):\r\n    return sorted(a, key=lambda x: val(x) * dist_units[unit(x)])\r\n\r\n    def unit(x):\r\n    return '' . join(filter(str . isalpha, x))\r\n\r\n    def val(x):\r\n    return int('' . join(filter(str . isdigit, x)))\r\n",
  "57a2ab1abb994466910003af": "from itertools import groupby\r\n\r\n\r\ndef split_odd_and_even(n):\r\n    return [int(\"\" . join(g))\r\n            for i, g in groupby(str(n), key=lambda x: int(x) % 2)]\r\n",
  "58e26b5d92d04c7a4f00020a": "def palindrome(num):\r\n    s = str(num)\r\n\r\n    if not isinstance(num, int) or num < 0:\r\n    return \"Not valid\"\r\n    return num > 9 and sum(s . count(x) % 2 for x in set(s)) < 2\r\n",
  "58e2708f9bd67fee17000080": "def palindrome(num):\r\n    if not isinstance(num, int) or num < 0:\r\n    return \"Not valid\"\r\n    n = str(num)\r\n    l = len(n)\r\n    result = {int(n[i: j]) for i in range(l - 1) for j in range(i +\r\n                                                                2, l + 1) if int(n[i]) and n[i: j] == n[i: j][:: - 1]}\r\n    return sorted(result) if result else \"No palindromes found\"\r\n",
  "58df62fe95923f7a7f0000cc": "def palindrome(num):\r\n    if not isinstance(num, int) or num < 0:\r\n    return 'Not valid'\r\n    s = str(num)\r\n    return sum(sum(s[i: i + n] == s[i: i + n][:: - 1] for i in range(len(s) - n + 1)) for n in range(2, len(s) + 1))\r\n",
  "58de819eb76cf778fe00005c": "def palindrome(num):\r\n    if type(num) != int or num < 0:\r\n        return \"Not valid\"\r\n    s = str(num)\r\n    for i in range(len(s) - 2):\r\n    if s[i] == s[i + 1] or s[i] == s[i + 2]:\r\n        return True\r\n    return len(s) != 1 and s[- 1] == s[- 2]\r\n",
  "59040fdae1bfd334ca00007a": "from collections import Counter\nfrom functools import reduce\nfrom math import factorial\nfrom operator import mul\n\n\ndef count_perms(matrix):\n    return factorial(len(matrix) * len(matrix[0])) / / reduce(mul, map(factorial, Counter(sum(matrix, [])). values()))\n",
  "58870742c815166a960000af": "def is_substitution_cipher(s1, s2):\r\n    return len(set(s1)) == len(set(s2)) == len(set(zip(s1, s2)))\r\n",
  "591144f42e6009675300001f": "import re\r\nCHICKEN, FOX, DIRT = 'CF.'\r\nCAGE = '[{}]'\r\n\r\n\r\ndef hungry_foxes(farm):\r\n    parts = re . split(r'[[\\]]', farm)\r\n    inside, outside = slice(1, None, 2), slice(None, None, 2)\r\n\r\n    fox_outside = any(FOX in part for part in parts[outside])\r\n\r\n    parts[outside] = [fox_outside and part . replace(\r\n        CHICKEN, DIRT) or part for part in parts[outside]]\r\n    parts[inside] = [CAGE . format(FOX in part and part . replace(\r\n        CHICKEN, DIRT) or part) for part in parts[inside]]\r\n\r\n    return '' . join(parts)\r\n",
  "54f8693ea58bce689100065f": "from math import ceil\r\nfrom fractions import Fraction as F\r\n\r\n\r\ndef decompose(n):\r\n    f = F(n)\r\n    ff = int(f)\r\n    result = [str(ff)] if ff else []\r\n    f -= ff\r\n    while f > 0:\r\n    x = F(1, int(ceil(f * * - 1)))\r\n    f -= x\r\n    result . append(str(x))\r\n    return result\r\n",
  "58e18c5434a3022d270000f2": "from re import match\r\n\r\n\r\ndef road_kill(photo):\r\n    remains = photo . replace('=', '')\r\n\r\n    for animal in ANIMALS:\r\n    parts = '^' + '+' . join(c for c in animal) + '+$'\r\n    if match(parts, remains) or match(parts, remains[:: - 1]):\r\n    return animal\r\n    return '??'\r\n",
  "59128363e5bc24091a00006f": "from string import ascii_lowercase as alphabet\n\n\ndef the_janitor(word):\n    return [word . rindex(c) - word . index(c) + 1 if c in word else 0 for c in alphabet]\n",
  "5897d94dd07028546c00009d": "from functools import reduce\nfrom operator import mul\n\n\ndef unique_digit_products(a):\n    return len({reduce(mul, map(int, str(x))) for x in a})\n",
  "57fb3c839610ce39f7000023": "import re\n\n\ndef find(s):\n    return max(re . findall(r'(?=(!+\\?+|\\?+!+))', s), key=len, default='')\n",
  "58885a7bf06a3d466e0000e3": "def pair_of_shoes(a):\r\n    return sorted(s for lr, s in a if lr == 1) == sorted(s for lr, s in a if lr == 0)\r\n",
  "57fb0f3f9610ced69000023c": "import re\n\n\ndef remove(inp):\n    while True:\n    next = re . sub(r'!{3,}|\\?{3,}', lambda m: \"\" if len(\n        m . group(0)) % 2 == 1 else m . group(0), inp)\n    if next == inp:\n        break\n    inp = next\n    return next\n",
  "5912701a89fc3d0a6a000169": "def even_numbers_before_fixed(s, f):\r\n    return len([x for x in s[: s . index(f)] if x % 2 == 0]) if f in s else - 1\r\n",
  "59126cd3379de6ca5f00019c": "def case_unification(s):\r\n    return s . upper() if sum(c . islower() for c in s) < len(s) / 2 else s . lower()\r\n",
  "5653d33e78e3d9dfe600004e": "from itertools import product\r\nmapping = {\r\n    '0': '0',\r\n    '1': '1',\r\n    '2': 'ABC',\r\n    '3': 'DEF',\r\n    '4': 'GHI',\r\n    '5': 'JKL',\r\n    '6': 'MNO',\r\n    '7': 'PQRS',\r\n    '8': 'TUV',\r\n    '9': 'WXYZ',\r\n}\r\n\r\n\r\ndef telephoneWords(digits):\r\n    digits = map(lambda x: mapping[x], digits)\r\n    return map('' . join, product(* digits))\r\n",
  "586eca3b35396db82e000481": "def update_score(sc, trmp, alone, trks):\r\n    tot = trks . count(trmp)\r\n    if tot <= 2:\r\n        sc[trmp % 2] += 2\r\n    elif 3 <= tot <= 4:\r\n        sc[trmp - 1] += 1\r\n    elif tot >= 5 and not alone:\r\n        sc[trmp - 1] += 2\r\n    elif tot >= 5 and alone:\r\n        sc[trmp - 1] += 4\r\n    else:\r\n        print(\"what happened here ??\")\r\n\r\n    return sc\r\n",
  "59126992f9f87fd31600009b": "def whoseMove(lastPlayer, win):\r\n    return lastPlayer if win else 'white' if lastPlayer == 'black' else 'black'\r\n",
  "5905871c00881d0e85000015": "def mix_fruit(arr):\r\n    regular = [\"banana\", \"orange\", \"apple\", \"lemon\", \"grapes\"]\r\n    special = [\"avocado\", \"strawberry\", \"mango\"]\r\n    return round(sum(5 if fruit . lower() in regular else (7 if fruit . lower() in special else 9) for fruit in arr) / len(arr))\r\n",
  "5816b76988ca9613cc00024f": "from itertools import groupby\n\n\ndef sort_sequence(sequence):\n    return sum(sorted([sorted(y) + [0] for x, y in groupby(sequence, lambda x: x == 0) if not x], key=sum), [])\n",
  "58097ae96037b88f57000105": "def toCamelCase(s, n):\r\n    if n == 1:\r\n    return s[0]. lower() + s . title(). replace(' ', '')[1:]\r\n    elif n == 2:\r\n    return '' . join(map(lambda x: x[: - 1]. lower() + x[- 1]. upper(), s . split()))[: - 1] + s[- 1]. lower()\r\n    else:\r\n    return '' . join(map(lambda x: x[: - 1] + x[- 1]. upper(), (s[0]. lower() + s . title()[1:]). split()))[: - 1] + s[- 1]. lower()\r\n",
  "571d0c80eed4a1c850000ef2": "import re\r\nPATTERN = re . compile(r'(?P<first>(?:(?<=[.!?] )|^)\\w+)|(?P<other>\\w+)')\r\n\r\n\r\ndef pete_talk(speech, ok=[]):\r\n\r\n    def watchYourMouth(m):\r\n    w = (m . group(\"first\") or m . group(\"other\")). lower()\r\n    if w not in ok and len(w) > 1:\r\n        w = w[0] + '*' * (len(w) - 2) + w[- 1]\r\n    if m . group(\"first\"):\r\n        w = w . capitalize()\r\n    return w\r\n    ok = set(map(str . lower, ok))\r\n    return PATTERN . sub(watchYourMouth, speech)\r\n",
  "5845b080a87f768aaa00027c": "from math import comb\r\n\r\n\r\ndef travel_chessboard(s):\r\n    x1, y1, x2, y2 = (int(e)\r\n                      for e in s . replace(')(', ' ')[1: - 1]. split(' '))\r\n    return comb(x2 - x1 + y2 - y1, x2 - x1)\r\n",
  "581b29b549b2c0daeb001454": "def bang_contain_string(stg, history):\r\n    for line in history . splitlines()[:: - 1]:\r\n    if stg in line:\r\n    return line . lstrip(\" 0123456789\")\r\n    return f\"! { stg } : event not found\"\r\n",
  "5818236ae7f457017b00022b": "import re\r\n_PATTERN = re . compile(r'\\A\\s*(\\d+)\\s+(.*)\\Z')\r\n\r\n\r\ndef bang_start_string(n, history):\r\n    cmds = (_PATTERN . match(line). group(2)\r\n            for line in history . splitlines()[:: - 1])\r\n    return next((cmd for cmd in cmds if cmd . startswith(n)), '!{}: event not found' . format(n))\r\n",
  "5815fd7441e062463d0000f8": "def bang_minus_n(n, history):\r\n    try:\r\n    return history . split('\\n')[- n]. split(' ')[- 1]\r\n    except:\r\n    return \"!-{}: event not found\" . format(n)\r\n",
  "5814bf3f3db1ffc0180000d3": "def bang_n(n, history):\r\n    try:\r\n    return history . split('\\n')[n - 1]. split(' ')[- 1]\r\n    except:\r\n    return \"!{}: event not found\" . format(n)\r\n",
  "582e0450fe38013dbc0002d3": "import re\n\n\ndef regex_tic_tac_toe_win_checker(board):\n    regex = r'(\\w)(\\1\\1(...)*$|..\\1..\\1|.\\1.\\1..$|...\\1...\\1)'\n    return bool(re . search(regex, board))\n",
  "5840107b6fcbf56d2000010b": "def palindromization(elements, n):\r\n    if not elements or n < 2:\r\n        return \"Error!\"\r\n    left = ((n / / len(elements) + 1) * elements)[:(n + 1) / / 2]\r\n    return left + left[- 1 - n % 2:: - 1]\r\n",
  "58235a167a8cb37e1a0000db": "def number_of_pairs(gloves):\r\n    return sum(gloves . count(color) / / 2 for color in set(gloves))\r\n",
  "58143221f9588e340e00009f": "def bang_bang(history):\r\n    return history . split(' ')[- 1]\r\n",
  "57fa3a33e8c829780a0001d2": "def berserk_rater(synopsis):\r\n    n = sum([score(s . upper()) for s in synopsis])\r\n    return 'worstest episode ever' if n < 0 else 'bestest episode ever' if n > 10 else str(n)\r\n\r\n    def score(s):\r\n    return 5 if 'CLANG' in s else - 2 if 'CG' in s else - 1\r\n",
  "5803ee0ed5438edcc9000087": "def padovan(n):\r\n    p0 = p1 = p2 = 1\r\n    for i in range(n):\r\n    p0, p1, p2 = p1, p2, p0 + p1\r\n    return p0\r\n",
  "5800b6568f7ddad2c10000ae": "def simplify(n):\r\n    output = []\r\n    exp = 0\r\n    while n:\r\n    n, r = divmod(n, 10)\r\n    if r:\r\n    output . append(f\" { r } * { 10 * * exp } \" if exp else f\" { r } \")\r\n    exp += 1\r\n    return \"+\" . join(output[:: - 1])\r\n",
  "57ebdf1c2d45a0ecd7002cd5": "import re\r\n\r\n\r\ndef inside_out(s):\r\n    return re . sub(r'\\S+', lambda m: inside_out_word(m . group()), s)\r\n\r\n    def inside_out_word(s):\r\n    i, j = len(s) / / 2, (len(s) + 1) / / 2\r\n    return s[: i][:: - 1] + s[i: j] + s[j:][:: - 1]\r\n",
  "571bff6082661c8a11000823": "from operator import mul\nfrom math import factorial\nfrom functools import reduce\nfrom collections import Counter\n\n\ndef perms(inp):\n    return factorial(len(str(inp))) / / reduce(mul, map(factorial, Counter(str(inp)). values()), 1)\n",
  "57fe5b7108d102fede00137a": "mod = {\"e\": u\"\u00e9\", \"i\": u\"\u00ed\", u\"\u00f6\": u\"\u0151\",\r\n       u\"\u00fc\": u\"\u0171\", \"a\": u\"\u00e1\", \"o\": u\"\u00f3\", \"u\": u\"\u00fa\"}\r\n\r\n\r\ndef instrumental(word):\r\n    # find the last vowel\r\n    for c in word[:: - 1]:\r\n    if c in u\"a\u00e1o\u00f3u\u00fa\":\r\n    suf = \"val\"\r\n    break\r\n    elif c in u\"e\u00e9i\u00ed\u00f6\u0151\u00fc\u0171\":\r\n    suf = \"vel\"\r\n    break\r\n    # word ends with a vowel\r\n    if c == word[- 1]:\r\n    return word[: - 1] + mod . get(c, word[- 1]) + suf\r\n    # word ends with a consonant\r\n    if word[- 2:] in (\"sz\", \"zs\", \"cs\"):\r\n    word = word[: - 1] + word[- 2:]\r\n    else:\r\n    word += word[- 1]\r\n\r\n    return word + suf[1:]\r\n",
  "591074c7ea12ad515500007e": "def visits_on_circular_road(n, order):\r\n    return sum(min((d := abs(b - a)), n - d) for a, b in zip([1, * order], order))\r\n",
  "5911385598dcd432ae000004": "import sys\r\nsys . set_int_max_str_digits(0)\r\n\r\n\r\ndef is_divisible_by_6(s: str) - > list[str]:\r\n    res = []\r\n    for i in range(10):\r\n    num = int(s . replace(\"*\", str(i)))\r\n    if num % 6 == 0:\r\n    res . append(str(num))\r\n\r\n    return res\r\n",
  "57dab71714e53f4bc9000310": "def rotate_and_remove(arr):\r\n    while len(arr) > 1:\r\n    arr = [popMinMax([* r]) for r in zip(* arr)][:: - 1]\r\n    return arr[0][0]\r\n\r\n    def popMinMax(r):\r\n    for f in min, max:\r\n    r . remove(f(r))\r\n    return r\r\n",
  "57819b700a8eb2d6b00002ab": "def hollow_triangle(n):\r\n    return [(f'# { \"_\" * ( 2 * i - 1 )} #' if i else '#'). center(2 * n - 1, '_') for i in range(n - 1)] + ['#' * (2 * n - 1)]\r\n",
  "577e694af5db624cf30002d0": "from itertools import combinations\n\n\ndef closest_sum(ints, num):\n    return sum(min(combinations(ints, 3), key=lambda a: abs(num - sum(a))))\n",
  "55b7bb74a0256d4467000070": "def proper_fractions(n):\r\n    phi = n > 1 and n\r\n    for p in range(2, int(n * * .5) + 1):\r\n    if not n % p:\r\n    phi -= phi / / p\r\n    while not n % p:\r\n    n / /= p\r\n    if n > 1:\r\n        phi -= phi / / n\r\n    return phi\r\n",
  "5897ea323387497f460001a0": "def chess_bishop_dream(b, p, d, k):\r\n    yq, yr = divmod(p[0] + k * d[0], 2 * b[0])\r\n    xq, xr = divmod(p[1] + k * d[1], 2 * b[1])\r\n    return [min(yr, 2 * b[0] - yr - 1), min(xr, 2 * b[1] - xr - 1)]\r\n",
  "590ee3c979ae8923bf00095b": "from statistics import mean\n\n\ndef grey(rgb):\n    return [int(round(mean(rgb)))] * 3\n    def color_2_grey(colors):\n    return [[grey(pixel) for pixel in row] for row in colors]\n",
  "58583922c1d5b415b00000ff": "MOVES = {\"up\": (- 1, 0), \"down\": (1, 0), \"right\": (0, 1), \"left\": (0, - 1)}\r\n\r\n\r\ndef super_street_fighter_selection(fighters, initial_position, moves):\r\n    y, x = initial_position\r\n    hovered_fighters = []\r\n    for move in moves:\r\n    dy, dx = MOVES[move]\r\n    y += dy\r\n    if not 0 <= y < len(fighters) or not fighters[y][x]:\r\n    y -= dy\r\n    x = (x + dx) % len(fighters[y])\r\n    while not fighters[y][x]:\r\n    x = (x + dx) % len(fighters[y])\r\n    hovered_fighters . append(fighters[y][x])\r\n    return hovered_fighters\r\n",
  "5717fbf85122b8f757001b3f": "def rotate_corners(matrix):\r\n    def score(m): return sum(sum(ord(c) if isinstance(c, str) else int(c)\r\n                                 for c in r) for r in m)\r\n    corners = [[matrix[i][j] for j in (0, - 1)] for i in (0, - 1)]\r\n    n = (score(matrix) - score(corners)) * score(corners) % 4\r\n    for _ in range(n):\r\n        corners = list(map(list, zip(* corners[:: - 1])))\r\n    return corners\r\n",
  "562b384167350ac93b00010c": "from fractions import gcd\r\n\r\n\r\ndef seq():\r\n    i, a, g = 1, 7, 1\r\n    while 1:\r\n    yield i, a, g\r\n    i += 1\r\n    g = gcd(i, a)\r\n    a += g\r\n    def count_ones(n):\r\n    return sum(g == 1 for _, (i, a, g) in zip(range(n), seq()))\r\n\r\n    def p(n):\r\n    seen = set()\r\n    for i, a, g in seq():\r\n    if not n:\r\n        break\r\n    if g > 1 and g not in seen:\r\n    n -= 1\r\n    seen . add(g)\r\n    yield g\r\n    def max_pn(n):\r\n    return max(p(n))\r\n\r\n    def an_over(n):\r\n    for i, a, g in seq():\r\n    if not n:\r\n        break\r\n    if g > 1:\r\n    n -= 1\r\n    yield a / i\r\n    def an_over_average(n):\r\n    return sum(an_over(n)) / n\r\n",
  "590f5b4a7bbb3e246000007d": "def comes_after(st, letter):\r\n    letter = letter . lower()\r\n    return '' . join(b for a, b in zip(st . lower(), st[1:]) if a == letter and b . isalpha())\r\n",
  "587ae98e2ab0ef32ef00004c": "import re\r\nLEGS = r'[a-z]'\r\nBODY = r'[|};&#\\[\\]/><()*]'\r\n\r\n\r\ndef counRobots(strng, typeRobot):\r\n    return str(sum(len(re . findall(LEGS + BODY + \"{2}0\" + BODY + \"{2}0\" + BODY + \"{2}\" + LEGS, substr))\r\n                   for substr in map(str . lower, strng)\r\n                   if typeRobot in substr))\r\n\r\n    def count_robots(a):\r\n    return [\"{} robots functioning automatik\" . format(counRobots(a, \"automatik\")),\r\n            \"{} robots dancing mechanik\" . format(counRobots(a, \"mechanik\"))]\r\n",
  "584e8bba044a15d3ed00016c": "def mobile_display(width, height_ratio):\r\n    width, height_ratio = max(width, 20), max(height_ratio, 30)\r\n    height = width * height_ratio / / 100\r\n    def center(string, width, filler, prefix, suffix):\r\n    width -= len(string) + len(prefix) + len(suffix)\r\n    left, right = width / / 2, (width + 1) / / 2\r\n    return prefix + left * filler + string + right * filler + suffix\r\n    title = [center('CodeWars', width, ' ', '*', '*')]\r\n    filler = [center('', width, ' ', '*', '*')]\r\n    header = [center('', width, '*', '', '')]\r\n    footer = [center('', width, ' ', '* Menu', 'Contacts *')] + header\r\n    return '\\n' . join(center(title, height, filler, header, footer))\r\n",
  "570957fc20a35bd2df0004f9": "OUTPUT = \"I don't think you {} today, I think you {} {} {}!\" . format\r\n\r\n\r\ndef alan_annoying_kid(phrase):\r\n    words = phrase . split()\r\n    action = ' ' . join(words[2:]). rstrip('.')\r\n    if \"didn't\" in phrase:\r\n    return OUTPUT(action, 'did', words[3], 'it')\r\n    return OUTPUT(action, \"didn't\", words[2][: - 2], 'at all')\r\n",
  "56af1a20509ce5b9b000001e": "def travel(r, zipcode):\r\n    streets = []\r\n    nums = []\r\n    addresses = r . split(',')\r\n    for address in addresses:\r\n    if ' ' . join(address . split()[- 2:]) == zipcode:\r\n    streets . append(' ' . join(address . split()[1: - 2]))\r\n    nums += address . split()[: 1]\r\n    return '{}:{}/{}' . format(zipcode, ',' . join(streets), ',' . join(nums))\r\n",
  "58ade79f3c97367977000274": "import re\r\ncomplaints = [\"slow!\", \"expensive!\", \"manual!\",\r\n              \"down!\", \"hostage!\", \"security!\"]\r\n\r\nlegacy = {\r\n    \"cobol\": 1000,\r\n    \"nonobject\": 500,\r\n    \"monolithic\": 500,\r\n    \"fax\": 100,\r\n    \"modem\": 100,\r\n    \"thickclient\": 50,\r\n    \"tape\": 50,\r\n    \"floppy\": 50,\r\n    \"oldschoolit\": 50\r\n}\r\n\r\n\r\ndef roast_legacy(workloads):\r\n    complaining = sum(1 for _ in re . finditer(\r\n        '|' . join(complaints), workloads . lower()))\r\n    roasting = sum(legacy[m . group()] for m in re . finditer(\r\n        '|' . join(legacy), workloads . lower()))\r\n    if roasting or complaining:\r\n    return 'Burn baby burn disco inferno %d points earned in this roasting and %d complaints resolved!' % (roasting, complaining)\r\n    else:\r\n    return 'These guys are already DevOps and in the Cloud and the business is happy!'\r\n",
  "578b8c0e84ac69a4d20004c8": "def running_pace(distance, time):\r\n    m, s = map(int, time . split(':'))\r\n    second = m * 60 + s\r\n    pace = second / distance\r\n    return f' { int ( pace / / 60 )} : { int ( pace % 60 ):0 2 } '\r\n",
  "590fd3220f05b4f1ad00007c": "def cool_string(s):\r\n    return s . isalpha() and all(x . islower() != y . islower() for x, y in zip(s, s[1:]))\r\n",
  "57a31ce7cf1fa5a1e1000227": "from collections import defaultdict\r\n\r\n\r\ndef update_inventory(cur_stock, new_stock):\r\n    answer = defaultdict(int)\r\n    for stock, item in cur_stock + new_stock:\r\n    answer[item] += stock\r\n    return [(answer[item], item) for item in sorted(answer)]\r\n",
  "57829376a1b8d576640000d6": "import re\r\n\r\n\r\ndef trump_detector(ts):\r\n    x = re . findall(r'([aeiou])(\\1*)', ts, re . I)\r\n    y = [len(i[1]) for i in x]\r\n    return round(sum(y) / len(y), 2)\r\n",
  "57f669477c9a2b1b9700022d": "def order_type(arr):\n    if not arr:\n        return 'Constant'\n    arr = list(\n        map(len, [str(elt) if type(elt) == int else elt for elt in arr]))\n    cmp = sorted(arr)\n    if arr == [arr[0]] * len(arr):\n        s = 'Constant'\n    elif arr == cmp:\n        s = 'Increasing'\n    elif arr == cmp[:: - 1]:\n        s = 'Decreasing'\n    else:\n        s = 'Unsorted'\n    return s\n",
  "583710f6b468c07ba1000017": "def proofread(s):\r\n    return '. ' . join(i . lower(). replace('ie', 'ei'). capitalize() for i in s . split('. '))\r\n",
  "580be55ca671827cfd000043": "def wanted_words(vowels, consonants, forbidden):\n    return [w for w in WORD_LIST\n            if len(w) == vowels + consonants\n            and sum(map(w . count, 'aeiou')) == vowels\n            and not any(c in w for c in forbidden)]\n",
  "57a125e772292dadcb0005f5": "def rot_pred(arr):\r\n    pivot = len(arr) / / 2\r\n    if not len(arr) % 2 or arr[pivot] != 'S':\r\n        return 'Not a Valid Entry'\r\n    moment = sum(i * x for i, x in enumerate(arr, - pivot) if i)\r\n    return 'steady' if not moment else 'anti ' * (moment < 0) + 'clockwise'\r\n",
  "577c2d68311a24132a0002a5": "import re\n\n\ndef reverse(s):\n    return re . sub(r'(.)\\1+', lambda m: m . group(). swapcase(), s)\n",
  "57fb1705f815ebd49e00024c": "from gmpy2 import is_prime, next_prime\r\nfrom itertools import groupby\r\n\r\n\r\ndef convert(s):\r\n    x = int('' . join(str(sum(1 for _ in l)) for _, l in groupby(s)))\r\n    p = 2\r\n    while not is_prime(x):\r\n    while x > p and x % p == 0:\r\n    x / /= p\r\n    p = next_prime(p)\r\n    return x\r\n",
  "57f625992f4d53c24200070e": "def bingo(ticket, win):\r\n    return 'Winner!' if sum(chr(n) in s for s, n in ticket) >= win else 'Loser!'\r\n",
  "58311536e77f7d08de000085": "def count_cows(n):\r\n    if not isinstance(n, int):\r\n    return None\r\n    return 1 if n < 3 else count_cows(n - 1) + count_cows(n - 3)\r\n",
  "5821cd4770ca285b1f0001d5": "def snakes_and_ladders(board, dice):\r\n    pos = 0\r\n    for d in dice:\r\n    if pos + d < len(board):\r\n    pos += d + board[pos + d]\r\n    return pos\r\n",
  "58397ee871df657929000209": "import re\r\nfrom functools import reduce\r\n_ACRONYMS = {\r\n    'KPI': 'key performance indicators',\r\n    'EOD': 'the end of the day',\r\n    'EOP': 'the end of the day',  # snafu in the tests?\r\n    'TBD': 'to be decided',\r\n    'WAH': 'work at home',\r\n    'IAM': 'in a meeting',\r\n    'OOO': 'out of office',\r\n    'NRN': 'no reply necessary',\r\n    'CTA': 'call to action',\r\n    'SWOT': 'strengths, weaknesses, opportunities and threats'}\r\n\r\n_ACRONYM_PATTERN = re . compile(r'\\b[A-Z]{3,}\\b')\r\n_CAPITAL_PATTERN = re . compile(r'(?:\\. |^)([a-z])')\r\n\r\n\r\ndef _CAPITAL_FIX(match): return '{}' . format(match . group(0). upper())\r\n\r\n\r\ndef acronym_buster(message):\r\n    message = reduce(lambda msg, item: msg . replace(\r\n        * item), _ACRONYMS . items(), message)\r\n    try:\r\n    acro = next(_ACRONYM_PATTERN . finditer(message)). group(0)\r\n    return '{} is an acronym. I do not like acronyms. Please remove them from your email.' . format(acro)\r\n    except StopIteration:\r\n    return _CAPITAL_PATTERN . sub(_CAPITAL_FIX, message)\r\n",
  "5826773bfad36332bf0002f9": "from collections import Counter\nimport re\n\n\ndef count_and_print_graph(text, max_units_on_screen):\n    counts = Counter(re . sub(\"[^a-z]\", \"\", text . lower()))\n    adjust = counts . most_common(1)[0][1] / max_units_on_screen\n    return \"\\n\" . join([x[0] + \":\" + \"#\" * int(x[1] / adjust) for x in sorted(counts . items(), key=lambda x: (- x[1], x[0]))])\n",
  "57e6bcbd684e570c6700021c": "def yellow_be_gone(s):\r\n    d = {'gold': 'ForestGreen', 'khaki': 'LimeGreen', 'lemonchiffon': 'PaleGreen', 'lightgoldenrodyellow': 'SpringGreen',\r\n         'lightyellow': 'MintCream', 'palegoldenrod': 'LightGreen', 'yellow': 'Lime'}\r\n\r\n    if s[0] == '#':\r\n    R, G, B = s[1: 3], s[3: 5], s[5:]\r\n    if B < G and B < R:\r\n    R, B, G = sorted([R, G, B])\r\n    s = '#' + R + G + B\r\n    return d . get(s . lower(), s)\r\n",
  "5845e6a7ae92e294f4000315": "def sum_nested_numbers(a, depth=1):\r\n    return sum(sum_nested_numbers(e, depth + 1) if type(e) == list else e * * depth for e in a)\r\n",
  "590c4c342ad5cd6a8700005c": "def prefix_sums_to_suffix_sums(prefix_sums):\r\n    return [prefix_sums[- 1] - (i and prefix_sums[i - 1]) for i, s in enumerate(prefix_sums)]\r\n",
  "590c3173cd3b99c467000a26": "def to_and_from(a, b, t):\r\n    times, rem = divmod(t, b - a)\r\n    if not times % 2:\r\n    return a + rem\r\n    return b - rem\r\n",
  "590942d4efde93886900185a": "def tennis_game_points(score):\r\n    arr = [\"love\", \"15\", \"30\", \"40\"]\r\n    [a, b] = score . split(\"-\")\r\n    return arr . index(a) + (arr . index(a) if b == \"all\" else arr . index(b))\r\n",
  "590e03aef55cab099a0002e8": "def incrementer(nums):\r\n    return [(v + i) % 10 for i, v in enumerate(nums, 1)]\r\n",
  "57630df805fea67b290009a3": "trans_table = str . maketrans('abcdefghijklmnopqrstuvwxyz',\r\n                              '0123456789abcdefghijklmnop')\r\n\r\n\r\ndef permutation_position(perm):\r\n    return int(perm . translate(trans_table), 26) + 1\r\n",
  "5592dd43a9cd0e43a800019e": "def diagonals(matrix):\r\n    def skewed(left, right):\r\n    tilted = [[None] * l + row + [None] * r for l,\r\n              row, r in zip(left, matrix, right)]\r\n    return [[x for x in row if x is not None] for row in zip(* tilted)]\r\n\r\n    left, right = range(len(matrix)), range(len(matrix) - 1, - 1, - 1)\r\n    return matrix if len(matrix) < 2 else skewed(left, right) + skewed(right, left)\r\n",
  "587319230e9cf305bb000098": "import re\r\nREPLACMENTS = [\"BFPV\", \"CGJKQSXZ\", \"DT\", \"L\", \"MN\", \"R\"]\r\nER1, ER2 = \"HW\", \"AEIOUY\"\r\nTABLE_ERASE1 = str . maketrans(\"\", \"\", ER1)\r\nTABLE_NUMS = str . maketrans('' . join(REPLACMENTS), '' . join(\r\n    str(n) * len(elt) for n, elt in enumerate(REPLACMENTS, 1)))\r\nTABLE_ERASE2 = str . maketrans(\"\", \"\", ER2)\r\n\r\n\r\ndef formatSoundex(w):\r\n    s = w[0] * (w[0] in ER1 + ER2) + re . sub(r'(\\d)\\1*', r'\\1',\r\n                                              w . translate(TABLE_ERASE1). translate(TABLE_NUMS)). translate(TABLE_ERASE2)\r\n    return ((w[0] if s[0]. isdigit() else s[0]) + s[1:] + \"000\")[: 4]\r\n\r\n    def soundex(name):\r\n    return ' ' . join(formatSoundex(w . upper()) for w in name . split(\" \"))\r\n",
  "590adadea658017d90000039": "def fruit(reels, spins):\r\n    fruits = {\"Wild\": 10, \"Star\": 9, \"Bell\": 8, \"Shell\": 7, \"Seven\": 6,\r\n              \"Cherry\": 5, \"Bar\": 4, \"King\": 3, \"Queen\": 2, \"Jack\": 1}\r\n    spin = sorted(reels[i][spins[i]] for i in range(3))\r\n    matches = len(set(spin))\r\n\r\n    if matches == 1:\r\n    return fruits[spin[0]] * 10\r\n    if matches == 2:\r\n    return fruits[spin[0]] * 2 if spin[2] == \"Wild\" else fruits[spin[1]]\r\n\r\n    return 0\r\n",
  "590bdaa251ab8267b800005b": "def array_center(lst):\r\n    return [i for i in lst if abs(i - sum(lst) * 1.0 / len(lst)) < min(lst)]\r\n",
  "58e8cad9fd89ea0c6c000258": "import re\n\n\ndef kooka_counter(laughing):\n    return len(re . findall(r'(ha)+|(Ha)+', laughing))\n",
  "58e953ace87e856a97000046": "def wdm(talk):\r\n    return ' ' . join(talk . replace('puke', ''). replace('hiccup', ''). split())\r\n",
  "590ba2baf06c49595f0000a0": "from cmath import log as clog\r\n\r\n\r\ndef log(real, imag):\r\n    try:\r\n    lg = clog(complex(real, imag))\r\n    return lg . real, lg . imag\r\n    except ValueError:\r\n    pass\r\n",
  "54c14c1b86b33df1ff000026": "def int_to_negabinary(i):\r\n    ds = []\r\n    while i != 0:\r\n    ds . append(i & 1)\r\n    i = - (i >> 1)\r\n    return '' . join(str(d) for d in reversed(ds)) if ds else '0'\r\n    def negabinary_to_int(s):\r\n    i = 0\r\n    for c in s:\r\n    i = - (i << 1) + int(c)\r\n    return i\r\n",
  "584703d76f6cf6ffc6000275": "def est_subsets(arr):\r\n    return 2 * * len(set(arr)) - 1\r\n",
  "586560a639c5ab3a260000f3": "def rotate(str_):\r\n    return [str_[i + 1:] + str_[: i + 1] for i in range(len(str_))]\r\n",
  "590a7f2be8e86e1240000068": "def strange_code(s, e):\r\n    if s >= e - 1:\r\n    return ''\r\n    n = (e - s) / / 2\r\n    return 'ab' * (n / / 2) + 'a' * (n % 2)\r\n",
  "57f4ccf0ab9a91c3d5000054": "def chmod_calculator(perm):\r\n    perms = {\"r\": 4, \"w\": 2, \"x\": 1}\r\n    value = \"\"\r\n    for permission in [\"user\", \"group\", \"other\"]:\r\n    value += str(sum(perms . get(x, 0) for x in perm . get(permission, \"\")))\r\n\r\n    return value\r\n",
  "5898761a9c700939ee000011": "def corner_circle(r):\r\n    return round(r * 0.171572875, 2)\r\n",
  "5716a4c2794d305f4900156b": "def find_part_max_prod(n):\r\n    if n == 1:\r\n        return [[1], 1]\r\n    q, r = divmod(n, 3)\r\n    if r == 0:\r\n        return [[3] * q, 3 * * q]\r\n    if r == 1:\r\n        return [[4] + [3] * (q - 1), [3] * (q - 1) + [2, 2], 3 * * (q - 1) * 2 * * 2]\r\n    return [[3] * q + [2], 3 * * q * 2]\r\n",
  "585db3e8eec141ce9a00008f": "def reverse_vowels(s):\r\n    v = [c for c in s if c . lower() in 'aeiou']\r\n    return '' . join(v . pop(- 1) if c . lower() in 'aeiou' else c for c in s)\r\n",
  "57d15a03264276aaf000007f": "def roof_fix(new, old):\r\n    return all(patch == ' ' for patch, tile in zip(new, old) if tile in '\\/')\r\n",
  "5878520d52628a092f0002d0": "def string_transformer(s):\r\n    return ' ' . join(s . swapcase(). split(' ')[:: - 1])\r\n",
  "56de82fb9905a1c3e6000b52": "class Phone (object):\r\n\r\n    def __init__(self):\r\n    self . ring = \"\"\r\n    self . screen = \"\"\r\n    self . microphone = \"\"\r\n    def incomingcall(self, number):\r\n    self . name, self . ring = next(\r\n        ((c[\"name\"], c[\"ring\"]) for c in contacts if c[\"number\"] == number), (\"stranger\", \"Di Da Di\"))\r\n    self . screen = f\"Call: { self . name } \\nNumber: { number } \"\r\n    def connect(self):\r\n    self . __init__()\r\n    self . microphone = \"Hello, who is speaking, please?\" if self . name == \"stranger\" else f\"Hello, { self . name } !\"\r\n    def hangup(self):\r\n    self . __init__()\r\n",
  "56b3b9c7a6df24cf8c00000e": "def list_depth(l):\r\n    depths = [1]\r\n    for x in l:\r\n    if isinstance(x, list):\r\n    depths . append(list_depth(x) + 1)\r\n    return max(depths)\r\n",
  "563f960e3c73813942000015": "from string import ascii_uppercase as uppercase\r\n\r\n\r\ndef get_best_word(points, words):\r\n    points = dict(zip(uppercase, points))\r\n\r\n    def score(word): return sum(points[c] for c in word)\r\n\r\n    return words . index(sorted(sorted(words, key=len), key=score, reverse=True)[0])\r\n",
  "564871e795df155582000013": "def fill_gaps(timesheet):\r\n    result = timesheet[:]\r\n    v, i = None, None\r\n    for j, w in enumerate(timesheet):\r\n    if w is not None:\r\n    if w == v:\r\n    for k in range(i + 1, j):\r\n    result[k] = v\r\n    else:\r\n    v = w\r\n    i = j\r\n    return result\r\n",
  "567c26df18e9b1083a000049": "def last_man_standing(n):\r\n    a = list(range(1, n + 1))\r\n    while len(a) > 1:\r\n    a = a[1:: 2][:: - 1]\r\n    return a[0]\r\n",
  "56bc7687e8936faed5000c09": "def deficiently_abundant_amicable_numbers(a, b):\r\n    c, d = map(sumOfDivs, (a, b))\r\n    return f' { kind ( a , c )} { kind ( b , d ) } { \"not \" * ( a != d or b != c or a == b ) } amicable'\r\n\r\n    def kind(\r\n        n, sD): return 'abundant' if sD > n else 'perfect' if sD == n else 'deficient'\r\n\r\n    def sumOfDivs(n): return sum(\r\n        d for d in range(1, int(n / 2 + 1)) if not n % d)\r\n",
  "56c0ca8c6d88fdb61b000f06": "def next_version(version):\r\n    ns = version . split('.')\r\n    i = len(ns) - 1\r\n    while i > 0 and ns[i] == '9':\r\n    ns[i] = '0'\r\n    i -= 1\r\n    ns[i] = str(int(ns[i]) + 1)\r\n    return '.' . join(ns)\r\n",
  "56d082c24f60457198000e77": "from string import ascii_uppercase as u\r\n\r\n\r\ndef get_column_title(n):\r\n    assert isinstance(n, int) and n > 0\r\n    col = []\r\n    while n:\r\n    n, r = divmod(n - 1, 26)\r\n    col . append(u[r])\r\n    return '' . join(reversed(col))\r\n",
  "56eb16655250549e4b0013f4": "from calendar import weekday\r\nweek = ['Monday', 'Tuesday', 'Wednesday',\r\n        'Thursday', 'Friday', 'Saturday', 'Sunday']\r\n\r\n\r\ndef most_frequent_days(year):\r\n    beg = weekday(year, 1, 1)\r\n    end = weekday(year, 12, 31)\r\n    if beg == end:\r\n    return [week[beg]]\r\n    else:\r\n    if beg < end:\r\n    return [week[beg], week[end]]\r\n    else:\r\n    return [week[end], week[beg]]\r\n",
  "56be4affc5dc03b84b001d2d": "def get_reversed_color(hex_color):\r\n    if hex_color . startswith('#') or len(hex_color) > 6:\r\n    raise ValueError\r\n    return \"#%06X\" % (16777215 - int('0' + hex_color, 16))\r\n",
  "56a127b14d9687bba200004d": "from scipy . misc import comb\n\n\ndef number_of_routes(m, n):\n    return comb(m + n, min(m, n), exact=True)\n",
  "56743fd3a12043ffbb000049": "BAD_INPUT = 'I do not understand the input'\r\nKNOWN_WORD = 'I already know the word %s'\r\nNEW_WORD = 'Thank you for teaching me %s'\r\n\r\n\r\nclass Robot (object):\r\n\r\n    def __init__(self):\r\n    self . vocabulary = set(\r\n        word . lower()\r\n        for message in (BAD_INPUT, KNOWN_WORD, NEW_WORD)\r\n        for word in message . split()\r\n        if word != '%s')\r\n\r\n    def learn_word(self, word):\r\n    if not word . isalpha():\r\n    return BAD_INPUT\r\n    lc_word = word . lower()\r\n    if lc_word in self . vocabulary:\r\n    return KNOWN_WORD % word\r\n    self . vocabulary . add(lc_word)\r\n    return NEW_WORD % word\r\n",
  "56648a2e2c464b8c030000bf": "def mark_spot(n):\r\n    if isinstance(n, int) and n % 2 != 0 and n > 0:\r\n    top = [' ' * i * 2 + 'X' + ' ' *\r\n           (n * 2 - 3 - 4 * i) + 'X' for i in range(n / 2)]\r\n    middle = [' ' * (n - 1) + 'X']\r\n    bottom = top[:: - 1]\r\n    return '\\n' . join(top + middle + bottom) + '\\n'\r\n    else:\r\n    return '?'\r\n",
  "565225029bcf176687000022": "def is_narcissistic(* l):\r\n    try:\r\n        return all(sum(int(i) * * len(str(n)) for i in str(n)) == n for n in map(int, l))\r\n    except:\r\n        return False\r\n",
  "563ce9b8b91d25a5750000b6": "from heapq import nsmallest\r\n\r\n\r\ndef remove_smallest(n, arr):\r\n    if n <= 0:\r\n        return arr\r\n    a = arr[:]\r\n    for i in nsmallest(n, a):\r\n    a . remove(i)\r\n    return a\r\n",
  "5629b94e34e04f8fb200008e": "def sflpf_data(val, nMax):\r\n    r = []\r\n    for i in range(2, nMax):\r\n    fac = primef(i)\r\n    if len(fac) > 1 and fac[0] + fac . pop() == val:\r\n        r . append(i)\r\n    return r\r\n    def primef(n):\r\n    i = 2\r\n    f = []\r\n    while i * i <= n:\r\n    if n % i:\r\n        i += 1\r\n    else:\r\n        n / /= i\r\n        f . append(i)\r\n    if n > 1:\r\n        f . append(n)\r\n    return f\r\n",
  "560985a07add63e1a1000019": "def given_nth_value(lst, k, mode):\r\n    s = set(lst)\r\n    if not isinstance(k, int) or k < 0:\r\n    return \"Incorrect value for k\"\r\n    if not isinstance(mode, str) or mode . lower() not in (\"max\", \"min\"):\r\n    return \"Valid entries: 'max' or 'min'\"\r\n    if not s or any(not isinstance(e, int) for e in s):\r\n    return \"Invalid entry list\" if s else \"No values in the array\"\r\n    if k >= len(s):\r\n    return \"No way\"\r\n    lst = sorted(s)\r\n    return lst[k - 1] if mode == \"min\" else lst[- k]\r\n",
  "55f5efd21ad2b48895000040": "def check(num, max_sum):\r\n    l = [int(i) for i in str(num)]\r\n    for i in range(0, len(l) - 3):\r\n    if sum(l[i: i + 4]) > max_sum:\r\n        return False\r\n    return True\r\n    def max_sumDig(nMax, maxSum):\r\n    found = [i for i in range(1000, nMax + 1) if check(i, maxSum)]\r\n    mean = sum(found) / float(len(found))\r\n    for i in range(len(found) - 1):\r\n    if abs(mean - found[i]) < abs(mean - found[i + 1]):\r\n    mean = found[i]\r\n    break\r\n    return [len(found), mean, sum(found)]\r\n",
  "55ffb44050558fdb200000a4": "def sumDig_nthTerm(initVal, patternL, nthTerm):\r\n    cycles, position = divmod(nthTerm - 1, len(patternL))\r\n    result = initVal + sum(patternL) * cycles + sum(patternL[: position])\r\n    return sum(map(int, str(result)))\r\n",
  "5626ec066d35051d4500009e": "def mult_primefactor_sum(a, b):\r\n    s = []\r\n    for i in range(a, b + 1):\r\n    r = factorize_add(i)\r\n    if r != i and i % r == 0:\r\n        s . append(i)\r\n    return s\r\n    def factorize_add(num):\r\n    if num < 4:\r\n        return num\r\n    d = 2\r\n    p = 0\r\n    while d < num * * .5 + 1:\r\n    while not num % d:\r\n        p += d\r\n        num /= d\r\n    d += 1 if d == 2 else 2\r\n    return p if num == 1 else p + num\r\n",
  "55da2a419f8361df45000025": "def calculate_improved(students):\r\n    students = ({\r\n        \"name\": s[\"name\"],\r\n        \"improvement\": round(\r\n            100.0 * (s[\"marks\"][- 1] or 0) / (s[\"marks\"][0] or 0) - 100.0)\r\n        if s[\"marks\"][0] else 0\r\n    } for s in students)\r\n    return sorted(students, key=lambda s: (- s[\"improvement\"], s[\"name\"]))\r\n",
  "55ec80d40d5de30631000025": "from math import log\r\n\r\n\r\ndef decompose(n):\r\n    i = 2\r\n    result = []\r\n    while n >= i * i:\r\n    k = int(log(n, i))\r\n    result . append(k)\r\n    n -= i * * k\r\n    i += 1\r\n    return [result, n]\r\n",
  "558f0553803bc3c4720000af": "def find_dup(arr):\r\n    seen = set()\r\n    for a in arr:\r\n    if a in seen:\r\n    return a\r\n    seen . add(a)\r\n",
  "55e785dfcb59864f200000d9": "from gmpy2 import next_prime as np\nfrom math import prod\n\n\ndef count_specMult(n, t):\n    a, b = 2, []\n    while n > 0:\n    b, a, n = b + [a], np(a), n - 1\n    return t / / prod(b)\n",
  "55f1614853ddee8bd4000014": "def count_pairs_int(d, m):\r\n    return sum(1 for i in range(1, m - d) if divisors(i) == divisors(i + d))\r\n\r\n    def divisors(n):\r\n    return sum(1 + (n / / k != k) for k in range(1, int(n * * 0.5) + 1) if n % k == 0)\r\n",
  "55fd4919ce2a1d7c0d0000f3": "def has_two_cube_sums(n):\r\n    sum = []\r\n    power = int(n * * (1 / 3.0)) + 1\r\n    for i in xrange(1, power):\r\n    for x in xrange(1, power):\r\n    if i == x:\r\n    continue\r\n    tmp = i * * 3 + x * * 3\r\n    if tmp > n:\r\n    break\r\n    if tmp == n:\r\n    if len(sum) == 2:\r\n    return True\r\n    sum . append([i, x])\r\n    return False\r\n",
  "55f95dbb350b7b1239000030": "from collections import defaultdict, Counter\r\n\r\n\r\ndef count_sel(nums):\r\n    cnt = Counter(nums)\r\n    d = defaultdict(list)\r\n    total = 0\r\n    unique = 0\r\n    for k, v in cnt . iteritems():\r\n    d[v]. append(k)\r\n    total += v\r\n    unique += 1\r\n    maximum = max(d)\r\n    return [total, unique, len(d[1]), [sorted(d[maximum]), maximum]]\r\n",
  "55d8aa568dec9fb9e200004a": "from itertools import pairwise\n\n\ndef sel_number(n: int, d: int) - > int:\n    return sum(all(0 < b - a <= d for a, b in pairwise(map(int, str(i)))) for i in range(12, n + 1))\n",
  "55de3f83e92c3e521a00002a": "def a(n):\r\n    \"\"\" \r\n    \"\"\"\r\n    if n % 2 != 0:\r\n    n = n - 1\r\n    if n < 4:\r\n    return ''\r\n    side = \" \" * (n - 1)\r\n    li = [side + \"A\" + side]\r\n    for i in range(1, n):\r\n    side = side[1:]\r\n    middle = \"A \" * (i - 1) if i == (n / 2) else \" \" * (i - 1)\r\n    li . append(side + \"A \" + middle + \"A\" + side)\r\n    return \"\\n\" . join(li)\r\n",
  "559d34cb2e65e765b90000f0": "from os . path import commonprefix\n\n\ndef string_suffix(s):\n    return sum(len(commonprefix([s, s[i:]])) for i in range(len(s)))\n",
  "582dcda401f9ccb4f0000025": "from gmpy2 import next_prime\n\n\ndef f(n):\n    first = 2\n    result = count = 1\n    while first < n:\n    temp = sum(i in '02468' for i in str(first))\n    if temp >= count:\n    count = temp\n    result = first\n    first = next_prime(first)\n    return result\n",
  "55c9172ee4bb15af9000005d": "def count_odd_pentaFib(n):\r\n    return 2 * (n / / 6) + [0, 1, 2, 2, 2, 2][n % 6] - (n >= 2)\r\n",
  "55d1b0782aa1152115000037": "bin2hex = {\"0000\": \"0\", \"0001\": \"1\", \"0010\": \"2\", \"0011\": \"3\",\r\n           \"0100\": \"4\", \"0101\": \"5\", \"0110\": \"6\", \"0111\": \"7\",\r\n           \"1000\": \"8\", \"1001\": \"9\", \"1010\": \"a\", \"1011\": \"b\",\r\n           \"1100\": \"c\", \"1101\": \"d\", \"1110\": \"e\", \"1111\": \"f\"}\r\nhex2bin = {v: k for k, v in bin2hex . items()}\r\n\r\n\r\ndef bin_to_hex(s, res=\"\"):\r\n    s = \"0\" * (4 - len(s) % 4) + s\r\n    while s:\r\n    res += bin2hex[s[: 4]]\r\n    s = s[4:]\r\n    return res . lstrip(\"0\") or \"0\"\r\n    def hex_to_bin(s, res=\"\"):\r\n    while s:\r\n    res += hex2bin[s[0]. lower()]\r\n    s = s[1:]\r\n    return res . lstrip(\"0\") or \"0\"\r\n",
  "55c11989e13716e35f000013": "def binary_string_to_int(string):\r\n    return sum((d == '1') * 2 * * i for i, d in enumerate(string[:: - 1]))\r\n\r\n    def add(a, b):\r\n    return '{:b}' . format(binary_string_to_int(a) + binary_string_to_int(b))\r\n",
  "55ba95a17970ff3e80000064": "# Harmonic mean = count/sum(1/divisors)\n# can be simplified to\n# Harmonic Mean = count*n/sum(divisors)\n# this avoids the many division operations in the sum\ndef is_ore(n):\n    sum = 0\n    count = 0\n    for divisor in range(1, n + 1):\n    if n % divisor == 0:\n    count += 1\n    sum += divisor\n    if n * count % sum == 0:\n    return True\n    return False\n",
  "5539fecef69c483c5a000015": "def backwardsPrime(start, stop):\r\n    primes = []\r\n    for n in range(start, stop + 1):\r\n    if n not in primes and is_prime(n) and is_prime(reverse(n)) and n != reverse(n):\r\n    primes . append(n)\r\n    if start <= reverse(n) <= stop:\r\n    primes . append(reverse(n))\r\n    return sorted(primes)\r\n\r\n    def is_prime(n):\r\n    for i in range(2, int(n * * (0.5)) + 1):\r\n    if n % i == 0:\r\n    return False\r\n    return True\r\n    def reverse(n):\r\n    return int('' . join(str(n)[:: - 1]))\r\n",
  "550cb646b9e7b565d600048a": "def roundRobin(jobs, slice, index):\r\n    total_cc = 0\r\n    while True:\r\n    for idx in range(len(jobs)):\r\n    cc = min(jobs[idx], slice)\r\n    jobs[idx] -= cc\r\n    total_cc += cc\r\n    if idx == index and jobs[idx] == 0:\r\n    return total_cc\r\n",
  "55b019265ff4eeef8c000039": "from operator import or_, xor\nfrom functools import reduce\n\n\ndef disjunction(operands, is_exclusive):\n    return reduce([or_, xor][is_exclusive], operands)\n",
  "55b2549a781b5336c0000103": "from math import log\r\n\r\n\r\ndef compare_powers(* numbers):\r\n    a, b = map(lambda n: n[1] * log(n[0]), numbers)\r\n    return (a < b) - (a > b)\r\n",
  "55b22ef242ad87345c0000b2": "from math import comb as choose\n",
  "55a7de09273f6652b200002e": "def lucasnum(n):\n    a = 2\n    b = 1\n    flip = n < 0 and n % 2 != 0\n    for _ in range(abs(n)):\n    a, b = b, a + b\n    return - a if flip else a\n",
  "55a5d97d81a010881800004a": "def toexuto(text):\r\n    output = ''\r\n    for char in text:\r\n    output += char\r\n    for item in 'abcd efgh ijklmn opqrst uvwxyz' . split():\r\n    if char . lower() in item[1:]:\r\n    output += item[0]\r\n    return output\r\n",
  "559e708e72d342b0c900007b": "from functools import reduce\nfrom operator import add, mul\nfrom itertools import cycle\n\n\ndef even_odd(arr):\n    ops = cycle((mul, add))\n    return reduce(lambda x, y: next(ops)(x, y), arr)\n",
  "558ffec0f0584f24250000a0": "def parse_character(char):\r\n    if 65 <= ord(char) <= 90:\r\n    return chr(155 - ord(char))\r\n    elif 97 <= ord(char) <= 122:\r\n    return chr(219 - ord(char))\r\n    else:\r\n    return char\r\n    def decode(string_):\r\n    if not isinstance(string_, str):\r\n    return \"Input is not a string\"\r\n    return \"\" . join(map(parse_character, string_))\r\n",
  "559aa1295f5c38fd7b0000ac": "from math import factorial\n\n\ndef routes(n):\n    return n > 0 and factorial(2 * n) / / factorial(n) * * 2\n",
  "556025c8710009fc2d000011": "trans = str . maketrans(\"abdeiknoprtuvwxy\", \"\u03b1\u03b2\u03b4\u03b5\u03b9\u03ba\u03b7\u03b8\u03c1\u03c0\u03c4\u03bc\u03c5\u03c9\u03c7\u03b3\")\r\n\r\n\r\ndef gr33k_l33t(string):\r\n    return string . lower(). translate(trans)\r\n",
  "555624b601231dc7a400017a": "def josephus_survivor(n, k):\n    v = 0\n    for i in range(1, n + 1):\n        v = (v + k) % i\n    return v + 1\n",
  "5550d638a99ddb113e0000a2": "def josephus(xs, k):\r\n    i, ys = 0, []\r\n    while len(xs) > 0:\r\n    i = (i + k - 1) % len(xs)\r\n    ys . append(xs . pop(i))\r\n    return ys\r\n",
  "590300eb378a9282ba000095": "class Game ():\r\n\r\n    AROUND = {(- 1, 0), (1, 0), (0, - 1), (0, 1)}\r\n\r\n    def __init__(self, board):\r\n    self . toCheck = {(x, y) for x in range(len(board))\r\n                      for y in range(len(board)) if board[x][y] == 1}\r\n\r\n    def play(self):\r\n    c = 0\r\n    while self . toCheck:\r\n    newInLeap = {self . toCheck . pop()}\r\n    while newInLeap:\r\n    newInLeap = {(x + dx, y + dy) for x, y in newInLeap for dx,\r\n                 dy in self . AROUND if (x + dx, y + dy) in self . toCheck}\r\n    self . toCheck -= newInLeap\r\n    c += 1\r\n    return c\r\n",
  "590818ddffa0da26ad00009b": "import numpy as np\n\n\ndef construct_submatrix(m, rs, cs):\n    return np . delete(np . delete(m, rs, 0), cs, 1). tolist()\n",
  "5906436806d25f846400009b": "def x(n):\r\n    ret = [['\u25a1' for _ in range(n)] for _ in range(n)]\r\n    for i in range(len(ret)):\r\n    ret[i][i] = '\u25a0'\r\n    ret[i][- 1 - i] = '\u25a0'\r\n    return '\\n' . join('' . join(row) for row in ret)\r\n",
  "590572de63bfadf5d4000027": "from collections import Counter\r\n\r\n\r\ndef countour_mode(m, a, b):\r\n    v = m[0] + [r[- 1] for r in m[1:]] + m[- 1][: - 1] + [r[0]\r\n                                                          for r in m[1: - 1]]\r\n    c = Counter([e for e in v if a <= e <= b])\r\n    mx = max(c . values())\r\n    return [mx, sorted([k for k in c if c[k] == mx])] if len(set(c . values())) > 1 else []\r\n",
  "55327e12f5363713200000e4": "regex = \"^(jo[a-zA-Z]* (jo[a-zA-Z]*|[a-zA-Z]*jo))|(gio[a-zA-Z]* gio[a-zA-Z]*)\"\r\n\r\n\r\ndef is_jojo(name):\r\n    spl = name . split()\r\n    return len(spl) > 1 and (spl[0][0: 2] == 'Jo' and (spl[1][- 2:] == 'jo' or spl[1][0: 2] == 'Jo')) or (spl[0][0: 3] == 'Gio' and spl[1][0: 3] == 'Gio')\r\n",
  "558ecd6398ae4ed3350000c2": "# Date parsing\nlogparser = (\"(\\d{4}-\\d{2}-\\d{2}\\s+\\d{2}:\\d{2}:\\d{2},\\d{3})\\s+\"\n             # Error level\n             \"(ERROR|INFO|DEBUG)\\s+\"\n             # User, Function, Subfunction\n             \"\\[(\\w+):(\\w+)(?::(\\w+))?\\]\\s+\"\n             # Error message\n             \"(.+)\")\n",
  "55830eec3e6b6c44ff000040": "def oddity(n):\r\n    # your code here\r\n    return 'odd' if n * * 0.5 == int(n * * 0.5) else 'even'\r\n",
  "557e8a141ca1f4caa70000a6": "# solution based on the fact that triangle numbers are defined by forumla n(n+1)/2\n# so if we have integer n which can fit into formula for our number, then number is triangle\n# We simply need to solve equation like ax^2+bx+c = 0 and check if answer is integer\n# 25 ms for 34 tests\nfrom math import sqrt\n\n\ndef is_triangle_number(number):\n    if type(number) is not int:\n    return False\n    n = (- 1 + sqrt(1 + 8 * number)) / 2.0\n    if n . is_integer():\n    return True\n    return False\n",
  "55679d644c58e2df2a00009c": "def is_balanced(source, caps):\r\n    source = filter(lambda x: x in caps, source)\r\n    caps = dict(zip(caps[:: 2], caps[1:: 2]))\r\n    stack = []\r\n    for cap in source:\r\n    if stack and cap == caps . get(stack[- 1], ''):\r\n        stack . pop()\r\n    else:\r\n        stack . append(cap)\r\n    return not stack\r\n",
  "556eed2836b302917b0000a3": "def solution(n, m): return sum(a + max(n - a * a, 0) * * 2 == m for a in range(0, m))\n",
  "55738b0cffd95756c3000056": "def optimum_location(students, locations):\r\n    m = min(locations, key=lambda loc: sum(\r\n        abs(loc['x'] - s[0]) + abs(loc['y'] - s[1]) for s in students))\r\n    return \"The best location is number %d with the coordinates x = %d and y = %d\" % (m['id'], m['x'], m['y'])\r\n",
  "556d120c7c58dacb9100008b": "def ipv4__parser(addr, mask):\r\n    return tuple(\".\" . join(str(n) for n in a) for a in zip(* (((a & m), (a & ~ m)) for a, m in zip((int(n) for n in addr . split(\".\")), (int(n) for n in mask . split(\".\"))))))\r\n",
  "55491e9e50f2fc92f3000074": "def ride(group, comet):\r\n    n1 = 1\r\n    n2 = 1\r\n    for x in group:\r\n    n1 *= ord(x . lower()) - 96\r\n    for x in comet:\r\n    n2 *= ord(x . lower()) - 96\r\n    if n1 % 47 == n2 % 47:\r\n    return \"GO\"\r\n    else:\r\n    return \"STAY\"\r\n",
  "55251c0d2142d7b4ab000aef": "def numberOfSteps(steps, m):\r\n    if (steps < m):\r\n    return - 1\r\n    if (steps % 2 == 0 and (steps / 2) % m == 0):\r\n    return (steps / 2)\r\n\r\n    return (steps / 2) + m - ((steps / 2) % m)\r\n",
  "551186edce486caa61000f5c": "def count_squares(n):\r\n    return n * (n + 1) * (2 * n + 1) / / 6\r\n",
  "54cf4fc26b85dc27bf000a6b": "from fractions import Fraction\nFraction . to_decimal = lambda f: float(f . numerator) / f . denominator\nsimple_fraction = Fraction . __str__\n\n\ndef mixed_fraction(f):\n    n, d, s = abs(f . numerator), f . denominator, simple_fraction(f)\n    return s . replace(str(n), '%d %d' % divmod(n, d), 1) if 1 < d < n else s\n    Fraction . __str__ = mixed_fraction\n",
  "54f0d905d49112f3a300055a": "def get_hints(answer, guess):\r\n    black = 0\r\n    white = 0\r\n    for number in set(guess):\r\n    white += min(answer . count(number), guess . count(number))\r\n\r\n    for i, number in enumerate(guess):\r\n    if number == answer[i]:\r\n    white -= 1\r\n    black += 1\r\n    return {\"black\": black, \"white\": white}\r\n",
  "54f4b6e7576d7af70900092b": "def diff(poly):\r\n    return [poly[i] * (len(poly) - 1 - i) for i in range(len(poly) - 1)]\r\n",
  "54f8b0c7a58bce9db6000dc4": "def rotate(arr, n):\r\n    # ...\r\n    n = n % len(arr)\r\n    return arr[- n:] + arr[: - n]\r\n",
  "57675f3dedc6f728ee000256": "def tower_builder(n_floors, block_size):\r\n    w, h = block_size\r\n    filled_block = '*' * w\r\n    empty_block = ' ' * w\r\n    tower = []\r\n    for n in range(1, n_floors + 1):\r\n    for _ in range(h):\r\n    tower . append(empty_block * (n_floors - n) + filled_block *\r\n                   (2 * n - 1) + empty_block * (n_floors - n))\r\n    return tower\r\n",
  "536a155256eb459b8700077e": "def createSpiral(n):\r\n    if not isinstance(n, int):\r\n        return []\r\n    d = iter(range(n * * 2))\r\n    a = r = [[[x, y] for y in range(n)] for x in range(n)]\r\n    while a:\r\n    for x, y in a[0]:\r\n        r[x][y] = next(d) + 1\r\n    a = list(zip(* a[1:]))[:: - 1]\r\n    return r\r\n",
  "54c2fc0552791928c9000517": "def f(n, m):\r\n    re, c = divmod(n, m)\r\n    return m * (m - 1) / 2 * re + (c + 1) * c / 2\r\n",
  "54bb6ee72c4715684d0008f9": "def summ(number, d):\r\n    n = (number - 1) / / d\r\n    return n * (n + 1) * d / / 2\r\n    def solution(number):\r\n    return summ(number, 3) + summ(number, 5) - summ(number, 15)\r\n",
  "5491689aff74b9b292000334": "def f(s):\r\n    m = __import__('re'). match(r'^(.+?)\\1*$', s)\r\n    return (m . group(1), len(s) / len(m . group(1)))\r\n",
  "549013f6f71e7786aa0002a8": "class magicZ ():\r\n    def __init__(self):\r\n    self . fib = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\r\n\r\n    def gueZZ(self, indexes=[]):\r\n    return sum(self . fib[i] for i in set(indexes))\r\n\r\n    def get_magicZ_index(self, n):\r\n    indexes = []\r\n    for i, f in list(enumerate(self . fib))[:: - 1]:\r\n    if n >= f:\r\n    n -= f\r\n    indexes . append(i)\r\n    return indexes[:: - 1]\r\n",
  "546dba39fa8da224e8000467": "from itertools import groupby\n\n\ndef run_length_encoding(s):\n    return [[sum(1 for _ in g), c] for c, g in groupby(s)]\n",
  "546c7f89bed2e12fb300056f": "import re\r\n\r\n\r\ndef find(needle, haystack):\r\n    matched = re . search(re . escape(needle). replace('_', '.'), haystack)\r\n    if matched:\r\n    return matched . start()\r\n    return - 1\r\n",
  "545f05676b42a0a195000d95": "def ranks(a):\r\n    sortA = sorted(a, reverse=True)\r\n    return [sortA . index(s) + 1 for s in a]\r\n",
  "545c4f7682e55d3c6e0011a1": "def find_ball(scales, n):\r\n    select = list(range(n))\r\n    while len(select) > 1:\r\n    left, right, unused = select[:: 3], select[1:: 3], select[2:: 3]\r\n    if len(select) % 3 == 1:\r\n        unused . append(left . pop())\r\n    select = [left, unused, right][scales . get_weight(left, right) + 1]\r\n    return select . pop()\r\n",
  "5906a218dfeb0dbb52000005": "def hidden(n): return \"\" . join(\"oblietadnm\" [int(d)] for d in str(n))\n",
  "544034f426bc6adda200000e": "def find_ball(scales):\r\n    part = [[None, 0, 1], [2, 3, 4], [5, 6, 7]]\r\n    res1 = scales . get_weight(part[- 1], part[1])\r\n    res2 = scales . get_weight([part[res1][- 1]], [part[res1][1]])\r\n    return part[res1][res2]\r\n",
  "54404a06cf36258b08000364": "def find_ball(scales):\r\n    balls = [0, 1, 2, 3, 4, 5, 6, 7]\r\n\r\n    while len(balls) > 1:\r\n    l, r = balls[: len(balls) / / 2], balls[len(balls) / / 2:]\r\n\r\n    w = scales . get_weight(l, r)\r\n\r\n    balls = l if w < 0 else r\r\n    return balls[0]\r\n",
  "5457ea88aed18536fc000a2c": "def min_dot(a, b):\r\n    return sum(x * y for (x, y) in zip(sorted(a), sorted(b, reverse=True)))\r\n",
  "543abbc35f0461d28f000c11": "def house_of_cards(n):\r\n    assert n > 0\r\n    return (n + 1) * (3 * n + 4) / / 2\r\n",
  "53837b8c94c170e55f000811": "from collections import Counter\r\nscores = {\r\n    1: [100, 200, 1000, 2000, 3000, 4000],\r\n    2: [0, 0, 200, 400, 600, 800],\r\n    3: [0, 0, 300, 600, 900, 1200],\r\n    4: [0, 0, 400, 800, 1200, 1600],\r\n    5: [50, 100, 500, 1000, 1500, 2000],\r\n    6: [0, 0, 600, 1200, 1800, 2400]\r\n}\r\n\r\n\r\ndef get_score(dice):\r\n    dice = dict(Counter(dice))\r\n    dice_len = len(dice)\r\n    if dice_len == 6:\r\n    return 1000\r\n    if dice_len == 3 and all([x == 2 for x in dice . values()]):\r\n    return 750\r\n    return sum([scores[x][y - 1] for x, y in dice . items()]) or 'Zonk'\r\n",
  "57b840b2a6fdc7be02000123": "def circum_curvat(points):\n    A, B, C = [complex(* p) for p in points]\n    BC, CA, AB = B - C, C - A, A - B\n    D = 2. * (A . real * BC + B . real * CA + C . real * AB). imag\n    if not D:\n        return D, D\n    U = (abs(A) * * 2 * BC + abs(B) * * 2 * CA + abs(C) * * 2 * AB) / D\n    radius = (abs(BC) * abs(CA) * abs(AB)) / abs(D)\n    return - 1j * U, radius\n    def count_circles(circles, point):\n    return sum(abs(complex(* point) - center) < radius\n               for center, radius in map(circum_curvat, circles))\n",
  "577bcb5dd48e5180030004de": "def min_unfairness(arr, k):\r\n    arr = sorted(arr)\r\n    return min(b - a for a, b in zip(arr, arr[k - 1:])) if arr and k else 0\r\n",
  "544bdc2ec29fb3456e00064a": "def service(score):\r\n    turn = sum(int(i) for i in score . split(\":\"))\r\n    condition = (turn % 10 < 5) if turn < 40 else (turn % 4 < 2)\r\n    return \"first\" if condition else \"second\"\r\n",
  "5442e4fc7fc447653a0000d5": "def greatest_distance(arr):\r\n    return max(i - arr . index(x) for i, x in enumerate(arr))\r\n",
  "5443b8857fc4473cb90008e4": "def unusual_sort(array):\r\n    return sorted(array, key=lambda x: (str(x). isdigit(), str(x), - isinstance(x, int)))\r\n",
  "543ddf69386034670d000c7d": "from math import radians\r\n\r\n\r\ndef hand_angle(hours, minutes):\r\n    angle = abs(hours * 30 - 11 * minutes / 2)\r\n    return radians(min(angle, 360 - angle))\r\n",
  "537400e773076324ab000262": "def group_anagrams(words):\r\n    groups = dict()\r\n    for word in words:\r\n    key = tuple(sorted(word))\r\n    try:\r\n    groups[key]. append(word)\r\n    except:\r\n    groups[key] = [word]\r\n    return [v for v in groups . values()]\r\n",
  "53ea3ad17b5dfe1946000278": "def sierpinskiRows(n):\r\n    if not n:\r\n    return ['L']\r\n    last = sierpinskiRows(n - 1)\r\n    return last + [row . ljust(2 * * n) + row for row in last]\r\n\r\n    def sierpinski(n):\r\n    \"\"\"Returns a string containing the nth iteration of the Sierpinsky Gasket fractal\"\"\"\r\n    return '\\n' . join(sierpinskiRows(n))\r\n",
  "542ea700734f7daff80007fc": "def processes(start, end, processes):\r\n    '''Dijkstra's shortest path algorithm'''\r\n    q = [(start, [])]\r\n    visited = set()\r\n\r\n    while q:\r\n    s, path = q . pop(0)\r\n    if s == end:\r\n        return path\r\n    visited . add(s)\r\n    for p in filter(lambda x: x[1] == s, processes):\r\n    if not p[2] in visited:\r\n    q . append((p[2], path + [p[0]]))\r\n    return []\r\n",
  "5416d02d932c1df3a3000492": "def aks_test(p):\r\n    coeff = 1\r\n    for i in xrange(p / 2):\r\n    coeff = coeff * (p - i) / (i + 1)\r\n    if coeff % p:\r\n    return False\r\n    return p > 1\r\n",
  "5416ce834c2460b4d300042d": "def bin2gray(bits):\r\n    bits . reverse()\r\n    return list(reversed([x if i >= len(bits) - 1 or bits[i + 1] == 0 else 1 - x for i, x in enumerate(bits)]))\r\n\r\n    def gray2bin(bits):\r\n    for i, x in enumerate(bits):\r\n    if i > 0 and bits[i - 1] != 0:\r\n        bits[i] = 1 - x\r\n    return bits\r\n",
  "53ffbba24e9e1408ee0008fd": "def knapsack(capacity, items):\r\n    ratios = [float(item[1]) / item[0] for item in items]\r\n    collection = [0] * len(items)\r\n    space = capacity\r\n    while any(ratios):\r\n    best_index = ratios . index(max(ratios))\r\n    if items[best_index][0] <= space:\r\n    collection[best_index] += 1\r\n    space -= items[best_index][0]\r\n    else:\r\n    ratios[best_index] = 0\r\n    return collection\r\n",
  "53e248c9af0d91a45b000e71": "import os\r\n\r\n\r\ndef mkdirp(* directories):\r\n    \"\"\"Recursively create all directories as necessary\"\"\"\r\n    try:\r\n    os . makedirs(os . path . join(* directories))\r\n    except OSError:\r\n    pass\r\n",
  "53988ee02c2414dbad000baa": "def to_pretty(seconds):\n    if seconds == 0:\n        return \"just now\"\n    elif seconds == 1:\n        return \"a second ago\"\n    elif seconds == 60:\n        return f\"a minute ago\"  # 59\n    elif seconds == 3600:\n        return f\"an hour ago\"\n    elif seconds == 86400:\n        return f\"a day ago\"\n    elif seconds == 604800:\n        return f\"a week ago\"\n    elif seconds < 60:\n        return f\" { seconds } seconds ago\"  # 59\n    elif seconds < 3600 and seconds > 60:  # mini\n    x = seconds / 60\n    if int(x) == 1:\n        return f\"a minute ago\"\n    return f\" { int ( x )} minutes ago\"\n    elif seconds > 3600 and seconds < 86400:  # hours\n    x = seconds / 3600\n    if int(x) == 1:\n        return f\"an hour ago\"\n    return f\" { int ( x )} hours ago\"\n    elif seconds > 86400 and seconds < 604800:  # days\n    x = seconds / 86400\n    if int(x) == 1:\n        return f\"a day ago\"\n    return f\" { int ( x )} days ago\"\n    elif seconds > 604800:  # weeks\n    x = seconds / 604800\n    if int(x) == 1:\n        return f\"a week ago\"\n    return f\" { int ( x )} weeks ago\"\n",
  "537ba77315ddd92659000fec": "def isprime(n):  # True if n is prime. This is a pretty efficient implementation\r\n    for i in range(2, int(n * * 0.5) + 1):\r\n    if n % i == 0:\r\n    return False\r\n    return True\r\n    def check_goldbach(n):\r\n    if n <= 2:\r\n        return []\r\n    if n % 2:\r\n        return []\r\n\r\n    for i in range(2, n / / 2 + 1):\r\n    if isprime(i) and isprime(n - i):\r\n        return [i, n - i]\r\n\r\n    return []\r\n",
  "5379fdfad08fab63c6000a63": "import re\n\n\ndef compare(a, b):\n    return a if specificity(a) > specificity(b) else b\n    def specificity(s):\n    return [len(re . findall(r, s)) for r in (r'#\\w+', r'\\.\\w+', r'(^| )\\w+')]\n",
  "5416f1b54c24607e4c00069f": "def floyd(f, x0):\r\n\r\n    tortoise = f(x0)\r\n    hare = f(f(x0))\r\n\r\n    while tortoise != hare:\r\n    tortoise = f(tortoise)\r\n    hare = f(f(hare))\r\n\r\n    mu = 0\r\n    tortoise = x0\r\n    while tortoise != hare:\r\n    tortoise = f(tortoise)\r\n    hare = f(hare)\r\n    mu += 1\r\n    lam = 1\r\n    hare = f(tortoise)\r\n\r\n    while tortoise != hare:\r\n    hare = f(hare)\r\n    lam += 1\r\n    return [mu, lam]\r\n",
  "5904be220881cb68be00007d": "def fish(shoal):\n    eaten, size, target = 0, 1, 4\n    for f in sorted(map(int, shoal)):\n    if f > size:\n        break\n    eaten += f\n    if eaten >= target:\n    size += 1\n    target += 4 * size\n    return size\n",
  "584cfd7e2609c8ab4d0000e3": "def flat_rotors(lines_before, lines_after):\r\n    ln = len(ALPHABET)\r\n    def nxt_rotor(wb, wa):\r\n    rot = []\r\n    for lb, la in zip(wb, wa):\r\n    rot . append((ALPHABET . index(la) - ALPHABET . index(lb) - sum(rot)) % ln)\r\n    return rot\r\n    return [nxt_rotor(lnb, lna) for lnb, lna in zip(lines_before, lines_after)]\r\n",
  "562b099becfe844f3800000a": "def inc(x): return all(str(x)[p] <= str(x)[p + 1]\r\n                       for p in range(len(str(x)) - 1))\r\n\r\n\r\ndef dec(x): return all(str(x)[p] >= str(x)[p + 1]\r\n                       for p in range(len(str(x)) - 1))\r\n\r\n\r\ndef bouncy(x): return not (inc(x) or dec(x))\r\n\r\n\r\ndef bouncy_ratio(percent):\r\n    n, bouncy_count = 99, 0\r\n    while bouncy_count < percent * n:\r\n    n += 1\r\n    bouncy_count += bouncy(n)\r\n    return n\r\n",
  "566b490c8b164e03f8000002": "def fight(robot_1, robot_2, tactics):\r\n    attack, defend = (robot_1, robot_2) if robot_1['speed'] >= robot_2['speed'] else (\r\n        robot_2, robot_1)\r\n\r\n    while attack['health'] > 0:\r\n    if attack['tactics']:\r\n    defend['health'] -= tactics[attack['tactics']. pop()]\r\n    elif not defend['tactics']:\r\n    break\r\n    attack, defend = defend, attack\r\n    if attack['health'] == defend['health']:\r\n    return \"The fight was a draw.\"\r\n    return \"{} has won the fight.\" . format((defend if attack['health'] < defend['health'] else attack)['name'])\r\n",
  "562e6df5cf2d3908ad00019e": "def separate_liquids(glass):\r\n    chain = sorted(sum(glass, []), key='HWAO' . index)\r\n    return [[chain . pop() for c in ro] for ro in glass]\r\n",
  "541103f0a0e736c8e40011d5": "def off(n):\r\n    return [i * i for i in range(1, int(n * * 0.5) + 1)]\r\n",
  "540954232a3259755d000039": "from datetime import date\n\n\ndef friday_the_thirteenths(start, end=None):\n    return ' ' . join(f' { m } /13/ { y } ' for y in range(start, 1 + (end or start)) for m in range(1, 13) if date(y, m, 13). weekday() == 4)\n",
  "5365bb5d5d0266cd010009be": "BASE = {\"H\": 50, \"Q\": 25, \"D\": 10, \"N\": 5, \"P\": 1}\r\n\r\n\r\ndef make_change(n):\r\n    r = {}\r\n    for x, y in BASE . items():\r\n    if n >= y:\r\n    r[x], n = divmod(n, y)\r\n    return r\r\n",
  "52dca71390c32d8fb900002b": "def numberToOrdinal(n):\r\n    if not (11 <= n % 100 <= 13):\r\n    if n % 10 == 1:\r\n    return f' { n } st'\r\n    elif n % 10 == 2:\r\n    return f' { n } nd'\r\n    elif n % 10 == 3:\r\n    return f' { n } rd'\r\n    return f' { n } th' if n else '0'\r\n",
  "578e07d590f2bb8d3300001d": "from collections import Counter\r\n\r\n\r\ndef word_square(ls):\r\n    n = int(len(ls) * * 0.5)\r\n    return n * n == len(ls) and sum(i % 2 for i in Counter(ls). values()) <= n\r\n",
  "55aa92a66f9adfb2da00009a": "from re import sub\n\n\ndef reversi_row(moves):\n    current = '.' * 8\n    for i, x in enumerate(moves):\n    c1, c2 = \"Ox\" if i & 1 else \"xO\"\n    left = sub(r\"(?<={}){}+$\" . format(c1, c2),\n               lambda r: c1 * len(r . group()), current[: x])\n    right = sub(r\"^{}+(?={})\" . format(c2, c1), lambda r: c1 *\n                len(r . group()), current[x + 1:])\n    current = left + c1 + right\n    return current . replace('x', '*')\n",
  "5581e52ac76ffdea700000c1": "def rule30(a, n):\r\n    for _ in range(n):\r\n    a = [int(0 < 4 * x + 2 * y + z < 5) for x, y, z in\r\n         zip([0, 0] + a, [0] + a + [0], a + [0, 0])]\r\n    return a\r\n",
  "52cd0d600707d0abcd0003eb": "def minimum_sum(values, n):\r\n    '''sum the n smallest integers in the array values (not necessarily ordered)'''\r\n    return sum(sorted(values)[: n])\r\n\r\n    def maximum_sum(values, n):\r\n    '''sum the n largest integers in the array values (not necessarily ordered)'''\r\n    return sum(sorted(values, reverse=True)[: n])\r\n",
  "538ae2eb7a4ba8c99b000439": "import re\n\n\ndef autocorrect(input):\n    return re . sub(r'(?i)\\b(u|you+)\\b', \"your sister\", input)\n",
  "536e9a7973130a06eb000e9f": "import math\r\neffectiveness = {\r\n    \"electric\": {\r\n        \"electric\": 0.5,\r\n        \"fire\": 1,\r\n        \"grass\": 1,\r\n        \"water\": 2\r\n    },\r\n    \"fire\": {\r\n        \"electric\": 1,\r\n        \"fire\": 0.5,\r\n        \"grass\": 2,\r\n        \"water\": 0.5\r\n    },\r\n    \"grass\": {\r\n        \"electric\": 1,\r\n        \"fire\": 0.5,\r\n        \"grass\": 0.5,\r\n        \"water\": 2\r\n    },\r\n    \"water\": {\r\n        \"electric\": 0.5,\r\n        \"fire\": 2,\r\n        \"grass\": 0.5,\r\n        \"water\": 0.5\r\n    }\r\n}\r\n\r\n\r\ndef calculate_damage(your_type, opponent_type, attack, defense):\r\n    return math . ceil(50 * (attack / defense) * effectiveness[your_type][opponent_type])\r\n",
  "530e259c7bc88a4ab9000754": "def tetrahedron(size):\r\n    return size * (size + 1) * (size + 2) / / 6\r\n",
  "52f3bb2095d6bfeac2002196": "def valid_word(seq, word):\r\n    return not word or any(valid_word(seq, word[len(x):]) for x in seq if word . startswith(x))\r\n",
  "536950ffc8a5ca9982001371": "def solution(a):\n \t if (len(a) == 0):\n \t\t return - 1\n pos = 0 \n jump = 0 \n while pos >= 0 and pos < len ( a ):\n \t \t if ( a [ pos ] == 0 ): return - 1 \n step = a [ pos ]\n \t \t a [ pos ] = 0 \n pos += step \n jump += 1 \n return jump",
  "53697be005f803751e0015aa": "def encode(s, t=str . maketrans(\"aeiou\", \"12345\")):\r\n    return s . translate(t)\r\n\r\n    def decode(s, t=str . maketrans(\"12345\", \"aeiou\")):\r\n    return s . translate(t)\r\n",
  "535bfa2ccdbf509be8000113": "def rwh_primes2(n):\r\n    # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\r\n    \"\"\" Input n>=6, Returns a list of primes, 2 <= p < n \"\"\"\r\n    correction = (n % 6 > 1)\r\n    n = {0: n, 1: n - 1, 2: n + 4, 3: n + 3, 4: n + 2, 5: n + 1}[n % 6]\r\n    sieve = [True] * (n / 3)\r\n    sieve[0] = False\r\n    for i in xrange(int(n * * 0.5) / 3 + 1):\r\n    if sieve[i]:\r\n    k = 3 * i + 1 | 1\r\n    sieve[((k * k) / 3):: 2 * k] = [False] * \\\r\n        ((n / 6 - (k * k) / 6 - 1) / k + 1)\r\n    sieve[(k * k + 4 * k - 2 * k * (i & 1)) / 3:: 2 * k] = [False] * \\\r\n        ((n / 6 - (k * k + 4 * k - 2 * k * (i & 1)) / 6 - 1) / k + 1)\r\n    return [2, 3] + [3 * i + 1 | 1 for i in xrange(1, n / 3 - correction) if sieve[i]]\r\n\r\n    class Primes:\r\n\r\n    @ classmethod\r\n    def first(self, n): return rwh_primes2(20 * n)[: n]\r\n",
  "534eb5ad704a49dcfa000ba6": "def hanoi(disks):\r\n    return 2 * * disks - 1\r\n",
  "5355a811a93a501adf000ab7": "def fizz_buzz_custom(string_one=\"Fizz\", string_two=\"Buzz\", num_one=3, num_two=5):\r\n    result = []\r\n    for i in range(1, 101):\r\n    x = \"\"\r\n    if i % num_one == 0:\r\n    x += string_one\r\n    if i % num_two == 0:\r\n    x += string_two\r\n    result . append(x or i)\r\n    return result\r\n",
  "52ecde1244751a799b00018a": "def sqrt_approximation(number):\r\n    i = 0\r\n    while i * i < number:\r\n    i += 1\r\n    return i if i * i == number else [i - 1, i]\r\n",
  "52fba2a9adcd10b34300094c": "def transpose(matrix):\r\n    return list(map(list, zip(* matrix)))\r\n",
  "52dffa05467ee54b93000712": "from string import punctuation\r\nt = str . maketrans(\"\", \"\", punctuation)\r\n\r\n\r\ndef pseudo_sort(s):\r\n    a = s . translate(t). split()\r\n    b = sorted(x for x in a if x[0]. islower())\r\n    c = sorted((x for x in a if x[0]. isupper()), reverse=True)\r\n    return \" \" . join(b + c)\r\n",
  "52de553ebb55d1fca3000371": "def find_missing(sequence):\r\n    t = sequence\r\n    return (t[0] + t[- 1]) * (len(t) + 1) / 2 - sum(t)\r\n",
  "52dda52d4a88b5708f000024": "def ordinal(n, brief=False):\r\n    n %= 100\r\n    if 9 < n < 20:\r\n    return \"th\"\r\n    n %= 10\r\n    if n == 1:\r\n    return \"st\"\r\n    if n == 2:\r\n    return \"nd\" [brief:]\r\n    if n == 3:\r\n    return \"rd\" [brief:]\r\n    return \"th\"\r\n",
  "52b2cf1386b31630870005d4": "from re import compile as reCompile\r\nSENTENCE = reCompile(r'[.!?]')\r\nSYLLABLE = reCompile(r'(?i)[aeiou]+')\r\n\r\n\r\ndef count(string, pattern):\r\n    return len(pattern . findall(string))\r\n\r\n    def flesch_kincaid(text):\r\n    nWords = text . count(' ') + 1\r\n    return round(0.39 * nWords / count(text, SENTENCE) + 11.8 * count(text, SYLLABLE) / nWords - 15.59, 2)\r\n",
  "52b305bec65ea40fe90007a7": "def grabscrab(said, possible_words):\r\n    return [word for word in possible_words if sorted(word) == sorted(said)]\r\n",
  "52b4d1be990d6a2dac0002ab": "from itertools import accumulate\r\n\r\n\r\ndef max_zero_sequence(arr):\r\n    memo, start, stop = {0: 0}, 0, 0\r\n    for i, x in enumerate(accumulate(arr), 1):\r\n    if x in memo:\r\n    if start + i > stop + memo[x]:\r\n    start, stop = memo[x], i\r\n    else:\r\n    memo[x] = i\r\n    return arr[start: stop]\r\n",
  "529fdef7488f509b81000061": "def ok(s):\r\n    a, b = s . split()\r\n    a, b = a[:: - 1], b[:: - 1]\r\n    d = 0\r\n    c = 0\r\n    for i, j in zip(a, b):\r\n    if (int(i) + int(j) + c) > 9:\r\n    c = 1\r\n    d += 1\r\n    else:\r\n    c = 0\r\n    return \"{} carry operations\" . format(d) if d > 0 else \"No carry operation\"\r\n    def solve(s):\r\n    return '\\n' . join(ok(i) for i in s . split('\\n'))\r\n",
  "528aa29bd8a0399fc5000cae": "class dark_room:\n    def __init__(self, direction):\n    self . d = direction\n    self . blocked = False\n    def __call__(self, n=0):\n    self . d -= 1\n    if n:\n    self . blocked = not self . d\n    self . d = - 1\n    return self\n    def end(self):\n    return ('CROTCH KICK', 'BLOCK')[self . blocked]\n",
  "5274d9d3ebc3030802000165": "from fractions import gcd\n\n\ndef nbr_of_laps(x, y):\n    return (y / gcd(x, y), x / gcd(x, y))\n",
  "52ebe4608567ade7d700044a": "str = \"A23456789TJQK\"\r\ncard = \"cdhs\"\r\n\r\n\r\ndef encode(cards):\r\n    return sorted([card . index(x[1]) * 13 + str . index(x[0]) for x in cards])\r\n\r\n    def decode(cards):\r\n    return [f\" { str [ x % 13 ]}{ card [ x / / 13 ]} \" for x in sorted(cards)]\r\n",
  "528a0762f51e7a4f1800072a": "from math import log\nfrom math import ceil\n\n\ndef skrzat(base, number):\n\n    if base == 'b':\n    return 'From binary: ' + number + ' is ' + str(toDecimal(number))\n\n    if base == 'd':\n    return 'From decimal: ' + str(number) + ' is ' + toWBinary(number)\n\n    def toDecimal(number):\n    if len(number) == 1:\n    return int(number)\n    # e.g (A) 1 -> 1\n    # e.g (B) 10 -> ( (1) * (-2) + 0 )\n    # e.g (C) 101 -> ( (1) * (-2) + 0 ) * (-2) + 1 = B * (-2) + 1\n    # e.g (D) 1010 -> C * (-2) + 0\n    # ...\n    return toDecimal(number[: - 1]) * (- 2) + int(number[- 1])\n\n    # posCurrentOne is the position (0 is position of the right digit) of\n    # the last 1 knew (left to right)\n    # at the begining we don't know this position so we arbitrarily initialize\n    # this to -1. It is useful for insert the zerros after\n    def toWBinary(number, posCurrentOne=int(- 1)):\n    s = ''\n    if not (number):\n    if posCurrentOne == - 1:\n    return '0'\n    # if we know the last 1 is in position 2, and the number is egal to 0,\n    # then we can complete with 2 zerros after and return the result\n    s += '0' * posCurrentOne\n    return s\n    # We begin by calculate the number of digit necessary\n    # if number is egal to 1 we need 1 digits\n    # if number is egal to 2 we need 3 digits\n    # if number is egal to -1 we need 2 digits\n    # ...\n    # if the number is > 0, we need odd digits\n    # if the number is < 0, we need even digits\n    # if number is > 0, if the number of digits usefull is N, then the greatest\n    # number possible is :\n    # (-2 ** 0) = 1 for 1 digit\n    # (-2 ** 0) + (-2 ** 2) = 5 for 3 digits\n    # (-2 ** 0) + (-2 ** 2) + (-2 ** 4) = 21 for 4 digits\n    # so with S the max number with N digits we have:\n    # S = sum(i=1,(N+1)/2) [(-2) ** (2 * (i - 1))]\n    # it is egal to\n    # S = sum(i=0,(N-1)/2) [4 ** i]\n    # so\n    # S = 1 + 4 + ... + 4 ** ((N-1)/2)\n    # in multiply per 4\n    # 4S = 4 + ... + 4 ** ((N-1)/2) + 4 ** ((N+1)/2)\n    # with substraction\n    # 4S - S = 4 ** ((N+1)/2) - 1\n    # S = (4 ** ((N+1)/2) - 1) / 3\n    # with x the decimal number to convert,\n    # whe surch N so that\n    # S >= x\n    # 4 ** ((N+1)/2) - 1 / 3 >= x\n    # 4 ** ((N+1)/2) >= 3x + 1\n    # we use the log\n    # ((N+1) / 2) log(4) >= log(3x + 1)\n    # but log(4) = log(2*2) = 2log(2) so\n    # (N+1) log(2) >= log(3x + 1)\n    # N >= (log(3x + 1) / log(2)) - 1\n    #\n    # and we must have N integer and odd\n    # so we use ceil and if the result is even we add 1\n    # we have also N the number of digit necessary. And so we know\n    # the digit in position N-1 is egal to 1\n    if number > 0:\n    N = int(ceil(log(3 * number + 1, 2)) - 1)\n    if not (N % 2):\n    N += 1\n    # by the same way we calculate N if number is > 0\n    else:\n    N = int(ceil(log((- 3) * number + 2, 2)) - 1)\n    if (N % 2):\n    N += 1\n    # if the last one calculate is in position 2 and we need 1 digit\n    # we insert 2 - 1 = 1 zerro and one 1\n    s += '0' * (posCurrentOne - N)\n    s += '1'\n    # if we have N digits, the digit in position N-1 is to one\n    # and correspond to (-2) ** (N-1). So we can substract this value\n    # and iterate. We indicate so the position N -1\n    return s + toWBinary(number - ((- 2) * * (N - 1)), N - 1)\n",
  "5432fd1c913a65b28f000342": "def multiplication_table(row, col):\r\n    return [[(i + 1) * (j + 1) for j in range(col)] for i in range(row)]\r\n",
  "5884b6550785f7c58f000047": "def group(arr): return [[n] * arr . count(n)\n                        for n in sorted(set(arr), key=arr . index)]\n",
  "529e2e1f16cb0fcccb000a6b": "def splitInteger(n, pp):\r\n    p, bb = divmod(n, pp)\r\n    return (pp - bb) * [p] + bb * [p + 1]\r\n",
  "529b418d533b76924600085d": "import re\n\n\ndef to_underscore(string):\n    return re . sub(r'(.)([A-Z])', r'\\1_\\2', str(string)). lower()\n",
  "52945ce49bb38560fe0001d9": "def pascal(p):\r\n\r\n    t = [[1]]\r\n\r\n    for _ in range(2, p + 1):\r\n    t . append([1] + [a + b for a, b in zip(t[- 1][: - 1], t[- 1][1:])] + [1])\r\n\r\n    return t\r\n",
  "529872bdd0f550a06b00026e": "from itertools import islice\r\nfrom functools import reduce\r\n\r\n\r\ndef greatest_product(n):\r\n    numbers = [int(value) for value in n]\r\n    result = [reduce(lambda x, y: x * y, islice(numbers, i, i + 5), 1)\r\n              for i in range(len(numbers) - 4)]\r\n    return max(result)\r\n",
  "5285bf61f8fc1b181700024c": "def norm_index_test(a, n):\r\n    if a:\r\n        return a[n % len(a)]\r\n",
  "52840d2b27e9c932ff0016ae": "def locate(seq, value):\r\n    for s in seq:\r\n    if s == value or (isinstance(s, list) and locate(s, value)):\r\n    return True\r\n    return False\r\n",
  "5274e122fc75c0943d000148": "def group_by_commas(n):\r\n    return '{:,}' . format(n)\r\n",
  "5264f5685fda8ed370000265": "def meters(x):\r\n    # your code here\r\n    arr = ['', 'k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']\r\n    count = 0\r\n    while x >= 1000:\r\n    x /= 1000.00\r\n    count += 1\r\n    if int(x) == x:\r\n    x = int(x)\r\n    return str(x) + arr[count] + 'm'\r\n",
  "54746b7ab2bc2868a0000acf": "import re\n\n\nclass Mod:\n    mod4 = re . compile('.*\\[[+-]?([048]|\\d*([02468][048]|[13579][26]))\\]')\n",
  "57fa9bc99610ce206f000330": "def shoot(results):\r\n    pete = phil = 0\r\n    for shots, double in results:\r\n    pete += shots[\"P1\"]. count(\"X\") * (1 + double)\r\n    phil += shots[\"P2\"]. count(\"X\") * (1 + double)\r\n\r\n    return \"Pete Wins!\" if pete > phil else \"Phil Wins!\" if phil > pete else \"Draw!\"\r\n",
  "58b665c891e710a3ec00003f": "def merge_arrays(a, b):\r\n    out = []\r\n    for n in a + b:\r\n    if n in a and n in b:\r\n    if a . count(n) == b . count(n):\r\n    out . append(n)\r\n    else:\r\n    out . append(n)\r\n    return sorted(set(out))\r\n",
  "56fa9cd6da8ca623f9001233": "def elemental_forms(word):\r\n    return list(get_elem_form(word . lower()))\r\n\r\n    def get_elem_form(word, parents=[]):\r\n    if word == '':\r\n    yield parents\r\n    for elem, name in ELEMENTS . items():\r\n    if word . startswith(elem . lower()):\r\n    yield from get_elem_form(word[len(elem):], parents + [f' { name } ( { elem } )'])\r\n",
  "57deba2e8a8b8db0a4000ad6": "from collections import defaultdict\r\nfrom itertools import combinations\r\n\r\n\r\ndef norme(vect): return sum(v * * 2 for v in vect) * * .5\r\n\r\n\r\ndef vectorize(pt1, pt2): return [b - a for a, b in zip(pt1, pt2)]\r\n\r\n\r\ndef isInCircle(d, r): return d < r and (r - d) / r > 1e-10\r\n\r\n\r\ndef crossProd(v1, v2): return [v1[0] * v2[1] - v1[1] * v2[0],\r\n                               v1[1] * v2[2] - v1[2] * v2[1],\r\n                               v1[2] * v2[0] - v1[0] * v2[2]]\r\n\r\n\r\ndef biggest_triang_int(point_list, center, radius):\r\n    filteredPts = [pt for pt in point_list if isInCircle(\r\n        norme(vectorize(pt, center)), radius)]\r\n\r\n    dctTriangles = defaultdict(list)\r\n    for threePts in combinations(filteredPts, 3):\r\n    area = abs(\r\n        norme(crossProd(vectorize(* threePts[: 2]), vectorize(* threePts[1:]))) / 2.0)\r\n    if area > 1e-8:\r\n        dctTriangles[area]. append(list(threePts))\r\n\r\n    maxArea = max(dctTriangles . keys()) if dctTriangles else 0\r\n    return [] if not dctTriangles else [sum(map(len, dctTriangles . values())),\r\n                                        maxArea,\r\n                                        sorted(dctTriangles[maxArea]) if len(dctTriangles[maxArea]) > 1 else dctTriangles[maxArea][0]]\r\n",
  "5536aba6e4609cc6a600003d": "import re\r\n\r\n\r\ndef sursurungal(txt):\r\n    txt = re . sub(r'\\b2\\s(\\S+)s', r'2 bu\\1', txt)\r\n    txt = re . sub(r'\\b([3-9])\\s(\\S+)s', r'\\1 \\2zo', txt)\r\n    return re . sub(r'(\\d+\\d)\\s(\\S+)s', r'\\1 ga\\2ga', txt)\r\n",
  "5686004a2c7fade6b500002d": "import re\r\n\r\n\r\ndef parse_mana_cost(mana):\r\n    retval = {}\r\n    mana = mana . lower()\r\n    m = re . match(r'\\A(\\d*)([wubrg]*)\\Z', mana)\r\n    if m:\r\n    if m . group(1) and int(m . group(1)) > 0:\r\n    retval['*'] = int(m . group(1))\r\n    if m . group(2):\r\n    l = list(m . group(2))\r\n    print l\r\n    if l . count('w') > 0:\r\n    retval['w'] = l . count('w')\r\n    if l . count('u') > 0:\r\n    retval['u'] = l . count('u')\r\n    if l . count('b') > 0:\r\n    retval['b'] = l . count('b')\r\n    if l . count('r') > 0:\r\n    retval['r'] = l . count('r')\r\n    if l . count('g') > 0:\r\n    retval['g'] = l . count('g')\r\n    return retval\r\n",
  "567af2c8b46252f78400004d": "def battle(player1, player2):\r\n    l1 = []\r\n    l2 = []\r\n    x = min(len(player1), len(player2))\r\n    for i in range(x):\r\n    if player1[i][0] < player2[i][1]:\r\n    l2 . append(player2[i])\r\n    if player2[i][0] < player1[i][1]:\r\n    l1 . append(player1[i])\r\n\r\n    l1 += player1[x:]\r\n    l2 += player2[x:]\r\n\r\n    return {'player1': l1, 'player2': l2}\r\n",
  "5476f4ca03810c0fc0000098": "def get_function(seq):\r\n    m = seq[0]\r\n    n = seq[1] - m\r\n    if any(s != n * x + m for x, s in enumerate(seq)):\r\n    return \"Non-linear sequence\"\r\n    return \"f(x) = {}{}{}{}{}{}\" . format(\r\n        \"-\" * (n < 0),\r\n        str(abs(n)) * (abs(n) > 1),\r\n        \"x\" * (n != 0),\r\n        \" + \" * (m > 0 and n != 0),\r\n        \" - \" * (m < 0),\r\n        str(abs(m)) * (m != 0 or n == 0)\r\n    )\r\n",
  "53a9ee602f150d5d6b000307": "from functools import lru_cache\r\n\r\n\r\n@ lru_cache(maxsize=None)\r\ndef rec(n): return 1 + (0 if n == 1 else rec(3 * n + 1) if n & 1 else rec(n / / 2))\r\n\r\n\r\nmemo = [[0, None], [1, 1]]\r\n\r\n\r\ndef max_collatz_length(n):\r\n    if not (type(n) == int and n > 0):\r\n        return []\r\n    while n >= len(memo):\r\n    x = rec(len(memo))\r\n    if x > memo[- 1][1]:\r\n        memo . append([len(memo), x])\r\n    else:\r\n        memo . append(memo[- 1])\r\n    return memo[n]\r\n",
  "5870db16056584eab0000006": "from math import atan2, degrees\n\n\ndef get_score(x, y):\n    r, a = (x * x + y * y) * * 0.5, degrees(atan2(y, x)) + 9\n    t = str([6, 13, 4, 18, 1, 20, 5, 12, 9, 14, 11, 8, 16, 7, 19, 3, 17, 2, 15, 10][int(a + 360 if a < 0 else a) / / 18])\n    for l, s in [(6.35, 'DB'), (15.9, 'SB'), (99, t), (107, 'T' + t), (162, t), (170, 'D' + t)]:\n    if r <= l:\n        return s\n    return 'X'\n",
  "56121f3312baa28c8500005b": "from functools import cmp_to_key\r\nKEY = cmp_to_key(lambda a, b: int(b + a) - int(a + b))\r\n\r\n\r\ndef biggest(numbers: list) - > str:\r\n    return '' . join(sorted(map(str, numbers), key=KEY)). lstrip('0') or '0'\r\n",
  "55de9c184bb732a87f000055": "def reverse(seq):\r\n    for i in range(len(seq) >> 1):\r\n    seq[i], seq[- i - 1] = seq[- i - 1], seq[i]\r\n",
  "55b080eabb080cd6f8000035": "from collections import Counter\r\n\r\n\r\ndef odd_one_out(s):\r\n    d = Counter(reversed(s))\r\n    return [x for x in d if d[x] % 2][:: - 1]\r\n",
  "58f290d0b48966547f00014c": "def how_many_bees(h):\r\n    if not h:\r\n        return 0\r\n    v = list(zip(* h))\r\n    b = [None] * len(h)\r\n    sf = (b[i:] + l + b[: i] for i, l in enumerate(h))\r\n    sb = (b[: i] + l + b[i:] for i, l in enumerate(h))\r\n    df = [[n for n in l if n is not None] for l in zip(* sf)]\r\n    db = [[n for n in l if n is not None] for l in zip(* sb)]\r\n    inline = '\\n' . join(map('' . join, h + v + df + db))\r\n    return (inline + inline[:: - 1]). count('bee')\r\n",
  "55e00266d494ce5155000032": "def word_step(s):\r\n    res = [s[0]]\r\n\r\n    for i, word in enumerate(s . split()):\r\n    if i % 2:\r\n    res += [str . rjust(c, len(res[- 1])) for c in word[1:]]\r\n    else:\r\n    res[- 1] += word[1:]\r\n\r\n    return [list(str . ljust(line, len(res[- 1]))) for line in res]\r\n",
  "55dd54631827120dd800002b": "def hashify(string):\r\n    out = dict()\r\n    for c1, c2 in zip(string, string[1:] + string[0]):\r\n    try:\r\n    try:\r\n        out[c1]. append(c2)\r\n    except:\r\n        out[c1] = [out[c1], c2]\r\n    except:\r\n        out[c1] = c2\r\n    return out\r\n",
  "55a5c82cd8e9baa49000004c": "def divisible_count(x, y, k):\r\n    return y / / k - (x - 1) / / k\r\n",
  "5631ac5139795b281d00007d": "import re\r\n\r\n\r\nclass WordDictionary:\r\n    def __init__(self):\r\n    self . data = []\r\n\r\n    def add_word(self, x):\r\n    self . data . append(x)\r\n\r\n    def search(self, x):\r\n    for word in self . data:\r\n    if re . match(x + \"\\Z\", word):\r\n        return True\r\n    return False\r\n",
  "562846dd1f77ab7c00000033": "def word_pattern(pattern, string):\r\n    x = list(pattern)\r\n    y = string . split(\" \")\r\n    return (len(x) == len(y) and\r\n            len(set(x)) == len(set(y)) == len(set(zip(x, y)))\r\n            )\r\n",
  "55fb6537544ae06ccc0000dc": "def summary_ranges(nums):\r\n    ret, s = [], float('-inf')\r\n    for e, n in zip([s] + nums, nums + [- s]):\r\n    if n - e > 1:\r\n    ret . append(['{}', '{}->{}'][s < e]. format(s, e))\r\n    s = n\r\n    return ret[1:]\r\n",
  "5613475e4778aab4d600004f": "import re\r\n\r\n\r\ndef repeating_fractions(n, d):\r\n    (i, d) = str(n * 1.0 / d). split('.')\r\n    return i + '.' + re . sub(r'([0-9])\\1+', r'(\\1)', d)\r\n",
  "55cc20eb943f1d8b11000045": "def x(n):\r\n    d = [[0] * n for i in range(n)]\r\n    for i in range(n):\r\n    d[i][i] = 1\r\n    d[i][- i - 1] = 1\r\n    return d\r\n",
  "55d5434f269c0c3f1b000058": "def triple_double(num1, num2):\r\n    return any([i * 3 in str(num1) and i * 2 in str(num2) for i in '0123456789'])\r\n",
  "55e529bf6c6497394a0000b5": "def combine(* args):\r\n    out = list()\r\n    for i in range(len(max(args, key=len))):  # Sometimes you just have to love python\r\n    for arr in args:\r\n    if i < len(arr):\r\n        out . append(arr[i])\r\n    return out\r\n",
  "5827d31b86f3b0d9390001d4": "def predict(candidates, polls):\r\n    x = zip(* [list(map(lambda i: i * weight, poll))\r\n            for poll, weight in polls])\r\n    x = list(\r\n        map(round1, (map(lambda i: sum(i) / sum([i[1] for i in polls]), x))))\r\n    return dict(zip(candidates, x))\r\n",
  "5898a7208b431434e500013b": "from math import ceil\r\n\r\n\r\ndef calculate_scrap(arr, n):\r\n    x = 50\r\n    for i in arr:\r\n    x /= (1 - i / 100)\r\n    return ceil(n * x)\r\n",
  "57b6f5aadb5b3d0ae3000611": "def get_length_of_missing_array(arrays):\r\n    arrays = [len(a) if a is not None else 0 for a in arrays]\r\n    arrays . sort()\r\n    if 0 in arrays or len(arrays) == 0:\r\n        return 0\r\n    for i in range(len(arrays)):\r\n    if arrays[i + 1] != arrays[i] + 1:\r\n        return arrays[i] + 1\r\n",
  "57a98e8172292d977b000079": "def number_generator():\r\n    from random import randrange, sample\r\n    return sorted(sample(range(1, 50), 6)) + [randrange(10)]\r\n\r\n    def check_for_winning_category(your_numbers, winning_numbers):\r\n    matches = len(set(your_numbers[: - 1]) & set(winning_numbers[: - 1]))\r\n    category = 14 - 2 * matches - (your_numbers[- 1] == winning_numbers[- 1])\r\n    return category if category < 10 else - 1\r\n",
  "58ac1abdff4e78738f000805": "def the_biggest_search_keys(* keys):\r\n    mx = max(map(len, keys), default=0)\r\n    return ', ' . join(sorted('\\'{}\\'' . format(k) for k in keys if len(k) == mx)) if mx else \"''\"\r\n",
  "562e274ceca15ca6e70000d3": "from math import sqrt\n\n\ndef len_curve(n):\n    return round(sum(sqrt((2 * k + 1) * * 2 / n / n + 1) for k in range(n)) / n, 9)\n",
  "559b8e46fa060b2c6a0000bf": "from math import comb\n\n\ndef diagonal(n: int, p: int) - > int:\n    return comb(n + 1, p + 1)\n",
  "57d165ad95497ea150000020": "from re import findall\r\n\r\n\r\ndef bears(x, s):\r\n    bears = \"\" . join(findall(\"8B|B8\", s))\r\n    return [bears, len(bears) >= x]\r\n",
  "5797d1a9c38ec2de1f00017b": "def watch_pyramid_from_the_side(characters):\r\n    if not characters:\r\n        return characters\r\n    baseLen = len(characters) * 2 - 1\r\n    return '\\n' . join(' ' * (i) + characters[i] * (baseLen - 2 * i) + ' ' * (i) for i in range(len(characters) - 1, - 1, - 1))\r\n\r\n    def watch_pyramid_from_above(characters):\r\n    if not characters:\r\n        return characters\r\n    baseLen = len(characters) * 2 - 1\r\n    return '\\n' . join(characters[0: min(i, baseLen - 1 - i)] + characters[min(i, baseLen - 1 - i)] * (baseLen - 2 * min(i, baseLen - 1 - i)) + characters[0: min(i, baseLen - 1 - i)][:: - 1] for i in range(baseLen))\r\n\r\n    def count_visible_characters_of_the_pyramid(characters):\r\n    return - 1 if not characters else (len(characters) * 2 - 1) * * 2\r\n    def count_all_characters_of_the_pyramid(characters):\r\n    return - 1 if not characters else sum((2 * i + 1) * * 2 for i in range(len(characters)))\r\n",
  "5900750cb7c6172207000054": "def sticky_calc(operation, val1, val2):\r\n    return round(eval(\"{0}{1}{2}{1}\" . format(round(val1), round(val2), operation)))\r\n",
  "58daa7617332e59593000006": "def find_longest(xs):\r\n    return max(xs, key=lambda x: len(str(x)))\r\n",
  "5865dd726b56998ec4000185": "def scoring(array):\r\n    res = {}\r\n\r\n    for e in array:\r\n    score = e[\"norm_kill\"] * 100 + e[\"assist\"] * 50 + e[\"damage\"] / / 2 + \\\r\n        e[\"healing\"] + 2 * * e[\"streak\"] + e[\"env_kill\"] * 500\r\n    res[e[\"name\"]] = score\r\n    return sorted(res, key=res . get, reverse=True)\r\n",
  "55de8eabd9bef5205e0000ba": "from gmpy2 import is_prime\r\n\r\n\r\ndef find_emirp(n):\r\n    a = [i for i in range(13, n + 1, 2) if is_prime(i)\r\n         and is_prime(int(str(i)[:: - 1])) and str(i) != str(i)[:: - 1]]\r\n    return [0, 0, 0] if not a else [len(a), max(a), sum(a)]\r\n",
  "560b8d7106ede725dd0000e2": "def prime(a):\n    if a < 2:\n        return False\n    if a == 2 or a == 3:\n        return True\n    if a % 2 == 0 or a % 3 == 0:\n        return False\n    maxDivisor = a * * 0.5\n    d, i = 5, 2\n    while d <= maxDivisor:\n    if a % d == 0:\n        return False\n    d += i\n    i = 6 - i\n    return True\n    def prime_bef_aft(num):\n    res = []\n    for n in range(num - 1, 1, - 1):\n    if prime(n):\n    res . append(n)\n    break\n    for n in range(num + 1, 3 * num, 1):\n    if prime(n):\n    res . append(n)\n    break\n    return res\n",
  "565abd876ed46506d600000d": "def simpson(n):\n    from math import sin, pi\n    a = 0\n    b = pi\n    h = (b - a) / n\n    def f(x): return (3 / 2) * sin(x) * * 3\n    integral = 0\n    integral += f(a) + f(b)\n    integral += 4 * sum(f(a + (2 * i - 1) * h) for i in range(1, n / / 2 + 1))\n    integral += 2 * sum(f(a + 2 * i * h) for i in range(1, n / / 2))\n    integral *= h / 3\n    return integral\n",
  "5520714decb43308ea000083": "def root(x, n):\r\n    return x * * (1.0 / n)\r\n",
  "58feb7ac627d2fdadf000111": "from itertools import groupby\r\n\r\n\r\ndef find_subarray_with_same_element(a, k):\r\n    return (s := 0) or max((i for x, g in groupby(a) if (i := (s, (s := s + len(list(g))) - 1)) and x == k),\r\n                           key=lambda r: (r[1] - r[0], r), default=(- 1, - 1))\r\n",
  "58fd4bbe017b2ed4e700001b": "from collections import defaultdict\r\n\r\n\r\ndef cards_and_pero(s):\r\n    deck = defaultdict(set)\r\n    for n in range(0, len(s), 3):\r\n    card = s[n: n + 3]\r\n    if card[1:] in deck[card[0]]:\r\n        return [- 1, - 1, - 1, - 1]\r\n    deck[card[0]] |= {card[1:]}\r\n    return [13 - len(deck[suit]) for suit in \"PKHT\"]\r\n",
  "58fec262184b6dc30800000d": "def maximize_points(team1, team2):\r\n    team1 . sort()\r\n    team2 . sort()\r\n    ans = 0\r\n    for p2 in team2[:: - 1]:\r\n    if p2 < max(team1):\r\n    team1 . remove(max(team1))\r\n    ans += 1\r\n    return ans\r\n",
  "58f6024e1e26ec376900004f": "def factors(integer, limit):\r\n    return [x for x in range(limit, integer + 1) if integer % x == 0]\r\n",
  "58fd9f6213b00172ce0000c9": "def split_exp(n):\r\n    dot = n . find('.')\r\n    if dot == - 1:\r\n        dot = len(n)\r\n    return [d + \"0\" * (dot - i - 1) if i < dot else \".{}{}\" . format(\"0\" * (i - dot - 1), d)\r\n            for i, d in enumerate(n) if i != dot and d != '0']\r\n",
  "58fd52b59a9f65c398000096": "def min_and_max(l, d, x):\r\n    for n in range(l, d + 1):\r\n    if sum(map(int, str(n))) == x:\r\n        break\r\n    for m in range(d, l - 1, - 1):\r\n    if sum(map(int, str(m))) == x:\r\n        break\r\n    return [n, m]\r\n",
  "58fd96a59a9f65c2e900008d": "def smallest_integer(matrix):\r\n    nums = set(sum(matrix, []))\r\n    n = 0\r\n    while n in nums:\r\n        n += 1\r\n    return n\r\n",
  "58fd91af13b0012e8e000010": "from collections import Counter\r\n\r\n\r\ndef strange_coach(players):\r\n    return '' . join(\r\n        sorted(i for i, j in\r\n               Counter(map(lambda x: x[0], players)). most_common()\r\n               if j >= 5)) or 'forfeit'\r\n",
  "5872bb7faa04282110000124": "from math import lcm\n\n\ndef kiyo_lcm(a):\n    return lcm(* (sum(v for v in r if isinstance(v, int) and v % 2) for r in a))\n",
  "5411c4205f3a7fd3f90009ea": "import re\n\n\ndef string_parse(string):\n    return re . sub(r'(.)\\1(\\1+)', r'\\1\\1[\\2]', string) if isinstance(string, str) else 'Please enter a valid string'\n",
  "56e1161fef93568228000aad": "def testit(stg):\r\n    try:\r\n    return eval(\"\" . join(str(ord(c) - 96) if i % 2 == 0 else \"+-*/\" [(ord(c) - 1) % 4] for i, c in enumerate(stg)))\r\n    except SyntaxError:\r\n    return\r\n",
  "57acc8c3e298a7ae4e0007e3": "def collatz_length(nm):\n    cntr = 0\n    while nm != 1:\n    nm = 3 * nm + 1 if nm % 2 else nm / / 2\n    cntr += 1\n    return cntr\n    def longest_collatz(input_array):\n    return max(input_array, key=collatz_length)\n",
  "5286b2e162056fd0cb000c20": "def collatz_step(n):\r\n    if n % 2 == 0:\r\n    return n / / 2\r\n    else:\r\n    return n * 3 + 1\r\n    def collatz_seq(n):\r\n    while n != 1:\r\n    yield n\r\n    n = collatz_step(n)\r\n    yield 1\r\n    def collatz(n):\r\n    return '->' . join(str(x) for x in collatz_seq(n))\r\n",
  "55eee789637477c94200008e": "def sequence_gen(* args):\r\n    values = list(args)\r\n    while True:\r\n    yield values[0]\r\n    values = values[1:] + [sum(values)]\r\n",
  "583c5469977933319f000403": "def max_and_min(arr1, arr2):\r\n    diffs = [abs(x - y) for x in arr1 for y in arr2]\r\n    return [max(diffs), min(diffs)]\r\n",
  "583c592928a0c0449d000099": "def max_and_min(seq1, seq2):\r\n    # your code here\r\n    seq1 . sort()\r\n    seq2 . sort()\r\n\r\n    if abs(seq1[- 1] - seq2[0]) > abs(seq1[0] - seq2[- 1]):\r\n    max_difference = abs(seq1[- 1] - seq2[0])\r\n    else:\r\n    max_difference = abs(seq1[0] - seq2[- 1])\r\n\r\n    i, j = 0, 0\r\n    while i < len(seq1) and j < len(seq2):\r\n    d = abs(seq1[i] - seq2[j])\r\n\r\n    if i == 0 and j == 0:\r\n    min_difference = d\r\n    else:\r\n    if d < min_difference:\r\n    min_difference = d\r\n    if seq1[i] < seq2[j]:\r\n    i += 1\r\n    elif seq1[i] > seq2[j]:\r\n    j += 1\r\n    else:\r\n    break\r\n    return max_difference, min_difference\r\n",
  "5897cdc26551af891c000124": "def hofstadter_Q(n):\r\n    try:\r\n    return hofstadter_Q . seq[n]\r\n    except IndexError:\r\n    ans = hofstadter_Q(n - hofstadter_Q(n - 1)) + \\\r\n        hofstadter_Q(n - hofstadter_Q(n - 2))\r\n    hofstadter_Q . seq . append(ans)\r\n    return ans\r\n    hofstadter_Q . seq = [None, 1, 1]\r\n",
  "58898b50b832f8046a0000ec": "def combs(a, b):\r\n    return min(mesh(a, b), mesh(b, a))\r\n\r\n    def mesh(a, b):\r\n    for i in range(len(a)):\r\n    for j, k in zip(a[i:], b):\r\n    if j + k == '**':\r\n        break\r\n    else:\r\n    return max(i + len(b), len(a))\r\n    return len(a) + len(b)\r\n",
  "58ad0e0a154165a1c80000ea": "def pac_man(size, pacman, enemies):\n    px, py = pacman\n    mx, my, Mx, My = - 1, - 1, size, size\n    for x, y in enemies:\n    if x < px and x > mx:\n        mx = x\n    if y < py and y > my:\n        my = y\n    if x > px and x < Mx:\n        Mx = x\n    if y > py and y < My:\n        My = y\n    return (Mx - mx - 1) * (My - my - 1) - 1\n",
  "58aa5d32c9eb04d90b000107": "def mobius(n):\r\n    sP, p = set(), 2\r\n    while n > 1 and p <= n * * .5:\r\n    while not n % p:\r\n    if p in sP:\r\n        return 0\r\n    sP . add(p)\r\n    n / /= p\r\n    p += 1 + (p != 2)\r\n    return (- 1) * * ((len(sP) + (n != 1)) % 2)\r\n",
  "5869848f2d52095be20001d1": "from itertools import combinations\nfrom math import hypot\n\n\ndef peaceful_yard(yard, d):\n    cats = ((i, j) for i, r in enumerate(yard)\n            for j, c in enumerate(r) if c in 'LMR')\n    return all(hypot(q[0] - p[0], q[1] - p[1]) >= d for p, q in combinations(cats, 2))\n",
  "5894986e2ddc8f6805000036": "trans = \"abcdefghijklmnopqrstuvwxyz\" * 2\r\ntrans += trans . upper() + \"0123456789\" * 2\r\n\r\n\r\ndef ROT135(input):\r\n    output = []\r\n    for c in input:\r\n    if c . isalpha():\r\n    c = trans[trans . index(c) + 13]\r\n    elif c . isdigit():\r\n    c = trans[trans . index(c) + 5]\r\n    output . append(c)\r\n    return \"\" . join(output)\r\n",
  "5886d65e427c27afeb0000c1": "def square_digits_sequence(n):\r\n    a, seq = n, set()\r\n    while a not in seq:\r\n    seq . add(a)\r\n    a = sum(int(d) * * 2 for d in str(a))\r\n    return len(seq) + 1\r\n",
  "588847702ffea657ba00001b": "from itertools import pairwise, chain\n\n\ndef cipher26(message):\n    return '' . join(chr((y - x) % 26 + 97) for x, y in pairwise(chain([97], map(ord, message))))\n",
  "58a6ac309b5762b7aa000030": "def circle_slash(n):\r\n    return int(bin(n)[3:] + '1', 2)\r\n",
  "58f8b35fda19c0c79400020f": "def all_non_consecutive(a):\r\n    return [{\"i\": i, \"n\": y} for i, (x, y) in enumerate(zip(a, a[1:]), 1) if x != y - 1]\r\n",
  "583601518d3b9b8d3b0000c9": "import textwrap\n\n\ndef align_right(text, width):\n    return \"\\n\" . join([l . rjust(width, ' ') for l in textwrap . wrap(text, width)])\n",
  "589414918afa367b4800015c": "from statistics import median_low as absolute_values_sum_minimization\n",
  "57a4c85de298a795210002da": "def longest_word(letters):\r\n    unscrambled = []\r\n    for word in words:\r\n    if set(word). issubset(set(letters)) and all(word . count(l) <= letters . count(l) for l in set(letters)):\r\n    unscrambled . append(word)\r\n    return [x for x in unscrambled if len(x) == max(map(len, unscrambled))] or None\r\n",
  "5700af83d1acef83fd000048": "def infect_apple(apple, n):\r\n    A = {(r, c): v for r, row in enumerate(apple) for c, v in enumerate(row)}\r\n\r\n    for _ in range(n):\r\n    for n in {(r, c) for r, c in A if any(A . get((r + rr, c + cc), '') == 'V' for rr, cc in [(1, 0), (- 1, 0), (0, 1), (0, - 1)])}:\r\n    A[n] = 'V'\r\n    return [[A[(r, c)] for c in range(len(apple[0]))] for r in range(len(apple))]\r\n",
  "5562ab5d6dca8009f7000050": "def left_riemann(f, n: int, a: float, b: float) - > float:\r\n    dx = (b - a) / n\r\n    return dx * sum(f(a + i * dx) for i in range(n))\r\n",
  "582c01ad3fd1cc5736000348": "def make_matrix(m: int, n: int) - > str:\r\n    m = str(m)\r\n    matrix = []\r\n\r\n    for i in range(n):\r\n    st = []\r\n    for j in range(n):\r\n    if i == j or i + j == n - 1:\r\n    st . append(m[0])\r\n    elif i + j > n - 1 and i > j:\r\n    st . append(m[2])\r\n    elif i + j < n - 1 and i > j:  # ok\r\n    st . append(m[3])\r\n    elif i + j > n - 1 and i < j:  # ok\r\n    st . append(m[4])\r\n    else:\r\n    st . append(m[1])\r\n\r\n    st = ' ' . join(st) + '\\n'\r\n    matrix . append(st)\r\n\r\n    return '' . join(matrix)[: - 1]\r\n",
  "5827e2efc983ca6f230000e0": "def pattern(rows, cols, s):\n    txt, border, row = iter(s), '+' + '---+' * cols, '|' + ' {} |' * cols\n\n    def linerAndSep(\n        _): return f\" { row . format ( * ( next ( txt , ' ' ) for _ in range ( cols )) ) } \\n { border } \"\n    return f' { border } \\n' + '\\n' . join(map(linerAndSep, range(rows)))\n",
  "55ed10a402a0c6e3c3000021": "def pointless(* args):\r\n    return \"rickastley\"\r\n",
  "58f6000bc0ec6451960000fd": "def sel_reverse(arr, l):\r\n    return [elt for i in range(0, len(arr), l) for elt in arr[i: i + l][:: - 1]] if l != 0 else arr\r\n",
  "58f6f87a55d759439b000073": "def negation_value(s, x):\r\n    return len(s) % 2 ^ bool(x)\r\n",
  "570e1271e5c9a0cf2f000d11": "import re\n\n\ndef kontti(s):\n    return \" \" . join([re . sub(\"([^aeiouy]*[aeiouy])(.*)\", r\"ko\\2-\\1ntti\", w, flags=re . I) for w in s . split()])\n",
  "58b3bb9347117f4aa7000096": "def press_button(n):\r\n    return (n * n + 5) * n / 6\r\n",
  "5779624bae28070489000146": "def manhattan_dist(x1, y1, x2, y2):\r\n    return abs(x1 - x2) + abs(y1 - y2)\r\n\r\n    def logistic_map(width, height, xs, ys):\r\n    field = [[None] * width for _ in range(height)]\r\n    if xs and ys:\r\n    for row in range(height):\r\n    for col in range(width):\r\n    field[row][col] = min(manhattan_dist(col, row, xi, yi)\r\n                          for xi, yi in zip(xs, ys))\r\n    return field\r\n",
  "52fefe6cb0091856db00030e": "from datetime import datetime\r\nimport re\r\n\r\n\r\nclass Mongo (object):\r\n\r\n    @ classmethod\r\n    def is_valid(cls, s):\r\n    return isinstance(s, str) and bool(re . match(r'[0-9a-f]{24}$', s))\r\n\r\n    @ classmethod\r\n    def get_timestamp(cls, s):\r\n    return cls . is_valid(s) and datetime . fromtimestamp(int(s[: 8], 16))\r\n",
  "55e0a2af50adf50699000126": "from bisect import bisect_right as bisect\r\nODDS, n = set(\"13579\"), 150000\r\nsieve, PODP = [0] * (n + 1), []\r\nfor i in range(2, n + 1):\r\n    if not sieve[i]:\r\n    for j in range(i * * 2, n + 1, i):\r\n        sieve[j] = 1\r\n    if set(str(i)) <= ODDS:\r\n        PODP . append(i)\r\n\r\n    def only_oddDigPrimes(n):\r\n    idx = bisect(PODP, n)\r\n    return [idx, PODP[idx - 1], PODP[idx + (PODP[idx] == n)]]\r\n",
  "589d6bc33b368ea992000035": "def descriptions(arr):\r\n    return 2 * * sum(a + 1 == b for a, b in zip(arr, arr[1:]))\r\n",
  "58bf72b02d1c7c18d9000127": "from math import ceil, pi\n\n\ndef does_fred_need_houseboat(x, y):\n    return ceil(pi * (x * * 2 + y * * 2) / 100)\n",
  "5825792ada030e9601000782": "def zip_with(fn, a1, a2):\r\n    return list(map(fn, a1, a2))\r\n",
  "58f5c63f1e26ecda7e000029": "def wave(str):\r\n    return [str[: i] + str[i]. upper() + str[i + 1:] for i in range(len(str)) if str[i]. isalpha()]\r\n",
  "54de3257f565801d96001200": "import re\r\n\r\n\r\ndef balance_statement(lst):\r\n    bad_formed, prices = [], {'B': 0, 'S': 0}\r\n    for order in filter(None, lst . split(', ')):\r\n    if not re . match('\\S+ \\d+ \\d*\\.\\d+ (B|S)', order):\r\n    bad_formed . append(order + ' ;')\r\n    else:\r\n    _, quantity, price, status = order . split()\r\n    prices[status] += int(quantity) * float(price)\r\n    ret = \"Buy: %.0f Sell: %.0f\" % (prices['B'], prices['S'])\r\n    if bad_formed:\r\n    ret += \"; Badly formed %d: %s\" % (len(bad_formed), '' . join(bad_formed))\r\n    return ret\r\n",
  "54221c16dda52609b1000ffb": "def find_solutions(words):\r\n    vowels = set('aeiou')\r\n    seen = {}\r\n\r\n    for w in words:\r\n    for s in seen:\r\n    if len(w) == len(s) and sum((len(ltrs) > 1) * (1 if ltrs <= vowels else 2) for ltrs in map(set, zip(* seen[s], w))) == 1:\r\n    seen[s]. add(w)\r\n    break\r\n    else:\r\n    seen[w] = {w}\r\n\r\n    return sorted(sorted(v) for v in seen . values() if len(v) >= 5)\r\n",
  "52fcc820f7214727bc0004b7": "# Shortest and fastest solution, passing under 120ms\r\nfrom copy import deepcopy\r\ndirections = {\r\n    'rook': [(1, 0), (- 1, 0), (0, 1), (0, - 1)],\r\n    'knight': [(- 2, 1), (- 2, - 1), (- 1, 2), (- 1, - 2), (1, 2), (1, - 2), (2, 1), (2, - 1)],\r\n    'bishop': [(- 1, - 1), (- 1, 1), (1, - 1), (1, 1)],\r\n    'queen': [(1, 0), (- 1, 0), (0, 1), (0, - 1), (- 1, - 1), (- 1, 1), (1, - 1), (1, 1)],\r\n}\r\n\r\n\r\ndef is_empty(pieces, targets, x, y):\r\n    if any((piece['x'] == x and piece['y'] == y) for piece in pieces if not any(piece == target for target in targets)) or not (- 1 < x < 8 and - 1 < y < 8):\r\n        return False\r\n    return True\r\n    def possible_movements(pieces, piece, player, target=None, strat='attack'):\r\n    positions = []\r\n    x, y = piece['x'], piece['y']\r\n    direc = 1 if player == 0 else - 1\r\n    if piece['piece'] == 'pawn' and strat == 'attack':\r\n    positions . append((x - 1, y + direc))\r\n    positions . append((x + 1, y + direc))\r\n    elif piece['piece'] == 'pawn' and strat == 'defence':\r\n    positions . append((x, y + direc))\r\n    if y == max(0, - direc * 7) + direc:\r\n        positions . append((x, y + 2 * direc))\r\n    elif piece['piece'] == 'knight':\r\n    for k in directions['knight']:\r\n    nexX, nexY = x + k[0], y + k[1]\r\n    if is_empty(pieces, target, nexX, nexY):\r\n        positions . append((nexX, nexY))\r\n    elif piece['piece'] == 'king':\r\n    for k in directions['queen']:\r\n    nexX, nexY = x + k[0], y + k[1]\r\n    if is_empty(pieces, target, nexX, nexY):\r\n        positions . append((nexX, nexY))\r\n    else:\r\n    for k in directions[piece['piece']]:\r\n    nexX, nexY = x + k[0], y + k[1]\r\n    while is_empty(pieces, target, nexX, nexY):\r\n    positions . append((nexX, nexY))\r\n    nexX += k[0]\r\n    nexY += k[1]\r\n    return positions\r\n    def can_move(pieces, player, piece, pos, target, en_passant=0):\r\n    direc = (1 if player else - 1) if en_passant else 0\r\n    new_pieces = deepcopy(pieces)\r\n    i = new_pieces . index(piece)\r\n    new_pieces[i]['x'] = pos[0]\r\n    new_pieces[i]['y'] = pos[1] + direc\r\n    for p in target:\r\n        new_pieces . remove(p)\r\n    return False if isCheck(new_pieces, player) else True\r\n    def isCheck(pieces, player):\r\n    king = [p for p in pieces if p['owner']\r\n            == player and p['piece'] == 'king'][0]\r\n    enemy_pieces = [p for p in pieces if p['owner']\r\n                    != player and p['piece'] != 'king']\r\n    result = []\r\n    for piece in enemy_pieces:\r\n    if (king['x'], king['y']) in possible_movements(pieces, piece, player, target=[king]):\r\n        result . append(piece)\r\n    return result or False\r\n    def isMate(pieces, player):\r\n    attackers = isCheck(pieces, player)\r\n    if attackers == False:\r\n        return False\r\n    king = [p for p in pieces if p['owner']\r\n            == player and p['piece'] == 'king'][0]\r\n    friends = [p for p in pieces if p['owner']\r\n               == player and p['piece'] != 'king']\r\n    enemy_pieces = [p for p in pieces if p['owner']\r\n                    != player and p['piece'] != 'king']\r\n\r\n    # King can escape\r\n    for pos in possible_movements(pieces, king, player, target=enemy_pieces):\r\n    at = [p for p in enemy_pieces if p['x'] == pos[0] and p['y'] == pos[1]]\r\n    if can_move(pieces, player, king, pos, at):\r\n        return False\r\n    # if king can't escape he can only be saved if attacked by one and only one enemy piece, chess knowledge\r\n    if len(attackers) == 1:\r\n    att = attackers[0]\r\n    x1, y1, x2, y2 = king['x'], king['y'], att['x'], att['y']\r\n    direc = 1 if player == 1 else - 1\r\n    for piece in friends:\r\n        # King can be saved en passant\r\n    if att['piece'] == 'pawn' and piece['piece'] == 'pawn' and att['y'] == piece['y'] == max(0, - direc * 7) + direc * 4 and abs(att['x'] - piece['x']) == 1:\r\n    if can_move(pieces, player, piece, (x2, y2), attackers, en_passant=1):\r\n        return False\r\n    # Attacker can be eliminated by friend piece\r\n    if (x2, y2) in possible_movements(pieces, piece, 1 - player, target=attackers):\r\n    if can_move(pieces, player, piece, (x2, y2), attackers):\r\n        return False\r\n    # attack can be intercepted by friend piece\r\n    if not (att['piece'] == 'pawn' or att['piece'] == 'knight'):\r\n    for pos in possible_movements(pieces, piece, 1 - player, target=attackers, strat='defence'):\r\n    x3, y3 = pos[0], pos[1]\r\n    if (y2 - y1) * x3 + (x2 * y1 - x1 * y2) == y3 * (x2 - x1) and min(x1, x2) < x3 < max(x1, x2) and min(y1, y2) < y3 < max(y1, y2):\r\n    if can_move(pieces, player, piece, (x3, y3), []):\r\n        return False\r\n    return True\r\n",
  "546a3fea8a3502302a000cd2": "def find_the_ball(start, swaps):\r\n    pos = start\r\n    for (a, b) in swaps:\r\n    if a == pos:\r\n    pos = b\r\n    elif b == pos:\r\n    pos = a\r\n    return pos\r\n",
  "56fbb2b8fca8b97e4d000a31": "table = str . maketrans(\"ACGT\", \"TGCA\")\r\n\r\n\r\ndef check_DNA(seq1, seq2):\r\n    seq1, seq2 = sorted((seq1, seq2), key=len)\r\n    return seq1 in seq2[:: - 1]. translate(table)\r\n",
  "58ecc0a8342ee5e920000115": "def mult_triangle(n):\n    total = (n * (n + 1) / 2) * * 2\n    odds = ((n + 1) / / 2) * * 4\n    return [total, total - odds, odds]\n",
  "520446778469526ec0000001": "def same_structure_as(original, other):\r\n    if isinstance(original, list) and isinstance(other, list) and len(original) == len(other):\r\n    for o1, o2 in zip(original, other):\r\n    if not same_structure_as(o1, o2):\r\n        return False\r\n    else:\r\n        return True\r\n    else:\r\n        return not isinstance(original, list) and not isinstance(other, list)\r\n",
  "5427db696f30afd74b0006a3": "def bowling_score(rolls):\r\n    \"Compute the total score for a player's game of bowling.\"\r\n    def is_spare(rolls):\r\n    return 10 == sum(rolls[: 2])\r\n\r\n    def is_strike(rolls):\r\n    return 10 == rolls[0]\r\n\r\n    def calc_score(rolls, frame):\r\n    return (sum(rolls) if frame == 10 else\r\n            sum(rolls[: 3]) + calc_score(rolls[1:], frame + 1) if is_strike(rolls) else\r\n            sum(rolls[: 3]) + calc_score(rolls[2:], frame + 1) if is_spare(rolls) else\r\n            sum(rolls[: 2]) + calc_score(rolls[2:], frame + 1))\r\n\r\n    return calc_score(rolls, 1)\r\n",
  "585cf93f6ad5e0d9bf000010": "pins = \"{7} {8} {9} {10}\\n\" + \\\r\n    \" {4} {5} {6} \\n\" + \\\r\n    \" {2} {3} \\n\" + \\\r\n    \" {1} \"\r\n\r\n\r\ndef bowling_pins(arr):\r\n    return pins . format(* (\" \" if i in arr else \"I\" for i in range(11)))\r\n",
  "5268988a1034287628000156": "def serpentine_traversal(tree) - > list:\r\n    def bfs(root):\r\n    depth = [root] if root else []\r\n    while depth:\r\n    yield [node . data for node in depth]\r\n    depth = [child for node in depth\r\n             for child in (node . left, node . right) if child]\r\n    return [node for i, line in enumerate(bfs(tree), 1) for node in line[:: i % 2 or - 1]]\r\n",
  "568338ea371e86728c000002": "import re\r\n\r\n\r\ndef to_seconds(time):\r\n    if bool(re . match('[0-9][0-9]:[0-5][0-9]:[0-5][0-9]\\Z', time)):\r\n    return int(time[: 2]) * 3600 + int(time[3: 5]) * 60 + int(time[6: 8])\r\n    else:\r\n    return None\r\n",
  "58957c5041c979cf9e00002f": "def boxes_packing(l, w, h):\r\n    boxes = sorted(sorted(t) for t in zip(l, w, h))\r\n    return all(s < l for b1, b2 in zip(boxes[: - 1], boxes[1:]) for s, l in zip(b1, b2))\r\n",
  "58c212c6f130b7c4660000a5": "def three_details(n):\r\n    m = 1 << n . bit_length()\r\n    return min(n - (m >> 1), m - n)\r\n",
  "58acf6c20b3b251d6d00002d": "from math import log10\n\n\ndef rocks(n):\n    return (n + 1) * int(log10(n) + 1) - (10 * * int(log10(n) + 1) - 1) / / 9\n",
  "58a65945fd7051d5e1000041": "def six_column_encryption(msg):\r\n    msg = msg . replace(' ', '.') + '.' * ((6 - len(msg) % 6) % 6)\r\n    return ' ' . join(msg[n:: 6] for n in range(6))\r\n",
  "58a64b48586e9828df000109": "def robot_walk(a):\n    i = 3\n    while (i < len(a) and a[i] < a[i - 2]):\n        i += 1\n    return i < len(a)\n",
  "58bcd7f2f6d3b11fce000025": "def direction_in_grid(n, m):\r\n    return \"LR\" [n % 2] if m >= n else \"UD\" [m % 2]\r\n",
  "56e6705b715e72fef0000647": "def zoom(n):\r\n    pattern = \"\"\r\n    center = (n - 1) / 2\r\n    for y in range(n):\r\n    for x in range(n):\r\n    d = max(abs(x - center), abs(y - center))\r\n    pattern += \"\u25a1\" if d % 2 else \"\u25a0\"\r\n    pattern += \"\\n\" if y < n - 1 else \"\"\r\n    return pattern\r\n",
  "58a6568827f9546931000027": "def number_of_carries(a, b):\n    ans, carrie = 0, 0\n    while a > 0 or b > 0:\n    carrie = (a % 10 + b % 10 + carrie) / / 10\n    ans += [0, 1][carrie > 0]\n    a / /= 10\n    b / /= 10\n    return ans\n",
  "58af9f7320a9ecedb30000f1": "from re import sub\n\n\ndef replace_dashes_as_one(s):\n    return sub(\"-[\\s-]*-\", '-', s)\n",
  "58ad2e9c0e3c08126000003f": "def not_so_random(b, w):\r\n    return ['White', 'Black'][b % 2]\r\n",
  "55af0d33f9b829d0a800008d": "def get_diagonale_code(grid):\r\n    grid = [line . split() for line in grid . split(\"\\n\")]\r\n    i, j, d, word = 0, 0, 1, \"\"\r\n    while 0 <= i < len(grid) and j < len(grid[i]):\r\n    if 0 <= j < len(grid[i]):\r\n    word += grid[i][j]\r\n    i, j = i + d, j + 1\r\n    else:\r\n        i += d\r\n    if i == 0 or i == len(grid) - 1:\r\n        d = - d\r\n    return word\r\n",
  "58bee820e9f98b215200007c": "def select(memory):\r\n    lst = memory . split(', ')\r\n    bad = {who . strip('!') for prev, who in zip(\r\n        [''] + lst, lst + ['']) if who . startswith('!') or prev . startswith('!')}\r\n    return ', ' . join(who for who in map(lambda s: s . strip('!'), lst) if who not in bad)\r\n",
  "57c15d314677bb2bd4000017": "def doors(n):\r\n    return int(n * * .5)\r\n",
  "5558bb17f7ba7532de0000aa": "from calendar import monthrange\r\nfrom itertools import cycle, islice\r\n\r\n\r\ndef schedule(staff, date, n):\r\n    if len(staff) < 2 * n:\r\n    return None\r\n    days = monthrange(int(date[2:]), int(date[: 2]))[1]\r\n    istaff = cycle(staff)\r\n    return [list(islice(istaff, n)) for _ in range(days)]\r\n",
  "55633765da97b266e3000067": "def k_fide2010(experience):\r\n    if len(experience) < 30:\r\n    return 25\r\n    elif experience and max(experience) < 2400:\r\n    return 15\r\n    return 10\r\n    def elo(experience, opponent, game_result, k=k_fide2010):\r\n    try:\r\n    last = experience[- 1]\r\n    except IndexError:\r\n    last = 1000\r\n    expected = 1.0 / (1 + 10 * * ((opponent - last) / 400.0))\r\n    return last + int(round(k(experience) * (game_result - expected)))\r\n",
  "5883b79101b769456e000003": "from itertools import chain\r\n\r\n\r\ndef split_all_even_numbers(lst, way):\r\n\r\n    def convert(n):\r\n    s = 1 - (n / / 2) % 2  # Shift for closest odd numbers\r\n    return ([n] if n % 2 else  # Is already odd\r\n            [n / / 2 - s, n / / 2 + s] if way == 0 else  # Two closest odd sum\r\n            [1, n - 1] if way == 1 else  # Two farthest odd sum\r\n            [1] * n if way == 3 else  # Split in ones\r\n            split_all_even_numbers([n / / 2] * 2, 2))  # Split in highest possible odds\r\n    return list(chain(* map(convert, lst)))\r\n",
  "58161c5ac7e37d17fc00002f": "from collections import Counter\r\n\r\n\r\ndef find_arr(arrA, arrB, rng, wanted):\r\n    ca, cb = Counter(arrA), Counter(arrB)\r\n    m, n = rng\r\n    m += (m % 2 == 1) == (wanted == 'even')\r\n    r = range(m, n + 1, 2)\r\n    return [v for v in r if ca[v] > 1 and cb[v] > 1]\r\n",
  "5629db57620258aa9d000014": "def mix(s1, s2):\r\n    hist = {}\r\n    for ch in \"abcdefghijklmnopqrstuvwxyz\":\r\n    val1, val2 = s1 . count(ch), s2 . count(ch)\r\n    if max(val1, val2) > 1:\r\n    which = \"1\" if val1 > val2 else \"2\" if val2 > val1 else \"=\"\r\n    hist[ch] = (- max(val1, val2), which + \":\" + ch * max(val1, val2))\r\n    return \"/\" . join(hist[ch][1] for ch in sorted(hist, key=lambda x: hist[x]))\r\n",
  "58429d526312ce1d940000ee": "from collections import Counter\n\n\ndef balance(arr1, arr2):\n    return sorted(Counter(arr1). values()) == sorted(Counter(arr2). values())\n",
  "587c0138110b20624e000253": "from itertools import cycle\r\n\r\n\r\ndef interpreter(tape, array):\r\n    idx, result = 0, list(map(int, array))\r\n    for cmd in cycle(map(int, tape)):\r\n    if idx == len(array):\r\n        break\r\n    if cmd:\r\n        result[idx] = 1 - result[idx]\r\n    else:\r\n        idx += 1\r\n    return '' . join(map(str, result))\r\n",
  "53b138b3b987275b46000115": "def compare_versions(ver1, ver2):\r\n    return [int(i) for i in ver1 . split(\".\")] >= [int(i) for i in ver2 . split(\".\")]\r\n",
  "589b30ddcf7d024850000089": "def jumble(strng):\r\n    return __import__(\"re\"). sub(r'(\\w{3,})', lambda m: m . group(0)[0] + m . group(0)[1: - 1][:: - 1] + m . group(0)[- 1], strng)\r\n",
  "586e4c61aa0428f04e000069": "def get_decimal(n):\r\n    return abs(n) % 1\r\n",
  "58ae6ae22c3aaafc58000079": "def permute_a_palindrome(input):\r\n    return sum(input . count(c) % 2 for c in set(input)) < 2\r\n",
  "544975fc18f47481ba00107b": "def circularly_sorted(arr):\r\n    return sum(x > y for x, y in zip(arr, arr[1:] + [arr[0]])) < 2\r\n",
  "548db0bd1df5bbf29b0000b7": "import re\nmonths_30 = '(04|06|09|11)'\nmonths_31 = '(01|03|05|07|08|10|12)'\nmonths_28 = '02'\ndays_30 = '(0[1-9]|[1-2][0-9]|30)'\ndays_31 = '(0[1-9]|[12][0-9]|3[01])'\ndays_28 = '(0[1-9]|1[0-9]|2[0-8])'\nvalid_date = re . compile('\\[(%s-%s|%s-%s|%s-%s)\\]' %\n                          (months_30, days_30, months_31, days_31, months_28, days_28))\n",
  "58ef87dc4db9b24c6c000092": "def sect_sort(lst, start, length=0):\r\n    end = start + length if length else len(lst)\r\n    return lst[: start] + sorted(lst[start: end]) + lst[end:]\r\n",
  "56c9f47b0844d85f81000fc2": "import re\r\n_PAT = re . compile(r'(\\d{4})\\.img(\\d+)')\r\n\r\n\r\ndef _KEY(pic): return map(int, _PAT . match(pic). groups())\r\n\r\n\r\ndef sort_photos(pics):\r\n    pics = sorted(pics, key=_KEY)[- 5:]\r\n    year, idx = _KEY(pics[- 1])\r\n    return pics + ['{}.img{}' . format(year, idx + 1)]\r\n",
  "5536a85b6ed4ee5a78000035": "def tour(friends, friend_towns, home_to_town_distances):\r\n    res = 0\r\n    s = 0\r\n    for i in friend_towns:\r\n    if i[0] in friends:\r\n    res = res + (home_to_town_distances[i[1]] * * 2 - s * * 2) * * (0.5)\r\n    s = home_to_town_distances[i[1]]\r\n    res = res + s\r\n    return int(res)\r\n",
  "55031bba8cba40ada90011c4": "import re\r\nPATTERN = re . compile(r'(\\d{1,3})')\r\n\r\n\r\ndef is_sum_of_cubes(s):\r\n    found = list(filter(lambda nStr: int(nStr) == sum(int(d) * * 3 for d in nStr), PATTERN . findall(s)))\r\n    return \"Unlucky\" if not found else \"{} {} {}\" . format(' ' . join(found), sum(map(int, found)), 'Lucky')\r\n",
  "5782dd86202c0e43410001f6": "from functools import reduce\r\nfrom itertools import cycle\r\nfrom operator import add, truediv, mul, sub\r\n\r\n\r\ndef do_math(s):\r\n    xs = sorted(s . split(), key=lambda x: next(c for c in x if c . isalpha()))\r\n    xs = [int('' . join(filter(str . isdigit, x))) for x in xs]\r\n    ops = cycle([add, sub, mul, truediv])\r\n    return round(reduce(lambda a, b: next(ops)(a, b), xs))\r\n",
  "5517fcb0236c8826940003c9": "from fractions import Fraction\r\n\r\n\r\ndef sum_fracts(lst):\r\n    if lst:\r\n    ret = sum(Fraction(a, b) for (a, b) in lst)\r\n    return ret . numerator if ret . denominator == 1 else [ret . numerator, ret . denominator]\r\n",
  "5616868c81a0f281e500005c": "def rank(st, we, n):\r\n    if not st:\r\n    return \"No participants\"\r\n    if n > len(we):\r\n    return \"Not enough participants\"\r\n\r\n    def name_score(name, w): return w * (len(name) +\r\n                                         sum([ord(c . lower()) - 96 for c in name]))\r\n\r\n    scores = [name_score(s, we[i]) for i, s in enumerate(st . split(','))]\r\n\r\n    scores = list(zip(st . split(','), scores))\r\n\r\n    scores . sort(key=lambda x: (- x[1], x[0]))\r\n\r\n    return scores[n - 1][0]\r\n",
  "55f4a44eb72a0fa91600001e": "class create_message (str):\r\n    def __call__(self, s=''):\r\n    return create_message(f' { self } { s } ' . strip())\r\n",
  "56a32dd6e4f4748cc3000006": "def get_towndata(town, strng):\r\n    for line in strng . split('\\n'):\r\n    s_town, s_data = line . split(':')\r\n    if s_town == town:\r\n    return [s . split(' ') for s in s_data . split(',')]\r\n    return None\r\n    def mean(town, strng):\r\n    data = get_towndata(town, strng)\r\n    if data is not None:\r\n    return sum([float(x) for m, x in data]) / len(data)\r\n    else:\r\n    return - 1.\r\n    def variance(town, strng):\r\n    data = get_towndata(town, strng)\r\n    if data is not None:\r\n    mean = sum([float(x) for m, x in data]) / len(data)\r\n    return sum([(float(x) - mean) * * 2 for m, x in data]) / len(data)\r\n    else:\r\n    return - 1.\r\n",
  "58e6996019af2cff71000081": "def ant(grid, col, row, n, dir=0):\r\n    for _ in range(n):\r\n        # turn\r\n    color = grid[row][col]\r\n    if color == 1:\r\n        dir = (dir + 1) % 4\r\n    elif color == 0:\r\n        dir = (dir - 1) % 4\r\n    # flip color\r\n    grid[row][col] ^= 1\r\n    # move forward\r\n    if dir == 0:\r\n        row -= 1\r\n    elif dir == 1:\r\n        col += 1\r\n    elif dir == 2:\r\n        row += 1\r\n    elif dir == 3:\r\n        col -= 1\r\n    # expand grid\r\n    if row < 0:\r\n    grid . insert(0, [0] * len(grid[0]))\r\n    row = 0\r\n    if row == len(grid):\r\n    grid . append([0] * len(grid[0]))\r\n    if col < 0:\r\n    for i in range(len(grid)):\r\n    grid[i]. insert(0, 0)\r\n    col = 0\r\n    if col == len(grid[0]):\r\n    for i in range(len(grid)):\r\n    grid[i]. append(0)\r\n\r\n    return grid\r\n",
  "55be10de92aad5ef28000023": "def checkchoose(m, n):\r\n    c = 1\r\n    for x in range(n / / 2 + 1):\r\n    if c == m:\r\n        return x\r\n    c = c * (n - x) / / (x + 1)\r\n    else:\r\n        return - 1\r\n",
  "55f347cfb44b879e1e00000d": "def highest_biPrimefac(p1, p2, n):  # p1, p2 primes and p1 < p2\r\n    factors = {}\r\n    k1, k2 = 1, 1\r\n    while p1 * * k1 * p2 * * k2 <= n:\r\n    while p1 * * k1 * p2 * * (k2 + 1) <= n:\r\n    k2 += 1\r\n    factors[p1 * * k1 * p2 * * k2] = (k1, k2)\r\n    k1, k2 = k1 + 1, 1\r\n    m = max(factors)\r\n    return [m, factors[m][0], factors[m][1]]\r\n",
  "5844e0890d3bedc5c5000e54": "class FileMaster ():\r\n    def __init__(self, filepath):\r\n    lk = filepath . rfind('.')\r\n    ls = filepath . rfind('/')\r\n    self . ext = filepath[lk + 1:]\r\n    self . file = filepath[ls + 1: lk]\r\n    self . path = filepath[: ls + 1]\r\n    def extension(self):\r\n    return self . ext\r\n    def filename(self):\r\n    return self . file\r\n    def dirpath(self):\r\n    return self . path\r\n",
  "5297bf69649be865e6000922": "def make_sentences(parts):\r\n    return ' ' . join(parts). replace(' ,', ','). strip(' .') + '.'\r\n",
  "53c93982689f84e321000d62": "import math\r\nimport collections\r\n\r\n\r\ndef getAllPrimeFactors(n):\r\n    numberToDecompose = n\r\n    if (not isinstance(numberToDecompose, (int, long)) or numberToDecompose <= 0):\r\n        return []\r\n    answer = ([1] if (numberToDecompose == 1) else [])\r\n    for possibleFactor in range(2, numberToDecompose + 1):\r\n    while (numberToDecompose % possibleFactor == 0):\r\n    answer . extend([possibleFactor])\r\n    numberToDecompose = numberToDecompose / possibleFactor\r\n    answer = sorted(answer)\r\n    return answer\r\n    def getUniquePrimeFactorsWithProducts(n):\r\n    ch = getUniquePrimeFactorsWithCount(n)\r\n    x = [a * * b for (a, b) in zip(ch[0], ch[1])]\r\n    return x\r\n    def getUniquePrimeFactorsWithCount(n):\r\n    c = collections . Counter(getAllPrimeFactors(n))\r\n    d = [a for (a, _) in c . items()]\r\n    e = [b for (_, b) in c . items()]\r\n    return [d, e]\r\n",
  "5420fc9bb5b2c7fd57000004": "from collections import Counter\r\n\r\n\r\ndef highest_rank(arr):\r\n    if arr:\r\n    c = Counter(arr)\r\n    m = max(c . values())\r\n    return max(k for k, v in c . items() if v == m)\r\n",
  "54ce9497975ca65e1a0008c6": "TO_KELVIN = {\r\n    'C': (1, 273.15),\r\n    'F': (5.0 / 9, 459.67 * 5.0 / 9),\r\n    'R': (5.0 / 9, 0),\r\n    'De': (- 2.0 / 3, 373.15),\r\n    'N': (100.0 / 33, 273.15),\r\n    'Re': (5.0 / 4, 273.15),\r\n    'Ro': (40.0 / 21, - 7.5 * 40 / 21 + 273.15),\r\n}\r\n\r\n\r\ndef convert_temp(temp, from_scale, to_scale):\r\n    if from_scale == to_scale:\r\n    return temp\r\n    if from_scale != 'K':\r\n    (a, b) = TO_KELVIN[from_scale]\r\n    temp = a * temp + b\r\n    if to_scale == 'K':\r\n    return int(round(temp))\r\n    (a, b) = TO_KELVIN[to_scale]\r\n    return int(round((temp - b) / a))\r\n",
  "57ee2a1b7b45efcf700001bf": "def cat_mouse(x, j):\r\n    d, c, m = x . find('D'), x . find('C'), x . find('m')\r\n    if - 1 in [d, c, m]:\r\n    return 'boring without all three'\r\n    if abs(c - m) <= j:\r\n    return 'Protected!' if c < d < m or m < d < c else 'Caught!'\r\n    return 'Escaped!'\r\n",
  "58a2a561f749ed763c00000b": "def cowboys_dollars(boots):\r\n    return \"This Rhinestone Cowboy has %d dollar bills in his right boot and %d in the left\" \\\r\n        % tuple([boots[i]. split(\"&\")[0]. count(\"[(1)]\") for i in (1, 0)])\r\n",
  "58f0ba42e89aa6158400000e": "def fold_to(distance, thickness=0.0001, folds=0):\r\n    if distance < 0:\r\n    return\r\n    while thickness < distance:\r\n    thickness *= 2\r\n    folds += 1\r\n    return folds\r\n",
  "58539230879867a8cd00011c": "def find_children(dancing_brigade):\r\n    return '' . join(sorted(dancing_brigade, key=lambda c: (c . upper(), c . islower())))\r\n",
  "57a22f50bb99445c5e000171": "# preloaded TreeNode class:\n\"\"\" \n    class TreeNode: \n    def __init__(self, value, children = None): \n    self.value = value \n    self.children = [] if children is None else children \n    \"\"\"\nfrom preloaded import TreeNode\n\n\ndef tree_printer(tree: TreeNode) - > str:\n    q = [tree]\n    res = []\n    while q:\n    res . append(\" \" . join(str(x . value) for x in q))\n    q = sum((x . children for x in q), [])\n    return \"\\n\" . join(res)\n",
  "56968ce7753513604b000055": "def pyramid_height(n):\n    i = 0\n    while n > 0:\n    i += 1\n    n -= i * * 2\n    return i - (n < 0)\n",
  "5893f03c779ce5faab0000f6": "from heapq import heapify, heappop, heappushpop\r\n\r\n\r\ndef obtain_max_number(lst):\r\n    heapify(lst)\r\n    while lst:\r\n    m = heappop(lst)\r\n    if lst and lst[0] == m:\r\n    heappushpop(lst, 2 * m)\r\n    return m\r\n",
  "53d3173cf4eb7605c10001a8": "def power(s):\r\n    \"\"\"Computes all of the sublists of s\"\"\"\r\n    set = [[]]\r\n    for num in s:\r\n    set += [x + [num] for x in set]\r\n    return set\r\n",
  "559e10e2e162b69f750000b4": "def dominator(arr):\r\n    for x in set(arr):\r\n    if arr . count(x) > len(arr) / 2.0:\r\n    return x\r\n    return - 1\r\n",
  "5710a50d336aed828100055a": "def sc(s): return 2 * len(s) - 1 + 5 * (s . count('+-') + s . count('-+'))\n",
  "585af8f645376cda59000200": "def format_poem(poem):\r\n    return \".\\n\" . join(poem . split(\". \"))\r\n",
  "5862eeeae20244d5eb000005": "def celsius_to_romer(temp):\r\n    # Converts temperature in degrees Celsius to degrees Romer\r\n    return (temp * 21 / 40) + 7.5\r\n",
  "585a36b445376cbc22000072": "def area_code(text):\r\n    return text[text . find(\"(\") + 1: text . find(\")\")]\r\n",
  "585a1f0945376c112a00019a": "def repeater(string, n):\r\n    return '\"{}\" repeated {} times is: \"{}\"' . format(string, n, string * n)\r\n",
  "53d32bea2f2a21f666000256": "def largest(n, xs):\r\n    import heapq\r\n    return heapq . nlargest(n, xs)[:: - 1]\r\n",
  "57faefc42b531482d5000123": "def remove(s):\r\n    return s . replace('!', '') + '!' * (len(s) - len(s . rstrip('!')))\r\n",
  "54381f0b6f032f933c000108": "def powers(list):\r\n    return 2 * * len(list)\r\n",
  "554910d77a3582bbe300009c": "from collections import Counter\r\n\r\n\r\ndef getWinner(ballots):\r\n    winner, n_votes = Counter(ballots). most_common(1)[0]\r\n    return winner if n_votes > len(ballots) / 2 else None\r\n",
  "57ad85bb7cb1f3ae7c000039": "from functools import reduce\nimport operator\n\n\ndef numbers_with_digit_inside(x, d):\n    l = [x for x in range(1, x + 1) if str(d) in str(x)]\n    return [len(l), sum(l), reduce(operator . mul, l, 1) if l else 0]\n",
  "56786a687e9a88d1cf00005d": "from collections import Counter\n\n\ndef validate_word(word):\n    return len(set(Counter(word . lower()). values())) == 1\n",
  "5650ab06d11d675371000003": "def split_in_parts(s, n):\r\n    return ' ' . join([s[i: i + n] for i in range(0, len(s), n)])\r\n",
  "54557d61126a00423b000a45": "def shorter_reverse_longer(a, b):\r\n    if len(a) < len(b):\r\n        a, b = b, a\r\n    return b + a[:: - 1] + b\r\n",
  "54554846126a002d5b000854": "def buy(x, arr):\r\n    for i, y in enumerate(arr[: - 1]):\r\n    for j, z in enumerate(arr[i + 1:]):\r\n    if y + z == x:\r\n    return [i, i + j + 1]\r\n",
  "563f879ecbb8fcab31000041": "def factory(x):\r\n    return lambda ar: [x * el for el in ar]\r\n",
  "5819a6fdc929bae4f5000a33": "import re\r\nCASES = [\r\n    ('snake', re . compile(r'\\A[a-z]+(_[a-z]+)+\\Z')),\r\n    ('kebab', re . compile(r'\\A[a-z]+(-[a-z]+)+\\Z')),\r\n    ('camel', re . compile(r'\\A[a-z]+([A-Z][a-z]*)+\\Z')),\r\n    ('none', re . compile(r'')),\r\n]\r\n\r\n\r\ndef case_id(c_str):\r\n    for case, pattern in CASES:\r\n    if pattern . match(c_str):\r\n        return case\r\n",
  "568ade64cfd7a55d9300003e": "def calculator(distance, bus_drive, bus_walk):\n    hr = distance / walk\n    return (\n        'Bus' if hr > 2 else\n        'Walk' if hr < 1 / 6 else\n        'Walk' if hr <= bus_drive / bus + bus_walk / walk else\n        'Bus'\n    )\n",
  "581de9a5b7bad5d369000150": "def day_plan(hours, tasks, duration):\n    td, hm, tmo = tasks * duration, hours * 60, tasks - 1\n    if td > hm:\n        return \"You're not sleeping tonight!\"\n    arr = [0] * (tasks + tmo)\n    arr[:: 2], arr[1:: 2] = [duration] * \\\n        tasks, [round((hm - td) / (tmo or 1))] * tmo\n    return arr\n",
  "581f4ac139dc423f04000b99": "from itertools import zip_longest\n\n\ndef transpose_two_strings(lst):\n    return \"\\n\" . join(f\" { a } { b } \" for a, b in zip_longest(* lst, fillvalue=\" \"))\n",
  "54592a5052756d5c5d0009c3": "def head(arr):\r\n    return arr[0]\r\n\r\n    def tail(arr):\r\n    return arr[1:]\r\n\r\n    def init(arr):\r\n    return arr[: - 1]\r\n\r\n    def last(arr):\r\n    return arr[- 1]\r\n",
  "541da001259d9ca85d000688": "def seqlist(first, skipBy, count):\r\n    last = (skipBy * count) + first\r\n    return list(range(first, last, skipBy))\r\n",
  "57ee24e17b45eff6d6000164": "def cat_mouse(x):\r\n    return 'Escaped!' if x . count('.') > 3 else 'Caught!'\r\n",
  "56684677dc75e3de2500002b": "def comfortable_word(word):\n    left, right = \"qwertasdfgzxcvb\", \"yuiophjklnm\"\n    l = True if word[0] in left else False\n    for letter in word[1:]:\n    if letter in left and l:\n    return False\n    if letter in right and not l:\n    return False\n    l = not l\n    return True\n",
  "57fcaed83206fb15fd00027a": "def replace_nth(text, n, old, new):\n    count = 0\n    res = \"\"\n    for c in text:\n    if c == old:\n    count += 1\n    if count == n:\n    res += new\n    count = 0\n    continue\n    res += c\n    return res\n",
  "584466950d3bedb9b300001f": "def string_counter(string, char):\r\n    return string . count(char)\r\n",
  "567501aec64b81e252000003": "from math import ceil\r\nnumbers = {0: \"zero\", 1: \"one\", 2: \"two\", 3: \"three\", 4: \"four\", 5: \"five\", 6: \"six\", 7: \"seven\", 8: \"eight\",\r\n           9: \"nine\", 10: \"ten\", 11: \"eleven\", 12: \"twelve\", 13: \"thirteen\", 14: \"fourteen\", 15: \"fifteen\",\r\n           16: \"sixteen\", 17: \"seventeen\", 18: \"eighteen\", 19: \"nineteen\", 20: \"twenty\"}\r\n\r\n\r\ndef wallpaper(l, w, h):\r\n    return \"zero\" if w * l == 0 else numbers[ceil((2 * l + 2 * w) * h * 1.15 / 5.2)]\r\n",
  "5497a3c181dd7291ce000700": "def diagonal_sum(array):\r\n    return sum(row[i] for i, row in enumerate(array))\r\n",
  "564fa92d1639fbefae00009d": "def factors(x):\r\n    return - 1 if type(x) != int or x < 1 else [i for i in range(1, x + 1) if x % i == 0][:: - 1]\r\n",
  "586909e4c66d18dd1800009b": "def multiply_all(arr):\r\n    def m(n):\r\n    return [i * n for i in arr]\r\n    return m\r\n",
  "53da6a7e112bd15cbc000012": "def sort_dict(d):\r\n    return sorted(d . items(), key=lambda x: x[1], reverse=True)\r\n",
  "57cf50a7eca2603de0000090": "from string import ascii_lowercase as al\r\ntbl = str . maketrans(al, al[10:] + al[: 10])\r\n\r\n\r\ndef move_ten(st):\r\n    return st . translate(tbl)\r\n",
  "58644e8ddf95f81a38001d8d": "def box(n):\r\n    return ['-' * n] + ['-' + ' ' * (n - 2) + '-'] * (n - 2) + ['-' * n]\r\n",
  "58d5e6c114286c8594000027": "def array_manip(array):\r\n    return [min([a for a in array[i + 1:] if a > array[i]], default=- 1) for i in range(len(array))]\r\n",
  "569b5cec755dd3534d00000f": "from math import ceil\r\n\r\n\r\ndef new_avg(arr, newavg):\r\n    value = int(ceil((len(arr) + 1) * newavg - sum(arr)))\r\n    if value < 0:\r\n    raise ValueError\r\n    return value\r\n",
  "5519e930cd82ff8a9a000216": "def hamming_weight(x): return bin(x). count('1')\n",
  "5299413901337c637e000004": "def get_missing_element(seq):\r\n    return 45 - sum(seq)\r\n",
  "544d114f84e41094a9000439": "from math import log\r\n\r\n\r\ndef powerof4(n):\r\n    if type(n) in (float, int) and n > 0:\r\n    return log(n, 4). is_integer()\r\n    return False\r\n",
  "588a3c3ef0fbc9c8e1000095": "def max_diff(list):\r\n    return max(list) - min(list) if list else 0\r\n",
  "517b25a48557c200b800000c": "def elapsed_seconds(start, end):\r\n    return (end - start). total_seconds()\r\n",
  "536c00e21da4dc0a0700128b": "def get_villain_name(birthdate):\r\n    first = [\"The Evil\", \"The Vile\", \"The Cruel\", \"The Trashy\", \"The Despicable\", \"The Embarrassing\",\r\n             \"The Disreputable\", \"The Atrocious\", \"The Twirling\", \"The Orange\", \"The Terrifying\", \"The Awkward\"]\r\n    last = [\"Mustache\", \"Pickle\", \"Hood Ornament\", \"Raisin\", \"Recycling Bin\",\r\n            \"Potato\", \"Tomato\", \"House Cat\", \"Teaspoon\", \"Laundry Basket\"]\r\n    # your code here\r\n    return first[birthdate . month - 1] + ' ' + last[int(str(birthdate . day)[- 1])]\r\n",
  "56044de2aa75e28875000017": "def compound_array(a, b):\r\n    x = []\r\n    while a or b:\r\n    if a:\r\n        x . append(a . pop(0))\r\n    if b:\r\n        x . append(b . pop(0))\r\n    return x\r\n",
  "534d0a229345375d520006a0": "def power_of_two(num):\r\n    return bin(num). count('1') == 1\r\n",
  "5720a81309e1f9b232001c5b": "import re\r\n\r\n\r\ndef gym_slang(phrase):\r\n    phrase = re . sub(r'([pP])robably', r'\\1rolly', phrase)\r\n    phrase = re . sub(r'([iI]) am', r\"\\1'm\", phrase)\r\n    phrase = re . sub(r'([iI])nstagram', r'\\1nsta', phrase)\r\n    phrase = re . sub(r'([dD])o not', r\"\\1on't\", phrase)\r\n    phrase = re . sub(r'([gG])oing to', r'\\1onna', phrase)\r\n    phrase = re . sub(r'([cC])ombination', r'\\1ombo', phrase)\r\n\r\n    return phrase\r\n",
  "540f8a19a7d43d24ac001018": "def nthterm(first, n, c):\r\n    return first + n * c\r\n",
  "575690ee34a34efb37001796": "from re import split, escape\n\n\ndef multiple_split(string, delimiters=[]):\n    return filter(None, split('|' . join(map(escape, delimiters)), string))\n",
  "55b051fac50a3292a9000025": "def filter_string(string):\r\n    return int('' . join(filter(str . isdigit, string)))\r\n",
  "585b1fafe08bae9988000314": "def explode(s):\r\n    return '' . join(c * int(c) for c in s)\r\n",
  "5296455e4fe0cdf2e000059f": "def calculate(num1, operation, num2):\r\n    # your code here\r\n    try:\r\n    return eval(\"{} {} {}\" . format(num1, operation, num2))\r\n    except (ZeroDivisionError, SyntaxError):\r\n    return None\r\n",
  "56833b76371e86f8b6000015": "import re\r\n\r\n\r\ndef to_cents(amount):\r\n    m = re . match(r'\\$(\\d+)\\.(\\d\\d)\\Z', amount)\r\n    return int(m . expand(r'\\1\\2')) if m else None\r\n",
  "57d60363a65454701d000e11": "def cut(x):\r\n    if x in FRUIT_NAMES:\r\n    m = (len(x) + 1) / / 2\r\n    return [x[: m], x[m:]]\r\n    return [x]\r\n\r\n    def cut_fruits(fruits):\r\n    return [x for xs in map(cut, fruits) for x in xs]\r\n",
  "56eff1e64794404a720002d2": "import re\n\n\ndef testit(s):\n    return len(re . findall(r'w.*?o.*?r.*?d', s, re . I))\n",
  "56d931ecc443d475d5000003": "def testit(n):\r\n    return bin(n). count('1')\r\n",
  "56d93f249c844788bc000002": "def testit(s):\r\n    return s[:: - 1]. title()[:: - 1]\r\n",
  "56d9292cc11bcc3629000533": "import re\n\n\ndef testit(s):\n    return re . sub(\"(.)(.)\", lambda m: chr((ord(m[1]) + ord(m[2])) / / 2), s)\n",
  "56d9b46113f38864b8000c5a": "def mystery(a):\r\n    return a[0] * a[3] + a[1] * a[2]\r\n",
  "570bbf7b6731d44b36001fde": "def sc(f): return \"Aa~ \" * (f - 1) + 'Pa!' * (f > 1) + ' Aa!' * \\\n    (1 < f < 7)  # 51 characters without this comment\n",
  "5710443187a36a9cee0005a1": "def sc(width, length, gaps):\r\n    # your code here\r\n    a, b = divmod(2 * width + 2 * length - 4, gaps + 1)\r\n    return 0 if b else a\r\n",
  "5713b0253b510cd97f001148": "def to_lover_case(string):\r\n    return \"\" . join(\"LOVE\" [(ord(c) - 97) % 4] if c . isalpha() else c for c in string)\r\n",
  "57fafd0ed80daac48800019f": "def remove(s):\r\n    return s . replace('!', '') + s . count('!') * '!'\r\n",
  "57ea0ee4491a151fc5000acf": "def calculate_time(b, c): return round(b / float(c) * 1.3 + 0.0001, 2)\n",
  "57fafb6d2b5314c839000195": "def remove(s):\r\n    return ' ' . join(w for w in s . split(' ') if w . count('!') != 1)\r\n",
  "57f8842367c96a89dc00018e": "def cat_mouse(map_, moves):\r\n    if 'C' not in map_ or 'm' not in map_:\r\n    return 'boring without two animals'\r\n    for row, line in enumerate(map_ . splitlines()):\r\n    if 'C' in line:\r\n    cat = row, line . index('C')\r\n    if 'm' in line:\r\n    mouse = row, line . index('m')\r\n\r\n    distance = abs(cat[0] - mouse[0]) + abs(cat[1] - mouse[1])\r\n\r\n    return 'Caught!' if distance <= moves else 'Escaped!'\r\n",
  "5768b775b8ed4a360f000b20": "def profitLoss(records):\r\n    return round(sum(price - price / (1 + profit / 100) for (price, profit) in records), 2)\r\n",
  "56a4a3d4043c316002000042": "import re\r\n_24H = re . compile(r'^([01]?\\d|2[0-3]):[0-5]\\d$')\r\n\r\n\r\ndef validate_time(time): return bool(_24H . match(time))\r\n",
  "57ee99a16c8df7b02d00045f": "def flatten_and_sort(array):\r\n    return sorted([j for i in array for j in i])\r\n",
  "58305403aeb69a460b00019a": "def reverse_and_mirror(s1, s2):\r\n    swap = s1 . swapcase()\r\n    return '{}@@@{}{}' . format(s2[:: - 1]. swapcase(), swap[:: - 1], swap)\r\n\r\n    # PEP8: function name should use snake_case\r\n    reverseAndMirror = reverse_and_mirror\r\n",
  "56445cc2e5747d513c000033": "import re\n\n\ndef validate(msg): return bool(re . match(\n    '^MDZHB \\d\\d \\d\\d\\d [A-Z]+ \\d\\d \\d\\d \\d\\d \\d\\d$', msg))\n",
  "56ce2f90aa4ac7a4770019fa": "def evenator(s):\r\n    return ' ' . join(w + w[- 1] if len(w) % 2 else w for w in s . translate(None, '.,?!_'). split())\r\n",
  "563319974612f4fa3f0000e0": "def square_color(file, rank):\r\n    return 'white' if (ord(file) + rank) % 2 else 'black'\r\n",
  "56f3ed90de254a2ca7000e20": "def find_discounted(prices):\r\n    prices = [int(n) for n in prices . split()]\r\n    return \" \" . join(prices . remove(round(p * 4 / 3)) or str(p) for p in prices)\r\n",
  "57ebaa8f7b45ef590c00000c": "chars = \"_zyxwvutsrqponmlkjihgfedcba!? \"\n\n\ndef switcher(arr):\n    return \"\" . join(chars[int(i)] for i in arr if i != \"0\")\n",
  "552564a82142d701f5001228": "def discover_original_price(discounted_price, sale_percentage):\r\n    return round(discounted_price / ((100 - sale_percentage) * 0.01), 2)\r\n",
  "54eecc187f9142cc4600119e": "class HTMLGen:\r\n    def __init__(self):\r\n    self . a = lambda t: self . tag(\"a\", t)\r\n    self . b = lambda t: self . tag(\"b\", t)\r\n    self . p = lambda t: self . tag(\"p\", t)\r\n    self . body = lambda t: self . tag(\"body\", t)\r\n    self . div = lambda t: self . tag(\"div\", t)\r\n    self . span = lambda t: self . tag(\"span\", t)\r\n    self . title = lambda t: self . tag(\"title\", t)\r\n\r\n    def tag(self, tag_str, content):\r\n    return \"<{}>{}</{}>\" . format(tag_str, content, tag_str)\r\n\r\n    def comment(self, content):\r\n    return \"<!--{}-->\" . format(content)\r\n",
  "5885b5d2b632089dc30000cc": "from dateutil . parser import parse\n\n\ndef day_of_week(date):\n    return parse(date, dayfirst=True). strftime(\"%A\")\n",
  "58342f14fa17ad4285000307": "def reach_destination(distance, speed):\r\n    time = round(2 * distance / speed) / 2\r\n    return 'The train will be there in %g hour%s.' % (time, 's' * (time != 1))\r\n",
  "5639bdcef2f9b06ce800005b": "def make_string(s):\r\n    return '' . join(a[0] for a in s . split())\r\n",
  "583ebb9328a0c034490001ba": "def duplicate_elements(m, n):\r\n    return not set(m). isdisjoint(n)\r\n",
  "57ced2c1c6fdc22123000316": "def num_obj(s):\r\n    return [{str(i): chr(i)} for i in s]\r\n",
  "5863f97fb3a675d9a700003f": "def sum_ppg(player_one, player_two):\r\n    return player_one['ppg'] + player_two['ppg']\r\n",
  "564f458b4d75e24fc9000041": "def remainder(dividend, divisor):\r\n    return dividend - (dividend / / divisor) * divisor\r\n",
  "56aed5db9d5cb55de000001c": "def two_count(n):\n    res = 0\n    while not n & 1:\n    res += 1\n    n >>= 1\n    return res\n",
  "552ab0a4db0236ff1a00017a": "def sillycase(silly):\r\n    half = (len(silly) + 1) / / 2\r\n    return silly[: half]. lower() + silly[half:]. upper()\r\n",
  "5300901726d12b80e8000498": "def fizzbuzz(n):\r\n    li = []\r\n    for i in range(1, n + 1):\r\n    if i % 3 == 0 and i % 5 == 0:\r\n    li . append(\"FizzBuzz\")\r\n    elif i % 3 == 0:\r\n    li . append(\"Fizz\")\r\n    elif i % 5 == 0:\r\n    li . append(\"Buzz\")\r\n    else:\r\n    li . append(i)\r\n    return li\r\n",
  "55466644b5d240d1d70000ba": "def candies(s):\r\n    if not s or len(s) == 1:\r\n    return - 1\r\n    return len(s) * max(s) - sum(s)\r\n",
  "57d86d3d3c3f961278000005": "def last(lst):\r\n    return lst[- 1] if lst else None\r\n",
  "5642bf07a586135a6f000004": "def step_through_with(s):\r\n    return any(m == n for m, n in zip(s, s[1:]))\r\n",
  "58249d08b81f70a2fc0001a4": "def closest_multiple_10(i):\r\n    return round(i, - 1)\r\n",
  "57b6f850a6fdc76523001162": "def counter_effect(n):\r\n    return [list(range(int(x) + 1)) for x in n]\r\n",
  "557a2c136b19113912000010": "def reverse_it(data):\r\n    if type(data) in [int, str, float]:\r\n    return type(data)(str(data)[:: - 1])\r\n    return data\r\n",
  "56e56756404bb1c950000992": "import math\r\n\r\n\r\ndef sum_differences_between_products_and_LCMs(pairs):\r\n    prod1 = [math . prod(x) for x in pairs]\r\n    lcm1 = [math . lcm(x[0], x[- 1]) for x in pairs]\r\n    return sum([x - y for x, y in zip(prod1, lcm1)])\r\n",
  "57fd696e26b06857eb0011e7": "def dative(word):\r\n    for c in word[:: - 1]:\r\n    if c in u'e\u00e9i\u00ed\u00f6\u0151\u00fc\u0171':\r\n    return word + 'nek'\r\n    elif c in u'a\u00e1o\u00f3u\u00fa':\r\n    return word + 'nak'\r\n",
  "55147ff29cd40b43c600058b": "def char_concat(word):\r\n    return '' . join([(word[i] + word[- 1 - i] + str(i + 1)) for i in range(len(word) / / 2)])\r\n",
  "587a88a208236efe8500008b": "# from math import copysign\ndef sequence_sum(a, b, step):\n    n = (b - a) / / step\n    return 0 if n < 0 else (n + 1) * (n * step + a + a) / / 2\n",
  "5856c5f7f37aeceaa100008e": "def baubles_on_tree(baubles, branches):\r\n    if not branches:\r\n        return \"Grandma, we will have to buy a Christmas tree first!\"\r\n    d, r = divmod(baubles, branches)\r\n    return [d + 1] * r + [d] * (branches - r)\r\n",
  "54fb963d3fe32351f2000102": "def collatz(n):\r\n    return 1 if n == 1 else 1 + collatz(3 * n + 1 if n % 2 else n / / 2)\r\n",
  "55a12bb8f0fac1ba340000aa": "def find_function(func, arr):\r\n    f = next(el for el in func if callable(el))\r\n    return [* filter(f, arr)]\r\n",
  "582609930626631a9600003e": "from statistics import median\n",
  "545cff101288c1d2da0006fb": "def pagination_text(page_number, page_size, total_products):\r\n    first = page_size * (page_number - 1) + 1\r\n    last = min(total_products, first + page_size - 1)\r\n    return \"Showing %d to %d of %d Products.\" % (first, last, total_products)\r\n",
  "564e7fc20f0b53eb02000106": "def consonant_count(str):\r\n    return sum(1 for c in str if c . isalpha() and c . lower() not in \"aeiou\")\r\n",
  "5868812b15f0057e05000001": "def tail_swap(strings):\r\n    head0, tail0 = strings[0]. split(':')\r\n    head1, tail1 = strings[1]. split(':')\r\n    return [head0 + ':' + tail1, head1 + ':' + tail0]\r\n",
  "5533c2a50c4fea6832000101": "def createDict(keys, values):\r\n    while len(keys) > len(values):\r\n    values . append(None)\r\n    dic = dict(zip(keys, values))\r\n    return dic\r\n",
  "552e45cc30b0dbd01100001a": "def zipvalidate(postcode):\r\n    return len(postcode) == 6 and postcode . isdigit() and postcode[0] not in \"05789\"\r\n",
  "58029cc9af749f80e3001e34": "def get_new_notes(salary, bills):\r\n    return max((salary - sum(bills)), 0) / / 5\r\n",
  "567ed73340895395c100002e": "import re\n\n\ndef signed_eight_bit_number(number):\n    return bool(re . match(\"(0|-128|-?([1-9]|[1-9]\\d|1[01]\\d|12[0-7]))\\Z\", number))\n",
  "586efc2dcf7be0f217000619": "def reverse_slice(s):\r\n    return [s[:: - 1][i:] for i in range(len(s))]\r\n",
  "57d1f36705c186d018000813": "def gordon(a):\r\n    return '!!!! ' . join(a . upper(). split()). translate(str . maketrans('AEIOU', '@****')) + '!!!!'\r\n",
  "55563df50dda59adf900004d": "def validate_ean(code):\r\n    code = map(int, code)\r\n    return (sum(code[0:: 2]) + sum(code[1:: 2]) * 3) % 10 == 0\r\n",
  "57ed30dde7728215300005fa": "def bumps(road):\r\n    return \"Woohoo!\" if road . count(\"n\") <= 15 else \"Car Dead\"\r\n",
  "5815f7e789063238b30001aa": "def redistribute_wealth(wealth):\r\n    wealth[:] = [sum(wealth) / len(wealth)] * len(wealth)\r\n",
  "56b8b0ae1d36bb86b2000eaa": "def convert(time):\r\n    return time . time(). strftime('%X,%f')[: - 3]\r\n",
  "56ed5f13c4e5d6c5b3000745": "def cheapest_quote(n):\r\n    prices = [(40, 3.85), (20, 1.93), (10, 0.97), (5, 0.49), (1, 0.10)]\r\n    result = 0\r\n    for q, c in prices:\r\n    result += n / / q * c\r\n    n = n % q\r\n    return round(result, 2)\r\n",
  "5822b65bb81f702016000026": "dict = {'-': \"file\", 'd': \"directory\", 'l': \"symlink\", 'c': \"character_file\",\r\n        'b': \"block_file\", 'p': \"pipe\", 's': \"socket\", 'D': \"door\"}\r\n\r\n\r\ndef linux_type(file_attribute):\r\n    return dict[file_attribute[0]]\r\n",
  "571d2e9eeed4a150d30011e7": "class Person:\r\n    def __init__(self, person: dict):\r\n    self . name = person . get('name')\r\n    self . chickenwings = person . get('chickenwings', 0)\r\n    self . hamburgers = person . get('hamburgers', 0)\r\n    self . hotdogs = person . get('hotdogs', 0)\r\n\r\n    def get_score(self):\r\n    return self . chickenwings * 5 + self . hamburgers * 3 + self . hotdogs * 2\r\n    def scoreboard(who_ate_what):\r\n    scores = []\r\n    for person in who_ate_what:\r\n    p = Person(person)\r\n    scores . append({\"name\": p . name, \"score\": p . get_score()})\r\n    return sorted(scores, key=lambda k: (- k[\"score\"], k['name']))\r\n",
  "56b7526481290c2ff1000c75": "def triple_shiftian(T, n):\r\n    for i in range(3, n + 1):\r\n    T . append(4 * T[i - 1] - 5 * T[i - 2] + 3 * T[i - 3])\r\n    return T[n]\r\n",
  "5566b0dd450172dfc4000005": "def length_of_sequence(arr, n):\r\n    if arr . count(n) != 2:\r\n    return 0\r\n    a = arr . index(n)\r\n    b = arr . index(n, a + 1)\r\n    return b - a + 1\r\n",
  "5806c2f897dba05dd900004c": "def magnitude(vector):\r\n    return sum(i * * 2 for i in vector) * * 0.5\r\n",
  "57f6051c3ff02f3b7300008b": "def meeting(rooms, need):\r\n    if need == 0:\r\n        return \"Game On\"\r\n    result = []\r\n    for people, chairs in rooms:\r\n    taken = min(max(chairs - len(people), 0), need)\r\n    result . append(taken)\r\n    need -= taken\r\n    if need == 0:\r\n        return result\r\n    return \"Not enough!\"\r\n",
  "579ba41ce298a73aaa000255": "NUMBERS = \"zero one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen\" . split()\r\nNUMBERS += [\"twenty thirty forty fifty sixty seventy eighty ninety\" . split()[n / / 10 - 2] + f\" { NUMBERS [ n % 10 ]} \" * (n % 10 > 0) for n in range(20, 100)]\r\n\r\n\r\ndef name_that_number(n):\r\n    return NUMBERS[n]\r\n",
  "57ecf6efc7fe13eb070000e1": "def outed(meet, boss):\r\n    return 'Get Out Now!' if (sum(meet . values()) + meet[boss]) / len(meet) <= 5 else 'Nice Work Champ!'\r\n",
  "558ee8415872565824000007": "def is_divisible(n, * args):\r\n    return all(not n % i for i in args)\r\n",
  "55b86beb1417eab500000051": "def gap(num):\r\n    s = bin(num)[2:]. strip(\"0\")\r\n    return max(map(len, s . split(\"1\")))\r\n",
  "57f604a21bd4fe771b00009c": "def meeting(rooms):\r\n    try:\r\n    return rooms . index('O')\r\n    except ValueError:\r\n    return 'None available!'\r\n",
  "570cbe88f616a8f4f50011ac": "from re import *\n\n\ndef short_form(s):\n    return sub(r\"(?<!^)[aeiou](?=.)\", '', s, flags=I)\n",
  "56d02e6cc6c8b49c510005bb": "def find_missing_numbers(arr):\r\n    return [x for x in range(arr[0], arr[- 1] + 1) if x not in arr] if arr else []\r\n",
  "56fac4cfda8ca6ec0f001746": "from datetime import timedelta, datetime\n\n\ndef day_and_time(mins):\n    return \"{:%A %H:%M}\" . format(datetime(2017, 1, 1) + timedelta(minutes=mins))\n",
  "5669a5113c8ebf16ed00004c": "def substring_test(first, second):\r\n    first = first . lower()\r\n    second = second . lower()\r\n\r\n    for i in range(len(first) - 2):\r\n    if first[i: i + 2] in second:\r\n    return True\r\n    return False\r\n",
  "56069d0c4af7f633910000d3": "def search(budget, prices):\r\n    return ',' . join(str(a) for a in sorted(prices) if a <= budget)\r\n",
  "55fc061cc4f485a39900001f": "# First, I coded a straightforward solution. It would work, but because it had to loop over all\n# students, and for every student over each locker, it had to do n^2 iterations. With numbers under\n# 10k this proved no problem, however the test cases apparently tested bigger numbers, since my\n# program kept getting timed out. I decided to record the number of open lockers for each n in range\n# 1-500 and discovered a nice pattern: 0 -1-1-1 (3 1's) -2-2-2-2-2 (5 2's) -3-3-3-3-3-3-3 (7 4's)\n# - et cetera. In other words, the number of consecutive numbers is (2n + 1). This was still not easy\n# to do so I looked up the sequence in OEIS. There, I discovered that the sequence was the integer\n# part of the square root of n. Now if that isn't easy to program... more of a maths problem, really.\ndef num_of_open_lockers(n):\n    return int(n * * 0.5)\n",
  "565b112d09c1adfdd500019c": "def nth_char(words):\r\n    return '' . join(w[i] for i, w in enumerate(words))\r\n",
  "56b5ebaa26fd54188b000018": "def amicable_numbers(n1, n2):\r\n    s1 = sum([x for x in range(1, n1) if n1 % x == 0])\r\n    s2 = sum([x for x in range(1, n2) if n2 % x == 0])\r\n    return s1 == n2 and s2 == n1\r\n",
  "582f52208278c6be55000067": "from decimal import Decimal, ROUND_HALF_UP\n\n\ndef round_to_five(numbers):\n    return [(n / 5). quantize(1, ROUND_HALF_UP) * 5 for n in map(Decimal, numbers)]\n",
  "57efab9acba9daa4d1000b30": "def bald(s):\r\n    hair_names = {\r\n        0: \"Clean!\",\r\n        1: \"Unicorn!\",\r\n        2: \"Homer!\",\r\n        3: \"Careless!\",\r\n        4: \"Careless!\",\r\n        5: \"Careless!\",\r\n    }\r\n    return [s . replace(\"/\", \"-\"), \"Hobo!\"] if s . count(\"/\") > 5 else [s . replace(\"/\", \"-\"), hair_names[s . count(\"/\")]]\r\n",
  "57e8fba2f11c647abc000944": "def fire_fight(s):\r\n    return s . replace('Fire', '~~')\r\n",
  "57bf599f102a39bb1e000ae5": "def fibs_fizz_buzz(n):\r\n    a, b, out = 0, 1, []\r\n\r\n    for i in range(n):\r\n    s = \"Fizz\" * (b % 3 == 0) + \"Buzz\" * (b % 5 == 0)\r\n    out . append(s if s else b)\r\n    a, b = b, a + b\r\n    return out\r\n",
  "57a23c2acf1fa514d0001034": "def who_took_the_car_key(message):\r\n    return '' . join(chr(int(i, 2)) for i in message)\r\n",
  "554754ac9d8ac3be120000b2": "def where_is_he(p, bef, aft):\r\n    return min(p - bef, aft + 1)\r\n",
  "583ade15666df5a64e000058": "def evens_and_odds(n):\r\n    return hex(n)[2:] if n % 2 else bin(n)[2:]\r\n",
  "563b1f55a5f2079dc100008a": "def get_larger_numbers(a, b):\r\n    return [max(x, y) for x, y in zip(a, b)]\r\n",
  "5753b987aeb792508d0010e2": "def every(lst, n=1, start=0):\r\n    return lst[start:: n]\r\n",
  "56d31aaefd3a52902a000d66": "import re\n\n\ndef rad_ladies(name):\n    return \"\" . join(re . findall(\"[A-Z\\s!]+\", name . upper()))\n",
  "567de8823fa5eee02100002a": "def whitespace(string):\r\n    return not string or string . isspace()\r\n",
  "57ed56657b45ef922300002b": "def broken(inp):\r\n    \"\"\"Replace each '0' with '1' and vice versa.\"\"\"\r\n    return inp . translate(str . maketrans(\"01\", \"10\"))\r\n",
  "55d6a0e4ededb894be000005": "def encode(string):\r\n    return '' . join(str(ord(c . upper()) - 64) if c . isalpha() else c for c in string)\r\n",
  "55d410c492e6ed767000004f": "def vowel_2_index(string):\r\n    vowels = 'aeiouAEIOU'\r\n    return '' . join(x if x not in vowels else str(n + 1) for n, x in enumerate(string))\r\n",
  "563fb342f47611dae800003c": "def trim(phrase, size):\r\n\r\n    if len(phrase) <= size:\r\n    return phrase\r\n    elif size <= 3:\r\n    return phrase[: size] + '...'\r\n    else:\r\n    return phrase[: size - 3] + '...'\r\n",
  "5609fd5b44e602b2ff00003a": "def process_2arrays(arr1, arr2):\r\n    s1, s2 = set(arr1), set(arr2)\r\n    return [len(s1 & s2), len(s1 ^ s2), len(s1 - s2), len(s2 - s1)]\r\n",
  "55de6173a8fbe814ee000061": "def unused_digits(* args):\r\n    return \"\" . join(number for number in \"0123456789\" if number not in str(args))\r\n",
  "56314d3c326bbcf386000007": "def tax_calculator(total):\n    if not isinstance(total, (int, float)) or total < 0:\n        return 0\n    tax = 0\n    if total > 30:\n        tax = 2.2 + (total - 30) * 0.03\n    elif total > 20:\n        tax = 1.7 + (total - 20) * 0.05\n    elif total > 10:\n        tax = 1 + (total - 10) * 0.07\n    elif total > 0:\n        tax = total / 10.0\n    return round(tax, 2)\n",
  "57eb936de1051801d500008a": "def explode(arr):\r\n    numbers = [n for n in arr if type(n) == int]\r\n    return [arr] * sum(numbers) if numbers else \"Void!\"\r\n",
  "55b8c0276a7930249e00003c": "def encryption(string):\r\n    return ' ' . join(CHAR_TO_MORSE . get(a, a) for a in string)\r\n",
  "56414fdc6488ee99db00002c": "def absent_vowel(x):\r\n    return ['aeiou' . index(i) for i in 'aeiou' if i not in x][0]\r\n",
  "52dbae61ca039685460001ae": "def change(st):\r\n    new = \"\"\r\n    st = st . lower()\r\n    for letter in \"abcdefghijklmnopqrstuvwxyz\":\r\n    if letter in st:\r\n    new += \"1\"\r\n    else:\r\n    new += \"0\"\r\n    return new\r\n",
  "55c9fb1b407024afe6000055": "def find_employees_role(name):\r\n\r\n    for employee in employees:\r\n    if employee['first_name'] + ' ' + employee['last_name'] == name:\r\n    return employee['role']\r\n\r\n    return \"Does not work here!\"\r\n",
  "56808724e7784d220c00003f": "def each_char(s, a):\r\n    return '' . join(a(x) if callable(a) else x + a for x in s)\r\n",
  "57d4e99bec16701a67000033": "UMLAUTS = {'A': '\u00c4', 'E': '\u00cb', 'I': '\u00cf', 'O': '\u00d6', 'U': '\u00dc', 'Y': '\u0178',\r\n           'a': '\u00e4', 'e': '\u00eb', 'i': '\u00ef', 'o': '\u00f6', 'u': '\u00fc', 'y': '\u00ff'}\r\n\r\n\r\ndef heavy_metal_umlauts(s):\r\n    return '' . join(UMLAUTS . get(a, a) for a in s)\r\n",
  "57ce0c634001a5f3c7000006": "from re import match\n\n\ndef date_checker(date):\n    return bool(match(r'\\d{2}-\\d{2}-\\d{4}\\s\\d{2}:\\d{2}', date))\n",
  "5714803d2817ffce17000a35": "def find_a_b(numbers, c):\r\n    for i, a in enumerate(numbers, 1):\r\n    for b in numbers[i:]:\r\n    if a * b == c:\r\n        return [a, b]\r\n",
  "56c2578be8b139bd5c001bd8": "def match(j, c):\r\n    matches = []\r\n\r\n    for can in c:\r\n    if (can[\"desires_equity\"] and j[\"equity_max\"] > 0) or can[\"desires_equity\"] == False:\r\n    for loc in j[\"locations\"]:\r\n    if loc in [can[\"current_location\"]] + can[\"desired_locations\"]:\r\n    matches . append(can)\r\n    break\r\n    return matches\r\n",
  "58488e89cc8feac6cb000941": "reg = '<[^>]*>'\n",
  "580a4001d6df740d61000301": "def complete_series(a):\r\n    return list(range(max(a) + 1)) if len(a) == len(set(a)) else [0]\r\n",
  "5637ead70013386e30000027": "def generator(a):\r\n    c = 1\r\n    while True:\r\n    yield f\" { a } x { c } = { a * c } \"\r\n    c += 1\r\n",
  "5419cf8939c5ef0d50000ef2": "def calculate_probability(n):\r\n    return round(1 - (364 / 365) * * (n * (n - 1) / 2), 2)\r\n",
  "55ab9eee6badbdaf72000075": "def p_num(n):\r\n    k = round((1 + (1 + 24 * n) * * .5) / 6)\r\n    return n != 0 and n == k * (3 * k - 1) / / 2\r\n    def g_p_num(n):\r\n    det = (1 + 24 * n) * * .5\r\n    k1, k2 = round((1 + (1 + 24 * n) * * .5) / 6), round((- 1 + (1 + 24 * n) * * .5) / 6)\r\n    return n == 0 or n == k1 * (3 * k1 - 1) / / 2 or n == k2 * (3 * k2 + 1) / / 2\r\n    def s_p_num(n):\r\n    return p_num(n) and n * * .5 % 1 == 0\r\n",
  "55b1e5c4cbe09e46b3000034": "import math\n\n\ndef is_pronic(n):\n    return n >= 0 and math . sqrt(1 + 4 * n) % 1 == 0\n",
  "57eba158e8ca2c8aba0002a0": "def last(s):\r\n    return sorted(s . split(), key=lambda x: x[- 1])\r\n",
  "557efeb04effce569d000022": "def make_acronym(phrase):\r\n    try:\r\n    return '' . join(word[0]. upper() if word . isalpha() else 0 for word in phrase . split())\r\n    except AttributeError:\r\n    return 'Not a string'\r\n    except TypeError:\r\n    return 'Not letters'\r\n",
  "55f3facb78a9fd5b26000036": "def check_root(string):\r\n    try:\r\n    a, b, c, d = [int(i) for i in string . split(',')]\r\n    if not (a == b - 1 and a == c - 2 and a == d - 3):\r\n    return 'not consecutive'\r\n    s = a * b * c * d + 1\r\n    return str(s) + ', ' + str(int(s * * 0.5))\r\n    except:\r\n    return 'incorrect input'\r\n",
  "57d2ba8095497e484e00002e": "def borrow(s):\r\n    return '' . join(filter(str . isalpha, s . lower()))\r\n",
  "5603a4dd3d96ef798f000068": "def share_price(invested, changes):\r\n    for change in changes:\r\n    invested = invested * (100 + change) / 100.0\r\n    return format(invested, '.2f')\r\n",
  "5865a28fa5f191d35f0000f8": "def take_umbrella(weather, rain_chance):\r\n    # Your code here.\r\n    return (weather == 'cloudy' and rain_chance > 0.20) or weather == 'rainy' or (weather == 'sunny' and rain_chance > 0.5)\r\n",
  "56a921fa8c5167d8e7000053": "CRITERIA = (str . islower, str . isupper, str . isdigit)\r\n\r\n\r\ndef password(s):\r\n    return len(s) > 7 and all(any(map(f, s)) for f in CRITERIA)\r\n",
  "56b97b776ffcea598a0006f2": "def bubblesort_once(l):\r\n    l = l[:]\r\n    for i in range(len(l) - 1):\r\n    if l[i] > l[i + 1]:\r\n    l[i], l[i + 1] = l[i + 1], l[i]\r\n    return l\r\n",
  "589519d1f0902e01af000054": "def perimeter_sequence(a, n):\r\n    return 4 * n * a\r\n",
  "559e5b717dd758a3eb00005a": "def drop_cap(str_):\r\n    return ' ' . join(w . capitalize() if len(w) > 2 else w for w in str_ . split(' '))\r\n",
  "559f89598c0d6c9b31000125": "def archers_ready(archers):\r\n    return all(i >= 5 for i in archers) if archers else False\r\n",
  "570fd7ad34e6130455001835": "def zebulansNightmare(s):\r\n    return s[0] + s . title(). replace(\"_\", \"\")[1:]\r\n",
  "559d7951ce5e0da654000073": "def alternate_sq_sum(arr):\r\n    return sum([x * * 2 if i % 2 == 1 else x for i, x in enumerate(arr)])\r\n",
  "57eead3b5f79f6d977001fb7": "def digit_all(x):\r\n    return '' . join(d for d in x if d . isdigit()) if isinstance(x, str) else 'Invalid input !'\r\n",
  "5660aa3d5e011dfd6e000063": "def find_spaceship(astromap):\r\n    lines = astromap . splitlines()\r\n    for y, line in enumerate(lines):\r\n    x = line . find('X')\r\n    if x != - 1:\r\n    return [x, len(lines) - 1 - y]\r\n    return 'Spaceship lost forever.'\r\n",
  "560a4962c0cc5c2a16000068": "def eq_sum_powdig(h, e):\r\n    return [i for i in range(2, h + 1) if sum(int(j) * * e for j in str(i)) == i]\r\n",
  "540c013634e6bac0350000a5": "def projectPartners(n):\r\n    return n * (n - 1) / 2\r\n",
  "5862e7c63f8628a126000e18": "def box_capacity(length, width, height):\r\n    return (length * 12 / / 16) * (width * 12 / / 16) * (height * 12 / / 16)\r\n",
  "5892595f190ca40ad0000095": "def mispelled(word1, word2):\r\n    l1, l2 = len(word1), len(word2)\r\n    if l1 == l2:\r\n    return sum(1 for a, b in zip(word1, word2) if a != b) <= 1\r\n    if l1 - l2 == 1:\r\n    return word1 . startswith(word2) or word1 . endswith(word2)\r\n    if l1 - l2 == - 1:\r\n    return word2 . startswith(word1) or word2 . endswith(word1)\r\n    return False\r\n",
  "580a41b6d6df740d6100030c": "def alan(arr):\r\n    s = {'Rejection', 'Disappointment',\r\n         'Backstabbing Central', 'Shattered Dreams Parkway'}\r\n    return \"Smell my cheese you mother!\" if s . issubset(arr) else \"No, seriously, run. You will miss it.\"\r\n",
  "57f7b8271e3d9283300000b4": "def even_or_odd(s):\r\n    even_minus_odd = sum([- x if x % 2 else x for x in map(int, s)])\r\n    if even_minus_odd > 0:\r\n    return \"Even is greater than Odd\"\r\n    elif even_minus_odd < 0:\r\n    return \"Odd is greater than Even\"\r\n    else:\r\n    return \"Even and Odd are the same\"\r\n",
  "564e1d90c41a8423230000bc": "def knightVsKing(knightPosition, kingPosition):\r\n    dx = knightPosition[0] - kingPosition[0]\r\n    dy = ord(knightPosition[1]) - ord(kingPosition[1])\r\n    d = dx * dx + dy * dy\r\n    if d == 5:\r\n        return 'Knight'\r\n    if d < 3:\r\n        return 'King'\r\n    return 'None'\r\n",
  "583df40bf30065fa9900010c": "def get_mean(arr, x, y):\r\n    if 1 < x <= len(arr) and 1 < y <= len(arr):\r\n    return (sum(arr[: x]) / x + sum(arr[- y:]) / y) / 2\r\n    return - 1\r\n",
  "5846174c5955406d02000b59": "def four_seasons(d):\r\n    return {\r\n        d < 80: 'Winter Season',\r\n        79 < d < 172: 'Spring Season',\r\n        171 < d < 264: 'Summer Season',\r\n        263 < d < 355: 'Autumn Season',\r\n        354 < d < 366: 'Winter Season',\r\n        d > 365: 'The year flew by!'\r\n    }[True]\r\n",
  "585a1a227cb58d8d740001c3": "def repeater(string, n):\r\n    return string * n\r\n",
  "5583d268479559400d000064": "def binary_to_string(binary):\r\n    return \"\" . join([chr(int(binary[i: i + 8], 2)) for i in range(0, len(binary), 8)])\r\n",
  "56baeae7022c16dd7400086e": "from re import sub\r\n\r\n\r\ndef phone(dir, num):\r\n    if dir . count(\"+\" + num) == 0:\r\n    return \"Error => Not found: \" + num\r\n    if dir . count(\"+\" + num) > 1:\r\n    return \"Error => Too many people: \" + num\r\n    for line in dir . splitlines():\r\n    if \"+\" + num in line:\r\n    name = sub(\".*<(.*)>.*\", \"\\g<1>\", line)\r\n    line = sub(\"<\" + name + \">|\\+\" + num, \"\", line)\r\n    address = \" \" . join(sub(\"[^a-zA-Z0-9\\.-]\", \" \", line). split())\r\n    return \"Phone => %s, Name => %s, Address => %s\" % (num, name, address)\r\n",
  "535474308bb336c9980006f2": "def greet(name):\r\n    return f'Hello { name . title ()} !'\r\n",
  "58902f676f4873338700011f": "def is_lucky(ticket):\r\n    if len(ticket) == 6 and ticket . isdigit():\r\n    t = list(map(int, ticket))\r\n    return sum(t[: 3]) == sum(t[3:])\r\n    return False\r\n",
  "56548dad6dae7b8756000037": "def what_is_the_time(time_in_mirror):\r\n    h, m = map(int, time_in_mirror . split(':'))\r\n    return '{:02}:{:02}' . format(- (h + (m != 0)) % 12 or 12, - m % 60)\r\n",
  "58712dfa5c538b6fc7000569": "def count_red_beads(nb):\r\n    return max(0, 2 * (nb - 1))\r\n",
  "542c0f198e077084c0000c2e": "def divisors(n):\r\n    return len([l_div for l_div in range(1, n + 1) if n % l_div == 0])\r\n",
  "56a75b91688b49ad94000015": "def abundant_number(num):\r\n    return (sum([e for e in range(1, num) if num % e == 0]) > num)\r\n",
  "562d8d4c434582007300004e": "def obfuscate(email):\r\n    return email . replace(\"@\", \" [at] \"). replace(\".\", \" [dot] \")\r\n",
  "582aafca2d44a4a4560000e7": "from bisect import bisect_left as keep_order\n",
  "55486cb94c9d3251560000ff": "from fractions import Fraction\r\n\r\n\r\ndef calculate_ratio(w, h):\r\n    if w * h == 0:\r\n    raise ValueError\r\n    f = Fraction(w, h)\r\n    return f\" { f . numerator } : { f . denominator } \"\r\n",
  "56abc5e63c91630882000057": "def next_numb(val):\r\n    i = val + 1\r\n    while i <= 9999999999:\r\n    if i % 3 == 0 and i % 2 and len(str(i)) == len(set(str(i))):\r\n    return i\r\n    i += 1\r\n    return 'There is no possible number that fulfills those requirements'\r\n",
  "55c9a8cda33889d69e00008b": "def bob(what):\r\n    return \"%s, idjits!\" % drunkenDoodling . get(what, \"I have friggin no idea yet\")\r\n",
  "5662292ee7e2da24e900012f": "def get_socks(name, socks):\r\n    if name == 'Punky':\r\n    if socks:\r\n    for s in socks[1:]:\r\n    if s != socks[0]:\r\n    return [socks[0], s]\r\n    elif name == 'Henry':\r\n    seen = set()\r\n    for s in socks:\r\n    if s in seen:\r\n    return [s, s]\r\n    seen . add(s)\r\n    else:\r\n    raise ValueError\r\n    return []\r\n",
  "57b2020eb69bfcbf64000375": "def next_letter(string):\r\n    return \"\" . join(chr(ord(c) + (- 25 if c in 'zZ' else 1)) if c . isalpha() else c for c in string)\r\n",
  "58545549b45c01ccab00058c": "def calculate_total(subtotal, tax, tip):\r\n    return round(subtotal * (1 + tax / 100.0 + tip / 100.0), 2)\r\n",
  "563a8656d52a79f06c00001f": "import re\n\n\ndef is_valid(idn):\n    return re . compile('^[a-z_\\$][a-z0-9_\\$]*$', re . IGNORECASE). match(idn) != None\n",
  "56f5594a575d7d3c0e000ea0": "def conference_picker(cities_visited, cities_offered):\r\n    for city in cities_offered:\r\n    if city not in cities_visited:\r\n    return city\r\n    return 'No worthwhile conferences this year!'\r\n",
  "581b30af1ef8ee6aea0015b9": "def countWins(winnerList, country):\r\n    return sum(x . get('country') == country for x in winnerList)\r\n",
  "5592fc599a7f40adac0000a8": "import numpy as np\n\n\ndef sum_diagonals(matrix):\n    # your code here\n    matrix = np . matrix(matrix)\n    return sum(np . diag(matrix, 0)) + sum(np . diag(np . flip(matrix, axis=1), 0))\n",
  "56853c44b295170b73000007": "def is_square(arr):\r\n    if arr:\r\n    return all((a * * 0.5). is_integer() for a in arr)\r\n",
  "561046a9f629a8aac000001d": "def match_arrays(v, r):\r\n    return sum(x in r for x in v)\r\n\r\n    # DON'T remove\r\n    verbose = False  # set to True to diplay arrays being tested in the random tests\r\n",
  "561bbcb0fbbfb0f5010000ee": "def calculate_seconds(s):\r\n\t minutes, seconds = [int(x) for x in s . split(':')]\r\n\t return minutes * 60 + seconds\r\n def longest_possible ( playback ):\r\n\t candidates = [ song for song in songs if calculate_seconds ( song [ 'playback' ]) <= playback ]\r\n\t return sorted ( candidates , key = lambda x : calculate_seconds ( x [ 'playback' ]), reverse = True )[ 0 ][ 'title' ] if len ( candidates ) > 0 else False",
  "5832db03d5bafb7d96000107": "def lottery(s):\r\n    return \"\" . join(dict . fromkeys(filter(str . isdigit, s))) or \"One more run!\"\r\n",
  "5838a66eaed8c259df000003": "def convert_palindromes(numbers):\r\n    return [str(n) == str(n)[:: - 1] for n in numbers]\r\n",
  "56dbed3a13c2f61ae3000bcd": "def noonerize(numbers):\r\n\r\n    try:\r\n    num1 = int(str(numbers[1])[0] + str(numbers[0])[1:])\r\n    num2 = int(str(numbers[0])[0] + str(numbers[1])[1:])\r\n    except ValueError:\r\n    return \"invalid array\"\r\n    return abs(num1 - num2)\r\n",
  "57a73e697cb1f31dd70000d2": "animals = ['Rat', 'Ox', 'Tiger', 'Rabbit', 'Dragon', 'Snake',\r\n           'Horse', 'Goat', 'Monkey', 'Rooster', 'Dog', 'Pig']\r\nelements = ['Wood', 'Fire', 'Earth', 'Metal', 'Water']\r\n\r\n\r\ndef chinese_zodiac(year):\r\n    year -= 1984\r\n    return elements[year / / 2 % 5] + \" \" + animals[year % 12]\r\n",
  "55f8ba3be8d585b81e000080": "OPERATORS = {\r\n    '039': 'Golden Telecom', '050': 'MTS', '063': 'Life:)', '066': 'MTS',\r\n    '067': 'Kyivstar', '068': 'Beeline', '093': 'Life:)', '095': 'MTS',\r\n    '096': 'Kyivstar', '097': 'Kyivstar', '098': 'Kyivstar', '099': 'MTS'}\r\n\r\n\r\ndef detect_operator(num):\r\n    return OPERATORS . get(str(num)[1: 4], 'no info')\r\n",
  "57a06005cf1fa5fbd5000216": "def words_to_sentence(words):\r\n    return ' ' . join(words)\r\n",
  "5805ed25c2799821cb000005": "import string\r\n\r\n\r\ndef cake(candles: int, debris: str) - > str:\r\n    fallen_candles = sum(\r\n        string . ascii_letters . index(char) if index % 2 else ord(char)\r\n        for index, char in enumerate(debris)\r\n    )\r\n\r\n    return \"Fire!\" if candles and fallen_candles > candles * 0.7 else \"That was close!\"\r\n",
  "56b8903933dbe5831e000c76": "def spoonerize(words):\r\n    a, b = words . split()\r\n    return '{}{} {}{}' . format(b[0], a[1:], a[0], b[1:])\r\n",
  "57a04da9e298a7ee43000111": "def reverse_list(lst):\r\n    return lst[:: - 1]\r\n",
  "56242b89689c35449b000059": "def chess_board(rows, columns):\r\n    return [[\"OX\" [(row + col) % 2] for col in range(columns)] for row in range(rows)]\r\n",
  "564ab935de55a747d7000040": "def remove(text, what):\r\n    for char in what:\r\n    text = text . replace(char, '', what[char])\r\n    return text\r\n",
  "56a6ce697c05fb4667000029": "def next_pal(val):\r\n    val += 1\r\n    while str(val) != str(val)[:: - 1]:\r\n    val += 1\r\n    return val\r\n",
  "5747a9bbe2fab9a0c400012f": "def gc_content(seq):\r\n    if not seq:\r\n    return 0.0\r\n    else:\r\n    res = seq . count(\"C\") + seq . count(\"G\")\r\n    return round(res * 100 / len(seq), 2)\r\n",
  "57066ad6cb72934c8400149e": "from re import search\n\n\ndef body_count(code):\n    return bool(search(r'(?:[A-Z]\\d){5}\\.-[A-Z]%\\d\\.\\d{2}\\.', code))\n",
  "57e90bcc97a0592126000064": "def sea_sick(sea):\r\n    return \"Throw Up\" if (sea . count(\"~_\") + sea . count(\"_~\")) / len(sea) > 0.2 else \"No Problem\"\r\n",
  "57d27a0a26427672b900046f": "def duck_shoot(ammo, aim, ducks):\r\n    return ducks . replace('2', 'X', int(ammo * aim))\r\n",
  "564e48ebaaad20181e000024": "import re\r\nfrom random import sample\r\n\r\n\r\ndef mix_words(string):\r\n    return re . sub(\r\n        r'(?<=[a-zA-Z])([a-zA-Z]{2,})(?=[a-zA-Z])',\r\n        lambda match: '' . join(\r\n            sample(match . group(1), len(match . group(1)))),\r\n        string)\r\n",
  "5822d89270ca28c85c0000f3": "def scramble(string, array):\r\n    return \"\" . join(v for _, v in sorted(zip(array, string)))\r\n",
  "5667525f0f157f7a0a000004": "import re\r\nWATER_PATTERN = re . compile(r\"water|wet|wash\", re . I)\r\nSLIME_PATTERN = re . compile(r\"\\bI don't know\\b|slime\", re . I)\r\n\r\n\r\ndef bucket_of(said):\r\n    water = WATER_PATTERN . search(said)\r\n    slime = SLIME_PATTERN . search(said)\r\n\r\n    if water:\r\n    return 'sludge' if slime else 'water'\r\n    return 'slime' if slime else 'air'\r\n",
  "55b4f9906ac454650900007d": "def string_chunk(xs, n=None):\r\n    try:\r\n        return [xs[i: i + n] for i in range(0, len(xs), n)]\r\n    except:\r\n        return []\r\n",
  "57b9fc5b8f5813384a000aa3": "def calculate(s):\r\n    x = [int(i) for i in s . split() if i . isdigit()]\r\n    return sum(x) if 'gains' in s . split() else x[0] - x[1]\r\n",
  "58e4377c46e371aee7001262": "def triangle_area(t):\r\n    a, b, c = t . a, t . b, t . c\r\n    return round(abs(a . x * (b . y - c . y) + b . x * (c . y - a . y) + c . x * (a . y - b . y)) / 2, 6)\r\n",
  "560fbc2d636966b21e00009e": "def func(n):\r\n\t return int(n) % 2 == 0\r\n def map ( arr , somefunction ):\r\n\t\t try :\r\n\t\t\t return [ somefunction ( a ) for a in arr ]\r\n\t\t except ValueError :\r\n\t\t\t return 'array should contain only numbers' \r\n except TypeError :\r\n\t\t\t return 'given argument is not a function'",
  "5734c38da41454b7f700106e": "def only_one(* args):\r\n    return sum(args) == 1\r\n",
  "58162692c2a518f03a000189": "def time(distance, boat_speed, stream):\r\n    river_speed = int(stream . replace(\r\n        \"Downstream \", '+'). replace(\"Upstream \", '-'))\r\n    return round(distance / (boat_speed + river_speed), 2)\r\n",
  "57a60bad72292d3e93000a5a": "def to_acronym(input):\r\n    # only call upper() once\r\n    return '' . join(word[0] for word in input . split()). upper()\r\n",
  "57faa6ff9610ce181b000028": "from collections import Counter\nfrom itertools import chain\n\n\ndef crap(garden, bags, cap):\n    c = Counter(chain(* garden))\n    return 'Dog!!' if c['D'] else ('Clean', 'Cr@p')[c['@'] > bags * cap]\n",
  "57a05e0172292dd8510001f7": "def splitSentence(s):\r\n    return s . split()\r\n",
  "560d6ebe7a8c737c52000084": "def not_visible_cubes(n):\r\n    return max(n - 2, 0) * * 3\r\n",
  "57029e77005264a3b9000eb5": "import re\r\n\r\n\r\ndef nothing_special(s):\r\n    try:\r\n    return re . sub('[^a-z0-9\\s]', '', s, flags=re . IGNORECASE)\r\n    except:\r\n    return 'Not a string!'\r\n",
  "57ed40e3bd793e9c92000fcb": "def correctness(bob, exp):\r\n    return sum(b == e or 0.5 * (b == '?' or e == '?') for b, e in zip(bob, exp))\r\n",
  "57c3eb9fd6cf0ffd68000222": "def solveit(vi, vf, t):\r\n    a = (vf - vi) / t\r\n    d = vi * t + 0.5 * a * (t * * 2)\r\n    return [round(a, 2), round(d, 2)] if vi <= vf else []\r\n",
  "56326c13e63f90538d00004e": "def get_users_ids(string):\r\n    return [w . replace(\"uid\", \"\", 1). strip() for w in string . lower(). replace(\"#\", \"\"). split(\",\")]\r\n",
  "56d344c7fd3a52566700124b": "def add(a): return lambda b: a + b\n",
  "54b7c8d2cd7f51a839000ebf": "def process_array(arr, callback):\r\n    return list(map(callback, arr))\r\n",
  "57061b6fcb7293901a000ac7": "def head_smash(arr):\r\n    try:\r\n    return [a . replace('O', ' ') for a in arr] or 'Gym is empty'\r\n    except TypeError:\r\n    return \"This isn't the gym!!\"\r\n",
  "584dc1b7766c2bb158000226": "def chore_assignment(chores):\r\n    chores . sort()\r\n    return sorted([chores[i] + chores[- 1 - i] for i in range(len(chores) / / 2)])\r\n",
  "5865cff66b5699883f0001aa": "def to_time(seconds):\r\n    return f' { seconds / / 3600 } hour(s) and {( seconds / / 60 ) % 60 } minute(s)'\r\n",
  "576a29ab726f4bba4b000bb1": "def name_score(name):\r\n    return {name: sum(alpha[key] for c in name for key in alpha if c . upper() in key)}\r\n",
  "5808c8eff0ed4210de000008": "def part(arr):\r\n    l = [\"Partridge\", \"PearTree\", \"Chat\", \"Dan\",\r\n         \"Toblerone\", \"Lynn\", \"AlphaPapa\", \"Nomad\"]\r\n    s = len([i for i in arr if i in l])\r\n    return \"Mine's a Pint\" + \"!\" * s if s > 0 else 'Lynn, I\\'ve pierced my foot on a spike!!'\r\n",
  "580559b17ab3396c58000abb": "import re\r\n\r\n\r\ndef get_los_angeles_points(results):\r\n    pattern = re . compile('Los Angeles [A-Z][a-z]+')\r\n    return sum(int(k[1]. split(':')[0]) for k in results if pattern . fullmatch(k[0]))\r\n",
  "5720eb05e8d6c5b24a0014c5": "def score_matrix(matrix):\r\n    return sum((- 1) * * (i + j) * matrix[i][j] for i in range(len(matrix)) for j in range(len(matrix[i])))\r\n",
  "56311e4fdd811616810000ce": "from collections import Counter\r\n\r\n\r\nclass List (object):\r\n    @ staticmethod\r\n    def count_spec_digits(integers_list, digits_list):\r\n    counts = Counter('' . join(str(abs(a)) for a in integers_list))\r\n    return [(b, counts[str(b)]) for b in digits_list]\r\n",
  "5760c1c7f2717b91e20001a4": "def motif_locator(sequence, motif):\n    res, i = [], 0\n    while True:\n    i = sequence . find(motif, i) + 1\n    if not i:\n        return res\n    res . append(i)\n",
  "587b6a5e8726476f9b0000e7": "def rot_energies(B, Jmin, Jmax):\r\n    return [B * J * (J + 1) for J in range(Jmin, Jmax + 1)] if B > 0 else []\r\n",
  "56f6b23c9400f5387d000d48": "from datetime import date\r\n\r\n\r\ndef days_until_christmas(day):\r\n    christmas = date(day . year, 12, 25)\r\n    if day > christmas:\r\n    christmas = date(day . year + 1, 12, 25)\r\n    return (christmas - day). days\r\n",
  "54599705cbae2aa60b0011a4": "def one(sq, fun):\r\n    return sum(map(fun, sq)) == 1\r\n",
  "58067088c27998b119000451": "def reverse_factorial(num):\n    c = f = 1\n    while f < num:\n    c += 1\n    f *= c\n    return 'None' if f > num else \"%d!\" % c\n",
  "584d2c19766c2b2f6a00004f": "def func_or(a, b):\r\n    return not (bool(a) == bool(b) == False)\r\n\r\n    def func_xor(a, b):\r\n    return not (bool(a) == bool(b))\r\n",
  "54fdfe14762e2edf4a000a33": "def fire(x, y):\r\n    return grid[x + 3 * y]\r\n",
  "5747fcfce2fab91f43000697": "def example_sort(arr, example_arr):\r\n    return sorted(arr, key=example_arr . index)\r\n",
  "57ef016a7b45ef647a00002d": "def filter_homogenous(arrays):\r\n    return [a for a in arrays if len(set(map(type, a))) == 1]\r\n",
  "566fd169d39cf89e1e000044": "def league_calculate(team1, team2, result, league_table):\r\n    for t in league_table:\r\n    if t[0] == team1:\r\n    if result == 'win':\r\n    t[1] += 3\r\n    elif result == 'draw':\r\n    t[1] += 1\r\n    elif t[0] == team2:\r\n    if result == 'draw':\r\n    t[1] += 1\r\n    return sorted(league_table, key=lambda x: (- x[1], x[0]))\r\n",
  "57eeb8cc5f79f6465a0015c1": "def is_kiss(words):\r\n    wordsL = words . split(' ')\r\n    l = len(wordsL)\r\n    for word in wordsL:\r\n    if len(word) > l:\r\n        return \"Keep It Simple Stupid\"\r\n    return \"Good work Joe!\"\r\n",
  "58b972cae826b960a300003e": "def missing(nums, s):\r\n    ans = []\r\n    s = s . replace(' ', '')\r\n    try:\r\n    for i in sorted(nums):\r\n    ans . append(s[i])\r\n    return '' . join(ans). lower()\r\n    except IndexError:\r\n    return (\"No mission today\")\r\n",
  "57212c55b6fa235edc0002a2": "def common_ground(s1, s2):\r\n    lst = []\r\n    for w in s2 . split():\r\n    if w in s1 . split() and w not in lst:\r\n    lst . append(w)\r\n    return ' ' . join(lst) if lst else \"death\"\r\n",
  "56d55dcdc87df58c81000605": "def valid_card(card):\r\n    s = list(map(int, str(card . replace(' ', ''))))\r\n    s[0:: 2] = [d * 2 - 9 if d * 2 > 9 else d * 2 for d in s[0:: 2]]\r\n    return sum(s) % 10 == 0\r\n",
  "553f01db29490a69ff000049": "def validate_sequence(seq):\r\n    return len({a - b for a, b in zip(seq, seq[1:])}) == 1\r\n",
  "56ba65c6a15703ac7e002075": "def find_next_power(val, pow_):\r\n    return int(val * * (1.0 / pow_) + 1) * * pow_\r\n",
  "551204b7509063d9ba000b45": "def main_diagonal_product(mat):\r\n    prod = 1\r\n    for i in range(0, len(mat)):\r\n    prod *= mat[i][i]\r\n    return prod\r\n",
  "5751fef5dcc1079ac5001cff": "def err_bob(s):\r\n    res = \"\"\r\n    for i, c in enumerate(s):\r\n    res += c\r\n    if i == len(s) - 1 or s[i + 1] in \" .,:;!?\":\r\n    if c . islower() and c not in \"aeiou\":\r\n    res += \"err\"\r\n    if c . isupper() and c not in \"AEIOU\":\r\n    res += \"ERR\"\r\n    return res\r\n",
  "5751aa92f2dac7695d000fb0": "def beasts(h, t):\r\n    out = [(5 * t - h) / 3, (h - 2 * t) / 3]\r\n    return all(x . is_integer() and x >= 0 for x in out) and out or 'No solutions'\r\n",
  "586bca7fa44cfc833e00005c": "def create_array_of_tiers(n):\r\n    n = str(n)\r\n    return [n[: i] for i in range(1, len(n) + 1)]\r\n",
  "56f7493f5d7c12d1690000b6": "def mean(lst):\r\n    return [sum(int(n) for n in lst if n . isdigit()) / 10.0, \"\" . join(c for c in lst if c . isalpha())]\r\n",
  "57ea5b0b75ae11d1e800006c": "def sort_by_length(arr):\r\n    return sorted(arr, key=len)\r\n",
  "559cc2d2b802a5c94700000c": "def consecutive(arr):\r\n    return max(arr) - min(arr) + 1 - len(arr) if arr else 0\r\n",
  "57b5907920b104772c00002a": "def height(n):\n    height = cat = 2000000\n    for i in range(n):\n    cat /= 2.5\n    height += cat\n    return f' { height : .3 f } '\n",
  "5894134c8afa3618c9000146": "def chess_board_cell_color(a, b):\r\n    return (ord(a[0]) + int(a[1])) % 2 == (ord(b[0]) + int(b[1])) % 2\r\n",
  "58e24788e24ddee28e000053": "def simple_assembler(program):\n    d, i = {}, 0\n    while i < len(program):\n    cmd, r, v = (program[i] + ' 0'). split()[: 3]\n    if cmd == 'inc':\n        d[r] += 1\n    if cmd == 'dec':\n        d[r] -= 1\n    if cmd == 'mov':\n        d[r] = d[v] if v in d else int(v)\n    if cmd == 'jnz' and (d[r] if r in d else int(r)):\n        i += int(v) - 1\n    i += 1\n    return d\n",
  "5887099cc815166a960000c6": "from collections import Counter\n\n\ndef create_anagram(s, t):\n    return sum((Counter(s) - Counter(t)). values())\n",
  "589ac16a0cccbff11d000115": "def segment_cover(A, L):\r\n    n = 1\r\n    s = min(A)\r\n    for i in sorted(A):\r\n    if s + L < i:\r\n    s = i\r\n    n += 1\r\n    return n\r\n",
  "587309155cfd6b9fb60000a0": "def money_value(s):\r\n    try:\r\n    return float(s . replace(\"$\", \"\"). replace(\" \", \"\"))\r\n    except:\r\n    return 0.0\r\n",
  "5866ec8b2e8d9cec7e0000bb": "def reverse_sentence(sentence):\r\n    return ' ' . join(w[:: - 1] for w in sentence . split())\r\n",
  "58a651ff27f95429f80000d0": "def learn_charitable_game(arr):\r\n    return sum(arr) % len(arr) == 0 and sum(arr) > 0\r\n",
  "56d5166ec87df55dbe000063": "from statistics import mean\nfrom math import floor\n\n\ndef sum_average(arr):\n    return floor(sum(map(mean, arr)))\n",
  "58e3e62f20617b6d7700120a": "from math import hypot\r\n\r\n\r\ndef triangle_perimeter(t):\r\n    return sum(\r\n        hypot(p1 . x - p2 . x, p1 . y - p2 . y)\r\n        for p1, p2 in [(t . a, t . b), (t . b, t . c), (t . c, t . a)]\r\n    )\r\n",
  "589ebcb9926baae92e000001": "def convert(number):\r\n    return '' . join(chr(int(number[a: a + 2])) for a in range(0, len(number), 2))\r\n",
  "58aa7f18821a769a7d000190": "def table_game(table):\r\n    (a, ab, b), (ac, abcd, bd), (c, cd, d) = table\r\n    if (a + b == ab) and (c + d == cd) and (a + c == ac) and (b + d == bd) and (a + b + c + d == abcd):\r\n    return [a, b, c, d]\r\n    return [- 1]\r\n",
  "5434283682b0fdb0420000e6": "def caffeineBuzz(n):\r\n    buzz = \"mocha_missing!\"\r\n    if n % 3 == 0:\r\n    buzz = \"Java\"\r\n    if n % 4 == 0:\r\n    buzz = \"Coffee\"\r\n    if n % 2 == 0:\r\n    buzz += \"Script\"\r\n    return buzz\r\n",
  "58aaa3ca821a767300000017": "def robot_transfer(matrix, k):\r\n    mt = {(i, j): tuple(map(int, c . split(',')))\r\n          for i, r in enumerate(matrix) for j, c in enumerate(r)}\r\n    res = 0\r\n    for m in mt:\r\n    cur = m\r\n    for j in range(k):\r\n    cur = mt[cur]\r\n    if cur == m:\r\n        break\r\n    res += (cur == m and j == k - 1)\r\n\r\n    return res\r\n",
  "58a664bb586e986c940001d5": "from collections import Counter\r\nfrom string import ascii_lowercase\r\n\r\n\r\ndef missing_alphabets(s):\r\n    c = Counter(s)\r\n    m = max(c . values())\r\n    return '' . join(letter * (m - c[letter]) for letter in ascii_lowercase)\r\n",
  "55f3da49e83ca1ddae0000ad": "import math\n\n\ndef tankvol(h, d, vt):\n    r = d / 2\n    theta = math . acos((r - h) / r)\n    return int(vt * (theta - math . sin(theta) * (r - h) / r) / math . pi)\n",
  "58e3031ce265671f6a000542": "def distance_between_circles(a, b):\r\n    dis = ((a . center . x - b . center . x) * * 2 + (a . center . y - b . center . y) * * 2) * * 0.5\r\n    return max(0, dis - a . radius - b . radius)\r\n",
  "577e277c9fb2a5511c00001d": "import re\r\nfrom collections import deque\r\n\r\n\r\ndef vowel_shift(text, n):\r\n    try:\r\n    tokens = re . split(r'([aeiouAEIOU])', text)\r\n    if len(tokens) > 1:\r\n    vowels = deque(tokens[1:: 2])\r\n    vowels . rotate(n)\r\n    tokens[1:: 2] = vowels\r\n    return '' . join(tokens)\r\n    except TypeError:\r\n    return None\r\n",
  "5535572c1de94ba2db0000f6": "def bark(self):\r\n    return \"Woof!\"\r\n    Dog . bark = bark\r\n",
  "58275b63083e128edb00098d": "def luckySevens(arr):\r\n\r\n    def check(x, y):\r\n    t = sum(arr[x + dx][y + dy]\r\n            for dx, dy in dIdx if 0 <= x + dx < lX and 0 <= y + dy < lY)\r\n    return abs(t * * (1 / 3) - round(t * * (1 / 3))) <= 1e-8\r\n    dIdx = ((1, 0), (- 1, 0), (0, 1), (0, - 1))\r\n    lX, lY = len(arr), len(arr[0])\r\n    return sum(check(x, y) for x in range(lX) for y in range(lY) if arr[x][y] == 7)\r\n",
  "58ad317d1541651a740000c5": "def middle_permutation(string):\r\n    s = sorted(string)\r\n    if len(s) % 2 == 0:\r\n    return s . pop(len(s) / / 2 - 1) + '' . join(s[:: - 1])\r\n    else:\r\n    return s . pop(len(s) / / 2) + middle_permutation(s)\r\n",
  "5898b4b71d298e51b600014b": "def sort_the_inner_content(str):\r\n    words = str . split()\r\n    output = []\r\n\r\n    for word in words:\r\n    if len(word) > 2:\r\n    output . append(\r\n        word[0] + '' . join(sorted(word[1: - 1], reverse=True)) + word[- 1])\r\n    else:\r\n        output . append(word)\r\n\r\n    return ' ' . join(output)\r\n",
  "58e16de3a312d34d000000bd": "def rankings(arr):\r\n    dct = {v: i for i, v in enumerate(sorted(arr, reverse=True), 1)}\r\n    return [dct[v] for v in arr]\r\n",
  "589d2bf7dfdef0817e0001aa": "def factor_sum(n):\r\n    fs = sum(factors(n))\r\n    return fs if fs == n else factor_sum(fs)\r\n\r\n    def factors(n, p=2):\r\n    while p * p <= n:\r\n    while not n % p:\r\n    yield p\r\n    n / /= p\r\n    p += 2 - (p == 2)\r\n    if n > 1 and p > 2:\r\n        yield n\r\n",
  "550cc572b9e7b563be00054f": "def SJF(jobs, index):\r\n    return sum(j for i, j in enumerate(jobs)\r\n               if j < jobs[index] or (j == jobs[index] and i <= index))\r\n",
  "55b3425df71c1201a800009c": "def stat(strg):\r\n\r\n    def get_time(s):\r\n    '''Returns the time, in seconds, represented by s.'''\r\n    hh, mm, ss = [int(v) for v in s . split('|')]\r\n    return hh * 3600 + mm * 60 + ss\r\n    def format_time(time):\r\n    '''Returns the given time as a string in the form \"hh|mm|ss\".'''\r\n    hh = time / / 3600\r\n    mm = time / / 60 % 60\r\n    ss = time % 60\r\n    return '{hh:02d}|{mm:02d}|{ss:02d}' . format(* * locals())\r\n\r\n    def get_range(times):\r\n    return times[- 1] - times[0]\r\n\r\n    def get_average(times):\r\n    return sum(times) / / len(times)\r\n\r\n    def get_median(times):\r\n    middle = len(times) >> 1\r\n    return (times[middle] if len(times) & 1 else\r\n            (times[middle - 1] + times[middle]) / / 2)\r\n\r\n    if strg == '':\r\n    return strg\r\n    times = [get_time(s) for s in strg . split(', ')]\r\n    times . sort()\r\n    rng = format_time(get_range(times))\r\n    avg = format_time(get_average(times))\r\n    mdn = format_time(get_median(times))\r\n    return 'Range: {rng} Average: {avg} Median: {mdn}' . format(* * locals())\r\n",
  "5768a693a3205e1cc100071f": "def initializeNames(name):\r\n    names = name . split()\r\n    names[1: - 1] = map(lambda n: n[0] + '.', names[1: - 1])\r\n    return ' ' . join(names)\r\n",
  "55b6a3a3c776ce185c000021": "def transpose(song, interval):\r\n    altern = {\"Bb\": \"A#\", \"Db\": \"C#\", \"Eb\": \"D#\", \"Gb\": \"F#\", \"Ab\": \"G#\"}\r\n    notes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\r\n    return [notes[(notes . index(altern . get(i, i)) + interval) % 12] for i in song]\r\n",
  "56e3cd1d93c3d940e50006a4": "def make_valley(arr):\r\n    arr = sorted(arr, reverse=True)\r\n    return arr[:: 2] + arr[1:: 2][:: - 1]\r\n",
  "542f0c36d002f8cd8a0005e5": "def last_chair(n):\n    # Propn:\n    # Given there are n seats, n >= 2. The (n-1)th seat is always the\n    # last to be taken (taken in iteration n).\n    # Proof:\n    # Suppose that, for some n >= 2, the (n-1)th seat is taken on\n    # iteration i > 2. The nth seat is already taken, since the 2nd\n    # iteration will always claim it. Therefore i must sit beside\n    # at least one person (the occupant of seat n).\n    # Additionally, the (n-2)th seat must also already be taken.\n    # If it were not taken, (n-2) would have a free seat at (n-1)\n    # and would be closer to the exit, and so would rank higher\n    # than (n-1) in the choice algorithm.\n    # Therefore (n-1) will only be chosen when (n-2) and (n) are\n    # both taken.\n    # Also, all other seats must also be taken, since\n    # otherwise i would taken them, having at most as many people\n    # around as seat (n-1) and being closer to the exit.\n    # Therefore (n-1) is the last seat to be taken.\n    return n - 1\n",
  "56b18992240660a97c00000a": "from itertools import permutations\r\n\r\n\r\ndef permutation_average(n):\r\n    perms = [float('' . join(e)) for e in permutations(str(n))]\r\n    return int(round(sum(perms) / len(perms)))\r\n",
  "55f91a98db47502cfc00001b": "from re import compile\r\n\r\n\r\ndef wheres_wally(string):\r\n    m = compile('(^|.*[\\s])(Wally)([\\.,\\s\\']|$)'). match(string)\r\n    return m . start(2) if m else - 1\r\n",
  "559fed8454b12433ff0000a2": "def total(arr):\r\n    while len(arr) > 1:\r\n    arr = [x + y for x, y in zip(arr, arr[1:])]\r\n    return arr[0]\r\n",
  "58a369fa5b3daf464200006c": "def get_percentage(sent, limit=1000):\r\n    if not sent:\r\n    return \"No e-mails sent\"\r\n    elif sent >= limit:\r\n    return \"Daily limit is reached\"\r\n    return \"{}%\" . format(int(sent * 100 / limit))\r\n",
  "54f9c37106098647f400080a": "from itertools import dropwhile\n\n\ndef drop_while(arr, pred):\n    return list(dropwhile(pred, arr))\n",
  "53a8a476947277a3020001cc": "def append_arrays(seq1, seq2):\r\n    return seq1 + seq2\r\n",
  "57475353facb0e7431000651": "def hot_singles(arr1, arr2):\r\n    a = []\r\n    for x in arr1 + arr2:\r\n    if x in set(arr1) ^ set(arr2) and x not in a:\r\n        a . append(x)\r\n    return a\r\n",
  "566091b73e119a073100003a": "def total_licks(env):\n    d = 252\n    vm = 0\n    for k, v in env . items():\n    d += v\n    if v > vm:\n    vm, km = v, k\n    return 'It took ' + str(d) + ' licks to get to the tootsie roll center of a tootsie pop.' + (' The toughest challenge was ' + km + '.' if vm > 0 else '')\n",
  "56d46b8fda159582e100001b": "def travel(total_time, run_time, rest_time, speed):\r\n    q, r = divmod(total_time, run_time + rest_time)\r\n    return (q * run_time + min(r, run_time)) * speed\r\n",
  "56eb0be52caf798c630013c0": "from datetime import date\n\n\ndef unlucky_days(year):\n    return sum(date(year, m, 13). weekday() == 4 for m in range(1, 13))\n",
  "5803753aab6c2099e600000e": "from datetime import date\n\n\ndef ageInDays(year, month, day):\n    return 'You are {} days old' . format((date . today() - date(year, month, day)). days)\n",
  "57d28215264276ea010002cf": "def leader_b(user, user_score, your_score):\r\n    if your_score > user_score:\r\n    return \"Winning!\"\r\n    if your_score == user_score:\r\n    return \"Only need one!\"\r\n    beta, eight = divmod(user_score - your_score, 3)\r\n    dammit = \" Dammit!\" if beta + eight > 1000 else \"\"\r\n    return f\"To beat { user } 's score, I must complete { beta } Beta kata and { eight } 8kyu kata. { dammit } \"\r\n",
  "58df8b4d010a9456140000c7": "def palindrome(num):\n    def is_palindrome(chunk): return int(chunk) > 9 and chunk == chunk[:: - 1]\n    if not isinstance(num, int) or num < 0:\n        return 'Not valid'\n    i = 0\n    while (True):\n    if is_palindrome(str(num + i)):\n        return num + i\n    if is_palindrome(str(num - i)):\n        return num - i\n    i += 1\n",
  "557b75579b03996942000061": "def serve(f, k, m):\r\n    s = f / m if k == 1 else f / ((k * * m - 1) / (k - 1))\r\n    return [s * k * * i for i in range(m)]\r\n",
  "58e0cb3634a3027180000040": "def sort_by_value_and_index(arr):\r\n    return [y[1] for y in sorted(enumerate(arr), key=lambda x: (x[0] + 1) * x[1])]\r\n",
  "566044325f8fddc1c000002c": "def even_chars(st):\r\n    if len(st) < 2 or len(st) > 100:\r\n    return 'invalid string'\r\n    else:\r\n    return [st[i] for i in range(1, len(st), 2)]\r\n",
  "52988f3f7edba9839c00037d": "def reject(seq, predicate):\r\n    return [item for item in seq if not predicate(item)]\r\n",
  "558fa34727c2d274c10000ae": "def scrabble_score(stg):\r\n    return sum(dict_scores . get(c, 0) for c in stg . upper())\r\n",
  "52705ed65de62b733f000064": "def sort_list(sort_key, l):\r\n    return sorted(l, key=lambda x: x[sort_key], reverse=True)\r\n",
  "54b81566cd7f51408300022d": "def word_search(query, seq):\r\n    return [x for x in seq if query . lower() in x . lower()] or [\"None\"]\r\n",
  "52250aca906b0c28f80003a1": "from itertools import groupby\n\n\ndef uniq_c(seq):\n    return [(k, sum(1 for _ in g)) for k, g in groupby(seq)]\n",
  "58ddffda929dfc2cae0000a5": "def clonewars(k):\r\n    return [2 * * max(k - 1, 0), 2 * * (k + 1) - k - 2]\r\n",
  "567bed99ee3451292c000025": "def is_vowel(s):\r\n    return s . lower() in set(\"aeiou\")\r\n",
  "54129112fb7c188740000162": "def prefill(n=0, v=None):\r\n    try:\r\n    return [v] * int(n)\r\n    except:\r\n    raise TypeError(str(n) + ' is invalid')\r\n",
  "538948d4daea7dc4d200023f": "def convert_bits(a, b):\r\n    return bin(a ^ b). count(\"1\")\r\n",
  "52fea6fd158f0576b8000089": "class Converter ():\r\n    @ staticmethod\r\n    def to_ascii(h):\r\n    return '' . join(chr(int(h[i: i + 2], 16)) for i in range(0, len(h), 2))\r\n    @ staticmethod\r\n    def to_hex(s):\r\n    return '' . join(hex(ord(char))[2:] for char in s)\r\n",
  "556021360863a1708900007b": "def check_valid_tr_number(n):\r\n    return type(n) == int and len(str(n)) == 11 and \\\r\n        8 * sum(map(int, str(n)[: - 1: 2])\r\n                ) % 10 == sum(map(int, str(n)[: - 1])) % 10 == n % 10\r\n",
  "52fb87703c1351ebd200081f": "def what_century(year):\r\n    n = (int(year) - 1) / / 100 + 1\r\n    return str(n) + (\"th\" if n < 20 else {1: \"st\", 2: \"nd\", 3: \"rd\"}. get(n % 10, \"th\"))\r\n",
  "53e895e28f9e66a56900011a": "from collections import Counter\r\nfrom operator import itemgetter\r\n\r\n\r\ndef letter_frequency(text):\r\n    items = Counter(c for c in text . lower() if c . isalpha()). items()\r\n    return sorted(\r\n        sorted(items, key=itemgetter(0)),\r\n        key=itemgetter(1),\r\n        reverse=True\r\n    )\r\n",
  "57dc0ffed8f92982af0000f6": "from collections import Counter\r\n\r\n\r\ndef is_prime(n): return n > 1 and all(n % d for d in range(2, int(n * * .5) + 1))\r\n\r\n\r\nPRIMES = {str(n) for n in range(10 * * 3, 10 * * 4) if str(n)[2] in '23' and is_prime(n)}\r\n\r\n\r\ndef search_disable(log): return ['no match continue', 'match disable bot'][\r\n    sum(c for n, c in Counter(log . split()). items() if c > 3 and n in PRIMES) > 50]\r\n",
  "57f8ff867a28db569e000c4a": "def kebabize(s):\r\n    return '' . join(c if c . islower() else '-' + c . lower() for c in s if c . isalpha()). strip('-')\r\n",
  "545cdb4f61778e52810003a2": "def levenshtein(a, b):\r\n    d = [[0] * (len(b) + 1) for _ in range(len(a) + 1)]\r\n\r\n    d[0][:] = range(len(b) + 1)\r\n    for i in range(1, len(a) + 1):\r\n    d[i][0] = i\r\n    for i, x in enumerate(a):\r\n    for j, y in enumerate(b):\r\n    d[i + 1][j + 1] = min(1 + d[i][j + 1], 1 + d[i + 1]\r\n                          [j], d[i][j] + (1 if x != y else 0))\r\n\r\n    return d[- 1][- 1]\r\n",
  "557dd2a061f099504a000088": "def list_to_array(lst):\r\n    arr = []\r\n    while lst != None:\r\n    arr . append(lst . value)\r\n    lst = lst . next\r\n    return arr\r\n",
  "54466996990c921f90000d61": "def is_monotone(heights):\r\n    return sorted(heights) == heights\r\n",
  "53fc954904a45eda6b00097f": "import __builtin__\r\n\r\n\r\nclass CustomList (list):\r\n    def ints(self):\r\n    return [x for x in self if isinstance(x, int)]\r\n    def even(self):\r\n    return [x for x in self . ints() if x % 2 == 0]\r\n    def odd(self):\r\n    return [x for x in self . ints() if x % 2 == 1]\r\n    def under(self, ceil):\r\n    return [x for x in self . ints() if x < ceil]\r\n    def over(self, floor):\r\n    return [x for x in self . ints() if x > floor]\r\n    def in_range(self, min, max):\r\n    return [x for x in self . ints() if min <= x <= max]\r\n\r\n    __builtin__ . list = CustomList\r\n",
  "55aa7acc42216b3dd6000022": "import re\r\n\r\n\r\ndef owl_pic(text):\r\n    str = re . sub('[^ 8,W,T,Y,U,I,O,A,H,X,V,M]', '', text . upper())\r\n    return str + \"''0v0''\" + str[:: - 1]\r\n",
  "5866c6cf442e3f16f9000089": "import math\r\n\r\n\r\ndef hypotenuse(a, b):\r\n    return math . hypot(a, b)\r\n\r\n    def leg(c, a):\r\n    return (c * * 2 - a * * 2) * * .5\r\n",
  "5787628de55533d8ce000b84": "import re\r\nfrom datetime import date, timedelta\r\n\r\n\r\ndef date_correct(text):\r\n    if not text:\r\n    return text\r\n    try:\r\n    d, m, y = map(int, re . match(\r\n        r'^(\\d{2})\\.(\\d{2})\\.(\\d{4})$', text). groups())\r\n    mo, m = divmod(m - 1, 12)\r\n    return (date(y + mo, m + 1, 1) + timedelta(days=d - 1)). strftime('%d.%m.%Y')\r\n    except AttributeError:\r\n    return None\r\n",
  "588dd9c3dc49de0bd400016d": "def to_1D(x, y, size):\r\n    return y * size[0] + x\r\n    def to_2D(n, size):\r\n    return (n % size[0], n / / size[0])\r\n",
  "5645b24e802c6326f7000049": "def half(i, n):\r\n    return \"\" . join(str(d % 10) for d in range(1, n - i + 1))\r\n\r\n    def line(i, n):\r\n    h = half(i, n)\r\n    return \" \" * i + h + h[- 2:: - 1]\r\n\r\n    def get_a_down_arrow_of(n):\r\n    return \"\\n\" . join(line(i, n) for i in range(n))\r\n",
  "58c8af49fd407dea5f000042": "def luxhouse(houses):\r\n    return [max(0, max(houses[i:]) - h + 1) for i, h in enumerate(houses[: - 1], 1)] + [0]\r\n",
  "58693bbfd7da144164000d05": "import difflib\r\nfrom string import ascii_lowercase, ascii_uppercase\r\ntbl = str . maketrans(ascii_lowercase + ascii_uppercase,\r\n                      (ascii_lowercase[5:] + ascii_lowercase[: 5]) * 2)\r\n\r\n\r\ndef scoobydoo(villian, villians):\r\n    villian = villian . replace(' ', '')\r\n    villian = villian[- 6:: - 1] + villian[: - 6: - 1]\r\n    villian = '' . join(v . translate(tbl) if i %\r\n                        2 else v for i, v in enumerate(villian))\r\n    return difflib . get_close_matches(villian, villians, n=1)[0]\r\n",
  "58afa8185eb02ea2a7000094": "def pairwise(arr, n):\r\n    s = []\r\n    for i in range(len(arr) - 1):\r\n    for j in range(i + 1, len(arr)):\r\n    if j in s or i in s:\r\n        continue\r\n    if arr[i] + arr[j] == n:\r\n    s . append(i)\r\n    s . append(j)\r\n    return sum(s)\r\n",
  "58a3a735cebc0630830000c0": "import re\n\n\ndef string_constructing(a, s):\n    # \"-1\" because one empty string is always found at the end\n    n = len(re . findall('?' . join(list(a)) + '?', s)) - 1\n    return n + len(a) * n - len(s)\n",
  "58afce23b0e8046a960000eb": "def withdraw(n):\r\n    n50 = 0\r\n    n20, r = divmod(n, 20)\r\n    if r == 10:\r\n    n20 -= 2\r\n    n50 += 1\r\n    n100, n20 = divmod(n20, 5)\r\n    return [n100, n50, n20]\r\n",
  "58b38f24c723bf6b660000d8": "import re\r\n\r\n\r\ndef spreadsheet(s):\r\n    nums = re . findall(r'(\\d+)', s)\r\n    if len(nums) == 2:\r\n    n, cStr = int(nums[1]), ''\r\n    while n:\r\n    n, r = divmod(n - 1, 26)\r\n    cStr += chr(r + 65)\r\n    return \"{}{}\" . format(cStr[:: - 1], nums[0])\r\n    else:\r\n    return \"R{}C{}\" . format(nums[0], sum(26 * * i * (ord(c) - 64) for i, c in enumerate(re . sub(r'\\d', '', s)[:: - 1])))\r\n",
  "58b3c2bd917a5caec0000017": "from itertools import groupby\r\n\r\n\r\ndef sum_groups(arr):\r\n    newarr = [sum(j) for i, j in groupby(arr, key=lambda x: x % 2 == 0)]\r\n    return len(newarr) if newarr == arr else sum_groups(newarr)\r\n",
  "58c20c8d61aefc518f0000fd": "def sum_of_regular_numbers(arr):\r\n    result = []\r\n    new = []\r\n    for i in range(len(arr)):\r\n    if len(new) < 2 or (len(new) >= 2 and arr[i] - new[- 1] == new[- 1] - new[- 2]):\r\n        new . append(arr[i])\r\n    else:\r\n    if len(new) >= 3:\r\n    result += new\r\n    new = [new[- 1], arr[i]]\r\n    if len(new) > 2:\r\n        result += new\r\n    return sum(result)\r\n",
  "5894318275f2c75695000146": "def delete_digit(n):\r\n    s = str(n)\r\n    return int(max(s[: i] + s[i + 1:] for i in range(len(s))))\r\n",
  "5893eb36779ce5faab0000da": "def matrix_elements_sum(m):\r\n    return sum(sum(e for i, e in enumerate(c) if 0 not in c or i < c . index(0)) for c in zip(* m))\r\n",
  "57f8ee485cae443c4d000127": "def spacify(string):\r\n    return \" \" . join(string)\r\n",
  "582c81d982a0a65424000201": "def arr_check(arr):\r\n    return all(isinstance(el, list) for el in arr)\r\n",
  "544a54fd18b8e06d240005c0": "def find_smallest(numbers, to_return):\r\n    return min(numbers) if to_return == 'value' else numbers . index(min(numbers))\r\n",
  "58952e29f0902eae8b0000cb": "import numpy as np\nfrom scipy import signal\n\n\ndef minesweeper(matrix):\n    return signal . convolve2d(np . array(matrix), np . array([[1, 1, 1], [1, 0, 1], [1, 1, 1]]), mode='same'). tolist()\n",
  "58de77a2c19f096a5a00013f": "from collections import Counter\n\n\ndef findAdded(st1, st2):\n    return '' . join(sorted((Counter(st2) - Counter(st1)). elements()))\n",
  "58dceee2c9613aacb40000b9": "def distance_between_points(a, b):\r\n    return ((a . x - b . x) * * 2 + (a . y - b . y) * * 2 + (a . z - b . z) * * 2) * * 0.5\r\n",
  "550527b108b86f700000073f": "from math import pi\n\n\ndef iter_pi(epsilon):\n    n = 1\n    approx = 4\n    while abs(approx - pi) > epsilon:\n    n += 1\n    approx += (- 4, 4)[n % 2] / (n * 2 - 1.0)\n    return [n, round(approx, 10)]\n",
  "5436f26c4e3d6c40e5000282": "def sum_of_n(n):\r\n    return [(- 1 if n < 0 else 1) * sum(xrange(i + 1)) for i in xrange(abs(n) + 1)]\r\n",
  "54a0689443ab7271a90000c6": "from itertools import count, islice\r\n\r\n\r\nclass Harshad:\r\n    @ staticmethod\r\n    def is_valid(number):\r\n    return number % sum(map(int, str(number))) == 0\r\n    @ classmethod\r\n    def get_next(cls, number):\r\n    return next(i for i in count(number + 1) if cls . is_valid(i))\r\n\r\n    @ classmethod\r\n    def get_series(cls, c, start=0):\r\n    return list(islice(filter(cls . is_valid, (i for i in count(start + 1))), c))\r\n",
  "55d7e5aa7b619a86ed000070": "def order_word(s):\r\n    return \"\" . join(sorted(s)) if s else \"Invalid String!\"\r\n",
  "552cd8624a414ec2b2000086": "def der_die_das(wort):\r\n    a = sum(x in \"aAeEiIoOuU\u00e4\u00f6\u00fc\" for x in wort)\r\n    return f' { \"das\" if a < 2 else \"die\" if a < 4 else \"der\" } { wort } '\r\n",
  "5829994cd04efd4373000468": "def name_file(fmt, nbr, start):\r\n    try:\r\n    return [fmt . replace('<index_no>', '{0}'). format(i)\r\n            for i in range(start, start + nbr)]\r\n    except TypeError:\r\n    return []\r\n",
  "585ba6dff59b3cef3f000132": "from functools import reduce\nfrom itertools import cycle\n\n\ndef reduce_by_rules(lst, rules):\n    rs = cycle(rules)\n    return reduce(lambda x, y: next(rs)(x, y), lst)\n",
  "57073869924f34185100036d": "import random\n\n\ndef random_case(x):\n    return \"\" . join([random . choice([c . lower(), c . upper()]) for c in x])\n",
  "535bea76cdbf50281a00004c": "import math\n\n\ndef tower_combination(n):\n    return math . factorial(n)\n",
  "579fa665bb9944f9340005d2": "def rotate_to_max(n):\r\n    return int('' . join(sorted(str(n), reverse=True)))\r\n",
  "54eea36b7f914221eb000e2f": "def sort_it(list_, n):\r\n    return ', ' . join(sorted(list_ . split(', '), key=lambda i: i[n - 1]))\r\n",
  "57066708cb7293901a0013a1": "from itertools import chain\n\n\ndef fist_beard(arr):\n    return '' . join(map(chr, chain(* arr)))\n",
  "5864eb8039c5ab9cd400005c": "from statistics import median\n",
  "589d36bbb6c071f7c20000f7": "def prime_string(s):\r\n    return (s + s). find(s, 1) == len(s)\r\n",
  "589aca25fef1a81a10000057": "def array_operations(a, n):\r\n    li = []\r\n    for i in range(n):\r\n    m = max(a)\r\n    a = [m - i for i in a]\r\n    if a in li:\r\n    if not n & 1:\r\n        return li[- 1]\r\n    return a\r\n    li . append(a)\r\n    return a\r\n",
  "580a1a4af195dbc9ed00006c": "def equalize(arr):\r\n    return [\"{:+d}\" . format(i - arr[0]) for i in arr]\r\n",
  "57cec34272f983e17800001e": "def pop_shift(s):\r\n    il, ir = len(s) / / 2, (len(s) + 1) / / 2\r\n    return [s[: ir - 1: - 1], s[: il], s[il: ir]]\r\n",
  "564d0490e96393fc5c000029": "def coin_combo(c):\r\n    R = []\r\n    for p in (25, 10, 5, 1):\r\n    R . append(c / / p)\r\n    c = c % p\r\n    return R[:: - 1]\r\n",
  "57a23e3753ba332b8e0008da": "def help_zoom(key):\r\n    return 'Yes' if key == key[:: - 1] else 'No'\r\n",
  "57f7796697d62fc93d0001b8": "def trouble(x, t):\r\n    arr = [x[0]]\r\n    for c in x[1:]:\r\n    if c + arr[- 1] != t:\r\n    arr . append(c)\r\n    return arr\r\n",
  "57d52a7f76da830e43000188": "def sctc(sin):\r\n    cos = (1 - sin * * 2) * * 0.5\r\n    if 0 in (sin, cos):\r\n    res = [sin, cos, 0.0]\r\n    else:\r\n    res = [sin, cos, sin / cos, cos / sin]\r\n    return list(map(lambda x: round(x, 2), res))\r\n",
  "57d448c6ba30875437000138": "def roots(a, b, c):\r\n    if b * * 2 >= 4 * a * c:\r\n    return round(- b / a, 2)\r\n",
  "57d001b405c186ccb6000304": "def i_tri(s):\r\n    total = 2.4 + 112 + 26.2\r\n    to_go = '%.2f to go!' % (total - s)\r\n\r\n    return ('Starting Line... Good Luck!' if s == 0 else\r\n            {'Swim': to_go} if s < 2.4 else\r\n            {'Bike': to_go} if s < 2.4 + 112 else\r\n            {'Run': to_go} if s < total - 10 else\r\n            {'Run': 'Nearly there!'} if s < total else\r\n            \"You're done! Stop running!\")\r\n",
  "53921994d8f00b93df000bea": "def content_weight(bottle_weight, scale):\r\n    a, _, c = scale . split(\" \")\r\n    return bottle_weight * int(a) / (int(a) + 1) if c == \"larger\" else bottle_weight / (int(a) + 1)\r\n",
  "57ee31c5e77282c24d000024": "def paul(x):\r\n    points = {'life': 0, 'eating': 1, 'kata': 5, 'Petes kata': 10}\r\n    misery = sum(map(points . get, x))\r\n    return ['Miserable!', 'Sad!', 'Happy!', 'Super happy!'][(misery < 40) + (misery < 70) + (misery < 100)]\r\n",
  "56a628758f8d06b59800000f": "from collections import Counter\r\n\r\n\r\ndef self_descriptive(num):\r\n    s = [int(a) for a in str(num)]\r\n    cnt = Counter(s)\r\n    return all(cnt[i] == b for i, b in enumerate(s))\r\n",
  "574a7d0dca4a8a0fbe000100": "def reverse_complement(dna):\r\n    base_pair = {'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'}\r\n    return \"\" . join(base_pair[base] for base in dna[:: - 1]. upper()) if set(dna . upper()). issubset({'A', 'T', 'C', 'G', \"\"}) else \"Invalid sequence\"\r\n",
  "58a3f57ecebc06bfcb00009c": "def repeat_sequence_len(n):\r\n    s = []\r\n\r\n    while True:\r\n    n = sum(int(i) * * 2 for i in str(n))\r\n    if n not in s:\r\n    s . append(n)\r\n    else:\r\n    return len(s[s . index(n):])\r\n",
  "5279f6fe5ab7f447890006a7": "def pick_peaks(arr):\n    pos = []\n    prob_peak = False\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            prob_peak = i\n        elif arr[i] < arr[i-1] and prob_peak:\n            pos.append(prob_peak)\n            prob_peak = False\n    return {'pos':pos, 'peaks':[arr[i] for i in pos]}",
  "574be65a974b95eaf40008da": "from itertools import permutations\n\ndef equal_to_24(*aceg):\n    ops = '+-*/'\n    \n    for b in ops:\n        for d in ops:\n            for f in ops:\n                for (a,c,e,g) in permutations(aceg):\n                    for s in make_string(a,b,c,d,e,f,g):\n                        try:\n                            if eval(s + '== 24'):\n                                return s\n                        except:\n                            pass\n                            \n    return \"It's not possible!\"\n\ndef make_string(a,b,c,d,e,f,g):\n    return [f\"(({a} {b} {c}) {d} {e}) {f} {g}\",\n            f\"({a} {b} {c}) {d} ({e} {f} {g})\",\n            f\"{a} {b} ({c} {d} ({e} {f} {g}))\"]",
  "5962ddfc2f9addd52200001d": "def find_key(key):\n    n = int(key, 16)\n    return next((k - 1) * ((n // k) - 1) for k in range(2, int(n**0.5)+1) if n % k == 0)",
  "566859a83557837d9700001a": "def get_count(n):\r\n    sn = str(n)\r\n    count = 0\r\n    for i in range(1, len(sn)):\r\n    for j in range(len(sn) - i + 1):\r\n    sub = int(sn[j: j + i])\r\n    if sub and n % sub == 0:\r\n    count += 1\r\n    return count\r\n",
  "588809279ab1e0e17700002e": "def most_frequent_digit_sum(n):\r\n    d = {}\r\n    while n:\r\n    s = sum(map(int, str(n)))\r\n    d[s] = d . get(s, 0) + 1\r\n    n -= s\r\n    return max(d, key=lambda s: (d[s], s))\r\n",
  "58942f9175f2c78f4b000108": "def build_palindrome(strng):\n    n = 0\n    while strng[n:] != strng[n:][:: - 1]:\n        n += 1\n    return strng + strng[: n][:: - 1]\n",
  "589436311a8808bf560000f9": "def digits_product(product):\r\n    if product < 10:\r\n    return 10 + product\r\n    n = ''\r\n    for d in range(9, 1, - 1):\r\n    while not product % d:\r\n    n += str(d)\r\n    product / /= d\r\n    return int(n[:: - 1]) if product == 1 else - 1\r\n",
  "58999425006ee3f97c00011f": "def passed(lst):\r\n    a = list(filter(lambda x: x <= 18, lst))\r\n    return 'No pass scores registered.' if a == [] else round(sum(a) / len(a))\r\n",
  "52c31f8e6605bcc646000082": "def two_sum(nums, t):\r\n    for i, x in enumerate(nums):\r\n    for j, y in enumerate(nums):\r\n    if i != j and x + y == t:\r\n    return [i, j]\r\n",
  "580f1a22df91279f09000273": "from random import randint\r\n\r\n\r\ndef random_ints(n, total):\r\n    result = []\r\n    for _ in range(n - 1):\r\n    result . append(randint(0, total))\r\n    total -= result[- 1]\r\n    return [* result, total]\r\n",
  "56f245a7e40b70f0e3000130": "from fractions import gcd\r\nimport re\r\n\r\n\r\ndef min_special_mult(arr):\r\n    l = [e for e in arr if not re . match('(None)|([+-]?\\d+)', str(e))]\r\n    if len(l) == 1:\r\n    return 'There is 1 invalid entry: {}' . format(l[0])\r\n    if len(l) > 1:\r\n    return 'There are {} invalid entries: {}' . format(len(l), l)\r\n\r\n    return reduce(lambda s, e: s * int(e) / gcd(s, int(e)) if e else s, arr, 1)\r\n",
  "5682e1082cc7862db5000039": "import re\r\n\r\n\r\ndef to_integer(s):\r\n    if re . match(\"\\A[+-]?(\\d+|0b[01]+|0o[0-7]+|0x[0-9a-fA-F]+)\\Z\", s):\r\n    return int(s, 10 if s[1:]. isdigit() else 0)\r\n",
  "5314b3c6bb244a48ab00076c": "def luck_check(s):\r\n    if not s . isnumeric():\r\n        raise ValueError\r\n    return not sum(int(a) - int(b) for a, b in zip(s[: len(s) / / 2], s[:: - 1]))\r\n",
  "58865bfb41e04464240000b0": "def bits_war(numbers):\r\n    odd, even = 0, 0\r\n    for number in numbers:\r\n    if number % 2 == 0:\r\n    if number > 0:\r\n    even += bin(number). count('1')\r\n    else:\r\n    even -= bin(number). count('1')\r\n    else:\r\n    if number > 0:\r\n    odd += bin(number). count('1')\r\n    else:\r\n    odd -= bin(number). count('1')\r\n    return 'odds win' if odd > even else 'evens win' if even > odd else 'tie'\r\n",
  "58856a06760b85c4e6000055": "def bits_battle(numbers):\r\n    x = sum(format(n, 'b'). count('1') if n %\r\n            2 else - format(n, 'b'). count('0') for n in numbers if n)\r\n    return (\r\n        'odds win' if x > 0 else\r\n        'evens win' if x < 0 else\r\n        'tie'\r\n    )\r\n",
  "54d3bb4dfc75996c1c000c6d": "def midpoint_sum(ints):\r\n    for i in range(1, len(ints) - 1):\r\n    if sum(ints[: i]) == sum(ints[i + 1:]):\r\n        return i\r\n",
  "57f7e7617a28db2a2200021a": "def multiply(n, l):\r\n    return list(map(n . __mul__, l))\r\n",
  "580751a40b5a777a200000a1": "def vowel_one(s):\r\n    return \"\" . join(\"1\" if c in \"aeiou\" else \"0\" for c in s . lower())\r\n",
  "57161cb0b436cf0911000819": "def find_spec_partition(n, k, com):\r\n    x, r = divmod(n, k)\r\n    return {'max': [x + 1] * r + [x] * (k - r),\r\n            'min': [n + 1 - k] + [1] * (k - 1)}[com]\r\n",
  "5619dbc22e69620e5a000010": "def equal_sigma1(n): return sum(\n    filter(n . __ge__, (528, 825, 1561, 1651, 4064, 4604, 5346, 5795, 5975, 6435)))\n\n# MAX = 10000\n# \u03c31 = [0] + [1] * MAX\n# for i in range(2, MAX + 1):\n# for j in range(i, MAX + 1, i):\n# \u03c31[j] += i\n#\n# def equal_sigma1(nMax):\n# s = 0\n# for i in range(nMax + 1):\n# r = int(str(i)[::-1])\n# if i != r and \u03c31[i] == \u03c31[r]:\n# s += i\n# return s\n",
  "54e9554c92ad5650fe00022b": "def to_currency(price):\r\n    return '{:,}' . format(price)\r\n",
  "559e3224324a2b6e66000046": "def sumin(n):\r\n    return n * (n + 1) * (2 * n + 1) / / 6\r\n    def sumax(n):\r\n    return n * (n + 1) * (4 * n - 1) / / 6\r\n    def sumsum(n):\r\n    return n * n * (n + 1)\r\n",
  "55d2aee99f30dbbf8b000001": "def score_test(tests, right, omit, wrong):\r\n    points = (right, omit, - wrong)\r\n    return sum(points[test] for test in tests)\r\n",
  "5417423f9e2e6c2f040002ae": "def digitize(n):\r\n    return [int(d) for d in str(n)]\r\n",
  "57efcb78e77282f4790003d8": "from math import ceil\n\n\ndef how_many_times(ap, ip):\n    return ceil(ap / ip)\n",
  "57741d8f10a0a66915000001": "def int_diff(arr, n):\r\n    num = 0\r\n    for i in range(len(arr)):\r\n    for j in range(i + 1, len(arr)):\r\n    if abs(arr[i] - arr[j]) == n:\r\n    num += 1\r\n    return num\r\n",
  "55b54be931e9ce28bc0000d6": "def position(x, y, n):\r\n    return (y - sum(range(x))) / / x + n\r\n",
  "57eaec5608fed543d6000021": "def div_con(lst):\r\n    return sum(n if isinstance(n, int) else - int(n) for n in lst)\r\n",
  "55606aeebf1f0305f900006f": "def to_binary(n):\r\n    return \"{:0b}\" . format(n & 0xffffffff)\r\n",
  "5841f680c5c9b092950001ae": "def generate_integers(m, n):\r\n    return list(range(m, n + 1))\r\n",
  "588e2a1ad1140d31cb00008c": "def generate_pairs(m, n):\r\n    return [(i, j) for i in range(m, n + 1) for j in range(i, n + 1)]\r\n",
  "588e27b7d1140d31cb000060": "def generate_pairs(n):\r\n    return [[i, j] for i in range(n + 1) for j in range(i, n + 1)]\r\n",
  "5899e054aa1498da6b0000cc": "from math import copysign as sign\n\n\ndef reverse_invert(lst):\n    return [- int(sign(int(str(abs(x))[:: - 1]), x)) for x in lst if isinstance(x, int)]\n",
  "563700da1ac8be8f1e0000dc": "def max_redigit(num):\r\n    if isinstance(num, int) and 99 < num < 1000:\r\n    return int(\"\" . join(sorted(str(num), reverse=True)))\r\n",
  "56ed20a2c4e5d69155000301": "def scale(strng, k, n):\r\n    words = strng . split()\r\n    words_h = (\"\" . join(char * k for char in word) for word in words)\r\n    return \"\\n\" . join(\"\\n\" . join(word for _ in range(n)) for word in words_h)\r\n",
  "586988b82e8d9cdc520003ac": "from string import ascii_lowercase\nAZ = ' ' + ascii_lowercase\n\n\ndef decrypt(msg):\n    return '' . join(\n        AZ[sum(int(b) for b in a if b . isdigit()) % 27] for a in msg . split())\n",
  "55da6c52a94744b379000036": "import re\r\n\r\n\r\ndef sum_from_string(string):\r\n    d = re . findall(\"\\d+\", string)\r\n    return sum(int(i) for i in d)\r\n",
  "585a033e3a36cdc50a00011c": "def freq_seq(s, sep):\r\n    return sep . join([str(s . count(i)) for i in s])\r\n",
  "57f75cc397d62fc93d000059": "def calc(s):\r\n    total1 = '' . join(map(lambda c: str(ord(c)), s))\r\n    total2 = total1 . replace('7', '1')\r\n    return sum(map(int, total1)) - sum(map(int, total2))\r\n",
  "57f759bb664021a30300007d": "def switcheroo(s):\r\n    return s . translate(str . maketrans('ab', 'ba'))\r\n",
  "53d2697b7152a5e13d000b82": "def copy_list(l):\r\n    return list(l)\r\n",
  "570523c146edc287a50014b1": "def numberJoy(n):\r\n    d_sum = sum(int(x) for x in list(str(n)))\r\n    return n == d_sum * int(str(d_sum)[:: - 1])\r\n",
  "558878ab7591c911a4000007": "def pig_latin(s):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    word = s . lower()\n    if not word . isalpha():  # Check for non alpha character\n    return None\n    if word[0] in vowels:  # Check if word starts with a vowel\n    return word + 'way'\n    # Find the first vowel and add the beginning to the end\n    for i, letter in enumerate(word):\n    if letter in vowels:\n    return word[i:] + word[: i] + 'ay'\n    return word + 'ay'  # No vowels\n",
  "53c94a82689f84c2dd00007d": "WORDS = ((10 * * 24, 'septillion'), (10 * * 21, 'sextillion'),\r\n         (10 * * 18, 'quintillion'), (10 * * 15, 'quadrillion'),\r\n         (10 * * 12, 'trillion'), (10 * * 9, 'billion'), (10 * * 6, 'million'),\r\n         (10 * * 3, 'thousand'), (10 * * 2, 'hundred'), (90, 'ninety'),\r\n         (80, 'eighty'), (70, 'seventy'), (60, 'sixty'), (50, 'fifty'),\r\n         (40, 'forty'), (30, 'thirty'), (20, 'twenty'), (19, 'nineteen'),\r\n         (18, 'eighteen'), (17, 'seventeen'), (16, 'sixteen'), (15, 'fifteen'),\r\n         (14, 'fourteen'), (13, 'thirteen'), (12, 'twelve'), (11, 'eleven'),\r\n         (10, 'ten'), (9, 'nine'), (8, 'eight'), (7, 'seven'), (6, 'six'),\r\n         (5, 'five'), (4, 'four'), (3, 'three'), (2, 'two'), (1, 'one'))\r\n\r\n\r\ndef int_to_english(num):\r\n    result = []\r\n    for word_value, word_name in WORDS:\r\n    q, num = divmod(num, word_value)\r\n    if q:\r\n    if word_value >= 100:\r\n    result . append(int_to_english(q))\r\n    result . append(word_name)\r\n    if not num:\r\n    return ' ' . join(result)\r\n",
  "52724507b149fa120600031d": "words = \"zero one two three four five six seven eight nine\" + \\\r\n    \" ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty\" + \\\r\n    \" thirty forty fifty sixty seventy eighty ninety\"\r\nwords = words . split(\" \")\r\n\r\n\r\ndef number2words(n):\r\n    if n < 20:\r\n    return words[n]\r\n    elif n < 100:\r\n    return words[18 + n / / 10] + ('' if n % 10 == 0 else '-' + words[n % 10])\r\n    elif n < 1000:\r\n    return number2words(n / / 100) + \" hundred\" + (' ' + number2words(n % 100) if n % 100 > 0 else '')\r\n    elif n < 1000000:\r\n    return number2words(n / / 1000) + \" thousand\" + (' ' + number2words(n % 1000) if n % 1000 > 0 else '')\r\n",
  "553a2461098c64ae53000041": "EN = {\r\n    # ones\r\n    0: 'zero',\r\n    1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five',\r\n    6: 'six', 7: 'seven', 8: 'eight', 9: 'nine',\r\n    # teens\r\n    10: 'ten', 11: 'eleven', 12: 'twelve', 13: 'thirteen',\r\n    14: 'fourteen', 15: 'fifteen', 16: 'sixteen', 17: 'seventeen',\r\n    18: 'eighteen', 19: 'nineteen',\r\n    # tens\r\n    20: 'twenty', 30: 'thirty',\r\n    40: 'forty', 50: 'fifty', 60: 'sixty', 70: 'seventy',\r\n    80: 'eighty', 90: 'ninety'\r\n}\r\n\r\n\r\ndef wordify(n):\r\n    hundreds, tens = divmod(n, 100)\r\n    tens, ones = divmod(tens, 10)\r\n    tens *= 10\r\n    if tens == 10:\r\n    tens += ones\r\n    ones = 0\r\n    return ' ' . join([f\" { EN . get ( hundreds )} hundred\"] * bool(hundreds) +\r\n                      [f\" { EN . get ( tens )} \"] * bool(tens) +\r\n                      [f\" { EN . get ( ones )} \"] * (bool(ones) or not (bool(hundreds) or bool(tens))))\r\n",
  "574e4175ff5b0a554a00000b": "def convert_to_mixed_numeral(parm):\r\n    a, b = map(int, parm . split('/'))\r\n    d, r = divmod(abs(a), b)\r\n    s = (0 < a) - (a < 0)\r\n    return parm if d == 0 else ('{}' + ' {}/{}' * (r != 0)). format(d * s, r, b)\r\n",
  "58334362c5637ad0bb0001c2": "import re\nPATTERN = re . compile(\"^\"\n                       \"M{0,4}\"  # thousands\n                       \"(CM|CD|D?C{,3})\"  # hundreds\n                       \"(XC|XL|L?X{,3})\"  # tens\n                       \"(IX|IV|V?I{,3})\"  # units\n                       \"$\")\n\n\ndef valid_romans(arr):\n    return [e for e in arr if e and PATTERN . match(e)]\n",
  "536c738e49aa8b663b000301": "from __builtin__ import sum as builtin_sum\n\n\ndef sum(* args):\n    return builtin_sum(arg for arg in args if isinstance(arg, int))\n",
  "5632e12703e2037fa7000061": "DIGITS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n\n\ndef base64_to_base10(string):\n    return sum(DIGITS . index(digit) * 64 * * i\n               for i, digit in enumerate(string[:: - 1]))\n",
  "55efecb8680f47654c000095": "from itertools import count\r\n\r\n\r\ndef int_rac(n, guess):\r\n    for i in count(1):\r\n    last_guess, guess = guess, (guess + n / / guess) / / 2\r\n    if abs(last_guess - guess) < 1:\r\n    return i\r\n",
  "54e2213f13d73eb9de0006d2": "from itertools import count\r\n\r\n\r\ndef pair_zeros(arr, * args):\r\n    c = count(1)\r\n    return [elem for elem in arr if elem != 0 or next(c) % 2]\r\n",
  "56c2acc8c44a3ad6e400050a": "def countzero(s):\r\n    return sum(1 if c in 'abdegopq069DOPQR' else 2 if c in '%&B8' else 0 for c in s . replace('()', '0'))\r\n",
  "58ad09d6154165a1c80000d1": "import re\n\n\ndef zero_and_one(s):\n    return len(re . sub(\"01|10\", \"\", s))\n",
  "5600e00e42bcb7b9dc00014e": "def harmon_pointTrip(xA, xB, xC):\r\n    a, b, c = map(float, [xA, xB, xC])\r\n    # Yay for algebra!\r\n    d = ((a * c) + (b * c) - (2 * a * b)) / (2 * c - a - b)\r\n    return round(d, 4)\r\n",
  "542c1a6b25808b0e2600017c": "from math import sin, cos, radians, fabs\r\n\r\n\r\ndef wind_info(runway, wind_direction, wind_speed):\r\n    rw = int(runway[: 2]) * 10\r\n    hw = round(cos(radians(wind_direction - rw)) * wind_speed)\r\n    cw = int(round(sin(radians(wind_direction - rw)) * wind_speed))\r\n    return \"{}wind {} knots. Crosswind {} knots from your {}.\" . format(\r\n        'Tail' if hw < 0 else 'Head',\r\n        int(fabs(hw)), int(fabs(cw)),\r\n        'left' if cw < 0 else 'right')\r\n",
  "5458d4d2cbae2a9438000389": "def make_lazy(f, * args, * * kwargs):\r\n    return lambda: f(* args, * * kwargs)\r\n",
  "554c8a93e466e794fe000001": "def point_vs_vector(point, vector):\r\n    [ax, ay], [bx, by] = vector\r\n    x, y = point\r\n    cross = (bx - ax) * (y - ay) - (by - ay) * (x - ax)\r\n    return (cross < 0) - (cross > 0)\r\n",
  "58417e9ab9c25c774500001f": "import math\r\n\r\n\r\ndef missing_angle(h, a, o):\r\n    if h == 0:\r\n    radians = math . atan(o / a)\r\n    elif a == 0:\r\n    radians = math . asin(o / h)\r\n    else:\r\n    radians = math . acos(a / h)\r\n    return round(math . degrees(radians))\r\n",
  "555f43d8140a6df1dd00012b": "from math import cos, sin, radians\r\n\r\n\r\ndef coordinates(deg, r, precision=10):\r\n    x, y = r * cos(radians(deg)), r * sin(radians(deg))\r\n    return round(x, precision), round(y, precision)\r\n",
  "53b7bc844db8fde50800020a": "def on_line(points):\r\n    points = list(set(points))\r\n\r\n    def cross_product(\r\n        a, b, c): return a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])\r\n    return all(cross_product(p, * points[: 2]) == 0 for p in points[2:])\r\n",
  "56a313a0538696bcab000004": "def finaldist_crazyrobot(moves, init_pos):\r\n    count = {\"R\": 0, \"L\": 0, \"U\": 0, \"D\": 0}\r\n\r\n    for d, n in moves:\r\n    count[d] += n\r\n\r\n    x = count[\"R\"] - count[\"L\"]\r\n    y = count[\"U\"] - count[\"D\"]\r\n\r\n    return (x * * 2 + y * * 2) * * 0.5\r\n",
  "56a13035eb55c8436a000041": "from math import pi\n\n\ndef cup_volume(d1, d2, h):\n    return round(h / 12.0 * pi * (d1 * * 2 + d1 * d2 + d2 * * 2), 2)\n",
  "556cebcf7c58da564a000045": "def number_of_rectangles(m, n):\r\n    return n * m * (n + 1) * (m + 1) / 4\r\n",
  "554dc2b88fbafd2e95000125": "def vector_length(vector):\r\n    (x1, y1), (x2, y2) = vector\r\n    return ((x1 - x2) * * 2 + (y1 - y2) * * 2) * * .5\r\n",
  "53222010db0eea35ad000001": "def getSlope(p1, p2):\r\n    return None if p1[0] == p2[0] else (p2[1] - p1[1]) / (p2[0] - p1[0])\r\n",
  "55f1786c296de4952f000014": "from math import hypot\ndef length_of_line(((x1, y1), (x2, y2))): return '{:.2f}' . format(hypot(x1 - x2, y1 - y2))\n",
  "5899aa695401a83a5c0000c4": "from math import pi\n\n\ndef square_area_to_circle(size):\n    return size * pi / 4\n",
  "5841f4fb673ea2a2ae000111": "def generate_integers(n):\r\n    return list(range(0, n + 1))\r\n",
  "535a69fb36973f2aad000953": "def shortener(message):\r\n    n = len(message) - 160\r\n    if n <= 0:\r\n        return message\r\n    message = message . rsplit(' ', n)\r\n    return message[0] + '' . join(w[0]. upper() + w[1:] for w in message[1:])\r\n",
  "54a91a4883a7de5d7800009c": "def increment_string(strng):\r\n    head = strng . rstrip('0123456789')\r\n    tail = strng[len(head):]\r\n    if tail == \"\":\r\n        return strng + \"1\"\r\n    return head + str(int(tail) + 1). zfill(len(tail))\r\n",
  "52e1476c8147a7547a000811": "from re import compile, VERBOSE\nregex = compile(\"\"\" \n ^ # begin word \n (?=.*?[a-z]) # at least one lowercase letter \n (?=.*?[A-Z]) # at least one uppercase letter \n (?=.*?[0-9]) # at least one number \n [A-Za-z\\d] # only alphanumeric \n {6,} # at least 6 characters long \n $ # end word \n \"\"\", VERBOSE)\n",
  "58bfa1ea43fadb41840000b4": "def folding(a, b):\r\n    squares = 1\r\n    while a != b:\r\n    squares += 1\r\n    b, a = sorted((a - b, b))\r\n    return squares\r\n",
  "58bcd27b7288983803000002": "import re\n\n\ndef happy_g(s):\n    return not re . search(r'(?<!g)g(?!g)', s)\n",
  "58c218efd8d3cad11c0000ef": "def bin_str(input):\n    flips_needed = 0\n    last_seen = '0'\n    for c in input:\n    if last_seen != c:\n    flips_needed += 1\n    last_seen = c\n    return flips_needed\n",
  "58b8dccecf49e57a5a00000e": "from re import findall\ndef repeat_adjacent(s): return len(findall(r\"((.)\\2+(?!\\2)){2,}\", s))\n",
  "5855777bb45c01bada0002ac": "c = 'black brown red orange yellow green blue violet gray white' . split()\r\n\r\n\r\ndef encode_resistor_colors(ohms_string):\r\n    ohms = str(int(eval(ohms_string . replace(\r\n        'k', '*1000'). replace('M', '*1000000'). split()[0])))\r\n    return '%s %s %s gold' % (c[int(ohms[0])], c[int(ohms[1])], c[len(ohms[2:])])\r\n",
  "57cf3dad05c186ba22000348": "code = {'black': 0, 'brown': 1, 'red': 2, 'orange': 3, 'yellow': 4,\r\n        'green': 5, 'blue': 6, 'violet': 7, 'gray': 8, 'white': 9,\r\n        'gold': 5, 'silver': 10, '': 20}\r\n\r\n\r\ndef decode_resistor_colors(bands):\r\n    colors = (bands + ' '). split(' ')\r\n    value = 10 * code[colors[0]] + code[colors[1]]\r\n    value *= 10 * * code[colors[2]]\r\n    tolerance = code[colors[3]]\r\n    prefix = ''\r\n    for p in 'kM':\r\n    if value / / 1000:\r\n    prefix = p\r\n    value /= 1000\r\n    return \"%g%s ohms, %d%%\" % (value, prefix, tolerance)\r\n",
  "52a112d9488f506ae7000b95": "def is_int_array(a):\r\n    return isinstance(a, list) and all(isinstance(x, (int, float)) and x == int(x) for x in a)\r\n",
  "541a354c39c5efa5fa001372": "from ipaddress import IPv4Address\r\n\r\n\r\ndef ip_to_num(ip):\r\n    return int(IPv4Address(ip))\r\n\r\n    def num_to_ip(num):\r\n    return str(IPv4Address(num))\r\n",
  "584ebd7a044a1520f20000d5": "def range_function(* args, start=1, step=1):\r\n    if len(args) == 1:\r\n    stop = args[0]\r\n    elif len(args) == 2:\r\n    start, stop = args\r\n    else:\r\n    start, step, stop = args\r\n    return range(start, stop + 1, step)\r\n",
  "5558cc216a7a231ac9000022": "def duplicates(array):\r\n    seen = []\r\n    dups = []\r\n    for char in array:\r\n    if char not in seen:\r\n    seen . append(char)\r\n    elif char not in dups:\r\n    dups . append(char)\r\n\r\n    return dups\r\n",
  "52c32ef251f31ae8f50000ae": "def add_to_average(current, points, add):\r\n    return (current * points + add) / (points + 1)\r\n",
  "530017aac7c0f49926000084": "def pluck(objs, name):\r\n    return [item . get(name) for item in objs]\r\n",
  "558dd9a1b3f79dc88e000001": "def find_dup(arr):\r\n    for i in arr:\r\n    if arr . count(i) != 1:\r\n    return i\r\n",
  "54d22119beeaaaf663000024": "def shades_of_grey(n):\r\n    return ['#{0:02x}{0:02x}{0:02x}' . format(i + 1) for i in range(min(254, n))]\r\n",
  "52ea928a1ef5cfec800003ee": "def ip_to_int32(ip):\n    \"\"\" \n    Take the following IPv4 address: 128.32.10.1 This address has 4 octets \n    where each octet is a single byte (or 8 bits). \n    1st octet 128 has the binary representation: 10000000 \n    2nd octet 32 has the binary representation: 00100000 \n    3rd octet 10 has the binary representation: 00001010 \n    4th octet 1 has the binary representation: 00000001 \n    So 128.32.10.1 == 10000000.00100000.00001010.00000001 \n    Because the above IP address has 32 bits, we can represent it as \n    the 32 bit number: 2149583361. \n    Write a function ip_to_int32(ip) ( JS: ipToInt32(ip) ) that takes \n    an IPv4 address and returns a 32 bit number. \n    ip_to_int32(\"128.32.10.1\") => 2149583361 \n    \"\"\"\n    addr = ip . split(\".\")\n    res = int(addr[0]) << 24\n    res += int(addr[1]) << 16\n    res += int(addr[2]) << 8\n    res += int(addr[3])\n    return res\n",
  "580878d5d27b84b64c000b51": "def sum_triangular_numbers(n):\r\n    return n * (n + 1) * (n + 2) / 6 if n > 0 else 0\r\n",
  "58bcfe1e23fee9fd95000007": "def revamp(s):\r\n    words = ['' . join(sorted(word)) for word in s . split()]\r\n    words . sort(key=lambda word: (sum(map(ord, word)), len(word), word))\r\n    return ' ' . join(words)\r\n",
  "588475d575431d0a0e000023": "from fractions import gcd\n\n\ndef count_black_cells(h, w):\n    return (h + w) - 2 + gcd(h, w)\n",
  "57d5e850bfcdc545870000b7": "def deadAntCount(ants):\r\n    return max(ants . count('a'), ants . count('n'), ants . count('t')) - ants . count('ant')\r\n",
  "58c5577d61aefcf3ff000081": "from itertools import chain\r\n\r\n\r\ndef fencer(what, n):\r\n    lst = [[] for _ in range(n)]\r\n    x, dx = 0, 1\r\n    for c in what:\r\n    lst[x]. append(c)\r\n    if x == n - 1 and dx > 0 or x == 0 and dx < 0:\r\n        dx *= - 1\r\n    x += dx\r\n    return chain . from_iterable(lst)\r\n\r\n    def encode_rail_fence_cipher(s, n): return '' . join(fencer(s, n))\r\n\r\n    def decode_rail_fence_cipher(s, n):\r\n    lst = [''] * len(s)\r\n    for c, i in zip(s, fencer(range(len(s)), n)):\r\n    lst[i] = c\r\n    return '' . join(lst)\r\n",
  "58b38256e51f1c2af0000081": "def best_match(goals1, goals2):\r\n    return min((a - b, - b, i) for i, (a, b) in enumerate(zip(goals1, goals2)))[2]\r\n",
  "587731fda577b3d1b0001196": "def camel_case(string):\r\n    return string . title(). replace(\" \", \"\")\r\n",
  "54dc6f5a224c26032800005c": "def stock_list(listOfArt, listOfCat):\r\n    if (len(listOfArt) == 0) or (len(listOfCat) == 0):\r\n    return \"\"\r\n    result = \"\"\r\n    for cat in listOfCat:\r\n    total = 0\r\n    for book in listOfArt:\r\n    if (book[0] == cat[0]):\r\n    total += int(book . split(\" \")[1])\r\n    if (len(result) != 0):\r\n    result += \" - \"\r\n    result += \"(\" + str(cat) + \" : \" + str(total) + \")\"\r\n    return result\r\n",
  "54df2067ecaa226eca000229": "def f(n):\r\n    return n * (n + 1) / / 2 if (n > 0 and isinstance(n, int)) else None\r\n",
  "55a3cb91d1c9ecaa2900001b": "def strong_enough(earthquake, age):\r\n    idade = 1000\r\n    magnitude = sum(earthquake[0]) * sum(earthquake[1]) * sum(earthquake[2])\r\n    for i in range(age):\r\n    idade = idade - (0.01 * idade)\r\n    if magnitude > idade:\r\n    return 'Needs Reinforcement!'\r\n    else:\r\n    return 'Safe!'\r\n",
  "58db8dc3ac225602610000f2": "def mean_max(d, n):\r\n    m = sum(i * (i * * n - (i - 1) * * n) for i in range(1, d + 1)) / (d * * n)\r\n    return m - (1 + d) / 2\r\n",
  "5723b111101f5f905f0000a5": "def resistor_parallel(* rs):\r\n    return 1 / sum(1.0 / r for r in rs)\r\n",
  "52b7ed099cdc285c300001cd": "def sum_of_intervals(intervals):\r\n    s, top = 0, float(\"-inf\")\r\n    for a, b in sorted(intervals):\r\n    if top < a:\r\n        top = a\r\n    if top < b:\r\n        s, top = s + b - top, b\r\n    return s\r\n",
  "57feb00f08d102352400026e": "def flap_display(lines, rotors): return [\r\n    # Find new string\r\n    '' . join([\r\n        # Get new character by moving index of old\r\n        # by sum of rotor values up to current symbol\r\n        ALPHABET[(ALPHABET . index(smb) + sum(rot[: sid + 1])) % len(ALPHABET)]\r\n        # Loop trough each character(smb) and its index(sid(from symbol id))\r\n        for sid, smb in enumerate(line)\r\n    ])\r\n    # Loop trough each line and rotors, assigned to that line\r\n    for line, rot in zip(lines, rotors)\r\n]\r\n",
  "5641275f07335295f10000d0": "def split_the_bill(x):\r\n    diff = sum(x . values()) / float(len(x))\r\n    return {k: round(x[k] - diff, 2) for k in x}\r\n",
  "5516ab668915478845000780": "def reverse_by_center(s): n = len(s) / / 2; return s[- n:] + s[n: - n] + s[: n]\n",
  "58da7ae9b340a2440500009c": "def point_in_circle(x, y):\r\n    return (x * x + y * y) < 1\r\n",
  "55cb0597e12e896ab6000099": "def arithmetic_sequence_sum(a, r, n):\r\n    return n * (a + a + (n - 1) * r) / 2\r\n",
  "573acc8cffc3d13f61000533": "import random\n\n\ndef throw_rigged():\n    return 6 if random . random() <= .22 else random . randrange(1, 6)\n",
  "589e2af835999cbe2f000229": "def magicdice(n):\r\n    return ((2 * * n) * * 3 - (2 * * n - 1) * * 3, (2 * * n) * * 3)\r\n",
  "58223370aef9fc03fd000071": "import re\r\n\r\n\r\ndef dashatize(num):\r\n    try:\r\n    return '' . join(['-' + i + '-' if int(i) % 2 else i for i in str(abs(num))]). replace('--', '-'). strip('-')\r\n    except:\r\n    return 'None'\r\n",
  "5590961e6620c0825000008f": "def swap(string_):\r\n    return string_ . swapcase()\r\n",
  "574bd867d277832448000adf": "def is_audio(filename):\r\n    name, ext = filename . split('.')\r\n    return name . isalpha() and ext in {'mp3', 'flac', 'alac', 'aac'}\r\n\r\n    def is_img(filename):\r\n    name, ext = filename . split('.')\r\n    return name . isalpha() and ext in {'jpg', 'jpeg', 'png', 'bmp', 'gif'}\r\n",
  "5641c3f809bf31f008000042": "def two_decimal_places(number):\r\n\r\n    return int(number * 100) / 100.0\r\n",
  "57faf32df815ebd49e000117": "def remove(s):\r\n    return ' ' . join(w . rstrip('!') or w for w in s . split())\r\n",
  "580a4734d6df748060000045": "def is_sorted_and_how(arr):\r\n    if arr == sorted(arr):\r\n    return 'yes, ascending'\r\n    elif arr == sorted(arr)[:: - 1]:\r\n    return 'yes, descending'\r\n    else:\r\n    return 'no'\r\n",
  "588a7d45019c42be61000009": "def interweave(s1, s2):\r\n    s = [''] * (len(s1) + len(s2))\r\n    s[:: 2], s[1:: 2] = s1, s2\r\n    return '' . join(c for c in s if not c . isdigit()). strip()\r\n",
  "55d38b959f9c33f3fb00007d": "def adjust(coin, price):\r\n    return price + (coin - price) % coin\r\n",
  "55d1d6d5955ec6365400006d": "def round_to_next5(n):\r\n    return n + (5 - n) % 5\r\n",
  "5701e43f86306a615c001868": "def get_issuer(number):\n    s = str(number)\n    return (\"AMEX\" if len(s) == 15 and s[: 2] in (\"34\", \"37\") else\n            \"Discover\" if len(s) == 16 and s . startswith(\"6011\") else\n            \"Mastercard\" if len(s) == 16 and s[0] == \"5\" and s[1] in \"12345\" else\n            \"VISA\" if len(s) in [13, 16] and s[0] == '4' else\n            \"Unknown\")\n",
  "56f54d45af5b1fec4b000cce": "import re\r\nHK_PHONE_NUMBER = '\\d{4} \\d{4}'\r\n\r\n\r\ndef is_valid_HK_phone_number(number):\r\n    return bool(re . match(HK_PHONE_NUMBER + '\\Z', number))\r\n\r\n    def has_valid_HK_phone_number(number):\r\n    return bool(re . search(HK_PHONE_NUMBER, number))\r\n",
  "5729c30961cecadc4f001878": "def unite_unique(* arg):\r\n    res = []\r\n    for arr in arg:\r\n    for val in arr:\r\n    if not val in res:\r\n        res . append(val)\r\n    return res\r\n",
  "56a24b4d9f3671584d000039": "import re\n\n\ndef double_check(str):\n    return bool(re . search(r\"(.)\\1\", str . lower()))\n",
  "56dd927e4c9055f8470013a5": "def testit(act, s):\r\n    dic = {(\"run\", \"_\"): \"_\", (\"run\", \"|\"): \"/\",\r\n           (\"jump\", \"|\"): \"|\", (\"jump\", \"_\"): \"x\"}\r\n\r\n    return \"\" . join([dic[act[i], s[i]] for i in range(len(s))])\r\n",
  "56d949281b5fdc7666000004": "def testit(a, b):\r\n    return sorted(list(set(a)) + list(set(b)))\r\n",
  "567fe8b50c201947bc000056": "from re import compile, match\r\nREGEX = compile(r'((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.){4}$')\r\n\r\n\r\ndef ipv4_address(address):\r\n    # refactored thanks to @leonoverweel on CodeWars\r\n    return bool(match(REGEX, address + '.'))\r\n",
  "559760bae64c31556c00006b": "# If we write the decision tree for the problem we can see\n# that we can traverse upwards from any node simply by\n# dividing by two and taking the floor. This would require\n# a reversal of the list generated since we're building it\n# backwards.\n#\n# If we examine the successor function (x -> {2x, 2x + 1})\n# we can deduce that the binary representation of any number\n# gives us the steps to follow to generate it: if the n-th (LTR)\n# bit is set, we use 2x + 1 for the next element, otherwise we\n# choose 2x. This allows us to build the sequence in order.\ndef climb(n):\n    res = []\n    cur = 1\n    mask = 1 << max(0, n . bit_length() - 2)\n\n    while cur <= n:\n    res . append(cur)\n    cur = 2 * cur + (1 if (n & mask) != 0 else 0)\n    mask >>= 1\n    return res\n",
  "58b635903e78b34958000056": "def count_number(n, x):\r\n    return len([j for j in range(1, n + 1) if x % j == 0 and x / j <= n])\r\n",
  "546f922b54af40e1e90001da": "def alphabet_position(text):\r\n    return ' ' . join(str(ord(c) - 96) for c in text . lower() if c . isalpha())\r\n",
  "52829c5fe08baf7edc00122b": "def number_of_occurrences(s, xs):\r\n    return xs . count(s)\r\n",
  "5886dea04703f1712d000051": "def weak_numbers(n):\r\n    d = [0] + [len([1 for i in range(1, j + 1) if j % i == 0])\r\n               for j in range(1, n + 1)]\r\n    w = [len([1 for i in range(1, j) if d[i] > d[j]]) for j in range(1, n + 1)]\r\n    m = max(w)\r\n    return [m, w . count(m)]\r\n",
  "56d9c274c550b4a5c2000d92": "def mystery((a, b, c, d), (e, f, g, h)):\r\n    return [a * e + b * g, a * f + b * h, c * e + d * g, c * f + d * h]\r\n",
  "56ee0448588cbb60740013b9": "def mystery(n):\r\n    return [i for i in range(1, n + 1, 2) if n % i == 0]\r\n",
  "56eee006ff32e1b5b0000c32": "from itertools import compress\n\n\ndef mystery(s, n):\n    return '' . join(compress(s, map(int, format(n, 'b'))))\n",
  "589d1e88e8afb7a85e00004e": "def number_increasing(n):\r\n    return n not in {2, 4, 7, 12, 17, 22} and n % 5 != 0\r\n",
  "5894017082b9fb62c50000df": "def are_equally_strong(your_left, your_right, friends_left, friends_right):\r\n    return sorted([your_left, your_right]) == sorted([friends_left, friends_right])\r\n",
  "5886cab0a95e17e61600009d": "def number_of_clans(divisors, k):\r\n    return len({tuple(d for d in divisors if not n % d) for n in range(1, k + 1)})\r\n",
  "55e86e212fce2aae75000060": "def prod2sum(a, b, c, d):\r\n    e = sorted([abs(a * d - b * c), abs(a * c + b * d)])\r\n    f = sorted([abs(a * c - b * d), abs(a * d + b * c)])\r\n    if e == f:\r\n    return [e]\r\n    else:\r\n    return sorted([e, f])\r\n",
  "58a66c208b88b2de660000c3": "def missing_values(seq):\r\n    a, b = sorted(seq, key=seq . count)[: 2]\r\n    return a * a * b\r\n",
  "5639302a802494696d000077": "import operator\r\n\r\n\r\ndef inf_database(range_, str_, val):\r\n    ops = {\"higher than\": operator . gt, \"lower than\": operator . lt, \"equals to\": operator . eq,\r\n           \"higher and equals to\": operator . ge, \"lower and equals to\": operator . le}\r\n    if str_ not in ops:\r\n    return \"wrong constraint\"\r\n    result = [i for i in range(range_[0], range_[- 1] + 1)\r\n              if ops[str_](A001055[i], val)]\r\n    return (len(result), result)\r\n",
  "5886c6b2f3b6ae33dd0000be": "def first_reverse_try(arr):\r\n    if arr:\r\n    arr[0], arr[- 1] = arr[- 1], arr[0]\r\n    return arr\r\n",
  "5886d35d4703f125a6000008": "def is_smooth(arr):\r\n    d, m = divmod(len(arr), 2)\r\n    return arr[0] == arr[- 1] == arr[d] + arr[d - 1] * (m == 0)\r\n",
  "5886f3713a111b620f0000dc": "def html_end_tag_by_start_tag(start_tag):\r\n    return \"</\" + start_tag[1: - 1]. split(\" \")[0] + \">\"\r\n",
  "58870402c81516bbdb000088": "def strings_construction(A, B):\r\n    return min(B . count(i) / / A . count(i) for i in set(A))\r\n",
  "58881b859ab1e053240000cc": "def elections_winners(votes, k):\r\n    m = max(votes)\r\n    return sum(x + k > m for x in votes) or votes . count(m) == 1\r\n",
  "58485a43d750d23bad0000e6": "def fizz_buzz_cuckoo_clock(time):\r\n    hh, mm = map(int, time . split(\":\"))\r\n\r\n    if mm == 0:\r\n        return \" \" . join([\"Cuckoo\"] * (hh % 12 or 12))\r\n    elif mm == 30:\r\n        return \"Cuckoo\"\r\n    elif mm % 15 == 0:\r\n        return \"Fizz Buzz\"\r\n    elif mm % 3 == 0:\r\n        return \"Fizz\"\r\n    elif mm % 5 == 0:\r\n        return \"Buzz\"\r\n    else:\r\n        return \"tick\"\r\n",
  "586ec0b8d098206cce001141": "def inverse_slice(items, a, b):\r\n    return items[: a] + items[b:]\r\n",
  "58ad230ce0201e17080001c5": "def rotate_paper(number):\r\n    return number == number . translate(str . maketrans('69', '96', '1347'))[:: - 1]\r\n",
  "58b6c403a38abaaf6c00006b": "def same_encryption(s1, s2):\r\n    return (s1[0], s1[- 1], len(s1) % 9) == (s2[0], s2[- 1], len(s2) % 9)\r\n",
  "58ad29bc4b852b14a4000050": "from itertools import combinations\r\n\r\n\r\ndef counting_triangles(v):\r\n    v . sort()\r\n    return sum(a + b > c for a, b, c in combinations(v, 3))\r\n",
  "5884731139a9b4b7a8000002": "def candles(candles, make_new):\r\n    return candles + (candles - 1) / / (make_new - 1)\r\n",
  "58846d50f54f021d90000012": "def rounders(value):\r\n    mag = 1\r\n    while value > 10:\r\n    value, r = divmod(value, 10)\r\n    value += r > 4\r\n    mag *= 10\r\n    return value * mag\r\n",
  "58846b46f4456a8919000025": "def apple_boxes(k):\r\n    return sum(- (i * i) if i & 1 else i * i for i in range(1, k + 1))\r\n",
  "588463cae61257e44600006d": "def magical_well(a, b, n):\r\n    return sum((a + i) * (b + i) for i in range(n))\r\n",
  "5884615cbd573356ab000050": "def count_sum_of_two_representations(n, l, r):\r\n    return max((min(r, n - l) - max(l, n - r)) / / 2 + 1, 0)\r\n",
  "58845a92bd573378f4000035": "def swap_adjacent_bits(n):\r\n    return (n & 0x55555555) << 1 | (n & 0xaaaaaaaa) >> 1\r\n",
  "5886dbc685d5788715000071": "def comfortable_numbers(l, r):\r\n    s = [sum(map(int, str(n))) for n in range(l, r + 1)]\r\n    return sum(s[i] >= i - j <= s[j] for i in range(1, len(s)) for j in range(i))\r\n",
  "5877e7d568909e5ff90017e6": "from itertools import combinations_with_replacement\r\n\r\n\r\ndef find_all(sum_dig, digs):\r\n    combs = combinations_with_replacement(list(range(1, 10)), digs)\r\n    target = ['' . join(str(x) for x in list(comb))\r\n              for comb in combs if sum(comb) == sum_dig]\r\n    if not target:\r\n    return []\r\n    return [len(target), int(target[0]), int(target[- 1])]\r\n",
  "58c8a41bedb423240a000007": "def cake_slice(n):\r\n    return (n * * 2 + n + 2) / / 2\r\n",
  "57efa1a2108d3f73f60000e9": "def trim(beard):\r\n    return [[h . replace(\"J\", \"|\") for h in b] for b in beard[: - 1]] + [[\"...\"] * len(beard[0])]\r\n",
  "582cb3a637c5583f2200005d": "def get_weight(name):\r\n    return sum(ord(a) for a in name . swapcase() if a . isalpha())\r\n",
  "57e8f757085f7c7d6300009a": "def plane_seat(a):\n    front, middle, back = (range(1, 21), range(21, 41), range(41, 61))\n    left, center, right = ('ABC', 'DEF', \"GHK\")\n    x, y = ('', '')\n\n    if int(a[: - 1]) in front:\n        x = 'Front-'\n    if int(a[: - 1]) in middle:\n        x = 'Middle-'\n    if int(a[: - 1]) in back:\n        x = 'Back-'\n    if a[- 1] in left:\n        y = 'Left'\n    if a[- 1] in center:\n        y = 'Middle'\n    if a[- 1] in right:\n        y = 'Right'\n    return x + y if all((x, y)) else 'No Seat!!'\n",
  "56a24b309f3671608b00003a": "from re import compile, sub\r\nREGEX = compile(r',+')\r\n\r\n\r\ndef dad_filter(strng):\r\n    return sub(REGEX, ',', strng). rstrip(' ,')\r\n",
  "56b12e3ad2387de332000041": "def diff(arr):\r\n    r = arr and max(arr, key=lambda x: abs(eval(x)))\r\n    return bool(arr and eval(r)) and r\r\n",
  "56ae72854d005c7447000023": "from jinja2 import Template\n\n\ndef create_template(template):\n    return lambda * * vals: Template(template). render(vals)\n",
  "5676f07029da352ba2000065": "def largest(n):\r\n    return [7, 97, 997, 9973, 99991, 999983][n - 1] if type(n) == int and n > 0 else False\r\n",
  "56a28c30d7eb6acef700004d": "def isPerfect(n):\r\n    return n in [6, 28, 496, 8128, 33550336, 8589869056, 137438691328]\r\n",
  "54fb853b2c8785dd5e000957": "def chain(value, functions):\r\n    for f in functions:\r\n    value = f(value)\r\n    return value\r\n",
  "556196a6091a7e7f58000018": "def largest_pair_sum(numbers):\r\n    return sum(sorted(numbers)[- 2:])\r\n",
  "5750699bcac40b3ed80001ca": "def match(usefulness, months):\r\n    return \"Match!\" if sum(usefulness) >= 0.85 * * months * 100 else \"No match!\"\r\n",
  "57d147bcc98a521016000320": "def pillow(s): return ('n', 'B') in zip(* s)\n",
  "58844a13aa037ff143000072": "def will_you(young, beautiful, loved):\r\n    return (young and beautiful) != loved\r\n",
  "589b1c15081bcbfe6700017a": "import math\n\n\ndef cost(mins):\n    return 30 + 10 * math . ceil(max(0, mins - 60 - 5) / 30)\n",
  "56b22765e1007b79f2000079": "def is_narcissistic(n):\r\n    num = str(n)\r\n    length = len(num)\r\n    return sum(int(a) * * length for a in num) == n\r\n",
  "57bec3bc5640aa5f3f00003e": "def generate_currency_matrix(c):\r\n    t = (\"EUR\", \"GBP\", \"AUD\", \"NZD\", \"USD\", \"CAD\", \"CHF\", \"JPY\")\r\n    return [\"%s%s\" % tuple(sorted((c, o), key=t . index)) for o in t if o != c]\r\n",
  "5782a87d9fb2a5e623000158": "def clock_degree(clock_time):\r\n    hour, minutes = (int(a) for a in clock_time . split(':'))\r\n    if not (24 > hour >= 0 and 60 > minutes >= 0):\r\n    return 'Check your time !'\r\n    return '{}:{}' . format((hour % 12) * 30 or 360, minutes * 6 or 360)\r\n",
  "577c349edf78c178a1000108": "def xMasTree(n):\r\n    return [(\"#\" * (x * 2 + 1)). center(n * 2 - 1, \"_\") for x in list(range(n)) + [0] * 2]\r\n",
  "573b216f5328ffcd710013b3": "def lose_weight(gender, weight, duration):\n    if not gender in ['M', 'F']:\n        return 'Invalid gender'\n    if weight <= 0:\n        return 'Invalid weight'\n    if duration <= 0:\n        return 'Invalid duration'\n    nl = 0.985 if gender == 'M' else 0.988\n    for i in range(duration):\n        weight *= nl\n    return round(weight, 1)\n",
  "564d398e2ecf66cec00000a9": "def type_of_triangle(a, b, c):\r\n    if any(not isinstance(x, int) for x in (a, b, c)):\r\n    return \"Not a valid triangle\"\r\n    a, b, c = sorted((a, b, c))\r\n    if a + b <= c:\r\n    return \"Not a valid triangle\"\r\n    if a == b and b == c:\r\n    return \"Equilateral\"\r\n    if a == b or a == c or b == c:\r\n    return \"Isosceles\"\r\n    return \"Scalene\"\r\n",
  "5866f10311ceec6ac10001e8": "def help_jesse(arr):\n    fmt = 'Pour {a.amount} mL of {a.solution} into a {a.instrument}' . format\n    note = ' ({a.note})' . format\n    return [fmt(a=a) + (note(a=a) if hasattr(a, 'note') else '') for a in arr]\n",
  "584c7b1e2cb5e1a727000047": "def hello_world(): return bytes(\n    [72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33]). decode()\n",
  "56ec6016a9dfe3346e001242": "import math\n\n\ndef geometric_meanII(arr):\n    gm = 0\n    c = 0\n    f = 0\n    l = len(arr)\n    for a in arr:\n    if type(a) == int and a >= 0:\n        gm += math . log(a)\n        c += 1\n    else:\n        f += 1\n    if l <= 10:\n    if c < l - 1:\n        return 0\n    else:\n    if f * 100 / l > 10:\n        return 0\n    return math . exp(gm / c)\n",
  "56ebcea1b9d927f9bf000544": "# No need to reinvent the wheel\nfrom scipy . stats . mstats import gmean\n\n\ndef geometric_meanI(arr):\n    if 0 in arr:\n        return 0\n    L = list(filter(lambda x: isinstance(x, int) and x > 0, arr))\n    if 9 * len(arr) > 9 * len(L) + (len(L) if len(arr) > 10 else 9):\n        return 0\n    return gmean(L)\n",
  "57b2e428d24156b312000114": "from math import pi\n\n\ndef volume(r, h):\n    return pi * r * * 2 * h / / 3\n",
  "588805ca44c7e8c3a100013c": "def different_squares(matrix):\r\n    s = set()\r\n    rows, cols = len(matrix), len(matrix[0])\r\n    for row in range(rows - 1):\r\n    for col in range(cols - 1):\r\n    s . add((matrix[row][col], matrix[row][col + 1],\r\n            matrix[row + 1][col], matrix[row + 1][col + 1]))\r\n    return len(s)\r\n",
  "5886da134703f125a6000033": "def pages_numbering_with_ink(current, digits):\r\n    while digits >= len(str(current)):\r\n    digits = digits - len(str(current))\r\n    current = current + 1\r\n    return current - 1\r\n",
  "58880c6e79a0a3e459000004": "def house_numbers_sum(inp):\r\n    return sum(inp[: inp . index(0)])\r\n",
  "588810c99fb63e49e1000606": "def house_of_cats(legs):\r\n    return list(range(legs % 4 / / 2, legs / / 2 + 1, 2))\r\n",
  "588820169ab1e053240000e0": "def are_similar(a, b):\r\n    return sorted(a) == sorted(b) and sum(i != j for i, j in zip(a, b)) in [0, 2]\r\n",
  "58c8a6daa7f31a623200016a": "def pass_the_bill(t, c, r):\r\n    return - 1 if t < 2 * r + 1 else max(0, t / / 2 + 1 - c)\r\n",
  "588854201361435f5e0000bd": "def array_conversion(arr):\r\n    sign = 0\r\n    while len(arr) > 1:\r\n    sign = 1 ^ sign\r\n    arr = list(map(lambda x, y: x + y, arr[0:: 2], arr[1:: 2])\r\n               if sign else map(lambda x, y: x * y, arr[0:: 2], arr[1:: 2]))\r\n    return arr[0]\r\n",
  "588856a82ffea640c80000cc": "def array_previous_less(arr):\r\n    return [next((y for y in arr[: i][:: - 1] if y < x), - 1) for i, x in enumerate(arr)]\r\n",
  "5888445107a0d57711000032": "def new_numeral_system(number):\r\n    outputs = {\r\n        'A': ['A + A'],\r\n        'B': ['A + B'],\r\n        'C': ['A + C', 'B + B'],\r\n        'D': ['A + D', 'B + C'],\r\n        'E': ['A + E', 'B + D', 'C + C'],\r\n        'F': ['A + F', 'B + E', 'C + D'],\r\n        'G': ['A + G', 'B + F', 'C + E', 'D + D'],\r\n        'H': ['A + H', 'B + G', 'C + F', 'D + E'],\r\n        'I': ['A + I', 'B + H', 'C + G', 'D + F', 'E + E'],\r\n        'J': ['A + J', 'B + I', 'C + H', 'D + G', 'E + F'],\r\n        'K': ['A + K', 'B + J', 'C + I', 'D + H', 'E + G', 'F + F'],\r\n        'L': ['A + L', 'B + K', 'C + J', 'D + I', 'E + H', 'F + G'],\r\n        'M': ['A + M', 'B + L', 'C + K', 'D + J', 'E + I', 'F + H', 'G + G'],\r\n        'N': ['A + N', 'B + M', 'C + L', 'D + K', 'E + J', 'F + I', 'G + H'],\r\n        'O': ['A + O', 'B + N', 'C + M', 'D + L', 'E + K', 'F + J', 'G + I', 'H + H'],\r\n        'P': ['A + P', 'B + O', 'C + N', 'D + M', 'E + L', 'F + K', 'G + J', 'H + I'],\r\n        'Q': ['A + Q', 'B + P', 'C + O', 'D + N', 'E + M', 'F + L', 'G + K', 'H + J', 'I + I'],\r\n        'R': ['A + R', 'B + Q', 'C + P', 'D + O', 'E + N', 'F + M', 'G + L', 'H + K', 'I + J'],\r\n        'S': ['A + S', 'B + R', 'C + Q', 'D + P', 'E + O', 'F + N', 'G + M', 'H + L', 'I + K', 'J + J'],\r\n        'T': ['A + T', 'B + S', 'C + R', 'D + Q', 'E + P', 'F + O', 'G + N', 'H + M', 'I + L', 'J + K'],\r\n        'U': ['A + U', 'B + T', 'C + S', 'D + R', 'E + Q', 'F + P', 'G + O', 'H + N', 'I + M', 'J + L', 'K + K'],\r\n        'V': ['A + V', 'B + U', 'C + T', 'D + S', 'E + R', 'F + Q', 'G + P', 'H + O', 'I + N', 'J + M', 'K + L'],\r\n        'W': ['A + W', 'B + V', 'C + U', 'D + T', 'E + S', 'F + R', 'G + Q', 'H + P', 'I + O', 'J + N', 'K + M', 'L + L'],\r\n        'X': ['A + X', 'B + W', 'C + V', 'D + U', 'E + T', 'F + S', 'G + R', 'H + Q', 'I + P', 'J + O', 'K + N', 'L + M'],\r\n        'Y': ['A + Y', 'B + X', 'C + W', 'D + V', 'E + U', 'F + T', 'G + S', 'H + R', 'I + Q', 'J + P', 'K + O', 'L + N', 'M + M'],\r\n        'Z': ['A + Z', 'B + Y', 'C + X', 'D + W', 'E + V', 'F + U', 'G + T', 'H + S', 'I + R', 'J + Q', 'K + P', 'L + O', 'M + N']\r\n    }\r\n\r\n    return outputs[number]  # \u0443 \u043c\u0435\u043d\u044f \u043d\u0435\u0440\u0432\u044b \u043d\u0435 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435\r\n",
  "5893e0c41a88085c330000a0": "def shape_area(n):\r\n    return n * * 2 + (n - 1) * * 2\r\n",
  "58a6742c14b042a042000038": "def S2N(m, n):\r\n    return sum(i * * j for i in range(m + 1) for j in range(n + 1))\r\n",
  "58b8db810f40ea7788000126": "from fractions import gcd\n\n\ndef fraction(a, b):\n    return (a + b) / / gcd(a, b)\n",
  "5884658d02accbd0a7000039": "def line_up(commands):\r\n    same = True\r\n    count = 0\r\n    for c in commands:\r\n    if c in \"LR\":\r\n    same = not same\r\n    if same:\r\n    count += 1\r\n    return count\r\n",
  "58842a2b4e8efb92b7000080": "def knapsack_light(v1, w1, v2, w2, W):\r\n    return max(v for v, w in [(0, 0), (v1, w1), (v2, w2), (v1 + v2, w1 + w2)] if w <= W)\r\n",
  "58844f1a76933b1cd0000023": "def kill_kth_bit(n, k):\r\n    return n & ~ (1 << k - 1)\r\n",
  "588431bb76933b84520000d3": "def is_infinite_process(a, b):\r\n    return b < a or (b - a) % 2\r\n",
  "588425ee4e8efb583d000088": "def phone_call(min1, min2_10, min11, s):\n    minutes, cost = 0, min1\n    while s >= cost:\n    minutes += 1\n    s -= cost\n    if minutes == 1:\n        cost = min2_10\n    if minutes == 10:\n        cost = min11\n    return minutes\n",
  "57af26297f75b57d1f000225": "def truncate_string(s, n):\r\n    return s if len(s) <= n else s[: n if n <= 3 else n - 3] + '...'\r\n",
  "544047f0cf362503e000036e": "def find_ball(scales):\r\n    for i in range(0, 8, 2):\r\n    result = scales . get_weight([i], [i + 1])\r\n\r\n    if result:\r\n    return i + (result > 0)\r\n",
  "5515395b9cd40b2c3e00116c": "import numpy as np\n\n\ndef regressionLine(x, y):\n    \"\"\" Return the a (intercept) \n and b (slope) of Regression Line \n (Y on X). \n \"\"\"\n    a, b = np . polyfit(x, y, 1)\n    return round(b, 4), round(a, 4)\n",
  "55c3026406402936bc000026": "import re\r\n\r\n\r\ndef insert_dash2(num):\r\n    s = str(num)\r\n    s = re . sub('(?<=[13579])(?=[13579])', '-', s)\r\n    s = re . sub('(?<=[2468])(?=[2468])', '*', s)\r\n    return s\r\n",
  "576a527ea25aae70b7000c77": "def ball_probability(balls):\r\n    colors, (first, second), replaced = balls\r\n    first_choice = colors . count(first) / len(colors)\r\n    second_choice = colors . count(second) / len(colors) if replaced else (\r\n        colors . count(second) - 1 * (first == second)) / (len(colors) - 1)\r\n    return round(first_choice * second_choice, 3)\r\n",
  "57102bbfd860a3369300089c": "from numpy import mean, std\r\n\r\n\r\ndef sensor_analysis(sensor_data):\r\n    data = [data[1] for data in sensor_data]\r\n    return (round(mean(data), 4), round(std(data, ddof=1), 4))\r\n",
  "575eac1f484486d4600000b2": "def mutually_exclusive(dice, call1, call2):\r\n    dice = dict(dice)\r\n    if abs(sum(dice . values()) - 1) < 1e-12:\r\n    return '%0.2f' % (dice[call1] + dice[call2])\r\n",
  "5708ccb0fe2d01677c000565": "def stats_disc_distr(distrib):\r\n    err = check_errors(distrib)\r\n    if not err:\r\n    mean = sum(x[0] * x[1] for x in distrib)\r\n    var = sum((x[0] - mean) * * 2 * x[1] for x in distrib)\r\n    std_dev = var * * 0.5\r\n    return [mean, var, std_dev] if not err else err\r\n    def check_errors(distrib):\r\n    errors = 0\r\n    if not isclose(sum(x[1] for x in distrib), 1):\r\n    errors += 1\r\n    if not all(isinstance(x[0], int) for x in distrib):\r\n    errors += 2\r\n    if errors > 0:\r\n    return {1: \"It's not a valid distribution\", 2: \"All the variable values should be integers\",\r\n            3: \"It's not a valid distribution and furthermore, one or more variable value are not integers\"}[errors]\r\n\r\n    def isclose(a, b, rel_tol=1e-09, abs_tol=0.0):\r\n    return abs(a - b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol)\r\n",
  "584acbee7d22f84dc80000e2": "def get_mixed_num(fraction):\r\n    n, d = [int(i) for i in fraction . split('/')]\r\n    return '{} {}/{}' . format(n / / d, n % d, d)\r\n",
  "5572392fee5b0180480001ae": "def computer_to_phone(numbers):\r\n    return numbers . translate(str . maketrans('123789', '789123'))\r\n",
  "5805f0663f1f9c49be00011f": "_RESULTS = {\r\n    'goodpresent': lambda y: '' . join(chr(ord(c) + y) for c in 'goodpresent'),\r\n    'crap': lambda y: 'acpr',\r\n    'empty': lambda y: 'empty',\r\n    'bang': lambda y: str(sum(ord(c) - y for c in 'bang')),\r\n    'badpresent': lambda y: 'Take this back!',\r\n    'dog': lambda y: 'pass out from excitement {} times' . format(y)\r\n}\r\n\r\n\r\ndef present(x, y): return _RESULTS[x](y)\r\n",
  "588e68aed4cff457d300002e": "def turn(frm, to):\r\n    return \"right\" if f\" { frm }{ to } \" in \"NESWN\" else \"left\"\r\n",
  "53f211b159c3fcec3d000efa": "def left(string, i=1):\r\n    i = string . index(i) if type(i) == str else i\r\n    return string[: i]\r\n\r\n    def right(string, i=1):\r\n    i = string[:: - 1]. index(i[:: - 1]) if type(i) == str else i\r\n    return string[- i:] if i != 0 else \"\"\r\n",
  "57e1857d333d8e0f76002169": "def change_count(change):\r\n    return \"$%.2f\" % sum(CHANGE[coin] for coin in change . split())\r\n",
  "55e7d9d63bdc3caa2500007d": "from functools import reduce\nfrom math import gcd\n\n\ndef smallest(n):\n    return reduce(lambda a, b: a * b / / gcd(a, b), range(1, n + 1))\n",
  "563d54a7329a7af8f4000059": "def build_row_text(index, character):\r\n    a = list('|||||||||')\r\n    a[index] = \"|\" + character + \"|\"\r\n    return \" \" . join(a)\r\n",
  "57d06663eca260fe630001cc": "def olympic_ring(string):\r\n    rings = string . translate(str . maketrans(\r\n        'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',\r\n        '1201000000000011110000000011011010000000111000000000'))\r\n    score = sum(map(int, rings)) / / 2\r\n    return ['Not even a medal!', 'Bronze!', 'Silver!', 'Gold!'][(score > 1) + (score > 2) + (score > 3)]\r\n",
  "580ed88494291dd28c000019": "def order(arr): return {card[0]: i for i, card in enumerate(arr)}\r\n\r\n\r\nranks = order(\"2 3 4 5 6 7 8 9 10 J Q K A\" . split())\r\nsuit_table = {ord(suit): ' ' + suit for suit in 'SDHC'}\r\n\r\n\r\ndef split_hand(hand): return hand . translate(suit_table). split()\r\n\r\n\r\ndef sort_poker(john, uncle):\r\n    suits = order(split_hand(uncle))\r\n    return '' . join(sorted(split_hand(john),\r\n                            key=lambda card: (suits[card[0]], ranks[card[1]])))\r\n",
  "528d9adf0e03778b9e00067e": "def mineLocation(field):\r\n    for subfield in field:\r\n    if 1 in subfield:\r\n        return [field . index(subfield), subfield . index(1)]\r\n",
  "58b8cc7e8e7121740700002d": "def rank_of_element(arr, i):\r\n    return sum(x <= arr[i] if n < i else x < arr[i] for n, x in enumerate(arr))\r\n",
  "589a8d9b729e7abd9a0000ed": "def rectangles(n, m):\r\n    return m * n * (m - 1) * (n - 1) / 4\r\n",
  "58989a079c70093f3e00008d": "from itertools import product\n\n\ndef cartesian_neighbor(x, y):\n    return [z for z in product(range(x - 1, x + 2), range(y - 1, y + 2)) if z != (x, y)]\n",
  "588422ba4e8efb583d00007d": "def late_ride(n):\r\n    return sum([int(x) for x in (str(n % 60) + str(int(n / 60)))])\r\n",
  "558aa460dcfb4a94c40001d7": "mpg2lp100km = lp100km2mpg = lambda x: round(235.214583 / x, 2)\n",
  "57729a09914da60e17000329": "def get_military_time(time):\r\n    if time[- 2:] == 'AM':\r\n    hour = '00' if time[0: 2] == '12' else time[0: 2]\r\n    else:\r\n    hour = '12' if time[0: 2] == '12' else str(int(time[0: 2]) + 12)\r\n    return hour + time[2: - 2]\r\n",
  "57f12b4d5f2f22651c00256d": "def array_info(x):\r\n    if not x:\r\n    return 'Nothing in the array!'\r\n    return [\r\n        [len(x)],\r\n        [sum(isinstance(i, int) for i in x) or None],\r\n        [sum(isinstance(i, float) for i in x) or None],\r\n        [sum(isinstance(i, str) and not i . isspace() for i in x) or None],\r\n        [sum(isinstance(i, str) and i . isspace() for i in x) or None],\r\n    ]\r\n",
  "58899594b832f80348000122": "def cyclic_string(s):\r\n    return next((i for i, _ in enumerate(s[1:], 1) if s . startswith(s[i:])), len(s))\r\n",
  "5868b2de442e3fb2bb000119": "def closest(s):\r\n    wght = sorted([[sum(int(c) for c in n), i, int(n)]\r\n                  for i, n in enumerate(s . split())], key=lambda k: (k[0], k[1]))\r\n    diff = [abs(a[0] - b[0]) for a, b in zip(wght, wght[1:])]\r\n    return [wght[diff . index(min(diff))], wght[diff . index(min(diff)) + 1]] if wght else []\r\n",
  "58ce88427e6c3f41c2000087": "def drive(drinks, finished, drive_time):\r\n    f, d = (list(map(int, x . split(':'))) for x in [finished, drive_time])\r\n    delta = d[0] - f[0] + (d[1] - f[1]) / 60 + (24 * (f >= d))\r\n    units = sum(strength * volume for strength, volume in drinks) / 1000\r\n    return [round(units, 2), delta > units]\r\n",
  "5716955a794d3013d00013f9": "def the_var(vars):\r\n    return sum(ord(c) - 96 for c in vars . split(\"+\"))\r\n",
  "58c21c4ff130b7cab400009e": "def guess_hat_color(a, b, c, d):\r\n    return 1 if b == c else 2\r\n",
  "56347fcfd086de8f11000014": "from math import floor, exp\n\n\ndef ex_euler(n):\n    # fct to study\n    def F(t, y): return 2 - exp(- 4 * t) - 2 * y\n    # initial conditions\n    t0 = 0\n    y0 = 1  # pt A0\n    T = 1\n    # variables\n    h = T / float(n)\n    X = [t0]\n    Y = [y0]\n    Z = []\n    R = []\n    # points A1 ... An\n    for k in range(0, n):\n    X . append((k + 1) * h)\n    Y . append(Y[k] + h * F(X[k], Y[k]))\n    # pts on the exact curve\n    for k in range(0, n + 1):\n        # exact solution\n    Z . append(1 + 0.5 * exp(- 4 * X[k]) - 0.5 * exp(- 2 * X[k]))\n    # relative error\n    R . append(abs(Y[k] - Z[k]) / float(Z[k]))\n    return floor((sum(R) / float(n + 1)) * 1e6) / 1e6\n",
  "5772ded6914da62b4b0000f8": "def palindrome_pairs(words):\r\n    indices = []\r\n\r\n    for i in range(len(words)):\r\n    for j in range(len(words)):\r\n    if i != j:\r\n    concatenation = str(words[i]) + str(words[j])\r\n    if concatenation == concatenation[:: - 1]:\r\n    indices . append([i, j])\r\n\r\n    return indices\r\n",
  "567de72e8b3621b3c300000b": "def is_letter(s):\r\n    return len(s) == 1 and s . isalpha()\r\n",
  "578597a122542a7d24000018": "def isHappy(n, pow):\r\n    nums = []\r\n    while True:\r\n    nums . append(n)\r\n    n = sum([d * * pow for d in map(int, str(n))])\r\n    if n == 1:\r\n    return [1]\r\n    if n in nums:\r\n    return nums[nums . index(n):] + [n]\r\n",
  "57470efebf81fea166001627": "def letter_check(arr):\r\n    return set(arr[1]. lower()) <= set(arr[0]. lower())\r\n",
  "544e2c60908f2da03600022a": "def degrees(rad):\r\n    return '%gdeg' % round(180 * rad / math . pi, 2)\r\n\r\n    def radians(deg):\r\n    return '%grad' % round(math . pi * deg / 180, 2)\r\n\r\n    math . degrees = degrees\r\n    math . radians = radians\r\n",
  "55ea5304685da2fb40000018": "import re\n\n\ndef heggeleggleggo(word):\n    return re . sub(r'(?i)([^aeiou\\W])', r'\\1egg', word)\n",
  "56fe9a0c11086cd842000008": "def sc(strng):\r\n    seen = set(strng)\r\n    return '' . join(a for a in strng if a . swapcase() in seen)\r\n",
  "57f59da8d3978bb31f000152": "def make_me_slow():\r\n    import time\r\n    time . sleep(7)\r\n",
  "581ee0db1bbdd04e010002fd": "from math import floor\n\n\ndef interp(f, l, u, n):\n    d = (u - l) / n\n    return [floor(f(l + d * i) * 100.) / 100. for i in range(n)]\n",
  "55807d36933247feff00002f": "def count_clean(b, p, dishes):\r\n    dirty = max(len(dishes) - b - p, dishes . count(1) - b)\r\n    return 0 if dirty < 0 else dirty\r\n",
  "565ce4ab24ef4aee6a000074": "def clean(s): return sorted(s . replace(' ', ''). lower())\r\n\r\n\r\ndef is_matching(st, st1, st2):\r\n    return clean(st) == clean(st1 + st2)\r\n",
  "57e17750621bca9e6f00006f": "colors = {\r\n    (1, 0, 0): 'red',\r\n    (0, 1, 0): 'green',\r\n    (0, 0, 1): 'blue',\r\n    (1, 0, 1): 'magenta',\r\n    (1, 1, 0): 'yellow',\r\n    (0, 1, 1): 'cyan',\r\n    (1, 1, 1): 'white',\r\n}\r\n\r\n\r\ndef hex_color(codes):\r\n    codes = codes or '0 0 0'\r\n    items = [int(c) for c in codes . split()]\r\n    m = max(items)\r\n    return colors[tuple(i == m for i in items)] if m else 'black'\r\n",
  "5797bbb34be9127074000132": "from functools import reduce\nfrom itertools import repeat\n\n\ndef tetration(x, y):\n    return reduce(int . __rpow__, repeat(x, y), 1)\n",
  "57add740e298a7a6d500000d": "a = (\"Index finger\", \"Thumb\", \"Index finger\", \"Middle finger\",\r\n     \"Ring finger\", \"Little finger\", \"Ring finger\", \"Middle finger\")\r\n\r\n\r\ndef which_finger(n):\r\n    return a[n % 8]\r\n",
  "569218bc919ccba77000000b": "from math import log, ceil\nfrom datetime import date, timedelta as td\n\n\ndef date_nb_days(a0, a, p):\n    n = log(a, 1 + p / 36000.0) - log(a0, 1 + p / 36000.0)\n    return str(date(2016, 1, 1) + td(ceil(n)))\n",
  "5889a6b653ad4a22710000d0": "def reverse_on_diagonals(matrix):\r\n    copy = [line[:] for line in matrix]\r\n    for i in range(len(matrix)):\r\n    copy[i][i] = matrix[- 1 - i][- 1 - i]\r\n    copy[i][- 1 - i] = matrix[- 1 - i][i]\r\n\r\n    return copy\r\n",
  "5889ae4f7af7f99a9a000019": "def draw_rectangle(canvas, rectangle):\r\n    x0, y0, x1, y1 = rectangle\r\n    for x in range(x0, x1):\r\n    canvas[y0][x] = canvas[y1][x] = '-'\r\n    for y in range(y0, y1):\r\n    canvas[y][x0] = canvas[y][x1] = '|'\r\n    canvas[y0][x0] = canvas[y0][x1] = \\\r\n        canvas[y1][x0] = canvas[y1][x1] = '*'\r\n    return canvas\r\n",
  "57057a035eef1f7e790009ef": "import re\n\n\ndef one_punch(s): return re . sub(\"[eaEA]\", \"\", \" \" . join(\n    sorted(s . split()))) if isinstance(s, str) and s else \"Broken!\"\n",
  "5630d1747935943168000013": "def score_to_tally(s):\r\n    return 'e <br>' * (s / / 5) + 'abcd' [s % 5 - 1: s % 5]\r\n",
  "570e5d0b93214b1a950015b1": "def sc(n):\r\n    s = f\" { n : b } \"\r\n    return sorted(y for x in range(1, int(n * * .5) + 1) for y in (x, n / / x) if n % x == 0 and f\" { y : b } \" in s)\r\n",
  "5624e574ec6034c3a20000e6": "def hamming_distance(a, b):\r\n    return sum(c != d for c, d in zip(a, b))\r\n",
  "5410c0e6a0e736cf5b000e69": "def hamming(a, b):\r\n    return sum(ch1 != ch2 for ch1, ch2 in zip(a, b))\r\n",
  "58a6af7e8c08b1e9c40001c1": "def hamming_distance(a, b):\r\n    return bin(a ^ b). count('1')\r\n",
  "581963edc929ba19e7000148": "def furthest_distance(arr, k):\r\n    # Sort the array and keep track of original indexes\r\n    srt, idx = zip(* sorted((n, i) for i, n in enumerate(arr)))\r\n\r\n    # For each index l, find the minimum index r such as arr[r] - arr[l] >= k\r\n    # Extrema are computed on the run\r\n    # As the data are sorted, r does at most 2 passes\r\n    max_dist, length, lmin, lmax = - 1, len(idx), idx[0], idx[0]\r\n    r, r_min, r_max = length - 1, [idx[- 1]] * length, [idx[- 1]] * length\r\n    for l, n in enumerate(srt):\r\n    lmin, lmax = min(lmin, idx[l]), max(lmax, idx[l])\r\n\r\n    while l < r and srt[r - 1] >= n + k:\r\n    r -= 1\r\n    r_min[r], r_max[r] = min(r_min[r + 1], idx[r]), max(r_max[r + 1], idx[r])\r\n    while r < length and srt[r] < n + k:\r\n        r += 1\r\n    if r == length or l >= r:\r\n        break\r\n    max_dist = max(max_dist, lmax - r_min[r], r_max[r] - lmin)\r\n\r\n    return max_dist\r\n",
  "568ff914fc7a40a18500005c": "from numpy import mean\r\n\r\n\r\ndef distances_from_average(test_list):\r\n    avg = mean(test_list)\r\n    return [round(avg - x, 2) for x in test_list]\r\n",
  "5893f43b779ce54da4000124": "from functools import reduce\n\n\ndef array_change(arr): return reduce(lambda a, u: (\n    max(a[0] + 1, u), a[1] + max(0, a[0] - u + 1)), arr, (- 10001, 0))[1]\n",
  "5893fa478a8a23ef82000031": "def palindrome_rearranging(s):\r\n    return sum(s . count(c) % 2 for c in set(s)) < 2\r\n",
  "589433358420bf25950000b6": "def chess_knight(cell):\r\n    x, y = (ord(c) - ord(origin) for c, origin in zip(cell, 'a1'))\r\n    return sum(0 <= x + dx < 8 and 0 <= y + dy < 8 for dx, dy in (\r\n        (- 2, - 1), (- 2, 1), (- 1, - 2), (- 1, 2), (1, - 2), (1, 2), (2, - 1), (2, 1)))\r\n",
  "58956f5ff780edf4a70000a2": "def is_information_consistent(evidences):\r\n    return all(max(l) - min(l) <= 1 for l in zip(* evidences))\r\n",
  "589a9792ea93aae1bf00001c": "def is_thue_morse(seq):\r\n    init_seq = [0]\r\n    while len(init_seq) < len(seq):\r\n    init_seq += [1 if n == 0 else 0 for n in init_seq]\r\n    return init_seq[: len(seq)] == seq\r\n",
  "58aa9662c55ffbdceb000101": "def next_day_of_week(current_day, available_week_days):\r\n    x = 2 * * current_day\r\n    while not x & available_week_days:\r\n    x = max(1, (x * 2) % 2 * * 7)\r\n    return x . bit_length()\r\n",
  "589d237fdfdef0239a00002e": "def abacaba(k):\n    n = 26\n    if k % 2:\n        return 'a'\n    while k % pow(2, n) != 0:\n        n -= 1\n    return chr(97 + n)\n",
  "58a3c1f12f949e21b300005c": "def lamps(a):\r\n    n = sum(1 for i, x in enumerate(a) if x != i % 2)\r\n    return min(n, len(a) - n)\r\n",
  "58aa8698ae929e1c830001c7": "def find_the_missing_tree(trees):\r\n    return sorted(trees, key=trees . count)[0]\r\n",
  "58bccdf56f25ff6b6d00002f": "def rounding(n, m):\r\n    return n if n % m == m / 2 else m * round(n / m)\r\n",
  "58bcdc65f6d3b11fce000045": "from numpy import lcm\nfrom functools import reduce\n\n\ndef mn_lcm(* args):\n    a, b = sorted(args)\n    return reduce(lcm, range(a, b + 1))\n",
  "58bf97cde4a5edfd4f00008d": "def plant_doubling(n):\r\n    return bin(n). count(\"1\")\r\n",
  "58841cb52a077503c4000015": "def circle_of_numbers(n, fst):\r\n    return (fst + (n / 2)) % n\r\n",
  "57b68bc7b69bfc8209000307": "def average(array):\r\n    return round(sum(array) / len(array))\r\n",
  "58409435258e102ae900030f": "def parity_bit(binary):\r\n    return ' ' . join(byte[: - 1] if byte . count('1') % 2 == 0 else 'error' for byte in binary . split())\r\n",
  "5389864ec72ce03383000484": "def autocomplete(input_, dictionary):\r\n    input_ = '' . join([c for c in list(input_) if c . isalpha()])\r\n    return [x for x in dictionary if x . lower(). startswith(input_ . lower())][: 5]\r\n",
  "54ca3e777120b56cb6000710": "def chained(functions):\r\n    def f(x):\r\n    for function in functions:\r\n    x = function(x)\r\n    return x\r\n    return f\r\n",
  "586538146b56991861000293": "def to_nato(words):\r\n    return ' ' . join(NATO . get(char, char) for char in words . upper() if char != ' ')\r\n",
  "57c6c2e1f8392d982a0000f2": "def histogram(rolls):\r\n    hist = \"-----------\\n1 2 3 4 5 6\\n\"\r\n    for i in range(max(rolls) + 1):\r\n    hist = '' . join(['# ' if i < v else '{:<2d}' . format(\r\n        i) if i == v and v != 0 else ' ' for v in rolls]). rstrip() + '\\n' + hist\r\n    return hist\r\n",
  "58360d112fb0ba255300008b": "def my_crib(n):\r\n    wide = 4 + 3 + 6 * (n - 1)\r\n    door = 2 + n - 1\r\n    roof = 3 + 2 * (n - 1)\r\n    r = '{0}{1}{0}\\n' . format(' ' * (wide / / 2 - n), '_' * (3 + 2 * (n - 1)))\r\n    for i in range(1, roof):\r\n    r += '{0}/{1}\\\\{0}\\n' . format(' ' * (wide / / 2 - n - i), '_' * (3 + 2 * (n - 1) + 2 * (i - 1)))\r\n    for i in range(roof - 1 - door):\r\n    r += '|{}|\\n' . format(' ' * (wide - 2))\r\n    r += '|{0}{1}{0}|\\n' . format(' ' * ((wide - 1) / / 3), '_' * (1 + 2 * (n - 1)))\r\n    for i in range(1, door - 1):\r\n    r += '|{0}|{0}|{0}|\\n' . format(' ' * ((wide - 2) / / 3))\r\n    return r + '|{0}|{0}|{0}|' . format('_' * ((wide - 2) / / 3))\r\n",
  "5834a44e44ff289b5a000075": "def my_crib(n):\r\n    roof = \"\\n\" . join(\"%s/%s\\\\%s\" % (\" \" * (n - i), \" \" *\r\n                       i * 2, \" \" * (n - i)) for i in range(n))\r\n    ceiling = \"\\n/%s\\\\\\n\" % (\"_\" * (n * 2))\r\n    walls = (\"|%s|\\n\" % (\" \" * (n * 2))) * (n - 1)\r\n    floor = \"|%s|\" % (\"_\" * (n * 2))\r\n\r\n    return roof + ceiling + walls + floor\r\n",
  "5620281f0eeee479cd000020": "from math import ceil\r\nX = 'X'  # X' for the red/white lines\r\nB = '-'  # '-' for the blue background\r\n\r\n\r\ndef union_jack(n):\r\n    try:\r\n    n = max(7, ceil(n))\r\n    except TypeError:\r\n    return False\r\n    half, odd = divmod(n - 1, 2)\r\n    result = []\r\n    for i in range(half):\r\n    half_row = B * i + X + B * (half - i - 1)\r\n    result . append((X * (odd + 1)). join([half_row, half_row[:: - 1]]))\r\n    return '\\n' . join(result + [X * n] * (odd + 1) + result[:: - 1])\r\n",
  "558db3ca718883bd17000031": "def pattern(n: int, x: int = 1, y: int = 1, * _) - > str:\r\n    lines = []\r\n    for i in range(1, n + 1):\r\n    line = ' ' * (i - 1) + str(i % 10) + ' ' * (n - i)\r\n    line += line[- 2:: - 1]\r\n    lines . append(line + line[1:] * (x - 1))\r\n\r\n    cross = lines + lines[- 2:: - 1]\r\n\r\n    return '\\n' . join(cross + (cross[1:] * (y - 1)))\r\n",
  "5592e5d3ede9542ff0000057": "def pattern(n: int, x: int = 1, * _) - > str:\r\n    lines = []\r\n    for i in range(1, n + 1):\r\n    line = ' ' * (i - 1) + str(i % 10) + ' ' * (n - i)\r\n    line += line[- 2:: - 1]\r\n    lines . append(line + line[1:] * (x - 1))\r\n\r\n    return '\\n' . join(lines + lines[- 2:: - 1])\r\n",
  "559379505c859be5a9000034": "def pattern(n: int, x: int = 1, * _) - > str:\r\n    lines = []\r\n    for i in range(1, n + 1):\r\n    line = ' ' * (i - 1) + str(i % 10) + ' ' * (n - i)\r\n    lines . append(line + line[- 2:: - 1])\r\n\r\n    cross = lines + lines[- 2:: - 1]\r\n\r\n    return '\\n' . join(cross + (cross[1:] * (x - 1)))\r\n",
  "558ac25e552b51dbc60000c3": "def pattern(n):\r\n    res = []\r\n    for i in range(1, n + 1):\r\n    line = ' ' * (i - 1) + str(i % 10) + ' ' * (n - i)\r\n    res . append(line + line[:: - 1][1:])\r\n    return '\\n' . join(res + res[:: - 1][1:])\r\n",
  "5839c48f0cf94640a20001d3": "def land_perimeter(arr):\r\n\r\n    I, J = len(arr), len(arr[0])\r\n\r\n    P = 0\r\n    for i in range(I):\r\n    for j in range(J):\r\n    if arr[i][j] == 'X':\r\n    if i == 0 or arr[i - 1][j] == 'O':\r\n        P += 1\r\n    if i == I - 1 or arr[i + 1][j] == 'O':\r\n        P += 1\r\n    if j == 0 or arr[i][j - 1] == 'O':\r\n        P += 1\r\n    if j == J - 1 or arr[i][j + 1] == 'O':\r\n        P += 1\r\n    return 'Total land perimeter: ' + str(P)\r\n",
  "5575ff8c4d9c98bc96000042": "def pattern(n):\r\n    output = []\r\n    for i in range(1, n + 1):\r\n    wing = ' ' * (n - i) + '' . join(str(d % 10) for d in range(1, i))\r\n    output . append(wing + str(i % 10) + wing[:: - 1])\r\n    return '\\n' . join(output)\r\n",
  "5650f1a6075b3284120000c0": "def checkered_board(n):\r\n    return isinstance(n, int) and n > 1 and \\\r\n        '\\n' . join(' ' . join(\"\u25a0\" if (x + y) % 2 ^ n %\r\n                    2 else \"\u25a1\" for y in range(n)) for x in range(n))\r\n",
  "5714eb80e1bf814e53000c06": "from functools import reduce\nfrom operator import xor\n\n\ndef fisHex(name):\n    return reduce(xor, (int(x, 16) for x in name . lower() if 'a' <= x <= 'f'), 0)\n",
  "55ae997d1c40a199e6000018": "def pattern(n):\r\n    return \"\\n\" . join(\r\n        \"\" . join(\r\n            str((n - min(j, i)) % 10) for j in range(n)\r\n        )\r\n        for i in range(max(n, 0))\r\n    )\r\n",
  "5589ad588ee1db3f5e00005a": "def pattern(n):\r\n    h = '' . join(str(i % 10) for i in range(1, n))\r\n    h = h + str(n % 10) * n + h[:: - 1]\r\n    v = [(str(i % 10) * n). center(len(h)) for i in range(1, n)]\r\n    return '\\n' . join(v + [h] * n + v[:: - 1])\r\n",
  "5579e6a5256bac65e4000060": "def pattern(n):\r\n    lines = []\r\n    for c in range(1, n + 1):\r\n    s = (' ' * (n - c)) + '' . join([str(s)[- 1] for s in range(1, c + 1)])\r\n    lines += [s + s[:: - 1][1:]]\r\n    lines += lines[:: - 1][1:]\r\n    return '\\n' . join(str(x) for x in lines)\r\n",
  "5340298112fa30e786000688": "def twos_difference(a):\r\n    s = set(a)\r\n    return sorted((x, x + 2) for x in a if x + 2 in s)\r\n",
  "55191f78cd82ff246f000784": "def winner(candidates):\r\n    try:\r\n    assert len(candidates) == 3\r\n    max_total = 0\r\n    for c in candidates:\r\n    name, scores = c['name'], c['scores']\r\n    assert 1 <= len(scores) <= 2\r\n    assert all(not s % 5 and 0 < s <= 100 for s in scores)\r\n    total = sum(scores)\r\n    if max_total < total <= 100:\r\n    selected, max_total = name, total\r\n    return selected\r\n    except:\r\n    return False\r\n",
  "563cb92e0996a4ac0b000042": "def pattern(n):\r\n    s1 = '\\n' . join(' ' * (n - 1) + str(i % 10) for i in range(1, n))\r\n    s2 = '' . join(str(i % 10) for i in range(1, n))\r\n    s2 = s2 + str(n % 10) + s2[:: - 1]\r\n    s3 = '\\n' . join(' ' * (n - 1) + str(i % 10) for i in range(n - 1, 0, - 1))\r\n    return s1 + '\\n' + s2 + '\\n' + s3 + '\\n'\r\n",
  "56582133c932d8239900002e": "def most_frequent_item_count(collection):\r\n    if collection:\r\n    return max([collection . count(item) for item in collection])\r\n    return 0\r\n",
  "5581a7651185fe13190000ee": "def pattern(n):\r\n    nums = '1234567890'\r\n    str_nums = nums * (n / / 10) + nums[: n % 10]\r\n    return '\\n' . join(' ' * (n - i - 1) + str_nums + ' ' * i for i in range(n))\r\n",
  "5574940eae1cf7d520000076": "def pattern(n):\r\n    return '\\n' . join(str(i) * i for i in range(1, n + 1, 2))\r\n",
  "5507309481b8bd3b7e001638": "import math\r\n\r\n\r\ndef number_property(n):\r\n    return [isPrime(n), isEven(n), isMultipleOf10(n)]\r\n    # Return isPrime? isEven? isMultipleOf10?\r\n    # your code here\r\n    def isPrime(n):\r\n    if n <= 3:\r\n    return n >= 2\r\n    if n % 2 == 0 or n % 3 == 0:\r\n    return False\r\n    for i in range(5, int(n * * 0.5) + 1, 6):\r\n    if n % i == 0 or n % (i + 2) == 0:\r\n    return False\r\n    return True\r\n    def isEven(n):\r\n    return n % 2 == 0\r\n    def isMultipleOf10(n):\r\n    return n % 10 == 0\r\n",
  "557592fcdfc2220bed000042": "def pattern(n):\r\n    return '\\n' . join('' . join(str((x + y) % n + 1) for y in range(n)) for x in range(n))\r\n",
  "55749101ae1cf7673800003e": "def pattern(n):\r\n    return \"\\n\" . join(str(i) * i for i in range(2, n + 1, 2))\r\n",
  "55a5085c1a3d379fbb000062": "from math import floor\n# Pretty sure this is the fastest implementation; only one square root, and sqrt(n) multiplications.\n# Plus, no booleans, because they're super slow.\ndef locker_run(l): return [i * i for i in range(1, int(floor(l * * .5)) + 1)]\n",
  "52a723508a4d96c6c90005ba": "def sing():\r\n    lst = []\r\n    for i in range(97):\r\n    lst . append(\r\n        f' { 99 - i } bottles of beer on the wall, { 99 - i } bottles of beer.')\r\n    lst . append(\r\n        f'Take one down and pass it around, { 98 - i } bottles of beer on the wall.')\r\n    return lst + ['2 bottles of beer on the wall, 2 bottles of beer.', 'Take one down and pass it around, 1 bottle of beer on the wall.', '1 bottle of beer on the wall, 1 bottle of beer.', 'Take one down and pass it around, no more bottles of beer on the wall.', 'No more bottles of beer on the wall, no more bottles of beer.', 'Go to the store and buy some more, 99 bottles of beer on the wall.']\r\n",
  "5783d8f3202c0e486c001d23": "def to_float_array(arr):\r\n    return list(map(float, arr))\r\n",
  "5861487fdb20cff3ab000030": "from collections import defaultdict\r\n\r\n\r\ndef boolfuck(code, input=\"\"):\r\n    input = [int(c) for c in '' . join(\r\n        [bin(ord(c))[2:]. rjust(8, '0') for c in input][:: - 1])]\r\n    cp, p, out, bits, starts, brackets = 0, 0, [], defaultdict(int), [], {}\r\n\r\n    for i, c in enumerate(code):\r\n    if c == '[':\r\n        starts . append(i)\r\n    elif c is ']':\r\n    brackets[i] = starts . pop()\r\n    brackets[brackets[i]] = i\r\n    while cp < len(code):\r\n    if code[cp] == '[' and not bits[p]:\r\n        cp = brackets[cp]\r\n    elif code[cp] == ']':\r\n        cp = brackets[cp] - 1\r\n    elif code[cp] == '>':\r\n        p += 1\r\n    elif code[cp] == '<':\r\n        p -= 1\r\n    elif code[cp] == '+':\r\n        bits[p] = (0 if bits[p] else 1)\r\n    elif code[cp] == ',':\r\n        bits[p] = (input . pop() if input else 0)\r\n    elif code[cp] == ';':\r\n        out . append(bits[p])\r\n    cp += 1\r\n    s = ''\r\n    while out:\r\n    out, s = out[8:], s + chr(int('' . join(str(c)\r\n                              for c in out[: 8][:: - 1]). rjust(8, '0'), 2))\r\n    return s\r\n",
  "55e6f5e58f7817808e00002e": "def seven(m, step=0):\r\n    if m < 100:\r\n        return (m, step)\r\n    x, y, step = m / / 10, m % 10, step + 1\r\n    res = x - 2 * y\r\n    return seven(res, step)\r\n",
  "57fb142297e0860073000064": "def product(s):\r\n    return s . count(\"?\") * s . count(\"!\")\r\n",
  "54fdadc8762e2e51e400032c": "def my_parse_int(s):\r\n    try:\r\n    return int(s)\r\n    except ValueError:\r\n    return 'NaN'\r\n",
  "56f4ff45af5b1f8cd100067d": "def int_to_word(num):\r\n    d = {0: 'zero', 1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five',\r\n         6: 'six', 7: 'seven', 8: 'eight', 9: 'nine', 10: 'ten',\r\n         11: 'eleven', 12: 'twelve', 13: 'thirteen', 14: 'fourteen',\r\n         15: 'fifteen', 16: 'sixteen', 17: 'seventeen', 18: 'eighteen',\r\n         19: 'nineteen', 20: 'twenty',\r\n         30: 'thirty', 40: 'forty', 50: 'fifty', 60: 'sixty',\r\n         70: 'seventy', 80: 'eighty', 90: 'ninety'}\r\n\r\n    assert (0 <= num)\r\n\r\n    if (num < 20):\r\n    return d[num]\r\n\r\n    if (num < 100):\r\n    if num % 10 == 0:\r\n        return d[num]\r\n    else:\r\n        return d[num / / 10 * 10] + '-' + d[num % 10]\r\n\r\n    if (num < 1000):\r\n    if num % 100 == 0:\r\n        return d[num / / 100] + ' hundred'\r\n    else:\r\n        return d[num / / 100] + ' hundred and ' + int_to_word(num % 100)\r\n\r\n    def sort_by_name(arr):\r\n    return sorted(arr, key=int_to_word)\r\n",
  "52d3b68215be7c2d5300022f": "class Event ():\r\n\r\n    def __init__(self):\r\n    self . handlers = set()\r\n\r\n    def subscribe(self, func):\r\n    self . handlers . add(func)\r\n\r\n    def unsubscribe(self, func):\r\n    self . handlers . remove(func)\r\n\r\n    def emit(self, * args):\r\n    map(lambda f: f(* args), self . handlers)\r\n",
  "52ae6b6623b443d9090002c8": "def guess_gifts(wishlist, presents):\r\n\r\n    result = []\r\n\r\n    for present in presents:\r\n\r\n    for item in wishlist:\r\n\r\n    if (present['size'] == item['size'] and\r\n        present['clatters'] == item['clatters'] and\r\n            present['weight'] == item['weight']):\r\n    result . append(item['name'])\r\n\r\n    return set(result)\r\n",
  "52ad1db4b2651f744d000394": "from math import ceil\r\n\r\n\r\ndef reindeer(presents):\r\n    if presents > 180:\r\n        raise ValueError(\"Too many presents\")\r\n    return ceil(presents / 30.0) + 2\r\n",
  "52755006cc238fcae70000ed": "def christmas_tree(height: int) - > str:\r\n    return '\\n' . join(('*' * i). center(2 * height - 1) for i in range(1, height * 2, 2))\r\n",
  "52b23340c65ea422b1000045": "def will_fit(present: tuple, box: tuple) - > bool:\r\n    return all([a - 1 > b for a, b in zip(sorted(box), sorted(present))])\r\n",
  "52a6b34e43c2484ac10000cd": "def get_nice_names(people):\r\n    return [p['name'] for p in people if p['was_nice']]\r\n\r\n    def get_naughty_names(people):\r\n    return [p['name'] for p in people if not p['was_nice']]\r\n",
  "52ab60b122e82a6375000bad": "def sort_reindeer(reindeer_names):\r\n    return sorted(reindeer_names, key=lambda s: s . split()[1])\r\n",
  "52aeb2f3ad0e952f560005d3": "def sort_gift_code(code):\r\n    return \"\" . join(sorted(code))\r\n",
  "52af7bf41f5a1291a6000025": "def time_for_milk_and_cookies(dt):\r\n    return dt . month == 12 and dt . day == 24\r\n",
  "52af0d380fcae83a560008af": "def hand_out_gift(name, childs=[]):\r\n    if name in childs:\r\n        raise\r\n    childs . append(name)\r\n",
  "585eaef9851516fcae00004d": "def whatListAmIOn(actions):\r\n    nice, naut = 0, 0\r\n    for item in actions:\r\n    if item . startswith(('b', 'f', 'k')):\r\n    nice += 1\r\n    elif item . startswith(('g', 's', 'n')):\r\n    naut += 1\r\n    return 'nice' if nice < naut else 'naughty'\r\n",
  "5784c89be5553370e000061b": "def max_product(a):\r\n    m1 = max(a)\r\n    a . remove(m1)\r\n    m2 = max(a)\r\n    return m1 * m2\r\n",
  "57de78848a8b8df8f10005b1": "cs = {'cw': 1, 'CW': 2, 'cat': 1, 'CAT': 2,\r\n      'dog': 1, 'DOG': 2, 'movie': 1, 'MOVIE': 2}\r\n\r\n\r\ndef how_much_coffee(events):\r\n    c = sum(cs . get(e, 0) for e in events)\r\n    return 'You need extra sleep' if c > 3 else c\r\n",
  "57d532d2164a67cded0001c7": "def histogram(results):\r\n    return \"\" . join(\"{}|{} {}\\n\" . format(7 - i, f * \"#\", f) for i, f in enumerate(reversed(results), 1)). replace(\" 0\", \"\")\r\n",
  "557341907fbf439911000022": "def pattern(n):\r\n    return '\\n' . join('' . join(str(i) for i in range(n, j, - 1)) for j in range(n - 1, - 1, - 1))\r\n",
  "5631213916d70a0979000066": "def pattern(n):\r\n    return \"\\n1\" . join(\"*\" * i + str(i + 1) for i in range(n))\r\n",
  "564f3d49a06556d27c000077": "def pattern(_n):\r\n    return '\\n' . join(' ' * i + (' ' + str((i + 1) % 10)) * (_n - i) for i in range(_n))\r\n",
  "55736129f78b30311300010f": "def pattern(n):\r\n    return '\\n' . join('' . join(str(j) for j in range(i, n + 1)) for i in range(1, n + 1))\r\n",
  "57ebdf944cde58f973000405": "def reverser(sentence):\r\n    return ' ' . join(i[:: - 1] for i in sentence . split(' '))\r\n",
  "583989556754d6f4c700018e": "# Pyton version: return multiples of 2 numbers in a list\ndef multiples(s1, s2, s3):\n    return [x for x in range(s1, s3) if x % s1 == 0 and x % s2 == 0]\n",
  "58670300f04e7449290000e5": "def longest(words):\r\n    return max(map(len, words))\r\n",
  "58ce8725c835848ad6000007": "def potatoes(p0, w0, p1):\r\n    return w0 * (100 - p0) / / (100 - p1)\r\n",
  "55e8beb4e8fc5b7697000036": "def move(self, dir):\r\n    position = int(self . position)\r\n    if dir == \"up\":\r\n    position -= 10\r\n    elif dir == \"down\":\r\n    position += 10\r\n    elif dir == \"left\":\r\n    position -= 1\r\n    else:\r\n    position += 1\r\n    if position < 0 or position > 44 or position % 10 > 4:\r\n    raise Exception(\"Invalid direction\")\r\n    self . position = '{:02d}' . format(position)\r\n\r\n    Hero . move = move\r\n",
  "56aaf25213edd3a88a000002": "def lstzip(a, b, fn):\r\n    return [fn(* c) for c in zip(a, b)]\r\n",
  "56143efa9d32b3aa65000016": "import math\r\n\r\n\r\ndef sum_circles(* args):\r\n    t = round(sum([math . pi * (d * * 2) / 4 for d in args]))\r\n    return 'We have this much circle: {}' . format(int(t))\r\n",
  "529f32794a6db5d32a00071f": "class Calculator:\r\n    @ staticmethod\r\n    def average(* args):\r\n    return sum(args) / len(args) if args else 0\r\n",
  "5836ebe4f7e1c56e1a000033": "from itertools import zip_longest\n\n\ndef combine_strings(* args):\n    return '' . join('' . join(x) for x in zip_longest(* args, fillvalue=''))\n",
  "5682e545fb263ecf7b000069": "class Marine:\r\n    def __init__(self, damage, armor):\r\n    self . damage = damage\r\n    self . armor = armor\r\n    class Marine_weapon_upgrade:\r\n    def __init__(self, marine):\r\n    self . damage = marine . damage + 1\r\n    self . armor = marine . armor\r\n    class Marine_armor_upgrade:\r\n    def __init__(self, marine):\r\n    self . damage = marine . damage\r\n    self . armor = marine . armor + 1\r\n",
  "5682e72eb7354b2f39000021": "class State (object):\r\n    def can_move(self):\r\n    return self . _can_move\r\n    def damage(self):\r\n    return self . _damage\r\n    class TankState (State):\r\n    _can_move = True\r\n    _damage = 5\r\n    class SiegeState (State):\r\n    _can_move = False\r\n    _damage = 20\r\n    class Tank (object):\r\n    def __init__(self):\r\n    self . state = TankState()\r\n\r\n    def can_move(self):\r\n    return self . state . can_move()\r\n\r\n    def damage(self):\r\n    return self . state . damage()\r\n",
  "5682e809386707366d000024": "class Fly:\r\n    @ staticmethod\r\n    def move(unit):\r\n    unit . position += 10\r\n    class Walk:\r\n    @ staticmethod\r\n    def move(unit):\r\n    unit . position += 1\r\n    class Viking:\r\n    def __init__(self):\r\n    self . move_behavior = Walk()\r\n    self . position = 0\r\n    def move(self):\r\n    self . move_behavior . move(self)\r\n",
  "577ad961ae2807182f000c29": "def count_char(s, c):\r\n    return s . lower(). count(c . lower())\r\n",
  "5682e646d5eddc1e21000017": "class Marine:\r\n    def __init__(self):\r\n    self . health = 100\r\n    def accept(self, visitor):\r\n    visitor . visit_light(self)\r\n\r\n    class Marauder:\r\n    def __init__(self):\r\n    self . health = 125\r\n    def accept(self, visitor):\r\n    visitor . visit_armored(self)\r\n\r\n    class TankBullet:\r\n    def visit_light(self, unit):\r\n    unit . health -= 21\r\n    def visit_armored(self, unit):\r\n    unit . health -= 32\r\n",
  "56919e637b2b971492000036": "class MarioAdapter:\r\n    def __init__(self, mario):\r\n    self . mario = mario\r\n    def attack(self, target):\r\n    target . health -= self . mario . jump_attack()\r\n",
  "5849169a6512c5964000016e": "from functools import reduce\nfrom math import gcd\n\n\ndef greatest_common_factor(seq):\n    return reduce(gcd, seq)\n",
  "56fcc393c5957c666900024d": "from math import ceil, sqrt\r\n\r\n\r\ndef clockwise(arr):\r\n    return [list(reversed(row)) for row in zip(* arr)]\r\n\r\n    def counterclockwise(arr):\r\n    return [list(row) for row in reversed(list(zip(* arr)))]\r\n\r\n    def code(s):\r\n    n = ceil(sqrt(len(s)))\r\n    s = s . ljust(n * n, chr(11))\r\n    square = [s[n * i: n * (i + 1)] for i in range(n)]\r\n    return '\\n' . join('' . join(row) for row in clockwise(square))\r\n\r\n    def decode(s):\r\n    return '' . join('' . join(row) for row in counterclockwise(s . split('\\n'))). strip(chr(11))\r\n",
  "585d8c8a28bc7403ea0000c3": "from collections import defaultdict\r\n\r\n\r\ndef find_uniq(a):\r\n    d = {}\r\n    c = defaultdict(int)\r\n    for e in a:\r\n    t = frozenset(e . strip(). lower())\r\n    d[t] = e\r\n    c[t] += 1\r\n    return d[next(filter(lambda k: c[k] == 1, c))]\r\n",
  "5700c9acc1555755be00027e": "def contain_all_rots(s, l):\r\n    return all(s[i:] + s[: i] in l for i in range(len(s)))\r\n",
  "570564e838428f2eca001d73": "from re import sub\r\n\r\n\r\ndef chuck_push_ups(s):\r\n    try:\r\n    return max((int(b, 2) for b in sub('[^01 ]', '', s). split()), default='CHUCK SMASH!!')\r\n    except:\r\n    return 'FAIL!!'\r\n",
  "57c7231c484cf9e6ac000090": "from itertools import zip_longest as zl\r\n\r\n\r\ndef sum_arrays(arrays, shift):\r\n    shifted = [[0] * shift * i + arr for i, arr in enumerate(arrays)]\r\n    return [sum(t) for t in zl(* shifted, fillvalue=0)]\r\n",
  "57d93978950d8486a3000def": "def find_number(compare, lo=0, hi=100, tolerance=1e-5):\n    mid = None\n    while hi - lo > tolerance:\n    mid = (lo + hi) / 2\n    if compare(mid) == 0:\n        return mid\n    if compare(mid) < 0:\n        lo = mid\n    else:\n        hi = mid\n    return mid\n",
  "57ea70aa5500adfe8a000110": "def fold_array(array, runs):\r\n    mid = len(array) / / 2\r\n    a = [sum(pair) for pair in zip(array[: mid] + [0], reversed(array[mid:]))]\r\n    return fold_array(a, runs - 1) if runs > 1 else a\r\n",
  "58184387d14fc32f2b0012b2": "from math import sqrt\n\n\ndef f(x):\n    return x / (1 + sqrt(1 + x))\n",
  "58acfe4ae0201e1708000075": "def invite_more_women(arr):\r\n    return sum(arr) > 0\r\n",
  "5706be574f2c297a7b00060d": "def price(start, soil, age):\r\n    yrate = {'Barely used': 1.1, 'Seen a few high kicks': 1.25,\r\n             'Blood stained': 1.3, 'Heavily soiled': 1.5}\r\n    try:\r\n    return f\"$ { start * ( yrate . get ( soil )) * * age : 0.2 f } \"\r\n    except:\r\n    return \"Chuck is bottomless!\"\r\n",
  "5853213063adbd1b9b0000be": "MOVES = {\"up\": (- 1, 0), \"down\": (1, 0), \"right\": (0, 1), \"left\": (0, - 1)}\r\n\r\n\r\ndef street_fighter_selection(fighters, initial_position, moves):\r\n    y, x = initial_position\r\n    hovered_fighters = []\r\n    for move in moves:\r\n    dy, dx = MOVES[move]\r\n    y += dy\r\n    if not 0 <= y < len(fighters):\r\n    y -= dy\r\n    x = (x + dx) % len(fighters[y])\r\n    hovered_fighters . append(fighters[y][x])\r\n    return hovered_fighters\r\n",
  "5732d3c9791aafb0e4001236": "from math import ceil\r\n\r\n\r\ndef round_it(n):\r\n    left, right = (len(part) for part in str(n). split(\".\"))\r\n    return ceil(n) if left < right else int(n) if left > right else round(n)\r\n",
  "572ab0cfa3af384df7000ff8": "def shuffle_it(A, * T):\r\n    for x, y in T:\r\n    A[x], A[y] = A[y], A[x]\r\n    return A\r\n",
  "57280481e8118511f7000ffa": "def split_and_merge(string, sp):\r\n    return ' ' . join(sp . join(word) for word in string . split())\r\n",
  "57202aefe8d6c514300001fd": "def sale_hotdogs(n):\r\n    return n * (100 if n < 5 else 95 if n < 10 else 90)\r\n",
  "57bfea4cb19505912900012c": "def symmetric_point(p, q):\r\n    return [2 * q[0] - p[0], 2 * q[1] - p[1]]\r\n",
  "5713bc89c82eff33c60009f7": "def to_freud(sentence):\r\n    return ' ' . join('sex' for _ in sentence . split())\r\n",
  "5709bdd2f088096786000008": "def super_size(n):\r\n    return int('' . join(sorted(str(n), reverse=True)))\r\n",
  "577a6e90d48e51c55e000217": "def hotpo(n):\n    cnt = 0\n    while n != 1:\n    n = 3 * n + 1 if n % 2 else n / 2\n    cnt += 1\n    return cnt\n",
  "52adc142b2651f25a8000643": "class Sleigh (object):\r\n    def authenticate(self, name, password):\r\n    return name == 'Santa Claus' and password == 'Ho Ho Ho!'\r\n",
  "53844152aa6fc137d8000589": "def always(n=0):\r\n    return lambda: n\r\n",
  "57faf7275c991027af000679": "def remove(s, n):\r\n    return s . replace(\"!\", \"\", n)\r\n",
  "58356a94f8358058f30004b5": "def fly_by(lamps, drone):\r\n    return lamps . replace('x', 'o', drone . count('=') + 1)\r\n",
  "581331293788bc1702001fa6": "def mirror(text):\r\n    words = [w[:: - 1] for w in text . split()]\r\n    max_len = max(map(len, words))\r\n    border = ['*' * (max_len + 4)]\r\n    words = ['* {} *' . format(w . ljust(max_len)) for w in words]\r\n    return '\\n' . join(border + words + border)\r\n",
  "56fcfad9c7e1fa2472000034": "def evil(n):\r\n    return \"It's Evil!\" if bin(n). count('1') % 2 == 0 else \"It's Odious!\"\r\n",
  "57f22b0f1b5432ff09001cab": "def well(arr):\r\n    good_ideas = str(arr). lower(). count('good')\r\n    return 'I smell a series!' if (good_ideas > 2) else 'Fail!' if not (good_ideas) else 'Publish!'\r\n",
  "5803956ddb07c5c74200144e": "def dating_range(age):\n    if age <= 14:\n    min = age - 0.10 * age\n    max = age + 0.10 * age\n    else:\n    min = (age / 2) + 7\n    max = (age - 7) * 2\n    return str(int(min)) + '-' + str(int(max))\n",
  "542ebbdb494db239f8000046": "def next_item(xs, item):\r\n    it = iter(xs)\r\n    for x in it:\r\n    if x == item:\r\n    break\r\n    return next(it, None)\r\n",
  "580a094553bd9ec5d800007d": "def apple(x):\r\n    return \"It's hotter than the sun!!\" if int(x) * * 2 > 1000 else \"Help yourself to a honeycomb Yorkie for the glovebox.\"\r\n",
  "582dafb611d576b745000b74": "statements = {\r\n    'george saint pierre': \"I am not impressed by your performance.\",\r\n    'conor mcgregor': \"I'd like to take this chance to apologize.. To absolutely NOBODY!\"\r\n}\r\n\r\n\r\ndef quote(fighter):\r\n    return statements[fighter . lower()]\r\n",
  "560c31275c39c481c4000022": "sandwiches, salads, wraps, frenchFries = 4, 6, 5, 10\ntotalPrice = 8.00 * sandwiches + 7.00 * salads + 6.5 * wraps + 1.2 * frenchFries\n",
  "560dab9f8b50f89fd6000070": "money = 10\ncandy = 1.42\nchips = 2.40\nsoda = 1\nchange = money - (candy + chips + soda)\n",
  "559ac78160f0be07c200005a": "def name_shuffler(str_):\r\n    return ' ' . join(str_ . split(' ')[:: - 1])\r\n",
  "5720a1cb65a504fdff0003e2": "def difference_in_ages(ages):\r\n    # your code here\r\n    return (min(ages), max(ages), max(ages) - min(ages))\r\n",
  "570597e258b58f6edc00230d": "def array(strng):\r\n    return ' ' . join(strng . split(',')[1: - 1]) or None\r\n",
  "5703c093022cd1aae90012c9": "def find(arr, elem):\r\n    return arr . index(elem) if elem in arr else 'Not found'\r\n",
  "557af9418895e44de7000053": "def repeat_it(string, n):\r\n    return string * n if isinstance(string, str) else 'Not a string'\r\n",
  "55a14aa4817efe41c20000bc": "class Cat (Animal):\r\n    def speak(self):\r\n    return self . name + ' meows.'\r\n",
  "58b1ae711fcffa34090000ea": "def controller(events):\r\n\r\n    out, state, dir, moving = [], 0, 1, False\r\n    for c in events:\r\n    if c == 'O':\r\n        dir *= - 1\r\n    elif c == 'P':\r\n        moving = not moving\r\n    if moving:\r\n        state += dir\r\n    if state in [0, 5]:\r\n        moving, dir = False, 1 if state == 0 else - 1\r\n    out . append(str(state))\r\n\r\n    return '' . join(out)\r\n",
  "54dba07f03e88a4cec000caf": "class Dog ():\r\n    def __init__(self, breed):\r\n    self . breed = breed\r\n    def bark(self):\r\n    return \"Woof\"\r\n    snoopy = Dog(\"Beagle\")\r\n\r\n    scoobydoo = Dog(\"Great Dane\")\r\n",
  "541629460b198da04e000bb9": "def last(* args):\r\n    return args[- 1] if not hasattr(args[- 1], \"__getitem__\") else args[- 1][- 1]\r\n",
  "5302d846be2a9189af0001e4": "def say_hello(name, city, state):\r\n    return \"Hello, {}! Welcome to {}, {}!\" . format(\" \" . join(name), city, state)\r\n",
  "5810085c533d69f4980001cf": "def calculator(x, y, op):\r\n    return eval(f' { x }{ op }{ y } ') if type(x) == type(y) == int and str(op) in '+-*/' else 'unknown value'\r\n",
  "570669d8cb7293a2d1001473": "def ifChuckSaysSo():\r\n    return 0\r\n",
  "559f860f8c0d6c7784000119": "def any_arrows(arrows):\r\n    return any(not i . get(\"damaged\", False) for i in arrows)\r\n",
  "58941fec8afa3618c9000184": "def growing_plant(upSpeed, downSpeed, desiredHeight):\n    days = 1\n    height = upSpeed\n    while (height < desiredHeight):\n    height += upSpeed - downSpeed\n    days += 1\n    return days\n",
  "589422431a88082ea600002a": "def digit_degree(n):\r\n    return 1 + digit_degree(sum(map(int, str(n)))) if len(str(n)) > 1 else 0\r\n",
  "589573e3f0902e8919000109": "def shuffled_array(s):\r\n    result = sorted(s)\r\n    result . remove(sum(result) / / 2)\r\n    return result\r\n",
  "58aa68605aab54a26c0001a6": "def distinct_digit_year(year):\n    year += 1\n    while len(set(str(year))) != 4:\n    year += 1\n    return year\n    # coding and coding..\n",
  "58a6841442fd72aeb4000080": "def similarity(a, b):\r\n    try:\r\n    return len(set(a) & set(b)) / len(set(a) | set(b))\r\n    except:\r\n    return 0\r\n",
  "571e9af407363dbf5700067c": "from itertools import accumulate\r\nfrom gmpy2 import next_prime\r\nfrom random import sample\r\n\r\n\r\ndef squares(n):\r\n    return [x * * 2 for x in range(1, n + 1)]\r\n\r\n    def num_range(n, start, step):\r\n    return list(range(start, start + n * step, step))\r\n\r\n    def rand_range(n, mn, mx):\r\n    return sample(range(mn, mx + 1), n)\r\n\r\n    def primes(n):\r\n    return list(accumulate(range(2, n + 2), func=lambda p, _: next_prime(p)))\r\n",
  "57f3996fa05a235d49000574": "def abundant(h):\r\n    for n in range(h, 0, - 1):\r\n    s = sum(i for i in range(1, n) if n % i == 0)\r\n    if s > h:\r\n    return [[n], [s - n]]\r\n",
  "58068479c27998b11900056e": "def sort_twisted37(arr):\r\n    def key(x):\r\n    return int(str(x). translate(str . maketrans('37', '73')))\r\n    return sorted(arr, key=key)\r\n",
  "5865a75da5f19147370000c7": "def add_arrays(arr1, arr2):\r\n    if len(arr1) != len(arr2):\r\n    raise \"Input arguments are not of equal length\"\r\n    return [x + y for x, y in zip(arr1, arr2)]\r\n",
  "55f89832ac9a66518f000118": "def simplify(poly):\r\n    # I'm feeling verbose today\r\n    # get 3 parts (even if non-existent) of each term: (+/-, coefficient, variables)\r\n    import re\r\n    matches = re . findall(r'([+\\-]?)(\\d*)([a-z]+)', poly)\r\n\r\n    # get the int equivalent of coefficient (including sign) and the sorted variables (for later comparison)\r\n    expanded = [[int(i[0] + (i[1] if i[1] != \"\" else \"1\")),\r\n                 '' . join(sorted(i[2]))] for i in matches]\r\n\r\n    # get the unique variables from above list. Sort them first by length, then alphabetically\r\n    variables = sorted(\r\n        list(set(i[1] for i in expanded)), key=lambda x: (len(x), x))\r\n\r\n    # get the sum of coefficients (located in expanded) for each variable\r\n    coefficients = {v: sum(i[0] for i in expanded if i[1] == v)\r\n                    for v in variables}\r\n\r\n    # clean-up: join them with + signs, remove '1' coefficients, and change '+-' to '-'\r\n    return '+' . join(str(coefficients[v]) + v for v in variables if coefficients[v] != 0). replace('1', ''). replace('+-', '-')\r\n",
  "52503c77e5b972f21600000e": "def largest_difference(data):\r\n    maxi = 0\r\n    for i in range(len(data) - 1):\r\n    for j in range(i + 1, len(data)):\r\n    if data[i] <= data[j]:\r\n    maxi = max(j - i, maxi)\r\n    return maxi\r\n",
  "58c47a95e4eb57a5b9000094": "def find(r):\r\n    return sum(2 * * i for i in r)\r\n",
  "558c04ecda7fb8f48b000075": "def same(arr_a, arr_b):\r\n    return sorted(map(sorted, arr_a)) == sorted(map(sorted, arr_b))\r\n",
  "5811aef3acdf4dab5e000251": "def mixbonacci(pattern, length):\r\n\r\n    def nacci(starts, sum_indexes):\r\n    while 1:\r\n    yield starts[0]\r\n    starts = starts[1:] + [sum(starts[i] for i in sum_indexes)]\r\n\r\n    sequences = {\r\n        'fib': nacci([0, 1], [0, 1]),\r\n        'pad': nacci([1, 0, 0], [0, 1]),\r\n        'jac': nacci([0, 1], [0, 0, 1]),\r\n        'pel': nacci([0, 1], [0, 1, 1]),\r\n        'tri': nacci([0, 0, 1], [0, 1, 2]),\r\n        'tet': nacci([0, 0, 0, 1], [0, 1, 2, 3]),\r\n    }\r\n\r\n    return pattern and [next(sequences[pattern[i % len(pattern)]]) for i in range(length)]\r\n",
  "5523b97ac8f5025c45000900": "from string import ascii_uppercase as LETTERS\n\n\nclass Plugboard (object):\n    def __init__(self, wiring=''):\n    if wiring:\n    assert wiring . isalpha() and wiring . isupper(\n    ), \"Wiring must only contain capital latin letters\"\n    assert not len(wiring) % 2, \"Odd length of wiring string\"\n    assert len(wiring) == len(set(wiring)), \"Duplicate letter(s) in wiring\"\n    assert len(wiring) <= 20, \"Wiring must consist of no more than 10 wires\"\n    self . plugboard = {}\n    for (a, b) in zip(wiring[0:: 2], wiring[1:: 2]):\n    self . plugboard[a] = b\n    self . plugboard[b] = a\n    def process(self, c):\n    return self . plugboard . get(c, c)\n",
  "5418a1dd6d8216e18a0012b2": "def validate(n):\r\n    digits = [int(x) for x in str(n)]\r\n    even = [x * 2 if x * 2 <= 9 else x * 2 - 9 for x in digits[- 2:: - 2]]\r\n    odd = [x for x in digits[- 1:: - 2]]\r\n    return (sum(even + odd) % 10) == 0\r\n",
  "5287e858c6b5a9678200083c": "def narcissistic(value):\r\n    return value == sum(int(x) * * len(str(value)) for x in str(value))\r\n",
  "526dad7f8c0eb5c4640000a4": "import operator\r\n\r\n\r\nclass Vector (list):\r\n    def __str__(self):\r\n    return \"\" . join(str(tuple(self)). split())\r\n\r\n    def math(self, other, op):\r\n    result = Vector()\r\n    for i in range(max([len(self), len(other)])):\r\n    result . append(op(self[i], other[i]))\r\n    return result\r\n    def add(self, other):\r\n    return self . math(other, operator . add)\r\n\r\n    def subtract(self, other):\r\n    return self . math(other, operator . sub)\r\n\r\n    def dot(self, other):\r\n    return sum(self . math(other, operator . mul))\r\n\r\n    def norm(self):\r\n    return self . dot(self) * * 0.5\r\n    def equals(self, other):\r\n    return self == other\r\n",
  "54d4c8b08776e4ad92000835": "def isPP(n):\r\n    for i in range(2, n + 1):\r\n    for j in range(2, n + 1):\r\n    if i * * j > n:\r\n    break\r\n    elif i * * j == n:\r\n    return [i, j]\r\n    return None\r\n",
  "56b5afb4ed1f6d5fb0000991": "def func(s):\r\n    result = sum(int(x) * * 3 for x in s)\r\n    if result % 2 == 0:\r\n    return s[:: - 1]\r\n    else:\r\n    return s[1:] + s[0]\r\n\r\n    def revrot(s, sz):\r\n    if not sz:\r\n    return ''\r\n    return '' . join(func('' . join(x)) for x in zip(* [iter(list(s))] * sz))\r\n",
  "52b757663a95b11b3d00062d": "def to_weird_case_word(string):\r\n    return \"\" . join(c . upper() if i % 2 == 0 else c for i, c in enumerate(string . lower()))\r\n\r\n    def to_weird_case(string):\r\n    return \" \" . join(to_weird_case_word(str) for str in string . split())\r\n",
  "53907ac3cd51b69f790006c5": "def triangle_type(a, b, c):\r\n    x, y, z = sorted([a, b, c])\r\n    if z >= x + y:\r\n        return 0\r\n    if z * z == x * x + y * y:\r\n        return 2\r\n    return 1 if z * z < x * x + y * y else 3\r\n",
  "53f40dff5f9d31b813000774": "def recoverSecret(triplets):\r\n    r = list(set([i for l in triplets for i in l]))\r\n    for l in triplets:\r\n    fix(r, l[1], l[2])\r\n    fix(r, l[0], l[1])\r\n    return '' . join(r)\r\n\r\n    def fix(l, a, b):\r\n    \"\"\"let l.index(a) < l.index(b)\"\"\"\r\n    if l . index(a) > l . index(b):\r\n    l . remove(a)\r\n    l . insert(l . index(b), a)\r\n",
  "539a0e4d85e3425cb0000a88": "class add (int):\r\n    def __call__(self, n):\r\n    return add(self + n)\r\n",
  "58b2c5de4cf8b90723000051": "class GuessWho (object):\r\n    def __init__(self, character):\r\n    self . char = character\r\n    self . possibles = set(characters)\r\n    self . attempt = 0\r\n    def guess(self, guess):\r\n    self . attempt += 1\r\n    if guess == self . char:\r\n    return [f\"Correct! in { self . attempt } turns\"]\r\n    if guess in characters:\r\n    self . possibles -= {guess}\r\n    else:\r\n    self . possibles &= {char for char in characters if (\r\n        guess in characters[char]) == (guess in characters[self . char])}\r\n    return sorted(self . possibles)\r\n\r\n    characters = {\r\n        \"Jean-Claude\": (\"Male\", \"Glasses\", \"Brown eyes\", \"Bald\", \"White hair\", \"Small mouth\", \"Small nose\"),\r\n        \"Pierre\": (\"Male\", \"Mustache\", \"Brown eyes\", \"Brown hair\", \"Big mouth\", \"Small nose\"),\r\n        \"Jean\": (\"Male\", \"White hair\", \"Big nose\", \"Big mouth\", \"Blue eyes\"),\r\n        \"Amelie\": (\"Female\", \"Hat\", \"Brown hair\", \"Small mouth\", \"Long hair\", \"Brown eyes\", \"Small nose\"),\r\n        \"Mirabelle\": (\"Female\", \"Black hair\", \"Earrings\", \"Small mouth\", \"Brown eyes\", \"Big nose\"),\r\n        \"Isabelle\": (\"Female\", \"Blonde hair\", \"Glasses\", \"Hat\", \"Small mouth\", \"Small nose\", \"Brown eyes\"),\r\n        \"Antonin\": (\"Male\", \"Brown eyes\", \"Black hair\", \"Small nose\", \"Big mouth\"),\r\n        \"Bernard\": (\"Male\", \"Brown eyes\", \"Brown hair\", \"Small nose\", \"Hat\"),\r\n        \"Owen\": (\"Male\", \"Blue eyes\", \"Blonde hair\", \"Small nose\", \"Small mouth\"),\r\n        \"Dylan\": (\"Male\", \"Brown eyes\", \"Blonde hair\", \"Small nose\", \"Small mouth\", \"Bald\", \"Beard\"),\r\n        \"Herbert\": (\"Male\", \"Brown eyes\", \"Blonde hair\", \"Big nose\", \"Small mouth\", \"Bald\"),\r\n        \"Christine\": (\"Female\", \"Blue eyes\", \"Blonde hair\", \"Small nose\", \"Small mouth\", \"Long hair\"),\r\n        \"Luc\": (\"Male\", \"Brown eyes\", \"White hair\", \"Small nose\", \"Small mouth\", \"Glasses\"),\r\n        \"Cecilian\": (\"Male\", \"Brown eyes\", \"Ginger hair\", \"Small nose\", \"Small mouth\"),\r\n        \"Lionel\": (\"Male\", \"Brown eyes\", \"Brown hair\", \"Big nose\", \"Big mouth\", \"Mustache\"),\r\n        \"Benoit\": (\"Male\", \"Brown eyes\", \"Brown hair\", \"Small mouth\", \"Small nose\", \"Mustache\", \"Beard\"),\r\n        \"Robert\": (\"Male\", \"Blue eyes\", \"Brown hair\", \"Big nose\", \"Big mouth\"),\r\n        \"Charline\": (\"Female\", \"Brown hair\", \"White hair\", \"Small nose\", \"Big mouth\"),\r\n        \"Renaud\": (\"Male\", \"Brown eyes\", \"Blonde hair\", \"Small nose\", \"Big mouth\", \"Mustache\"),\r\n        \"Michel\": (\"Male\", \"Brown eyes\", \"Blonde hair\", \"Small nose\", \"Big mouth\", \"Beard\"),\r\n        \"Pierre-Louis\": (\"Male\", \"Blue eyes\", \"Brown hair\", \"Small nose\", \"Small mouth\", \"Bald\", \"Glasses\"),\r\n        \"Etienne\": (\"Male\", \"Brown eyes\", \"Blonde hair\", \"Small nose\", \"Small mouth\", \"Glasses\"),\r\n        \"Henri\": (\"Male\", \"Brown eyes\", \"White hair\", \"Small nose\", \"Big mouth\", \"Hat\"),\r\n        \"Damien\": (\"Male\", \"Brown eyes\", \"Blonde hair\", \"Small nose\", \"Big mouth\", \"Hat\"),\r\n    }\r\n",
  "56f253dd75e340ff670002ac": "def compose(s1, s2):\r\n    s1 = s1 . split(\"\\n\")\r\n    s2 = s2 . split(\"\\n\")[:: - 1]\r\n\r\n    n = len(s1)\r\n    out = []\r\n\r\n    for i in range(n):\r\n    out . append(s1[i][: i + 1] + s2[i][:(n - i)])\r\n\r\n    return \"\\n\" . join(out)\r\n",
  "54db15b003e88a6a480000b9": "from math import gcd, prod\nfrom itertools import combinations\n\n\ndef from_nb_2_str(n, modsys):\n    if prod(modsys) < n or next((True for a, b in combinations(modsys, 2) if gcd(a, b) != 1), False):\n    return \"Not applicable\"\n    return '-' + '--' . join(str(n % m) for m in modsys) + '-'\n",
  "56e7d40129035aed6c000632": "def easyline(n):\r\n    return easyline(n - 1) * (4 * n - 2) / / n if n else 1\r\n",
  "5870fa11aa0428da750000da": "from collections import deque\r\nimport re\r\nTOKENIZER = re . compile(r'(R+|F+|L+)(\\d*)')\r\n\r\n\r\ndef execute(code):\r\n\r\n    pos, dirs = (0, 0), deque([(0, 1), (1, 0), (0, - 1), (- 1, 0)])\r\n    seens = {pos}\r\n\r\n    for act, n in TOKENIZER . findall(code):\r\n    s, r = act[0], int(n or '1') + len(act) - 1\r\n    if s == 'F':\r\n    for _ in range(r):\r\n    pos = tuple(z + dz for z, dz in zip(pos, dirs[0]))\r\n    seens . add(pos)\r\n    else:\r\n    dirs . rotate((r % 4) * (- 1) * * (s == 'R'))\r\n\r\n    miX, maX = min(x for x, y in seens), max(x for x, y in seens)\r\n    miY, maY = min(y for x, y in seens), max(y for x, y in seens)\r\n\r\n    return '\\r\\n' . join('' . join('*' if (x, y) in seens else ' ' for y in range(miY, maY + 1))\r\n                         for x in range(miX, maX + 1))\r\n",
  "58708934a44cfccca60000c4": "import re\r\n\r\n\r\ndef highlight(code):\r\n    code = re . sub(r\"(F+)\", '<span style=\"color: pink\">\\g<1></span>', code)\r\n    code = re . sub(r\"(L+)\", '<span style=\"color: red\">\\g<1></span>', code)\r\n    code = re . sub(r\"(R+)\", '<span style=\"color: green\">\\g<1></span>', code)\r\n    code = re . sub(r\"(\\d+)\", '<span style=\"color: orange\">\\g<1></span>', code)\r\n    return code\r\n",
  "563f0c54a22b9345bf000053": "def fcn(n):\r\n    return 2 * * n\r\n",
  "5834315e06f227a6ac000099": "def elimination(arr):\r\n    for x in arr:\r\n    if arr . count(x) == 2:\r\n    return x\r\n",
  "56fb9da2fca8b9d7de00083f": "from itertools import product\r\nfrom collections import Counter\r\n\r\n\r\ndef most_prob_sum(dice, n):\r\n    c = Counter(sum(p) for p in product(\r\n        * [[i for i in range(1, 1 + {'tet': 4, 'cub': 6, 'oct': 8, 'nin': 9, 'ten': 10, 'dod': 12, 'ico': 20}[dice[: 3]])] for _ in range(n)]))\r\n    mx = max(c . values())\r\n    return [[k for k in c if c[k] == mx], mx / float(sum(c . values()))]\r\n",
  "56f852635d7c12fb610013d7": "def reg_sum_hits(dices, sides=6):\r\n    d, s = sides * [1], sides - 1\r\n    for i in range(dices - 1):\r\n    t = s * [0] + d + s * [0]\r\n    d = [sum(t[i: i + sides]) for i in range(len(t) - s)]\r\n    return [[i + dices, prob] for (i, prob) in enumerate(d)]\r\n",
  "56f78a42f749ba513b00037f": "def rolldice_sum_prob(sum_, dice_amount):\r\n\r\n    import itertools\r\n    import collections\r\n    sums = [sum(list(i)) for i in itertools . product(\r\n        [1, 2, 3, 4, 5, 6], repeat=dice_amount)]\r\n    count = collections . Counter(sums)\r\n    prob = count[sum_] * 1.0 / (len(sums))\r\n\r\n    return prob\r\n",
  "57052ac958b58fbede001616": "from itertools import product\r\nNOTES = [['C'], ['C#', 'Db'], ['D'], ['D#', 'Eb'], ['E'], ['F'], [\r\n    'F#', 'Gb'], ['G'], ['G#', 'Ab'], ['A'], ['A#', 'Bb'], ['B']] * 2\r\nconfig = [('Major', 4), ('Minor', 3)]\r\n\r\nDCT_CHORDS = {c: mode for mode, offset in config\r\n              for i in range(len(NOTES) / / 2)\r\n              for c in product(NOTES[i], NOTES[i + offset], NOTES[i + 7])}\r\n\r\n\r\ndef minor_or_major(chord):\r\n    chord = tuple(chord . split()) if isinstance(chord, str) else \"\"\r\n    return DCT_CHORDS . get(chord, \"Not a chord\")\r\n",
  "57d7536d950d8474f6000a06": "SEARCH_COWES = {\"cow\", \"woc\"}\r\n\r\n\r\ndef find_wrong_way_cow(field):\r\n    for i, f in enumerate([field, list(zip(* field))]):\r\n    length, strField = len(f[0]), '\\n' . join('' . join(line) for line in f)\r\n\r\n    for sCow in SEARCH_COWES:\r\n    pos = strField . find(sCow)\r\n    if pos != - 1 and pos == strField . rfind(sCow):\r\n    n = pos + 2 * (sCow == \"woc\")\r\n    ans = [n % (length + 1), n / / (length + 1)]\r\n    return ans[:: - 1] if i else ans\r\n",
  "55b95c76e08bd5eef100001e": "def count_arara(n):\r\n    return \" \" . join(['adak'] * (n / / 2) + ['anane'] * (n % 2))\r\n",
  "58b42c98f4cdd62f45000c6e": "from itertools import accumulate\n\n\ndef running(lst, fn):\n    return list(accumulate(lst, fn))\n",
  "56efab15740d301ab40002ee": "def gcdi(a, b):\r\n    from fractions import gcd\r\n    return abs(gcd(a, b))\r\n    def lcmu(a, b):\r\n    from fractions import gcd\r\n    return abs(a * b / / gcd(a, b))\r\n    def som(a, b):\r\n    return a + b\r\n    def maxi(a, b):\r\n    return max(a, b)\r\n    def mini(a, b):\r\n    return min(a, b)\r\n    def oper_array(fct, arr, init):\r\n    out = [init]\r\n\r\n    for i in range(len(arr)):\r\n    out . append(fct(out[- 1], arr[i]))\r\n    return out[1:]\r\n",
  "54808e45ab03a2c8330009fb": "def find_secret_message(paragraph):\r\n    s = set()\r\n    ret = []\r\n    for w in (word . strip('.,:!?'). lower() for word in paragraph . split()):\r\n    if w in s and not w in ret:\r\n    ret . append(w)\r\n    else:\r\n    s . add(w)\r\n    return ' ' . join(ret)\r\n",
  "56cafdabc8cfcc3ad4000a2b": "def score(n): return 2 * * n . bit_length() - 1\n",
  "546ba103f0cf8f7982000df4": "def calculate(n1, n2, o):\r\n    operators = {\r\n        \"add\": (lambda x, y: x + y),\r\n        \"subtract\": (lambda x, y: x - y),\r\n        \"multiply\": (lambda x, y: x * y),\r\n    }\r\n\r\n    return \"{:b}\" . format(operators[o](int(n1, 2), int(n2, 2)))\r\n",
  "58cbfe2516341cce1e000001": "def count_zeros_n_double_fact(n):\n    if n % 2 != 0:\n    return 0\n    k = 0\n    while n >= 10:\n    k += n / / 10\n    n / /= 5\n    return k\n",
  "56d904db9963e9cf5000037d": "def testit(a, b):\r\n    return a | b\r\n",
  "56fe17fcc25bf3e19a000292": "''' \n from math import factorial \n def nCr(n, r): \n return factorial(n) / factorial(n-r) / factorial(r) \n def u1(n, p): \n return sum((-1)**k * p * 4 ** (n-k) * nCr(2*n-k+1, k) for k in range(n + 1)) \n \n def v1(n, p): \n return sum((-1)**k * p * 4 ** (n-k) * nCr(2*n-k, k) for k in range(n + 1)) \n '''\nu1 = u_eff = lambda n, p: p * (n + 1)\nv1 = v_eff = lambda n, p: p * (2 * n + 1)\n# v(n) = u(2n)\n",
  "565c0fa6e3a7d39dee000125": "def dist(v, mu): \t # suppose reaction time is 1\n    v /= 3.6\n    return v + v * v / (2 * mu * 9.81)\n\n    def speed(d, mu): \t\t\t # suppose reaction time is 1\n    b = - 2 * mu * 9.81\n    return round(3.6 * (b + (b * b - 4 * b * d) * * 0.5) / 2, 2)\n",
  "5282b48bb70058e4c4000fa7": "def hex_string_to_RGB(hex):\r\n    return {'r': int(hex[1: 3], 16), 'g': int(hex[3: 5], 16), 'b': int(hex[5: 7], 16)}\r\n",
  "56e9e4f516bcaa8d4f001763": "def show_sequence(n):\r\n    if n == 0:\r\n    return \"0=0\"\r\n    elif n < 0:\r\n    return str(n) + \"<0\"\r\n    else:\r\n    counter = sum(range(n + 1))\r\n    return '+' . join(map(str, range(n + 1))) + \" = \" + str(counter)\r\n",
  "54521e9ec8e60bc4de000d6c": "def maxSequence(arr):\n    max, curr = 0, 0\n    for x in arr:\n    curr += x\n    if curr < 0:\n        curr = 0\n    if curr > max:\n        max = curr\n    return max\n",
  "56cac350145912e68b0006f0": "def arrange(strng):\r\n    words = strng . split()\r\n    for i in range(len(words)):\r\n    words[i: i + 2] = sorted(words[i: i + 2], key=len, reverse=i % 2)\r\n    words[i] = words[i]. upper() if i % 2 else words[i]. lower()\r\n    return ' ' . join(words)\r\n",
  "581a52d305fe7756720002eb": "import re\nyes = \"In with a chance\"\nno = \"Plenty more fish in the sea\"\n\n\ndef validate_number(string):\n    return yes if re . match(r'^(\\+44|0)7[\\d]{9}$', re . sub('-', '', string)) else no\n",
  "5898a751b2edc082f60005f4": "from itertools import chain\n\n\ndef checkCols(i, col, sortedCol): return (len(set(col)) != 0  # 1 to 3 numbers (cannot be more if shapeGridOK is True so need only to check not zero)\n                                          and col == sortedCol  # In increasing order\n                                          # Values in the same thenth...\n                                          and i * 10 <= sortedCol[0]\n                                          and sortedCol[- 1] < (i + 1) * 10 + (i == 8))  # ... including 90 for the last column\n\n\ndef check_tombola(sheet):\n    filteredCols = [list(filter(lambda n: n != 0, col))\n                    for i, col in enumerate(zip(* sheet))]\n\n    shapeGridOk = list(map(len, sheet)) == [9, 9, 9]  # 3x9 grid\n    uniqueNums15_Ok = len(set(chain(* sheet))) == 16  # 16 with the 0s\n    Are5NumsByRow = all(len(set(row)) == 6 for row in sheet)  # 6 with the 0s\n    validCols = all(checkCols(i, col, sorted(col))\n                    for i, col in enumerate(filteredCols))\n\n    return all((shapeGridOk, uniqueNums15_Ok, Are5NumsByRow, validCols))\n",
  "55902c5eaa8069a5b4000083": "def format_money(amount):\r\n    return '${:.2f}' . format(amount)\r\n",
  "538835ae443aae6e03000547": "def add(n):\r\n    return lambda x: x + n\r\n",
  "58cda88814e65627c5000045": "def expanded_form(num):\r\n    integer_part, fractional_part = str(num). split('.')\r\n\r\n    result = [str(int(num) * (10 * * i)) for i, num in enumerate(integer_part[:: - 1]) if num != '0'][:: - 1]\r\n    result += [str(num) + '/' + str(10 * * (i + 1)) for i, num in enumerate(fractional_part) if num != '0']\r\n\r\n    return ' + ' . join(result)\r\n",
  "5842df8ccbd22792a4000245": "def expanded_form(num):\r\n    num = list(str(num))\r\n    return ' + ' . join(x + '0' * (len(num) - y - 1) for y, x in enumerate(num) if x != '0')\r\n",
  "5876e24130b45aaa0c00001d": "def interpreter(tape):\n    memory, ptr, output = {0: 0}, 0, \"\"\n    for command in tape:\n    if command == \">\":\n        ptr += 1\n    elif command == \"<\":\n        ptr -= 1\n    elif command == \"!\":\n        memory[len(memory)] = 0\n    elif command == \"*\":\n        output += chr(memory . get(ptr, 0) % 256)\n    elif ptr in memory:\n    if command == \"+\":\n        memory[ptr] += 1\n    elif command == \"-\":\n        memory[ptr] -= 1\n    elif command == \"/\":\n        memory[ptr] = 0\n    return output\n",
  "531963f82dde6fc8c800048a": "def solved(s):\r\n    x = len(s) / / 2\r\n    return '' . join(sorted(s[: x] + s[x + (len(s) % 2):]))\r\n",
  "5894045b8a8a230d0c000077": "def avoid_obstacles(arr):\r\n    n = 2\r\n    while 1:\r\n    if all([x % n for x in arr]):\r\n        return n\r\n    n += 1\r\n",
  "57f891255cae44b2e10000c5": "D, R = {}, [[], [], []]\r\nfor i in range(10000):\r\n    D[i] = D . get(i - 1, 0) + i\r\n    R[D[i] % 3]. append(D[i])\r\n\r\n    def same_col_seq(val, k, col):\r\n    r = ['blue', 'red', 'yellow']. index(col)\r\n    return [e for e in R[r] if e > val][: k]\r\n",
  "582c5382f000e535100001a7": "def linked_list_from_string(s):\r\n    head = None\r\n    for i in s . split('->')[- 2:: - 1]:\r\n    head = Node(int(i), head)\r\n    return head\r\n",
  "56c04261c3fcf33f2d000534": "from scipy . special import zeta, zetac\n\n\ndef doubles(maxk, maxn):\n    return sum((zetac(2 * k) - zeta(2 * k, 2 + maxn)) / k for k in range(1, maxk + 1))\n",
  "58528e9e22555d8d33000163": "from datetime import datetime, time, timedelta\r\n\r\n\r\ndef minutes_to_midnight(d):\r\n    next_day = datetime . combine(d + timedelta(days=1), time . min)\r\n    remain = next_day - d\r\n    minutes = round(remain . seconds / 60)\r\n    return f' { minutes } minutes'\r\n",
  "5837fd7d44ff282acd000157": "from datetime import datetime as dt\r\n\r\n\r\ndef count_days(d):\r\n    days = round((d - dt . now()). total_seconds() / 86400)\r\n    return ['Today is the day!', '%d days' % days, 'The day is in the past!'][(days > 0) - (days < 0)]\r\n",
  "5857e8bb9948644aa1000246": "def determine_time(arr):\r\n    total = 0\r\n    for time in arr:\r\n    h, m, s = map(int, time . split(\":\"))\r\n    total += h * 60 * 60 + m * 60 + s\r\n    return total <= 24 * 60 * 60\r\n",
  "52f51502053125863c0009d7": "def calculate_optimal_fare(d, t, taxi, r, walk):\n    h = t / 60.0\n    if walk * h >= d:\n        return \"0.00\"\n    if taxi * h < d:\n        return \"Won't make it!\"\n    return \"%.2f\" % (r * taxi * (d - walk * h) / (taxi - walk))\n",
  "58c2158ec7df54a39d00015c": "def moment_of_time_in_space(moment):\r\n    d = sum(int(c) if c in '123456789' else - 1 for c in moment)\r\n    return [d < 0, d == 0, d > 0]\r\n",
  "583f158ea20cfcbeb400000a": "def arithmetic(a, b, operator):\r\n    return {\r\n        'add': a + b,\r\n        'subtract': a - b,\r\n        'multiply': a * b,\r\n        'divide': a / b,\r\n    }[operator]\r\n",
  "53368a47e38700bd8300030d": "def namelist(names):\r\n    if len(names) > 1:\r\n    return '{} & {}' . format(', ' . join(name['name'] for name in names[: - 1]),\r\n                              names[- 1]['name'])\r\n    elif names:\r\n    return names[0]['name']\r\n    else:\r\n    return ''\r\n",
  "56060ba7b02b967eb1000013": "# The global variable holding the matching numbers.\r\n# It will increase in size as more numbers are found while the program is running continuously.\r\nNUMS = [6, 28, 30, 84, 102]\r\n\r\n\r\ndef divisors(n):\r\n    d = {1, n}\r\n    for k in range(2, int(n * * 0.5) + 1):\r\n    if n % k == 0:\r\n    d . add(k)\r\n    d . add(n / / k)\r\n    return d\r\n    def int_cube_sum_div(n):\r\n    global NUMS\r\n    while len(NUMS) < n:\r\n    a = NUMS[- 1] + 1\r\n    while pow(a, 3) % sum(divisors(a)):\r\n    a += 1\r\n    NUMS . append(a)\r\n    return NUMS[n - 1]\r\n",
  "5603a9585480c94bd5000073": "MEMO = []\r\n\r\n\r\ndef sum_dif_rev(n):\r\n    i = MEMO[- 1] if MEMO else 0\r\n    while len(MEMO) < n:\r\n    i += 1\r\n    r = int(str(i)[:: - 1])\r\n    if i % 10 and r != i and (i + r) % abs(r - i) == 0:\r\n    MEMO . append(i)\r\n\r\n    return MEMO[n - 1]\r\n",
  "5612ab201830eb000f0000c0": "# key - number of divisors: value - the smallest number with the given number of divisors.\n# 'nr' indicates the number that the search was performed to\n# When the program is running continuously, the dictionary grows with new values.\nCACHE = {'nr': 2, 2: 2}\n\n\ndef divisors(n):\n    d = {1, n}\n    for k in range(2, int(n * * 0.5) + 1):\n    if n % k == 0:\n    d . add(k)\n    d . add(n / / k)\n    return d\n    def find_min_num(num_div):\n    global CACHE\n    # If the number of divisors you are looking for has not yet been found.\n    while num_div not in CACHE:\n       # Start searching from this number as the previous numbers have already been checked.\n    nr = CACHE['nr'] + 1\n    while True:\n     # The number of divisors of the currently checked number.\n    d = len(divisors(nr))\n    if d == num_div:  # If the required number of divisors is found\n       # add it to CACHE so you don't have to search for it next time.\n    CACHE[d] = nr\n    break\n    if d not in CACHE:  # If the number of divisors does not yet exist in CACHE\n       # add it to CACHE so you don't have to search for it next time.\n    CACHE[d] = nr\n    nr += 1  # Check the next number.\n    # Update the number from which the next search will start.\n    CACHE['nr'] = nr\n    return CACHE[num_div]\n",
  "5512e5662b34d88e44000060": "def find_missing_number(sequence):\r\n    try:\r\n    numbers = sorted([int(x) for x in sequence . split()])\r\n    for i in range(1, len(numbers) + 1):\r\n    if i not in numbers:\r\n    return i\r\n    except ValueError:\r\n    return 1\r\n    return 0\r\n",
  "536a9f94021a76ef0f00052f": "def reverse(str):\r\n    return \"\" if not str else str[- 1] + reverse(str[: - 1])\r\n",
  "57bf7fae3b3164dcac000352": "def find_primes_sextuplet(limit):\r\n    for p in [7, 97, 16057, 19417, 43777, 1091257, 1615837, 1954357, 2822707, 2839927, 3243337, 3400207, 6005887]:\r\n    if p * 6 + 48 > limit:\r\n    return [p, p + 4, p + 6, p + 10, p + 12, p + 16]\r\n",
  "580777ee2e14accd9f000165": "def skiponacci(n):\r\n    fib = [1, 1][: n]\r\n    for _ in range(n - 2):\r\n    fib . append(sum(fib[- 2:]))\r\n    return \" \" . join(str(n) if i % 2 else \"skip\" for i, n in enumerate(fib, 1))\r\n",
  "56ff6a70e1a63ccdfa0001b1": "def array_madness(a, b):\r\n    return sum(x * * 2 for x in a) > sum(x * * 3 for x in b)\r\n",
  "588817db5fb13af14a000020": "import re\n\n\ndef timed_reading(max_length, text):\n    return sum(len(i) <= max_length for i in re . findall('\\w+', text))\n",
  "540afbe2dc9f615d5e000425": "import math\r\n\r\n\r\nclass Sudoku (object):\r\n    def __init__(self, board):\r\n    self . board = board\r\n    def is_valid(self):\r\n    if not isinstance(self . board, list):\r\n    return False\r\n    n = len(self . board)\r\n    rootN = int(round(math . sqrt(n)))\r\n    if rootN * rootN != n:\r\n    return False\r\n\r\n    def isValidRow(r): return (isinstance(r, list) and\r\n                               len(r) == n and\r\n                               all(map(lambda x: type(x) == int, r)))\r\n    if not all(map(isValidRow, self . board)):\r\n    return False\r\n    oneToN = set(range(1, n + 1))\r\n    def isOneToN(l): return set(l) == oneToN\r\n    tranpose = [[self . board[j][i] for i in range(n)] for j in range(n)]\r\n    squares = [[self . board[p + x][q + y] for x in range(rootN)\r\n                for y in range(rootN)]\r\n               for p in range(0, n, rootN)\r\n               for q in range(0, n, rootN)]\r\n    return (all(map(isOneToN, self . board)) and\r\n            all(map(isOneToN, tranpose)) and\r\n            all(map(isOneToN, squares)))\r\n",
  "5873b2010565844b9100026d": "def one_two_three(n):\r\n    x, y = divmod(n, 9)\r\n    return [* map(int, (\"9\" * x + str(y) * (y > 0), \"1\" * n))] if n else [0] * 2\r\n",
  "5886e082a836a691340000c3": "def rectangle_rotation(a, b):\n    a / /= 2 * * 0.5\n    b / /= 2 * * 0.5\n    r = (a + 1) * (b + 1) + a * b\n    return r + r % 2 - 1\n",
  "53db96041f1a7d32dc0004d2": "import numpy as np\r\n\r\n\r\ndef done_or_not(aboard):  # board[i][j]\r\n    board = np . array(aboard)\r\n\r\n    rows = [board[i, :] for i in range(9)]\r\n    cols = [board[:, j] for j in range(9)]\r\n    sqrs = [board[i: i + 3, j: j + 3]. flatten() for i in [0, 3, 6]\r\n            for j in [0, 3, 6]]\r\n\r\n    for view in np . vstack((rows, cols, sqrs)):\r\n    if len(np . unique(view)) != 9:\r\n    return 'Try again!'\r\n    return 'Finished!'\r\n",
  "551f37452ff852b7bd000139": "def add_binary(a, b):\r\n    return bin(a + b)[2:]\r\n",
  "55b4d87a3766d9873a0000d4": "def howmuch(m, n):\r\n    return [['M: %d' % i, 'B: %d' % (i / 7), 'C: %d' % (i / 9)] for i in range(min(m, n), max(m, n) + 1) if i % 7 == 2 and i % 9 == 1]\r\n",
  "54d81488b981293527000c8f": "def sum_pairs(lst, s):\r\n    cache = set()\r\n    for i in lst:\r\n    if s - i in cache:\r\n    return [s - i, i]\r\n    cache . add(i)\r\n",
  "55908aad6620c066bc00002a": "def xo(s):\r\n    s = s . lower()\r\n    return s . count('x') == s . count('o')\r\n",
  "588468f3b3d02cf67b0005cd": "def addition_without_carrying(a, b):\n    r = 0\n    m = 1\n    while a + b:\n    r += (a + b) % 10 * m\n    m *= 10\n    a / /= 10\n    b / /= 10\n    return r\n",
  "54e6533c92449cc251001667": "def unique_in_order(iterable):\r\n    result = []\r\n    prev = None\r\n    for char in iterable[0:]:\r\n    if char != prev:\r\n    result . append(char)\r\n    prev = char\r\n    return result\r\n",
  "5886faac54a7111c21000072": "import re\n\n\ndef is_mac_48_address(address):\n    return bool(re . match(\"^([0-9A-F]{2}[-]){5}([0-9A-F]{2})$\", address . upper()))\n",
  "581e1d083a4820eb4f00004f": "def mod256_without_mod(number):\r\n    return number & 255\r\n",
  "5863f1c8b359c4dd4e000001": "import re\r\nPATTERN = re . compile(r'(\\d+)g (\\w+)')\r\nCALORIES_PER_100g = {typ: sum(\r\n    m * cal for m, cal in zip(masses, [4, 4, 9])) for typ, masses in food . items()}\r\n\r\n\r\ndef formatAns(n): return str(round(n, 2)) if n % 1 else str(int(n))\r\n\r\n\r\ndef bulk(arr):\r\n    prots, cals = 0, 0\r\n    for plate in arr:\r\n    for mass, typ in PATTERN . findall(plate):\r\n    prots += int(mass) * food[typ][0] / 100\r\n    cals += int(mass) * CALORIES_PER_100g[typ] / 100\r\n    return 'Total proteins: {} grams, Total calories: {}' . format(formatAns(prots), formatAns(cals))\r\n",
  "58953a5a41c97914d7000070": "import numpy as np\r\nfrom scipy import signal\r\nk = np . array([[0, - 1, 0], [- 1, 4, - 1], [0, - 1, 0]])\r\n\r\n\r\ndef polygon_perimeter(m):\r\n    return signal . convolve2d(np . array(m, int), k, mode='same'). clip(0). sum()\r\n",
  "57873ab5e55533a2890000c7": "def time_correct(t):\r\n    if not t:\r\n        return t\r\n    try:\r\n    h, m, s = map(int, t . split(':'))\r\n    if s >= 60:\r\n        s -= 60\r\n        m += 1\r\n    if m >= 60:\r\n        m -= 60\r\n        h += 1\r\n    return '%02d:%02d:%02d' % (h % 24, m, s)\r\n    except:\r\n        pass\r\n",
  "58475cce273e5560f40000fa": "def approx_root(n):\r\n    base = int(n * * 0.5)\r\n    return round(base + (n - base * * 2) / ((base + 1) * * 2 - base * * 2), 2)\r\n",
  "573182c405d14db0da00064e": "def primes(n):\r\n    primefac = []\r\n    d = 2\r\n    while d * d <= n:\r\n    while (n % d) == 0:\r\n    primefac . append(d)\r\n    n / /= d\r\n    d += 1\r\n    if n > 1:\r\n    primefac . append(n)\r\n    return len(primefac)\r\n\r\n    def consec_kprimes(k, arr):\r\n    return sum(primes(arr[i]) == primes(arr[i + 1]) == k for i in range(len(arr) - 1))\r\n",
  "58a672d6426bf38be4000057": "def middle_point(x1, y1, z1, x2, y2, z2, x3, y3, z3):\r\n    return sorted(((x1, y1, z1, 1), (x2, y2, z2, 2), (x3, y3, z3, 3)))[1][3]\r\n",
  "582b0d73c190130d550000c6": "def factors(n):\r\n    sq = [a for a in range(2, n + 1) if not n % (a * * 2)]\r\n    cb = [b for b in range(2, n + 1) if not n % (b * * 3)]\r\n    return [sq, cb]\r\n",
  "5850e85c6e997bddd300005d": "def simplify(n):\r\n    for d in range(int(n * * .5), 0, - 1):\r\n    if not n % d * * 2:\r\n        break\r\n    if d * d == n:\r\n        return '%d' % d\r\n    elif d == 1:\r\n        return 'sqrt %d' % n\r\n    else:\r\n        return '%d sqrt %d' % (d, n / / d * * 2)\r\n\r\n    def desimplify(s):\r\n    x, _, y = s . partition('sqrt')\r\n    return int(x or '1') * * 2 * int(y or '1')\r\n",
  "55955a48a4e9c1a77500005a": "def greet(name):\r\n    return f\"hello { name } !\" if name else None\r\n",
  "58a848258a6909dd35000003": "def mastermind(game):\r\n    colors = [\"Red\", \"Blue\", \"Green\", \"Orange\", \"Purple\", \"Yellow\"]\r\n    a = random . sample(colors, 4)\r\n    return game . check(a)\r\n",
  "554f76dca89983cc400000bb": "import math\r\n\r\n\r\ndef sol_equa(n):\r\n    res = []\r\n    for i in range(1, int(math . sqrt(n)) + 1):\r\n    if n % i == 0:\r\n    j = n / / i\r\n    if (i + j) % 2 == 0 and (j - i) % 4 == 0:\r\n    x = (i + j) / / 2\r\n    y = (j - i) / / 4\r\n    res . append([x, y])\r\n\r\n    return res\r\n",
  "561e9c843a2ef5a40c0000a4": "def gap(g, m, n):\r\n    previous_prime = n\r\n    for i in range(m, n + 1):\r\n    if is_prime(i):\r\n    if i - previous_prime == g:\r\n    return [previous_prime, i]\r\n    previous_prime = i\r\n    return None\r\n    def is_prime(n):\r\n    for i in range(2, int(n * * .5 + 1)):\r\n    if n % i == 0:\r\n    return False\r\n    return True\r\n",
  "5613d06cee1e7da6d5000055": "import math\r\n\r\n\r\ndef isPrime(n):\r\n    if n <= 1:\r\n    return False\r\n    for i in range(2, int(math . sqrt(n) + 1)):\r\n    if n % i == 0:\r\n    return False\r\n    return True\r\n    def step(g, m, n):\r\n    if m >= n:\r\n    return []\r\n    else:\r\n    for i in range(m, n + 1 - g):\r\n    if isPrime(i) and isPrime(i + g):\r\n    return [i, i + g]\r\n",
  "58be35e9e36224a33f000023": "class Allergies (object):\r\n    ALLERGY_SCORES = {\r\n        'eggs': 1,\r\n        'peanuts': 2,\r\n        'shellfish': 4,\r\n        'strawberries': 8,\r\n        'tomatoes': 16,\r\n        'chocolate': 32,\r\n        'pollen': 64,\r\n        'cats': 128\r\n    }\r\n\r\n    def __init__(self, score):\r\n    self . allergicTo = sorted(\r\n        allergen for allergen, v in self . ALLERGY_SCORES . items() if v & score)\r\n    self . score = score\r\n    def is_allergic_to(self, allergen):\r\n    return self . ALLERGY_SCORES[allergen] & self . score\r\n    def allergies(self):\r\n    return self . allergicTo\r\n",
  "58ca7afc92ce34dfa50001fa": "from datetime import datetime\r\nimport hashlib\r\n\r\n\r\ndef geohash(dow, date=datetime . utcnow()):\r\n    dow = \"%.2f\" % dow\r\n    s = str(date)[: 10] + \"-\" + str(dow)\r\n    m = hashlib . md5(s . encode('utf-8')). hexdigest()\r\n    m1, m2 = float . fromhex('0.' + m[: 16]), float . fromhex('0.' + m[- 16:])\r\n    return [round(m1, 6), round(m2, 6)]\r\n",
  "588453ea56daa4af920000ca": "def array_packing(arr):\r\n    return int . from_bytes(arr, 'little')\r\n",
  "577b9960df78c19bca00007e": "def find_digit(num, nth):\r\n    if nth <= 0:\r\n    return - 1\r\n    try:\r\n    return int(str(num). lstrip('-')[- nth])\r\n    except IndexError:\r\n    return 0\r\n",
  "52608f5345d4a19bed000b31": "import re\r\nNEG, DOT, _, * DIGS = \"\u8d1f\u70b9 \u96f6\u4e00\u4e8c\u4e09\u56db\u4e94\u516d\u4e03\u516b\u4e5d\"\r\n POWS = \" \u5341 \u767e \u5343 \u4e07\" . split(' ')\r\n  NUMS = {str(i): c for i, c in enumerate(DIGS)}\r\n   for n in range(10):\r\n        NUMS[str(n + 10)] = POWS[1] + DIGS[n] * bool(n)\r\n\r\n    def to_chinese_numeral(n):\r\n    ss = str(abs(n)). split('.')\r\n    return NEG * (n < 0) + parse (ss [0 ]) + (len (ss ) > 1 and decimals (ss [1 ]) or '' )\r\n\r\n    def decimals(digs): return DOT + '' . join(NUMS [d] for d in digs)\r\n\r\n    def parse(s):\r\n    if s in NUMS:\r\n        return NUMS[s]\r\n    s = '' . join (reversed ([NUMS [d ] + POWS [i ] * (d != '0' ) for i , d in enumerate (reversed (s )) ]))\r\n    return re . sub(f'\u96f6+$|(?<=\u96f6)\u96f6+', '', s)\r\n",
  "57faf12b21c84b5ba30001b0": "def remove(s):\r\n    return s . replace(\"!\", \"\") + \"!\"\r\n",
  "55c4eb777e07c13528000021": "PRIMES = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\r\n          89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179,\r\n          181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251]\r\n\r\n\r\ndef find_multiplicity(n, p):\r\n    m = 0\r\n    while n > 1 and n % p == 0:\r\n    m, n = m + 1, n / / p\r\n    return m\r\n    def find_number_factors(n, p):\r\n    number, d = 0, p\r\n    while d <= n:\r\n    number, d = number + n / / d, d * p\r\n    return number\r\n    def zeroes(base, number):\r\n\r\n    def prime_decomposition(n): return [(q, m) for q, m in [(\r\n        p, find_multiplicity(n, p)) for p in PRIMES] if m > 0]\r\n    return min(find_number_factors(number, p) / / m for p, m in prime_decomposition(base))\r\n",
  "553e8b195b853c6db4000048": "def has_unique_chars(s):\r\n    return len(s) == len(set(s))\r\n",
  "568dc014440f03b13900001d": "d = {\r\n    \"jabroni\": \"Patron Tequila\",\r\n    \"school counselor\": \"Anything with Alcohol\",\r\n    \"programmer\": \"Hipster Craft Beer\",\r\n    \"bike gang member\": \"Moonshine\",\r\n    \"politician\": \"Your tax dollars\",\r\n    \"rapper\": \"Cristal\"\r\n}\r\n\r\n\r\ndef get_drink_by_profession(s):\r\n    return d . get(s . lower(), \"Beer\")\r\n",
  "56bcaedfcf6b7f2125001118": "def html_special_chars(data):\r\n    symbols = {'<': '&lt;', '>': '&gt;', '\"': '&quot;', '&': '&amp;'}\r\n    return \"\" . join(symbols . get(x, x) for x in data)\r\n",
  "559f80b87fa8512e3e0000f5": "def odds(values):\r\n    return [i for i in values if i % 2]\r\n",
  "55d1d06def244b18c100007c": "def update_quality(items):\r\n    for i in items:\r\n    name = i . name . lower()\r\n    if \"sulfuras\" in name:\r\n    continue\r\n    i . sell_in -= 1\r\n    if \"aged brie\" in name:\r\n    deg = 1\r\n    elif \"backstage passes\" in name:\r\n    deg = 1 if i . sell_in > 10 else 2 if i . sell_in > 5 else 3 if i . sell_in >= 0 else - i . quality\r\n    else:\r\n    deg = (- 2 if i . sell_in < 0 else - 1) * (2 if \"conjured\" in name else 1)\r\n    i . quality = max(0, min(max(50, i . quality), i . quality + deg))\r\n",
  "55d3b1f2c1b2f0d3470000a9": "def highest_age(g1, g2):\r\n    d = {}\r\n    for p in g1 + g2:\r\n    name, age = p[\"name\"], p[\"age\"]\r\n    d[name] = d . setdefault(name, 0) + age\r\n    return max(sorted(d . keys()), key=d . __getitem__)\r\n",
  "526dbd6c8c0eb53254000110": "def alphanumeric(string):\r\n    return string . isalnum()\r\n",
  "52cd53948d673a6e66000576": "def search(titles, term):\r\n    return list(filter(lambda title: term in title . lower(), titles))\r\n",
  "52f3eeb274c7e693a600288e": "def insert_at_indexes(phrase, word, indexes):\r\n    for i in indexes[:: - 1]:\r\n    phrase = phrase[: i] + word + phrase[i:]\r\n    return phrase\r\n",
  "5844a422cbd2279a0c000281": "from functools import reduce\r\nfrom operator import mul\r\n\r\n\r\ndef multi(l_st):\r\n    return reduce(mul, l_st)\r\n    def add(l_st):\r\n    return sum(l_st)\r\n    def reverse(s):\r\n    return s[:: - 1]\r\n",
  "55d2603d506a40e162000056": "def calculate_total(team1, team2):\r\n    return sum(team1) > sum(team2)\r\n",
  "52e9aa89b5acdd26d3000127": "# fix this code!\ndef spam(number):\n    return 'hue' * number\n",
  "56368f37d464c0a43c00007f": "def calculate(a, o, b):\r\n    if o == \"+\":\r\n    return a + b\r\n    if o == \"-\":\r\n    return a - b\r\n    if o == \"*\":\r\n    return a * b\r\n    if o == \"/\" and b != 0:\r\n    return a / b\r\n    # one-liner\r\n    # return [a+b, a-b, a*b, a/b if b else None, None][\"+-*/\".find(o)]\r\n",
  "55c7f90ac8025ebee1000062": "def sort_array(value):\r\n    return \"\" . join(sorted(value))\r\n",
  "55cd4ce59382498cbd000080": "class List:\r\n    def __init__(self, list_type):\r\n    self . type = list_type\r\n    self . items = []\r\n    self . count = 0\r\n    def add(self, item):\r\n    if type(item) != self . type:\r\n    return \"This item is not of type: {}\" . format(self . type . __name__)\r\n    self . items += [item]\r\n    self . count += 1\r\n    return self\r\n",
  "57158fb92ad763bb180004e7": "def rain_amount(mm):\r\n    if mm < 40:\r\n    return \"You need to give your plant \" + str(40 - mm) + \"mm of water\"\r\n    else:\r\n    return \"Your plant has had more than enough water for today!\"\r\n",
  "54fdaa4a50f167b5c000005f": "def get_status(is_busy):\r\n    status = \"busy\" if is_busy else \"available\"\r\n    return {\"status\": status}\r\n",
  "5708f682c69b48047b000e07": "def multiply(n):\r\n    return n * 5 * * len(str(abs(n)))\r\n",
  "56aed32a154d33a1f3000018": "def my_first_kata(a, b):\r\n    # your code here\r\n    if type(a) == int and type(b) == int:\r\n    return a % b + b % a\r\n    else:\r\n    return False\r\n",
  "56f695399400f5d9ef000af5": "def correct_tail(body, tail):\r\n    return body . endswith(tail)\r\n",
  "571d42206414b103dc0006a1": "def arr(n=0):\r\n    return list(range(n))\r\n",
  "57e1e61ba396b3727c000251": "def string_clean(s):\r\n    return '' . join(x for x in s if not x . isdigit())\r\n",
  "5626b561280a42ecc50000d1": "def dig_pow(n):\r\n    return sum(int(x) * * y for y, x in enumerate(str(n), 1))\r\n\r\n    def sum_dig_pow(a, b):\r\n    return [x for x in range(a, b + 1) if x == dig_pow(x)]\r\n",
  "57f609022f4d534f05000024": "def stray(arr):\r\n    for x in arr:\r\n    if arr . count(x) == 1:\r\n    return x\r\n",
  "57a386117cb1f31890000039": "def parse_float(string):\r\n    try:\r\n    return float(string)\r\n    except:\r\n    return None\r\n",
  "57ab2d6072292dbf7c000039": "def correct_polish_letters(s):\r\n    return s . translate(str . maketrans(\"\u0105\u0107\u0119\u0142\u0144\u00f3\u015b\u017a\u017c\", \"acelnoszz\"))\r\n",
  "563c13853b07a8f17c000022": "from datetime import datetime\n\n\ndef is_today(date):\n    return date . date() == datetime . today(). date()\n",
  "54fe05c4762e2e3047000add": "class Ship:\r\n    def __init__(self, draft, crew):\r\n    self . draft = draft\r\n    self . crew = crew\r\n    # Your code here\r\n    def is_worth_it(self):\r\n    return self . draft - self . crew * 1.5 > 20\r\n",
  "56b0ff16d4aa33e5bb00008e": "def shorten_to_date(long_date):\r\n    return long_date . split(',')[0]\r\n",
  "578a8a01e9fd1549e50001f1": "def period_is_late(last, today, cycle_length):\r\n    return (today - last). days > cycle_length\r\n",
  "55a144eff5124e546400005a": "class Person:\r\n    def __init__(self, name, age):\r\n    self . name = name\r\n    self . age = age\r\n    @ property\r\n    def info(self):\r\n    return '{}s age is {}' . format(self . name, self . age)\r\n",
  "55e4c52ad58df7509c00007e": "def validate(username, password):\r\n    database = Database()\r\n    return database . login(username, password)\r\n",
  "56019d3b2c39ccde76000086": "def do_turn():\r\n    roll_dice()\r\n    move()\r\n    combat()\r\n    get_coins()\r\n    buy_health()\r\n    print_status()\r\n",
  "56d6c333c9ae3fc32800070f": "def year_days(year):\r\n    days = 365\r\n    if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\r\n    days += 1\r\n    return \"%d has %d days\" % (year, days)\r\n",
  "581c06b95cfa838603000435": "from bs4 import BeautifulSoup\r\nimport requests\r\nURL = 'https://www.codewars.com/users/leaderboard'\r\n\r\n\r\nclass solution:\r\n    class user:\r\n    def __init__(self, name, clan, honor):\r\n    self . name = name\r\n    self . clan = clan\r\n    self . honor = honor\r\n    class FuckYourIndex (list):\r\n    def __init__(self, L):\r\n    super(). __init__(L)\r\n\r\n    def __getitem__(self, i):\r\n    return list . __getitem__(self, i - 1)\r\n\r\n    def __init__(self):\r\n    SOURCE = requests . get(URL). text\r\n    soup = BeautifulSoup(SOURCE, 'html.parser')\r\n    self . position = self . FuckYourIndex(\r\n        [solution . get_user(user) for user in soup . find(\"tr\"). next_siblings])\r\n\r\n    @ classmethod\r\n    def get_user(cls, user):\r\n    name = user['data-username']\r\n    clan, honor = (tag . text for tag in user . find(\r\n        \"td\", {\"class\", \"is-big\"}). next_siblings)\r\n    return cls . user(name, clan, int(honor . replace(',', '')))\r\n",
  "56e195d02bb22479e50016af": "def pernicious(n):\r\n    return [x for x in range(int(n) + 1) if bin(x). count(\"1\") in [2, 3, 5, 7, 11, 13]] or \"No pernicious numbers\"\r\n",
  "5838e2978bbc04b7cd000008": "def ten_green_bottles(n):\r\n    numbers = {10: 'ten', 9: 'nine', 8: 'eight', 7: 'seven', 6: 'six', 5: 'five',\r\n               4: 'four', 3: 'three', 2: 'two', 1: 'one', 0: 'no'}\r\n    res = []\r\n    for x in range(n, 0, - 1):\r\n    s = f\"\"\" { numbers [ x ]. capitalize ()} green bottle { 's' if x > 1 else '' } hanging on the wall, \r\n{ numbers [ x ]. capitalize ()} green bottle { 's' if x > 1 else '' } hanging on the wall, \r\n{ 'And if' if x > 1 else \"If that\" } one green bottle should accidentally fall, \r\n There'll be { numbers [ x - 1 ]} green bottle { '' if x - 1 == 1 else 's' } hanging on the wall. \r\n \"\"\"\r\n    res . append(s)\r\n    return '\\n' . join(res)\r\n",
  "577e9095d648a15b800000d4": "def postfix_evaluator(expr):\r\n    stack = []\r\n    operators = \"- + * //\" . split()\r\n    for i in expr . replace(\"/\", \"//\"). split():\r\n    if i in operators:\r\n    y, x = stack . pop(), stack . pop()\r\n    i = str(eval(x + i + y))\r\n    stack . append(i)\r\n    return int(stack[0])\r\n",
  "563c9f8073ccb1464d0000ae": "import itertools as it\r\n\r\n\r\ndef score(word):\r\n    return sum(ord(c) for c in word)\r\n\r\n    WORDS = sorted(sorted(WORD_LIST, key=score), key=len)\r\n\r\n    WORDS = {l: [(s, list(ws)) for s, ws in it . groupby(g, key=score)]\r\n             for l, g in it . groupby(WORDS, key=len)}\r\n\r\n    def find_word(length, max_ssw):\r\n    try:\r\n    return [words for ssw, words in WORDS[length] if ssw <= max_ssw][- 1][- 1]\r\n    except IndexError:\r\n    return None\r\n",
  "555a03f259e2d1788c000077": "from itertools import takewhile\r\nAMINO_ACID = {\r\n    # Phenylalanine\r\n    'UUC': 'F', 'UUU': 'F',\r\n    # Leucine\r\n    'UUA': 'L', 'UUG': 'L', 'CUU': 'L', 'CUC': 'L', 'CUA': 'L', 'CUG': 'L',\r\n    # Isoleucine\r\n    'AUU': 'I', 'AUC': 'I', 'AUA': 'I',\r\n    # Methionine\r\n    'AUG': 'M',\r\n    # Valine\r\n    'GUU': 'V', 'GUC': 'V', 'GUA': 'V', 'GUG': 'V',\r\n    # Serine\r\n    'UCU': 'S', 'UCC': 'S', 'UCA': 'S', 'UCG': 'S', 'AGU': 'S', 'AGC': 'S',\r\n    # Proline\r\n    'CCU': 'P', 'CCC': 'P', 'CCA': 'P', 'CCG': 'P',\r\n    # Threonine\r\n    'ACU': 'T', 'ACC': 'T', 'ACA': 'T', 'ACG': 'T',\r\n    # Alanine\r\n    'GCU': 'A', 'GCC': 'A', 'GCA': 'A', 'GCG': 'A',\r\n    # Tyrosine\r\n    'UAU': 'Y', 'UAC': 'Y',\r\n    # Histidine\r\n    'CAU': 'H', 'CAC': 'H',\r\n    # Glutamine\r\n    'CAA': 'Q', 'CAG': 'Q',\r\n    # Asparagine\r\n    'AAU': 'N', 'AAC': 'N',\r\n    # Lysine\r\n    'AAA': 'K', 'AAG': 'K',\r\n    # Aspartic Acid\r\n    'GAU': 'D', 'GAC': 'D',\r\n    # Glutamic Acid\r\n    'GAA': 'E', 'GAG': 'E',\r\n    # Cystine\r\n    'UGU': 'C', 'UGC': 'C',\r\n    # Tryptophan\r\n    'UGG': 'W',\r\n    # Arginine\r\n    'CGU': 'R', 'CGC': 'R', 'CGA': 'R', 'CGG': 'R', 'AGA': 'R', 'AGG': 'R',\r\n    # Glycine\r\n    'GGU': 'G', 'GGC': 'G', 'GGA': 'G', 'GGG': 'G',\r\n    # Stop codon\r\n    'UAA': 'Stop', 'UGA': 'Stop', 'UAG': 'Stop'\r\n}\r\n\r\n\r\ndef protein(rna):\r\n    xs = (AMINO_ACID[rna[i: i + 3]] for i in range(0, len(rna), 3))\r\n    xs = takewhile(lambda x: x != 'Stop', xs)\r\n    return '' . join(xs)\r\n",
  "57fa537f8b0760c7da000407": "from collections import Counter\r\n\r\n\r\ndef diamonds_and_toads(sentence, fairy):\r\n    c = Counter(sentence)\r\n    d = {'good': ['ruby', 'crystal'], 'evil': ['python', 'squirrel']}\r\n\r\n    return {s: c[s[0]] + 2 * c[s[0]. upper()] for s in d[fairy]}\r\n",
  "5708ef48fe2d018413000776": "from preloaded import codons\r\n\r\n\r\ndef translate_with_frame(dna, frames=[1, 2, 3, - 1, - 2, - 3]):\r\n    rdna = dna . translate(str . maketrans('AGTC', 'TCAG'))[:: - 1]\r\n    return ['' . join(codons . get([rdna, dna][fr > 0][k: k + 3], '') for k in range(abs(fr) - 1, len(dna), 3)) for fr in frames]\r\n",
  "574b1916a3ebd6e4fa0012e7": "def is_opposite(s1, s2):\r\n    return False if not (s1 or s2) else s1 . swapcase() == s2\r\n",
  "588711735ea0b4649e000001": "def numbers_grouping(a):\r\n    return len(set((n - 1) / / 10000 for n in a)) + len(a)\r\n",
  "5888145122fe8620950000f0": "def switch_lights(initial_states):\r\n    states = list(initial_states)\r\n    parity = 0\r\n    for i in reversed(range(len(states))):\r\n    parity ^= initial_states[i]\r\n    states[i] ^= parity\r\n    return states\r\n",
  "561e1e2e6b2e78407d000011": "def closest_pair_tonum(uLim):\r\n    return next((a, b) for a in reversed(range(1, uLim)) for b in reversed(range(1, a))\r\n                if not (a + b) * * .5 % 1 and not (a - b) * * .5 % 1)\r\n",
  "5662b14e0a1fb8320a00005c": "def naughty_or_nice(data):\r\n    nice = 0\r\n    for month in data:\r\n    for day in data[month]:\r\n    nice += 1 if data[month][day] == \"Nice\" else - 1\r\n    return \"Nice!\" if nice >= 0 else \"Naughty!\"\r\n",
  "562dbaf65d4ab6685c0000ed": "def unscramble(scramble):\r\n    return [i for i in word_list if sorted(i) == sorted(scramble)]\r\n",
  "56bd9e4b0d0b64eaf5000819": "def combine(* bs):\r\n    c = {}\r\n    for b in bs:\r\n    for k, v in b . items():\r\n    c[k] = v + c . get(k, 0)\r\n    return c\r\n",
  "56d6b7e43e8186c228000637": "def colour_association(arr):\r\n    return [{k: v} for k, v in arr]\r\n",
  "57cbb9e240e3024aae000b26": "def code_for_same_protein(seq1, seq2):\r\n    return all(codons[seq1[c: c + 3]] == codons[seq2[c: c + 3]] for c in range(0, len(seq1), 3))\r\n",
  "53573877d5493b4d6e00050c": "def capital(capitals):\r\n    return [f\"The capital of { c . get ( 'state' ) or c [ 'country' ]} is { c [ 'capital' ]} \" for c in capitals]\r\n",
  "525fbff0594da0665c0003a3": "def next_gen(cells):\r\n    ng = Life(cells)\r\n    return ng . process(1)\r\n\r\n    class Life:\r\n\r\n    def __init__(self, cells):\r\n    self . cells = cells\r\n    self . neighbor = [(- 1, - 1), (- 1, 1), (1, 1), (1, - 1),\r\n                       (0, 1), (0, - 1), (1, 0), (- 1, 0)]\r\n\r\n    self . _forLife = lambda x, y: self . _express(x, y) in (2, 3)\r\n    self . _forDead = lambda x, y: self . _express(x, y) == 3\r\n    @ property\r\n    def core(self):\r\n    return {(x, y): c for x, e in enumerate(self . cells) for y, c in enumerate(e)}\r\n\r\n    def _express(self, xc, yc):\r\n    core = self . core\r\n    return sum(self . cells[(x + xc)][(y + yc)] for x, y in self . neighbor if core . get(((x + xc), (y + yc))) != None)\r\n\r\n    def process(self, gen):\r\n    for _ in range(gen):\r\n    nextG = [e[::] for e in self . cells]\r\n    for (x, y), c in self . core . items():\r\n    nextG[x][y] = {0: self . _forDead, 1: self . _forLife}. get(c)(x, y)\r\n    self . cells = nextG\r\n    return self . cells\r\n",
  "52996b5c99fdcb5f20000004": "from collections import Counter\r\n\r\n\r\ndef runoff(voters):\r\n    while voters[0]:\r\n    poll = Counter(ballot[0] for ballot in voters)\r\n    winner, maxscore = max(poll . items(), key=lambda x: x[1])\r\n    minscore = min(poll . values())\r\n    if maxscore * 2 > len(voters):\r\n    return winner\r\n    voters = [[c for c in voter if poll[c] > minscore] for voter in voters]\r\n",
  "5384df88aa6fc164bb000e7d": "from heapq import heapify, heappop, heappush\r\n\r\n\r\nclass Player:\r\n    def __init__(self, cakes):\r\n        # We will compute and store all possible states for the game\r\n        # The boolean value indicates if a victory is possible\r\n    self . states = {(1, 1): True, (1, 2): False, (1, 3): False, (2, 1): False}\r\n\r\n    # Using a heap we compute the possible states starting with final states\r\n    h = [(1, 1), (1, 2), (1, 3), (2, 1)]\r\n    heapify(h)\r\n    while h:\r\n    c, l = heappop(h)\r\n    for p in (3, 2, 1):\r\n    if p != l and c + l <= cakes:\r\n    self . states[(c + l, p)] = (not self . states[(c, l)]\r\n                                 ) or self . states . get((c + l, p), False)\r\n    if (c + l, p) not in h:\r\n    heappush(h, (c + l, p))\r\n\r\n    # Decide who moves first\r\n    def firstmove(self, cakes):\r\n        # We move first if there is (at least) one move that makes the adversary lose\r\n    return not all([self . states[(cakes - i, i)] for i in (1, 2, 3) if cakes - i > 0])\r\n\r\n    # Decide your next move\r\n    def move(self, cakes, last):\r\n    for next in (3, 2, 1):\r\n    if next == last or cakes - next <= 0:\r\n        continue  # We can't return last, nor eat the cake !\r\n    if not self . states[(cakes - next, next)]:\r\n        return next\r\n    # I'm not greedy\r\n    return 1 if last != 1 else 2\r\n",
  "53417de006654f4171000587": "def winner(deck_Steve, deck_Josh):\r\n    deck = ['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A']\r\n    Steve = 0\r\n    Josh = 0\r\n    for i in range(len(deck_Steve)):\r\n    if deck . index(deck_Steve[i]) > deck . index(deck_Josh[i]):\r\n    Steve += 1\r\n    elif deck . index(deck_Steve[i]) < deck . index(deck_Josh[i]):\r\n    Josh += 1\r\n    else:\r\n    continue\r\n    if Steve > Josh:\r\n    return \"Steve wins \" + str(Steve) + \" to \" + str(Josh)\r\n    elif Josh > Steve:\r\n    return \"Josh wins \" + str(Josh) + \" to \" + str(Steve)\r\n    else:\r\n    return \"Tie\"\r\n",
  "534ffb35edb1241eda0015fe": "def score_hand(a):\r\n    n = sum(11 if x == \"A\" else 10 if x in \"JQK\" else int(x) for x in a)\r\n    for _ in range(a . count(\"A\")):\r\n    if n > 21:\r\n    n -= 10\r\n    return n\r\n",
  "530045e3c7c0f4d3420001af": "from itertools import groupby\n\n\ndef look_say(n):\n    return int(\"\" . join(f' { len ( list ( v ))}{ k } ' for k, v in groupby(str(n))))\n",
  "5502c9e7b3216ec63c0001aa": "def openOrSenior(data):\r\n    return [\"Senior\" if age >= 55 and handicap >= 8 else \"Open\" for (age, handicap) in data]\r\n",
  "56bb01de0e8b29de50000b19": "Person = {\r\n    '1stname': \"John\",\r\n    'second-name': \"Doe\",\r\n    'email@ddress': \"john.doe@email.com\",\r\n    'male.female': \"M\"\r\n}\r\n",
  "546e416c8e3b6bf82f0002f2": "def bind(lst, func):\r\n    return [y for x in lst for y in func(x)]\r\n",
  "5456812629ccbf311b000078": "from typing import List, Optional\r\n\r\n\r\ndef cycle(d: int, v: List[int], c: int) - > Optional[int]:\r\n    try:\r\n    return v[v . index(c) + d]\r\n    except ValueError:\r\n    return\r\n    except IndexError:\r\n    return v[0]\r\n",
  "56a1c63f3bc6827e13000006": "class Tree:\r\n    ''' v,r,l: value, left, right, \r\n    n: number of occurrences of v \r\n    lt: number of numbers lower than v (in the left subtree only) \r\n    '''\r\n\r\n    def __init__(self, v):\r\n    self . v, self . l, self . r, self . n, self . lt = v, None, None, 1, 0\r\n    def insert(tree, v):\r\n    if not tree:\r\n    return Tree(v), 0\r\n    if v < tree . v:\r\n    tree . lt += 1\r\n    tree . l, n = insert(tree . l, v)\r\n    elif v == tree . v:\r\n    tree . n += 1\r\n    n = tree . lt\r\n    else:\r\n    tree . r, n = insert(tree . r, v)\r\n    n += tree . n + tree . lt\r\n    return tree, n\r\n    def smaller(arr):\r\n    out, tree = [], None\r\n    for v in reversed(arr):\r\n    tree, n = insert(tree, v)\r\n    out . append(n)\r\n    return out[:: - 1]\r\n",
  "56a1c074f87bc2201200002e": "def smaller(arr):\r\n    # Good Luck!\r\n    return [len([a for a in arr[i:] if a < arr[i]]) for i in range(0, len(arr))]\r\n",
  "52cf02cd825aef67070008fa": "def decode(s):\n    decrypted_message = ''\n    i = 0\n    key = \"bdhpF,82QsLirJejtNmzZKgnB3SwTyXG ?.6YIcflxVC5WE94UA1OoD70MkvRuPqHa\"\n    for char in s:\n    i += 1\n    if char not in key:\n    decrypted_message += char\n    continue\n    idx = (key . index(char) - i) % 66\n    decrypted_message += key[idx]\n\n    return decrypted_message\n",
  "5782b5ad202c0ef42f0012cb": "region = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,:;-?! '()$%&\" + '\"'\r\n\r\n\r\ndef decrypt(encrypted_text):\r\n    if not encrypted_text:\r\n        return encrypted_text\r\n    letters = list(encrypted_text)\r\n    letters[0] = region[- (region . index(letters[0]) + 1)]\r\n    for i in range(1, len(letters)):\r\n    letters[i] = region[region . index(\r\n        letters[i - 1]) - region . index(letters[i])]\r\n\r\n    for i in range(1, len(letters), 2):\r\n    letters[i] = letters[i]. swapcase()\r\n\r\n    return \"\" . join(letters)\r\n\r\n    def encrypt(text):\r\n    if not text:\r\n        return text\r\n    letters = list(text)\r\n    for i in range(1, len(letters), 2):\r\n    letters[i] = text[i]. swapcase()\r\n\r\n    swapped = letters[:]\r\n    for i in range(1, len(letters)):\r\n    letters[i] = region[region . index(\r\n        swapped[i - 1]) - region . index(swapped[i])]\r\n\r\n    letters[0] = region[- (region . index(swapped[0]) + 1)]\r\n    return \"\" . join(letters)\r\n",
  "52d1bd3694d26f8d6e0000d3": "class VigenereCipher (object):\r\n    def __init__(self, key: str, alphabet: str):\r\n    self . alphabet = list(alphabet)\r\n    self . key = [alphabet . index(i) for i in key]\r\n\r\n    def encode(self, text):\r\n    return \"\" . join([self . alphabet[(self . alphabet . index(text[i]) + self . key[i % len(self . key)]) % len(self . alphabet)]\r\n                      if text[i] in self . alphabet else text[i] for i in range(len(text))])\r\n\r\n    def decode(self, text):\r\n    return \"\" . join([self . alphabet[(self . alphabet . index(text[i]) - self . key[i % len(self . key)]) % len(self . alphabet)]\r\n                      if text[i] in self . alphabet else text[i] for i in range(len(text))])\r\n",
  "57f14afa5f2f226d7d0000f4": "from collections import deque\r\nKEYBOARD = ['zxcvbnm,.', 'ZXCVBNM<>', 'asdfghjkl',\r\n            'ASDFGHJKL', 'qwertyuiop', 'QWERTYUIOP']\r\n\r\n\r\ndef encrypt(text, encryptKey): return converter(text, encryptKey, 1)\r\n\r\n\r\ndef decrypt(text, encryptKey): return converter(text, encryptKey, - 1)\r\n\r\n\r\ndef converter(text, encryptKey, sens):\r\n    deques = list(map(deque, KEYBOARD))\r\n    for i, deq in enumerate(deques):\r\n    deq . rotate(- sens * (encryptKey / / 10 * * (i / / 2) % 10))\r\n    return text . translate(str . maketrans('' . join(KEYBOARD), '' . join('' . join(deq) for deq in deques)))\r\n",
  "54729e48e1d2a369e00000d3": "def rotation(string, n): return '' . join(chr(ord(c) + n - 26 * (ord(c) + n > 122))\r\n                                          for c in string)\r\n\r\n\r\ndef decode(message, contents): return [rotation(message, n)\r\n                                       for n in range(26)\r\n                                       if contents in rotation(message, n)]\r\n",
  "542a823c909c97da4500055e": "def polybius(text):\r\n\t letmap = {\"A\": \"11\", \"B\": \"12\", \"C\": \"13\", \"D\": \"14\", \"E\": \"15\",\r\n\t\t\t \"F\": \"21\", \"G\": \"22\", \"H\": \"23\", \"I\": \"24\", \"J\": \"24\", \"K\": \"25\",\r\n \"L\": \"31\", \"M\": \"32\", \"N\": \"33\", \"O\": \"34\", \"P\": \"35\",\r\n \"Q\": \"41\", \"R\": \"42\", \"S\": \"43\", \"T\": \"44\", \"U\": \"45\",\r\n \"V\": \"51\", \"W\": \"52\", \"X\": \"53\", \"Y\": \"54\", \"Z\": \"55\", \" \": \" \"}\r\n\t enc = \"\"\r\n for i in range ( 0 , len ( text )):\r\n\t\t enc = enc + letmap [ text [ i ]. upper ()]\r\n\r\n\t return enc",
  "52eb114b2d55f0e69800078d": "class Cipher (object):\r\n    def __init__(self, map1, map2):\r\n    self . enc_key = str . maketrans(map1, map2)\r\n    self . dec_key = str . maketrans(map2, map1)\r\n\r\n    def encode(self, stg):\r\n    return stg . translate(self . enc_key)\r\n\r\n    def decode(self, stg):\r\n    return stg . translate(self . dec_key)\r\n",
  "581e014b55f2c52bb00000f8": "def decipher_word(word):\r\n    i = sum(map(str . isdigit, word))\r\n    decoded = chr(int(word[: i]))\r\n    if len(word) > i + 1:\r\n    decoded += word[- 1]\r\n    if len(word) > i:\r\n    decoded += word[i + 1: - 1] + word[i: i + 1]\r\n    return decoded\r\n    def decipher_this(string):\r\n    return ' ' . join(map(decipher_word, string . split()))\r\n",
  "56fb3cde26cc99c2fd000009": "def encrypter(strng):\r\n    return '' . join(c if c == ' ' else chr(122 - ((ord(c) - 97) + 13) % 26) for c in strng)\r\n",
  "576fac714bc84c312c0000b7": "from string import ascii_letters as az\n\n\ndef caesar_crypto_encode(text, shift):\n    if not text:\n    return ''\n    sh = shift % 52\n    return str . translate(text, str . maketrans(az, az[sh:] + az[: sh])). strip()\n",
  "535c1c80cdbf5011e600030f": "from string import maketrans\r\n\r\n\r\nclass keyword_cipher (object):\r\n    def __init__(self, abc, keyword):\r\n    key_abc = '' . join(sorted(set(keyword), key=keyword . index)) + \\\r\n        '' . join(c for c in abc if c not in keyword)\r\n    self . e_tab = maketrans(abc, key_abc)\r\n    self . d_tab = maketrans(key_abc, abc)\r\n    def encode(self, str):\r\n    return str . translate(self . e_tab)\r\n    def decode(self, str):\r\n    return str . translate(self . d_tab)\r\n",
  "57aa3927e298a757820000a8": "def cypher(s):\r\n    return s . translate(str . maketrans('IREASGTBlzeasbtgoO', '123456781234567900'))\r\n",
  "54207f9677730acd490000d1": "from hashlib import md5\n\n\ndef pass_hash(str):\n    return md5(str . encode()). hexdigest()\n",
  "565b9d6f8139573819000056": "from string import ascii_lowercase as alphabet\n\n\ndef decode(message):\n    return message . translate(str . maketrans(alphabet, alphabet[:: - 1]))\n",
  "573d498eb90ccf20a000002a": "def decode(s):\r\n    return s . translate(str . maketrans(\"1234567890\", \"9876043215\"))\r\n",
  "5862fb364f7ab46270000078": "def encrypt(text, rule):\r\n    return \"\" . join(chr((ord(i) + rule) % 256) for i in text)\r\n",
  "57241cafef90082e270012d8": "abc = \"abcdefghijklmnopqrstuvwxyz\"\r\n\r\n\r\ndef keyword_cipher(s, keyword, key=\"\"):\r\n    for c in keyword + abc:\r\n    if c not in key:\r\n    key += c\r\n    return s . lower(). translate(str . maketrans(abc, key))\r\n",
  "56ff1667cc08cacf4b00171b": "def count_vegetables(s):\r\n    items = s . split()\r\n    veggies = ['cabbage', 'carrot', 'celery', 'cucumber',\r\n               'mushroom', 'onion', 'pepper', 'potato', 'tofu', 'turnip']\r\n    return sorted([(items . count(v), v) for v in veggies], reverse=True)\r\n",
  "56fc55cd1f5a93d68a001d4e": "def stairs_in_20(stairs):\r\n    return sum(sum(day) for day in stairs) * 20\r\n",
  "5701800886306a876a001031": "def lineup_students(s):\r\n    return sorted(s . split(), key=lambda i: (len(i), i), reverse=True)\r\n",
  "571c1e847beb0a8f8900153d": "VALID = {'gravel', 'rock'}\r\n\r\n\r\ndef rake_garden(garden):\r\n    return ' ' . join(a if a in VALID else 'gravel' for a in garden . split())\r\n",
  "57d4ecb8164a67b97c00003c": "def buy_tofu(cost, box):\r\n    box = box . split()\r\n    M, m = box . count('monme'), box . count('mon')\r\n    total = 60 * M + m\r\n    C, c = divmod(cost, 60)\r\n    change = min(C, M)\r\n    if 60 * change + m < cost:\r\n    return 'leaving the market'\r\n    return [m, M, total, change + (C - change) * 60 + c]\r\n",
  "5421c6a2dda52688f6000af8": "def compose(f, g):\r\n    return lambda * x: f(g(* x))\r\n",
  "583952fbc23341c7180002fd": "from collections import Counter\n\n\ndef order_food(lst):\n    return Counter(dev['meal'] for dev in lst)\n",
  "583a8bde28019d615a000035": "def find_odd_names(lst):\r\n    return [x for x in lst if sum(map(ord, x[\"firstName\"])) % 2]\r\n",
  "582dace555a1f4d859000058": "def find_admin(lst, lang):\r\n    return [i for i in lst if i['language'] == lang and i['githubAdmin'] == 'yes']\r\n",
  "582ba36cc1901399a70005fc": "def get_average(lst):\r\n    return round(sum(x[\"age\"] for x in lst) / len(lst))\r\n",
  "5829ca646d02cd1a65000284": "def is_age_diverse(lst):\r\n    arr = list(map(lambda x: x[\"age\"] / / 10, lst))\r\n    return any(x >= 10 for x in arr) and all(i in arr for i in range(1, 10))\r\n",
  "58291fea7ff3f640980000f9": "def all_continents(lst):\r\n    return len(set(x[\"continent\"] for x in lst)) == 5\r\n",
  "582887f7d04efdaae3000090": "def find_senior(lst):\r\n    mage = max(a['age'] for a in lst)\r\n    return [a for a in lst if a['age'] == mage]\r\n",
  "58287977ef8d4451f90001a0": "def is_same_language(lst):\r\n    return len(set(i[\"language\"] for i in lst)) == 1\r\n",
  "5828713ed04efde70e000346": "from collections import Counter\n\n\ndef count_languages(lst):\n    return Counter([d['language'] for d in lst])\n",
  "58279e13c983ca4a2a00002a": "def greet_developers(lst):\r\n    for x in lst:\r\n    x[\"greeting\"] = f\"Hi { x [ 'firstName' ]} , what do you like the most about { x [ 'language' ]} ?\"\r\n    return lst\r\n",
  "5827bc50f524dd029d0005f2": "def get_first_python(users):\r\n    for data in users:\r\n    if data['language'] == 'Python':\r\n    return f' { data [ \"first_name\" ]} , { data [ \"country\" ]} '\r\n    return 'There will be no Python developers'\r\n",
  "5827acd5f524dd029d0005a4": "def is_ruby_coming(lst):\r\n    return any(x[\"language\"] == \"Ruby\" for x in lst)\r\n",
  "582746fa14b3892727000c4f": "def count_developers(lst):\r\n    return sum(x[\"language\"] == \"JavaScript\" and x[\"continent\"] == \"Europe\" for x in lst)\r\n",
  "540de1f0716ab384b4000828": "def spread(func, args):\r\n    return func(* args)\r\n",
  "5413759479ba273f8100003d": "def reverse(lst):\r\n    out = list()\r\n    for i in range(len(lst) - 1, - 1, - 1):\r\n    out . append(lst[i])\r\n    return out\r\n",
  "581e50555f59405743001813": "from typing import Callable\n\n\ndef any_match(head: Node, pred: Callable[[any], bool]) - > bool:\n    while head:\n    if pred(head . data):\n    return True\n    head = head . next\n    return False\n    def all_match(head: Node, pred: Callable[[all], bool]) - > bool:\n    while head:\n    if not pred(head . data):\n    return False\n    head = head . next\n    return True\n",
  "5819081d056d4bdd410004f8": "def count_if(head, func):\r\n    counter = 0\r\n    while head:\r\n    counter += func(head . data)\r\n    head = head . next\r\n    return counter\r\n",
  "581c867a33b9fe732e000076": "def last_index_of(head, search_val):\n    i = 0\n    last = - 1\n    while head:\n    value = head . data\n    if value == search_val:\n    last = i\n    head = head . next\n    i += 1\n    return last\n",
  "581c6b075cfa83852700021f": "def index_of(head, value, idx=0):\r\n    if head is None:\r\n    return - 1\r\n    if head . data == value:\r\n    return idx\r\n    return index_of(head . next, value, idx + 1)\r\n",
  "529a92d9aba78c356b000353": "class Cons:\r\n    def __init__(self, value, tail):\r\n    self . value = value\r\n    self . tail = tail\r\n    def to_array(self, lst=None):\r\n    if lst is None:\r\n        lst = []\r\n    lst . append(self . value)\r\n    if self . tail is not None:\r\n        self . tail . to_array(lst)\r\n    return lst\r\n    @ classmethod\r\n    def from_array(cls, arr):\r\n    head = None\r\n    for x in reversed(arr):\r\n        head = Cons(x, head)\r\n    return head\r\n    def filter(self, fn):\r\n    if fn(self . value):\r\n    return Cons(self . value, self . tail and self . tail . filter(fn))\r\n    else:\r\n    return self . tail and self . tail . filter(fn)\r\n\r\n    def map(self, fn):\r\n    return Cons(fn(self . value), self . tail and self . tail . map(fn))\r\n",
  "58381907f8ac48ae070000de": "from collections import Counter\r\n\r\n\r\ndef is_language_diverse(lst):\r\n    c = Counter(map(lambda x: x[\"language\"], lst)). values()\r\n    return max(c) <= 2 * min(c)\r\n",
  "5268acac0d3f019add000203": "class Automaton (object):\r\n\r\n    def __init__(self):\r\n    self . automata = {('q1', '1'): 'q2', ('q1', '0'): 'q1',\r\n                       ('q2', '0'): 'q3', ('q2', '1'): 'q2',\r\n                       ('q3', '0'): 'q2', ('q3', '1'): 'q2'}\r\n    self . state = \"q1\"\r\n    def read_commands(self, commands):\r\n    for c in commands:\r\n    self . state = self . automata[(self . state, c)]\r\n    return self . state == \"q2\"\r\n    my_automaton = Automaton()\r\n\r\n    # Do anything necessary to set up your automaton's states, q1, q2, and q3.\r\n",
  "52ed326b8df6540e06000029": "levels = [0, 1, 2, 3]\r\nbuttons = ['0', '1', '2', '3']\r\n\r\n\r\ndef goto(level, button):\r\n    if level not in levels or button not in buttons:\r\n    return 0\r\n    else:\r\n    return int(button) - level\r\n",
  "588a00ad70720f2cd9000005": "class Router:\r\n    def __init__(self):\r\n    self . _routes = {}\r\n\r\n    def bind(self, url, method, action):\r\n    self . _routes[(url, method)] = action\r\n    def runRequest(self, url, method):\r\n    return self . _routes . get((url, method), lambda: \"Error 404: Not Found\")()\r\n",
  "53ad7224454985e4e8000eaa": "def Dragon(n):\r\n    if type(n) != int or n < 0:\r\n    return \"\"\r\n    stg, a, b = \"F{a}\", \"{a}R{b}FR\", \"LF{a}L{b}\"\r\n    for _ in range(n):\r\n    stg = stg . format(a=a, b=b)\r\n    return stg . replace(\"{a}\", \"\"). replace(\"{b}\", \"\")\r\n",
  "53ad69892a27079b34000bd9": "from numbers import Number\r\n\r\n\r\ndef Ackermann(m, n):\r\n    if isinstance(n, Number) and isinstance(m, Number):\r\n    if m >= 0 and n >= 0:\r\n    return Ackermann_Aux(m, n)\r\n\r\n    return None\r\n    def Ackermann_Aux(m, n):\r\n\r\n    if m == 0:\r\n    return n + 1\r\n    if m > 0:\r\n    if n == 0:\r\n    return Ackermann_Aux(m - 1, 1)\r\n\r\n    if n > 0:\r\n    return Ackermann_Aux(m - 1, Ackermann_Aux(m, n - 1))\r\n",
  "53a1eac7e0afd3ad3300008b": "def f(n): return n - m(f(n - 1)) if n else 1\ndef m(n): return n - f(m(n - 1)) if n else 0\n",
  "56dbf59b0a10feb08c000227": "def rot_90_counter(s): return list(zip(* s))[:: - 1]\r\n\r\n\r\ndef diag_2_sym(s): return list(zip(* s[:: - 1]))[:: - 1]\r\ndef selfie_diag2_counterclock(s): return (tuple(l) + ('|',) + m + ('|',) + r\r\n                                          for l, m, r in zip(s, diag_2_sym(s), rot_90_counter(s)))\r\n\r\n\r\ndef oper(func, s): return '\\n' . join(map('' . join, func(s . split('\\n'))))\r\n",
  "56dbeec613c2f63be4000be6": "def rot_90_clock(strng):\r\n    return '\\n' . join('' . join(x) for x in zip(* strng . split('\\n')[:: - 1]))\r\n    def diag_1_sym(strng):\r\n    return '\\n' . join('' . join(x) for x in zip(* strng . split('\\n')))\r\n    def selfie_and_diag1(strng):\r\n    return '\\n' . join('|' . join(x) for x in zip(strng . split('\\n'), diag_1_sym(strng). split('\\n')))\r\n    def oper(fct, s):\r\n    return fct(s)\r\n",
  "56f3f6a82010832b02000f38": "def describe_age(a):\r\n    return f\"You're a(n) { a < 13 and 'kid' or a < 18 and 'teenager' or a < 65 and 'adult' or 'elderly' } \"\r\n",
  "56dbe7f113c2f63570000b86": "def rot(string):\r\n    return string[:: - 1]\r\n\r\n    def selfie_and_rot(string):\r\n    s_dot = '\\n' . join([s + '.' * len(s) for s in string . split('\\n')])\r\n    return s_dot + '\\n' + rot(s_dot)\r\n\r\n    def oper(fct, s):\r\n    return fct(s)\r\n",
  "53ea07c9247bc3fcaa00084d": "from itertools import groupby\r\n\r\n\r\ndef look_and_say(data='1', maxlen=5):\r\n    L = []\r\n    for i in range(maxlen):\r\n    data = \"\" . join(str(len(list(g))) + str(n) for n, g in groupby(data))\r\n    L . append(data)\r\n    return L\r\n",
  "549cb9c0c36a02ce2e000156": "import re\r\nimport random\r\n\r\n\r\ndef roll(desc, verbose=False):\r\n    if not isinstance(desc, str):\r\n        return False\r\n    ans = re . findall(r'^(\\d*)d(\\d+)(([+\\-]\\d+)*)$', desc . replace(' ', ''))\r\n\r\n    if len(ans) == 0:\r\n        return False\r\n    dct = {i: eval(v) for i, v in enumerate(ans[0]) if v}\r\n    dices = {'dice': [1 + random . randrange(dct[1]) for i in range(dct . get(0, 1))],\r\n             'modifier': dct . get(2, 0)}\r\n\r\n    return dices if verbose else sum(dices['dice']) + dices['modifier']\r\n",
  "525f3eda17c7cd9f9e000b39": "def identity(a): return a\r\n\r\n\r\ndef zero(f=identity): return f(0)\r\n\r\n\r\ndef one(f=identity): return f(1)\r\n\r\n\r\ndef two(f=identity): return f(2)\r\n\r\n\r\ndef three(f=identity): return f(3)\r\n\r\n\r\ndef four(f=identity): return f(4)\r\n\r\n\r\ndef five(f=identity): return f(5)\r\n\r\n\r\ndef six(f=identity): return f(6)\r\n\r\n\r\ndef seven(f=identity): return f(7)\r\n\r\n\r\ndef eight(f=identity): return f(8)\r\n\r\n\r\ndef nine(f=identity): return f(9)\r\n\r\n\r\ndef plus(b): return lambda a: a + b\r\n\r\n\r\ndef minus(b): return lambda a: a - b\r\n\r\n\r\ndef times(b): return lambda a: a * b\r\ndef divided_by(b): return lambda a: a / / b\r\n",
  "5269452810342858ec000951": "def is_valid_coordinates(coordinates):\r\n    try:\r\n    lat, lng = [abs(float(c))\r\n                for c in coordinates . split(',') if 'e' not in c]\r\n    except ValueError:\r\n    return False\r\n    return lat <= 90 and lng <= 180\r\n",
  "5509609d1dbf20a324000714": "from math import pi, log\nchar = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\n\ndef converter(n, decimals=0, base=pi):\n    if n == 0:\n        return \"0\" if not decimals else \"0.\" + \"0\" * decimals\n    res = \"\" if n > 0 else \"-\"\n    n = abs(n)\n\n    for q in xrange(int(log(n, base)), - decimals - 1, - 1):\n    if q == - 1:\n        res += \".\"\n    res += char[int(n / base * * q)]\n    n %= base * * q\n    return res\n",
  "5296bc77afba8baa690002d7": "def sudoku(P):\r\n\r\n    for row, col in [(r, c) for r in range(9) for c in range(9) if not P[r][c]]:\r\n\r\n    rr, cc = (row / / 3) * 3, (col / / 3) * 3\r\n    use = {1, 2, 3, 4, 5, 6, 7, 8, 9} - ({P[row][c] for c in range(9)} | {P[r][col]\r\n                                         for r in range(9)} | {P[rr + r][cc + c] for r in range(3) for c in range(3)})\r\n\r\n    if len(use) == 1:\r\n    P[row][col] = use . pop()\r\n    return sudoku(P)\r\n    return P\r\n",
  "5888514674b58e929a000036": "import re\n\n\ndef decipher(cipher):\n    return re . sub(r'1?\\d\\d', lambda m: chr(int(m . group())), cipher)\n",
  "56caf4a1145912a5c4000b76": "class Ticket:\r\n    def __eq__(self, _):\r\n    return True\r\n    lottery_ticket = Ticket()\r\n",
  "574c51aa3e4ea6de22001363": "import re\n\n\ndef show_me(name):\n    return bool(re . match(r'(-[A-Z][a-z]+)+$', '-' + name))\n",
  "55e5fa3501fd9c3f4d000050": "class Node (object):\r\n    def __init__(self, data=None):\r\n    self . data = data\r\n    self . next = None\r\n    def merge_sort(list):\r\n    if not list or not list . next:\r\n        return list\r\n    front, back = Node(), Node()\r\n    front_back_split(list, front, back)\r\n    return sorted_merge(merge_sort(front), merge_sort(back))\r\n",
  "55e5253dcd20f821c400008e": "class Node (object):\n    def __init__(self, data=None):\n    self . data = data\n    self . next = None\n    def shuffle_merge(first, second):\n    if not first:\n        return second\n    head = first\n    while second:\n    first . next, first, second = second, second, first . next\n    return head\n",
  "57037ed25a7263ac35000c80": "from urllib . parse import quote\n\n\ndef generate_link(user: str) - > str:\n    return f\"http://www.codewars.com/users/ { quote ( user )} \"\n",
  "515bb423de843ea99400000a": "class PaginationHelper:\r\n    def __init__(self, collection, items_per_page):\r\n    self . _item_count = len(collection)\r\n    self . items_per_page = items_per_page\r\n    def item_count(self):\r\n    return self . _item_count\r\n    def page_count(self):\r\n    return - (self . _item_count / / - self . items_per_page)\r\n\r\n    def page_item_count(self, page_index):\r\n    return min(self . items_per_page, self . _item_count - page_index * self . items_per_page) \\\r\n        if 0 <= page_index < self . page_count() else - 1\r\n\r\n    def page_index(self, item_index):\r\n    return item_index / / self . items_per_page \\\r\n        if 0 <= item_index < self . _item_count else - 1\r\n",
  "55e1d2ba1a3229674d000037": "class Node (object):\n    def __init__(self, data=None):\n    self . data = data\n    self . next = None\n    def front_back_split(source, front, back):\n    if not source or not source . next:\n    raise ValueError\n    if not source . next . next:\n    front . data, front . next = source . data, None\n    back . data, back . next = source . next . data, None\n    return\n    slowhead = fasthead = source\n    front . data, front . next = source . data, source . next\n    while fasthead . next and fasthead . next . next:\n    slowhead = slowhead . next\n    fasthead = fasthead . next . next\n    back . data = slowhead . next . data\n    back . next = slowhead . next . next\n    slowhead . next = None\n",
  "55e725b930957a038a000042": "class Node:\r\n    def __init__(self, data=None, next=None):\r\n    self . data = data\r\n    self . next = next\r\n    def reverse(head, tail=None):\r\n    return reverse(head . next, Node(head . data, tail)) if head else tail\r\n",
  "55e72695870aae78c4000026": "class Node (object):\r\n    def __init__(self, data=None):\r\n    self . data = data\r\n    self . next = None\r\n    def reverse(head):\r\n    rev = None\r\n    current = head\r\n    while current:\r\n    rev = push(rev, current . data)\r\n    current = current . next\r\n    if head:\r\n    head . data = rev . data\r\n    head . next = rev . next\r\n",
  "55d9f257d60c5fd98d00001b": "class Node (object):\n    def __init__(self, data):\n    self . data = data\n    self . next = None\n    def remove_duplicates(head):\n    if head == None:\n    return head\n    current = head\n    next = current . next\n    while next:\n    if current . data == next . data:\n    current . next = current . next . next\n    next = current . next\n    else:\n    current = next\n    next = current . next\n    return head\n",
  "55d0c7ee7c0d30a12b000045": "class Node (object):\r\n    def __init__(self, data, next=None):\r\n    self . data = data\r\n    self . next = next\r\n    def insert_sort(head):\r\n    n, r = head, None\r\n    while n:\r\n    r = sorted_insert(r, n . data)\r\n    n = n . next\r\n    return r\r\n",
  "55da347204760ba494000038": "class Node (object):\r\n    def __init__(self, data, nxt=None):\r\n    self . data, self . next = data, nxt\r\n    class Context (object):\r\n    def __init__(self, source, dest):\r\n    self . source, self . dest = source, dest\r\n    def move_node(source, dest):\r\n    if source is None:\r\n        raise ValueError\r\n    return Context(source . next, Node(source . data, dest))\r\n",
  "55dd5386575839a74f0000a9": "class Node (object):\r\n    def __init__(self, data=None):\r\n    self . data = data\r\n    self . next = None\r\n    class Context (object):\r\n    def __init__(self, first, second):\r\n    self . first = first\r\n    self . second = second\r\n    def alternating_split(head):\r\n    if head is None or head . next is None:\r\n    raise ValueError('Bad input')\r\n\r\n    orig_a, orig_b = a, b = Node(), Node()\r\n\r\n    while head:\r\n    a . next = Node(head . data)\r\n    a = a . next\r\n    a, b = b, a\r\n    head = head . next\r\n    return Context(orig_a . next, orig_b . next)\r\n",
  "55d17ddd6d7868493e000074": "class Node (object):\n    def __init__(self, data):\n    self . data = data\n    self . next = None\n    def last(head):\n    n = head\n    while n and n . next:\n        n = n . next\n    return n\n    def append(listA, listB):\n    if not listA:\n        return listB\n    last(listA). next = listB\n    return listA\n",
  "581e476d5f59408553000a4b": "def length(head):\n    count = 0\n    while head != None:\n    count += 1\n    head = head . next\n    return count\n",
  "58b8c94b7df3f116eb00005b": "def reverse_letter(s):\r\n    return '' . join([i for i in s if i . isalpha()])[:: - 1]\r\n",
  "55cc33e97259667a08000044": "class Node (object):\r\n    def __init__(self, data, nxt=None):\r\n    self . data = data\r\n    self . next = nxt\r\n    def sorted_insert(head, data):\r\n    if not head or data < head . data:\r\n        return Node(data, head)\r\n    else:\r\n    head . next = sorted_insert(head . next, data)\r\n    return head\r\n",
  "55e67e44bf97fa66900000a0": "class Node (object):\r\n    def __init__(self, data=None, nxt=None):\r\n    self . data, self . next = data, nxt\r\n    # For so little text, the cyclomatic complexity here is pretty staggering\r\n    def sorted_intersect(first, second):\r\n    if not first or not second:\r\n        return None\r\n    if first . next and first . data == first . next . data:\r\n        return sorted_intersect(first . next, second)\r\n    if second . next and second . data == second . next . data:\r\n        return sorted_intersect(first, second . next)\r\n    if first . data == second . data:\r\n        return Node(first . data, sorted_intersect(first . next, second . next))\r\n    return sorted_intersect(first . next, second) if first . data < second . data else sorted_intersect(first, second . next)\r\n",
  "55e5d31bf7ca1e44980000a7": "class Node (object):\r\n    def __init__(self, data=None, nxt=None):\r\n    self . data, self . next = data, nxt\r\n    def sorted_merge(first, second):\r\n    if not first:\r\n        return second\r\n    if not second:\r\n        return first\r\n    return Node(first . data, sorted_merge(first . next, second)) if first . data < second . data else Node(second . data, sorted_merge(first, second . next))\r\n",
  "55e7280b40e1c4a06d0000aa": "import itertools\r\n\r\n\r\ndef choose_best_sum(t, k, ls):\r\n    try:\r\n    return max(sum(i) for i in itertools . combinations(ls, k) if sum(i) <= t)\r\n    except:\r\n    return None\r\n",
  "586c0909c1923fdb89002031": "class Connect4 ():\n\n    def __init__(self):\n    self . grid = [[0] * 7 for _ in range(6)]\n    self . player = 1\n    self . finish = False\n    # We only check the possibles moves from the last play, no need to check the whole board\n\n    def check(self, row, col):\n        # Horizontal\n    for j in range(max(0, col - 3), min(4, col + 1)):\n    if self . grid[row][j] == self . grid[row][j + 1] == self . grid[row][j + 2] == self . grid[row][j + 3]:\n    return True\n    # Vertical\n    for i in range(max(0, row - 3), min(3, row + 1)):\n    if self . grid[i][col] == self . grid[i + 1][col] == self . grid[i + 2][col] == self . grid[i + 3][col]:\n    return True\n    # First diagonal\n    for i in range(- min(3, row, col), min(1, 3 - row, 4 - col)):\n    if self . grid[row + i][col + i] == self . grid[row + i + 1][col + i + 1] == self . grid[row + i + 2][col + i + 2] == self . grid[row + i + 3][col + i + 3]:\n    return True\n    # Second diagonal\n    for i in range(- min(3, row, 6 - col), min(1, 3 - row, col - 2)):\n    if self . grid[row + i][col - i] == self . grid[row + i + 1][col - i - 1] == self . grid[row + i + 2][col - i - 2] == self . grid[row + i + 3][col - i - 3]:\n    return True\n    return False\n    def play(self, col):\n    if self . finish:\n        return \"Game has finished!\"\n    row = next((i for i in range(6) if not self . grid[i][col]), None)\n    if row is None:\n        return \"Column full!\"\n    self . grid[row][col] = self . player\n    if self . check(row, col):\n    res = f\"Player { self . player } wins!\"\n    self . finish = True\n    else:\n    res = f\"Player { self . player } has a turn\"\n    self . player = 3 - self . player\n    return res\n",
  "58663693b359c4a6560001d6": "def maze_runner(maze, directions):\n    n = len(maze)\n\n    # find start point\n    for i in range(n):\n    if 2 in maze[i]:\n    row = i\n    col = maze[row]. index(2)\n    break\n    # follow directions\n    for step in directions:\n    if step == \"N\":\n        row -= 1\n    elif step == \"S\":\n        row += 1\n    elif step == \"E\":\n        col += 1\n    elif step == \"W\":\n        col -= 1\n    # check the result\n    if row < 0 or col < 0 or row == n or col == n or maze[row][col] == 1:\n    return \"Dead\"\n    elif maze[row][col] == 3:\n    return \"Finish\"\n    return \"Lost\"\n",
  "534e01fbbb17187c7e0000c6": "def spiralize(size):\r\n\r\n    def on_board(x, y):\r\n    return 0 <= x < size and 0 <= y < size\r\n    def is_one(x, y):\r\n    return on_board(x, y) and spiral[y][x] == 1\r\n    def can_move():\r\n    return on_board(x + dx, y + dy) and not (is_one(x + 2 * dx, y + 2 * dy) or is_one(x + dx - dy, y + dy + dx) or is_one(x + dx + dy, y + dy - dx))\r\n\r\n    spiral = [[0 for x in range(size)] for y in range(size)]\r\n    x, y = - 1, 0\r\n    dx, dy = 1, 0\r\n    turns = 0\r\n    while (turns < 2):\r\n    if can_move():\r\n    x += dx\r\n    y += dy\r\n    spiral[y][x] = 1\r\n    turns = 0\r\n    else:\r\n    dx, dy = - dy, dx\r\n    turns += 1\r\n    return spiral\r\n",
  "58ade2233c9736b01d0000b3": "from string import ascii_lowercase as LOWER, ascii_uppercase as UPPER, digits as DIGITS\r\nfrom random import choice, shuffle, randint\r\n\r\n\r\ndef password_gen():\r\n    pw = [choice(UPPER), choice(LOWER), choice(DIGITS)] + \\\r\n        [choice(UPPER + LOWER + DIGITS) for i in range(randint(3, 17))]\r\n    shuffle(pw)\r\n    return \"\" . join(pw)\r\n",
  "58af4ed8673e88a719000116": "def charCheck(text, mx, spaces):\r\n    text = text if spaces else text . replace(' ', '')\r\n    return [len(text) <= mx, text[: mx]]\r\n",
  "57a62154cf1fa5b25200031e": "def alternateCase(s):\r\n    return s . swapcase()\r\n",
  "57ae18c6e298a7a6d5000c7a": "def replace_all(obj, find, replace):\r\n    if isinstance(obj, str):\r\n    return obj . replace(find, replace)\r\n    elif isinstance(obj, list):\r\n    return [x if x != find else replace for x in obj]\r\n",
  "58b57ae2724e3c63df000006": "def parse_html_color(color):\r\n    color = PRESET_COLORS . get(color . lower(), color)\r\n\r\n    if len(color) == 7:\r\n    r, g, b = (int(color[i: i + 2], 16) for i in range(1, 7, 2))\r\n    else:\r\n    r, g, b = (int(color[i + 1] * 2, 16) for i in range(3))\r\n\r\n    return dict(zip(\"rgb\", (r, g, b)))\r\n",
  "536602df5d0266e7b0000d31": "import re\r\n\r\n\r\nclass Morse:\r\n    @ classmethod\r\n    def encode(self, message):\r\n    bits = \"0000000\" . join([\"000\" . join([Morse . alpha[char] for char in word])\r\n                             for word in message . split(' ')])\r\n    return [int((int(\"{0:0<32s}\" . format(bit32), base=2) + 0x80000000) % 0x100000000 - 0x80000000)\r\n            for bit32 in re . findall(r'.{1,32}', bits)]\r\n\r\n    @ classmethod\r\n    def decode(self, array):\r\n    code = '' . join([\"{0:032b}\" . format((i + 0x100000000) %\r\n                     0x100000000) for i in array]). rstrip('0')\r\n    return ' ' . join(['' . join([Morse . alpha_re[char] for char in word . split(\"000\")])\r\n                       for word in code . split(\"0000000\")])\r\n\r\n    alpha = {\r\n        'A': '10111',\r\n        'B': '111010101',\r\n        'C': '11101011101',\r\n        'D': '1110101',\r\n        'E': '1',\r\n        'F': '101011101',\r\n        'G': '111011101',\r\n        'H': '1010101',\r\n        'I': '101',\r\n        'J': '1011101110111',\r\n        'K': '111010111',\r\n        'L': '101110101',\r\n        'M': '1110111',\r\n        'N': '11101',\r\n        'O': '11101110111',\r\n        'P': '10111011101',\r\n        'Q': '1110111010111',\r\n        'R': '1011101',\r\n        'S': '10101',\r\n        'T': '111',\r\n        'U': '1010111',\r\n        'V': '101010111',\r\n        'W': '101110111',\r\n        'X': '11101010111',\r\n        'Y': '1110101110111',\r\n        'Z': '11101110101',\r\n        '0': '1110111011101110111',\r\n        '1': '10111011101110111',\r\n        '2': '101011101110111',\r\n        '3': '1010101110111',\r\n        '4': '10101010111',\r\n        '5': '101010101',\r\n        '6': '11101010101',\r\n        '7': '1110111010101',\r\n        '8': '111011101110101',\r\n        '9': '11101110111011101',\r\n        '.': '10111010111010111',\r\n        ',': '1110111010101110111',\r\n        '?': '101011101110101',\r\n        \"'\": '1011101110111011101',\r\n        '!': '1110101110101110111',\r\n        '/': '1110101011101',\r\n        '(': '111010111011101',\r\n        ')': '1110101110111010111',\r\n        '&': '10111010101',\r\n        ':': '11101110111010101',\r\n        ';': '11101011101011101',\r\n        '=': '1110101010111',\r\n        '+': '1011101011101',\r\n        '-': '111010101010111',\r\n        '_': '10101110111010111',\r\n        '\"': '101110101011101',\r\n        '$': '10101011101010111',\r\n        '@': '10111011101011101',\r\n        ' ': '0'}\r\n    alpha_re = dict([(value, key) for key, value in alpha . items()])\r\n",
  "58ac59d21c9e1d7dc5000150": "def makeParts(arr, csize):\r\n    return [arr[i: i + csize] for i in range(0, len(arr), csize)]\r\n",
  "551614eb77dd9ee37100003e": "import re\n\n\nclass BatmanQuotes (object):\n    @ staticmethod\n    def get_quote(quotes, hero):\n    return {'B': 'Batman', 'R': 'Robin', 'J': 'Joker'}[hero[0]] + \": \" + quotes[int(re . search('\\d+', hero). group())]\n",
  "530265044b7e23379d00076a": "from typing import List, Tuple\n# Input parameters for visualize_polygon are the same, as for point_in_polygon\nfrom preloaded import visualize_polygon\nfrom matplotlib . path import Path\n\n\ndef point_in_polygon(polygon: List[Tuple[float, float]], point: Tuple[float, float]) - > bool:\n    return Path(polygon). contains_point(point)\n",
  "57e2dd0bec7d247e5600013a": "def unflatten(flat_array):\r\n    arr = flat_array[:]\r\n    for i, v in enumerate(arr):\r\n    if v > 2:\r\n    arr[i], arr[i + 1: i + v] = arr[i: i + v], []\r\n    return arr\r\n",
  "566d5e2e57d8fae53c00000c": "import random\r\n\r\n\r\ndef get_bingo_card():\r\n    b = ['B' + str(n) for n in random . sample(range(1, 16), 5)]\r\n    i = ['I' + str(n) for n in random . sample(range(16, 31), 5)]\r\n    n = ['N' + str(n) for n in random . sample(range(31, 46), 4)]\r\n    g = ['G' + str(n) for n in random . sample(range(46, 61), 5)]\r\n    o = ['O' + str(n) for n in random . sample(range(61, 76), 5)]\r\n    return b + i + n + g + o\r\n",
  "52d2e2be94d26fc622000735": "class VigenereAutokeyCipher:\r\n    def __init__(self, key, abc):\r\n    self . key = key\r\n    self . abc = abc\r\n    self . alle = len(abc)\r\n\r\n    def cipher(self, s, m):\r\n    output, keyarr = '', list(self . key)\r\n    for char in s:\r\n    try:\r\n    output += self . abc[(self . abc . index(char) +\r\n                          self . abc . index(keyarr . pop(0)) * (- 1, 1)[m]) % self . alle]\r\n    keyarr . append((output[- 1], char)[m])\r\n    except ValueError:\r\n    output += char\r\n    return output\r\n    def encode(self, s):\r\n    return self . cipher(s, 1)\r\n\r\n    def decode(self, s):\r\n    return self . cipher(s, 0)\r\n",
  "5270f22f862516c686000161": "CODES = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\r\n\r\n\r\ndef to_base_64(string):\r\n    padding = 3 - len(string) % 3 if len(string) % 3 else 0\r\n    binary = '' . join(format(ord(i), '08b') for i in string) + '00' * padding\r\n    return '' . join(CODES[int(binary[i: i + 6], 2)] for i in range(0, len(binary), 6))\r\n\r\n    def from_base_64(string):\r\n    binary = '' . join(format(CODES . find(i), '06b') for i in string)\r\n    return '' . join(chr(int(binary[i: i + 8], 2)) for i in range(0, len(binary), 8)). rstrip('\\x00')\r\n",
  "526c7b931666d07889000a3c": "from random import choice\r\n\r\n\r\ndef interpret(code):\r\n    code = [list(l) for l in code . split('\\n')]\r\n    x, y = 0, 0\r\n    dx, dy = 1, 0\r\n    output = ''\r\n    stack = []\r\n    string_mode = False\r\n    while True:\r\n    move = 1\r\n    i = code[y][x]\r\n\r\n    if string_mode:\r\n    if i == '\"':\r\n    string_mode = False\r\n    else:\r\n    stack . append(ord(i))\r\n    else:\r\n\r\n    if i . isdigit():\r\n        stack . append(int(i))\r\n    elif i == '+':\r\n        stack[- 2:] = [stack[- 2] + stack[- 1]]\r\n    elif i == '-':\r\n        stack[- 2:] = [stack[- 2] - stack[- 1]]\r\n    elif i == '*':\r\n        stack[- 2:] = [stack[- 2] * stack[- 1]]\r\n    elif i == '/':\r\n        stack[- 2:] = [stack[- 2] and stack[- 2] / stack[- 1]]\r\n    elif i == '%':\r\n        stack[- 2:] = [stack[- 2] and stack[- 2] % stack[- 1]]\r\n    elif i == '!':\r\n        stack[- 1] = not stack[- 1]\r\n    elif i == '`':\r\n        stack[- 2:] = [stack[- 2] > stack[- 1]]\r\n    elif i in '><^v?':\r\n    if i == '?':\r\n        i = choice('><^v')\r\n    if i == '>':\r\n        dx, dy = 1, 0\r\n    elif i == '<':\r\n        dx, dy = - 1, 0\r\n    elif i == '^':\r\n        dx, dy = 0, - 1\r\n    elif i == 'v':\r\n        dx, dy = 0, 1\r\n    elif i == '_':\r\n        dx, dy = (- 1 if stack . pop() else 1), 0\r\n    elif i == '|':\r\n        dx, dy = 0, (- 1 if stack . pop() else 1)\r\n    elif i == '\"':\r\n        string_mode = True\r\n    elif i == ':':\r\n        stack . append(stack[- 1] if stack else 0)\r\n    elif i == '\\\\':\r\n        stack[- 2:] = stack[- 2:][:: - 1]\r\n    elif i == '$':\r\n        stack . pop()\r\n    elif i == '.':\r\n        output += str(stack . pop())\r\n    elif i == ',':\r\n        output += chr(stack . pop())\r\n    elif i == '#':\r\n        move += 1\r\n    elif i == 'p':\r\n    ty, tx, tv = stack . pop(), stack . pop(), stack . pop()\r\n    code[ty][tx] = chr(tv)\r\n    elif i == 'g':\r\n    ty, tx = stack . pop(), stack . pop()\r\n    stack . append(ord(code[ty][tx]))\r\n    elif i == '@':\r\n    return output\r\n    for _ in range(move):\r\n    x = (x + dx) % len(code[y])\r\n    y = (y + dy) % len(code)\r\n",
  "586a1af1c66d18ad81000134": "from datetime import datetime\r\n\r\n\r\ndef driver(data):\r\n    first, middle, last, dob, gender = data\r\n    try:\r\n    d = datetime . strptime(dob, '%d-%b-%Y')\r\n    except ValueError:\r\n    d = datetime . strptime(dob, '%d-%B-%Y')\r\n\r\n    return '{:9<5}{[2]}{:0>2}{:0>2}{[3]}{[0]}{[0]}9AA' . format(\r\n        last[: 5]. upper(),\r\n        str(d . year),\r\n        d . month + (50 if gender == 'F' else 0),\r\n        d . day,\r\n        str(d . year),\r\n        first,\r\n        middle if middle else '9')\r\n",
  "586e6d4cb98de09e3800014f": "class Item ():\r\n    def __init__(self, item):\r\n    self . name = item[\"name\"]\r\n    self . quantity = item[\"quantity\"]\r\n    self . price = item[\"price\"]\r\n\r\n    class VendingMachine ():\r\n    def __init__(self, items, money):\r\n    self . items = {item[\"code\"]: Item(item) for item in items}\r\n    self . money = money\r\n    def vend(self, selection, item_money):\r\n    if selection . upper() not in self . items:\r\n    return \"Invalid selection! : Money in vending machine = {:.2f}\" . format(self . money)\r\n    item = self . items[selection . upper()]\r\n    change = item_money - item . price\r\n    if change < 0:\r\n    return \"Not enough money!\"\r\n    if item . quantity == 0:\r\n    return item . name + \": Out of stock!\"\r\n    item . quantity -= 1\r\n    self . money += item . price\r\n    return \"Vending \" + item . name + (\" with {:.2f} change.\" . format(change)) * (change > 0)\r\n",
  "587136ba2eefcb92a9000027": "class SnakesLadders:\r\n    snakes_and_ladders = {\r\n        2: 38,\r\n        7: 14,\r\n        8: 31,\r\n        15: 26,\r\n        21: 42,\r\n        28: 84,\r\n        36: 44,\r\n        51: 67,\r\n        71: 91,\r\n        78: 98,\r\n        87: 94,\r\n        16: 6,\r\n        46: 25,\r\n        49: 11,\r\n        62: 19,\r\n        64: 60,\r\n        74: 53,\r\n        89: 68,\r\n        92: 88,\r\n        95: 75,\r\n        99: 80,\r\n    }\r\n\r\n    def __init__(self):\r\n    self . players = [(1, 0), (2, 0)]\r\n\r\n    def play(self, die1, die2):\r\n    if any(square == 100 for player, square in self . players):\r\n    return \"Game over!\"\r\n    new_square = self . players[0][1] + die1 + die2\r\n    if new_square > 100:\r\n    new_square = 200 - new_square\r\n    new_square = self . snakes_and_ladders . get(new_square, new_square)\r\n    self . players[0] = (self . players[0][0], new_square)\r\n    result = (\"Player {0} Wins!\"\r\n              if new_square == 100\r\n              else \"Player {0} is on square {1}\"). format(* self . players[0])\r\n    if die1 != die2:\r\n    self . players . reverse()\r\n    return result\r\n",
  "57547f9182655569ab0008c4": "@ countcalls\r\ndef replicate(times, number):\r\n    if times > 0:\r\n    return [number] + replicate(times - 1, number)\r\n    return []\r\n",
  "576400f2f716ca816d001614": "from fractions import Fraction\r\n\r\n\r\ndef reduce_fraction(fraction):\r\n    t = Fraction(* fraction)\r\n    return (t . numerator, t . denominator)\r\n",
  "57882daf90b2f375280000ad": "def sumsquares(l):\r\n    return sum([i * * 2 if type(i) == int else sumsquares(i) for i in l])\r\n",
  "54ab259e15613ce0c8001bab": "def self_converge(number):\r\n    n, cycle = str(number), set()\r\n    while n not in cycle:\r\n    cycle . add(n)\r\n    s = '' . join(sorted(n))\r\n    n = '%0*d' % (len(n), int(s[:: - 1]) - int(s))\r\n    return - 1 if not int(n) else len(cycle)\r\n",
  "582c297e56373f0426000098": "def stringify(list):\r\n    return 'None' if list == None else str(list . data) + ' -> ' + stringify(list . next)\r\n",
  "58817056e7a31c2ceb000052": "def interpreter(tape):\n    memory, ptr, output, iCmd = {}, 0, \"\", 0\n    while True:\n    cmd = tape[iCmd]\n    if cmd == \">\":\n        ptr += 1\n    elif cmd == \"<\":\n        ptr -= 1\n    elif cmd == \"+\":\n        memory[ptr] = (memory . get(ptr, 0) + 1) % 256\n    elif cmd == \"-\":\n        memory[ptr] = (memory . get(ptr, 0) - 1) % 256\n    elif cmd == \"*\":\n        output += chr(memory . get(ptr, 0))\n    elif cmd == \"&\":\n        break\n    elif cmd == \"/\":\n        iCmd += memory . get(ptr, 0) == 0\n    elif cmd == \"\\\\\":\n        iCmd += memory . get(ptr, 0) != 0\n    iCmd = (iCmd + 1) % len(tape)\n\n    return output\n",
  "587edac2bdf76ea23500011a": "def interpreter(tape):\r\n    memory, ptr, output = {}, 0, \"\"\r\n    for command in tape:\r\n    if command == \">\":\r\n        ptr += 1\r\n    elif command == \"<\":\r\n        ptr -= 1\r\n    elif command == \"+\":\r\n        memory[ptr] = (memory . get(ptr, 0) + 1) % 256\r\n    elif command == \"*\":\r\n        output += chr(memory[ptr])\r\n\r\n    return output\r\n",
  "589d33e4e0bbce5d6300061c": "def sequence(n):\r\n    # The sequence of numers repeat after the eighth number\r\n    return [0, 1, 1, 2, 0, 2, 2, 1][(n - 1) % 8]\r\n",
  "588417e576933b0ec9000045": "def seats_in_theater(tot_cols, tot_rows, col, row):\r\n    return (tot_cols - col + 1) * (tot_rows - row)\r\n",
  "56dbe0e313c2f63be4000b25": "def vert_mirror(s):\r\n    return \"\\n\" . join(line[:: - 1] for line in s . split(\"\\n\"))\r\n\r\n    def hor_mirror(s):\r\n    return \"\\n\" . join(s . split(\"\\n\")[:: - 1])\r\n\r\n    def oper(fct, s):\r\n    return fct(s)\r\n",
  "5806445c3f1f9c2f72000031": "from numpy import mean, median\r\n\r\n\r\ndef mean_vs_median(numbers):\r\n    if mean(numbers) > median(numbers):\r\n    return 'mean'\r\n    elif mean(numbers) < median(numbers):\r\n    return 'median'\r\n    else:\r\n    return 'same'\r\n",
  "576bb3c4b1abc497ec000065": "def string_cnt(s):\r\n    try:\r\n    if s . isalpha():\r\n    return sum(ord(a) for a in s . upper())\r\n    except AttributeError:\r\n    pass\r\n    return 0\r\n    def compare(s1, s2):\r\n    return string_cnt(s1) == string_cnt(s2)\r\n",
  "562f91ff6a8b77dfe900006e": "import math\n\n\ndef movie(card, ticket, perc):\n    num = 0\n    priceA = 0\n    priceB = card\n    while math . ceil(priceB) >= priceA:\n    num += 1\n    priceA += ticket\n    priceB += ticket * (perc * * num)\n\n    return num\n",
  "57a93f93bb9944516d0000c1": "class Dictionary (object):\r\n    def __init__(self):\r\n    self . my_dict = {}\r\n\r\n    def look(self, key):\r\n    return self . my_dict . get(key, \"Can't find entry for {}\" . format(key))\r\n\r\n    def newentry(self, key, value):\r\n    \"\"\" new_entry == PEP8 (forced by Codewars) \"\"\"\r\n    self . my_dict[key] = value\r\n",
  "5277dc3ff4bfbd9a36000c1c": "PLAIN, PLAIN_FILLER = (4, 256, 0), chr(0)\r\nASC85, ASC85_FILLER = (5, 85, 33), \"u\"\r\nZIPPR = \"!!!!!\", \"z\"\r\n\r\n\r\ndef toAscii85(data):\r\n    return \"<~%s~>\" % \"\" . join(map(lambda x: x . replace(* ZIPPR), quantize(PLAIN_FILLER, data, PLAIN, ASC85)))\r\n\r\n    def fromAscii85(data):\r\n    return \"\" . join(quantize(ASC85_FILLER, '' . join(data[2: - 2]. split()). replace(* ZIPPR[:: - 1]), ASC85, PLAIN))\r\n\r\n    def quantize(filler, data, source, target):\r\n    if data:\r\n    size = source[0]\r\n    tail = size - len(data) % size\r\n    data += tail * filler * (tail is not size)\r\n    quants = [parse(block, target) for block in chop(data, source)]\r\n    quants[- 1] = quants[- 1][:(None, - tail)[tail is not size]]\r\n    return quants\r\n    return []\r\n\r\n    def chop(data, (size, width, offset)):\r\n    for point in xrange(0, len(data), size):\r\n    yield sum((ord(data[point + i]) - offset) * width * * (size - i - 1) for i in xrange(size))\r\n\r\n    def parse(block, (size, width, offset)):\r\n    return \"\" . join(chr(block / (width * * k) % width + offset) for k in xrange(size))[:: - 1]\r\n",
  "54d496788776e49e6b00052f": "from collections import defaultdict\r\n\r\n\r\ndef sum_for_list(lst):\r\n\r\n    def factors(x):\r\n    p_facs = []\r\n    i = 2\r\n    while x > 1 or x < - 1:\r\n    if x % i == 0:\r\n    p_facs . append(i)\r\n    x / /= i\r\n    else:\r\n    i += 1\r\n    return list(set(p_facs))\r\n\r\n    fac_dict = defaultdict(int)\r\n\r\n    for i in lst:\r\n    for fac in factors(i):\r\n    fac_dict[fac] += i\r\n    return sorted([[k, v] for k, v in fac_dict . items()])\r\n",
  "5889ab4928c08c08da00009b": "def crossing_sum(matrix, row, col):\r\n    return sum(matrix[row]) + sum(line[col] for line in matrix) - matrix[row][col]\r\n",
  "5896616336c4bad1c50000d7": "from math import pi\n\n\ndef annulus_area(r):\n    return round(r * r / 4 * pi, 2)\n",
  "57f7f71a7b992e699400013f": "def sort_csv_columns(csv_file_content, sep=';', end='\\n'):\r\n    '''Sort a CSV file by column name.'''\r\n    csv_columns = zip(* (row . split(sep)\r\n                      for row in csv_file_content . split(end)))\r\n    sorted_columns = sorted(csv_columns, key=lambda col: col[0]. lower())\r\n    return end . join(sep . join(row) for row in zip(* sorted_columns))\r\n",
  "5551dc71101b2cf599000023": "def max_pizza(n):\r\n    return n * (n + 1) / / 2 + 1 if n >= 0 else - 1\r\n",
  "56e67d6166d442121800074c": "def draw(waves):\r\n    m = max(waves)\r\n    rotHist = [('\u25a0' * v). rjust(m, '\u25a1') for v in waves]\r\n    return '\\n' . join(map('' . join, zip(* rotHist)))\r\n",
  "56941f177c0a52aef50000a2": "class Interpreter:\r\n    def __init__(self):\r\n    self . stacks = [[0], [0], [0]]\r\n    self . stk = 0\r\n    def read(self, code):\r\n    res, cur, ln, loop = [], 0, len(code), []\r\n\r\n    while cur < ln:\r\n    if code[cur] in '+-':\r\n    if not self . stacks[self . stk]:\r\n    self . stacks[self . stk]. append(0)\r\n    else:\r\n    self . stacks[self . stk][- 1] += [- 1, 1][code[cur] == '+']\r\n    elif code[cur] in '<>' and self . stacks[self . stk]:\r\n    val = self . stacks[self . stk]. pop()\r\n    self . stacks[(self . stk + [- 1, 1][code[cur] == '>']) % 3]. append(val)\r\n    elif code[cur] == '*':\r\n    self . stacks[self . stk]. append(0)\r\n    elif code[cur] == '^':\r\n    self . stacks[self . stk]. pop()\r\n    elif code[cur] == '#':\r\n    self . stk = (self . stk + 1) % 3\r\n    elif code[cur] == ',':\r\n    fd = next((k for k, x in enumerate(\r\n        code[cur + 1:], cur + 1) if not x . isdigit()), ln)\r\n    self . stacks[self . stk]. append(int(code[cur + 1: fd]))\r\n    cur = fd - 1\r\n    elif code[cur] == '.' and self . stacks[self . stk]:\r\n    res . append(self . stacks[self . stk][- 1])\r\n    elif code[cur] == '[':\r\n    loop . append(cur)\r\n    elif code[cur] == ']':\r\n    if self . stacks[self . stk] and self . stacks[self . stk][- 1] > 0:\r\n    cur = loop[- 1]\r\n    else:\r\n    loop . pop()\r\n    cur += 1\r\n    return '' . join(map(str, res))\r\n",
  "56f399b59821793533000683": "def sort_cards(cards):\r\n    return sorted(cards, key=\"A23456789TJQK\" . index)\r\n",
  "5694d22eb15d78fe8d00003a": "from collections import defaultdict\r\n\r\n\r\ndef group_in_10s(* args):\r\n    if not args:\r\n        return []\r\n    tens = defaultdict(list)\r\n    for n in sorted(args):\r\n        tens[n / / 10]. append(n)\r\n    return [tens . get(d, None) for d in range(max(tens) + 1)]\r\n",
  "5326ef17b7320ee2e00001df": "# name of direction, name of opposite, translation function\r\ndirs = [\r\n    ('left', 'right', lambda (x, y): (x - 1, y)),\r\n    ('right', 'left', lambda (x, y): (x + 1, y)),\r\n    ('up', 'down', lambda (x, y): (x, y - 1)),\r\n    ('down', 'up', lambda (x, y): (x, y + 1)),\r\n]\r\n\r\n\r\ndef solve(map, miner, exit):\r\n    # we turn dictionaries into tuples for nicer lambdas\r\n    return do_solve(map, (miner['x'], miner['y']), (exit['x'], exit['y']), None)\r\n\r\n    def do_solve(map, miner, exit, block):\r\n    if not allowed(map, miner):\r\n        return None\r\n    if miner == exit:\r\n       return []\r\n    for dir in dirs:\r\n    if dir[0] != block:\r\n    path = do_solve(map, dir[2](miner), exit, dir[1])\r\n    if path != None:\r\n        return [dir[0]] + path\r\n\r\n    def allowed(map, miner):\r\n    x, y = miner[0], miner[1]\r\n    return x >= 0 and x < len(map) and y >= 0 and y < len(map[0]) and map[x][y]\r\n",
  "55cacc3039607536c6000081": "class Node (object):\r\n    def __init__(self, data, nxt=None):\r\n    self . data = data\r\n    self . next = nxt\r\n    def insert_nth(head, index, data):\r\n    if index == 0:\r\n        return Node(data, head)\r\n    if head and index > 0:\r\n    head . next = insert_nth(head . next, index - 1, data)\r\n    return head\r\n    raise ValueError\r\n",
  "55befc42bfe4d13ab1000007": "class Node (object):\n    def __init__(self, data):\n    self . data = data\n    self . next = None\n    def get_nth(node, index):\n    v = - 1\n    n = node\n    while n:\n    v += 1\n    if v == index:\n        return n\n    n = n . next\n    raise ValueError\n",
  "55beec7dd347078289000021": "class Node (object):\n    def __init__(self, data):\n    self . data = data\n    self . next = None\n    def length(node):\n    leng = 0\n    while node:\n    leng += 1\n    node = node . next\n    return leng\n    def count(node, data):\n    c = 0\n    while node:\n    if node . data == data:\n    c += 1\n    node = node . next\n    return c\n",
  "55be95786abade3c71000079": "class Node (object):\r\n    def __init__(self, data, next=None):\r\n    self . data = data\r\n    self . next = next\r\n    def push(head, data):\r\n    return Node(data, head)\r\n\r\n    def build_one_two_three():\r\n    return Node(1, Node(2, Node(3)))\r\n",
  "583ea278c68d96a5fd000abd": "def sort_by_language(arr):\r\n    return sorted(arr, key=lambda x: (x[\"language\"], x[\"first_name\"]))\r\n",
  "57dd3a06eb0537b899000a64": "def song_sorter(lines):\r\n    return sorted(lines, key=lambda x: ['On', '12', '11', '10', '9', '8', '7', '6', '5', '4', '3', '2', 'and', 'a']. index(x . split()[0]))\r\n",
  "589577f0d1b93ae32a000001": "def sort_by_height(a):\r\n    s = iter(sorted(x for x in a if x != - 1))\r\n    return [x if x == - 1 else next(s) for x in a]\r\n",
  "589631d24a7323d18d00016f": "def which_note(count):\r\n    return \"A A# B C C# D D# E F F# G G#\" . split()[(count - 1) % 88 % 12]\r\n",
  "589273272fab865136000108": "def black_or_white_key(key_press_count):\r\n    return \"black\" if (key_press_count - 1) % 88 % 12 in [1, 4, 6, 9, 11] else \"white\"\r\n",
  "5868a68ba44cfc763e00008d": "def interpreter(code, iterations, width, height):\n    code = \"\" . join(c for c in code if c in \"[news]*\")\n    canvas = [[0] * width for _ in range(height)]\n    row = col = step = count = loop = 0\n    while step < len(code) and count < iterations:\n    command = code[step]\n\n    if loop:\n    if command == \"[\":\n        loop += 1\n    elif command == \"]\":\n        loop -= 1\n    elif command == \"n\":\n        row = (row - 1) % height\n    elif command == \"s\":\n        row = (row + 1) % height\n    elif command == \"w\":\n        col = (col - 1) % width\n    elif command == \"e\":\n        col = (col + 1) % width\n    elif command == \"*\":\n        canvas[row][col] ^= 1\n    elif command == \"[\" and canvas[row][col] == 0:\n        loop += 1\n    elif command == \"]\" and canvas[row][col] != 0:\n        loop -= 1\n    step += 1 if not loop else loop / / abs(loop)\n    count += 1 if not loop else 0\n    return \"\\r\\n\" . join(\"\" . join(map(str, row)) for row in canvas)\n",
  "58678d29dbca9a68d80000d7": "def interpreter(code, tape):\r\n    tape = list(map(int, tape))\r\n    ptr = step = loop = 0\r\n    while 0 <= ptr < len(tape) and step < len(code):\r\n    command = code[step]\r\n\r\n    if loop:\r\n    if command == \"[\":\r\n        loop += 1\r\n    elif command == \"]\":\r\n        loop -= 1\r\n    elif command == \">\":\r\n        ptr += 1\r\n    elif command == \"<\":\r\n        ptr -= 1\r\n    elif command == \"*\":\r\n        tape[ptr] ^= 1\r\n    elif command == \"[\" and tape[ptr] == 0:\r\n        loop += 1\r\n    elif command == \"]\" and tape[ptr] == 1:\r\n        loop -= 1\r\n    step += 1 if not loop else loop / / abs(loop)\r\n\r\n    return \"\" . join(map(str, tape))\r\n",
  "586dd26a69b6fd46dd0000c0": "def my_first_interpreter(code):\r\n    memory, output = 0, \"\"\r\n    for command in code:\r\n    if command == \"+\":\r\n        memory += 1\r\n    elif command == \".\":\r\n        output += chr(memory % 256)\r\n\r\n    return output\r\n",
  "5268956c10342831a8000135": "# Pre-order traversal\r\ndef pre_order(node):\r\n    return [node . data] + pre_order(node . left) + pre_order(node . right) if node else []\r\n\r\n    # In-order traversal\r\n    def in_order(node):\r\n    return in_order(node . left) + [node . data] + in_order(node . right) if node else []\r\n\r\n    # Post-order traversal\r\n    def post_order(node):\r\n    return post_order(node . left) + post_order(node . right) + [node . data] if node else []\r\n",
  "55847fcd3e7dadc9f800005f": "def compare(a, b):\r\n    return a . val == b . val and compare(a . left, b . left) and compare(a . right, b . right) if a and b else a == b\r\n",
  "55b350026cc02ac1a7000032": "from string import maketrans\n\n\ndef whitespace_number(n):\n    return (' \\n' if n == 0 else\n            '{:+b}\\n' . format(n). translate(maketrans('+-01', ' \\t \\t')))\n",
  "5668e3800636a6cd6a000018": "message = \"You just wanted my autograph didn't you?\"\n\n\ndef ghostbusters(building):\n    return building . replace(' ', '') if ' ' in building else message\n",
  "56b4af8ac6167012ec00006f": "def shorten_number(suffixes, base):\r\n    def filter(num_string):\r\n    try:\r\n    num = int(num_string)\r\n    except:\r\n    return str(num_string)\r\n    suf_index = 0\r\n    while num > base and suf_index < len(suffixes) - 1:\r\n    num = num / / base\r\n    suf_index += 1\r\n    return str(num) + suffixes[suf_index]\r\n    return filter\r\n",
  "5511b2f550906349a70004e1": "def last_digit(n1, n2):\r\n    return pow(n1, n2, 10)\r\n",
  "55ab4f980f2d576c070000f4": "''' \n n t(i) n-1 (n + i + 1) * (n - i) \n s(n) = \u03a3 ----- + \u03a3 --------------------- \n i=1 i + 1 i=1 2 * (n + i + 1) \n n i n-1 n - i \n = \u03a3 --- + \u03a3 ----- \n i=1 2 i=1 2 \n n i n-1 i \n = \u03a3 --- + \u03a3 --- \n i=1 2 i=1 2 \n n n-1 \n = --- + \u03a3 i \n 2 i=1 \n n n * (n - 1) \n = --- + ----------- \n 2 2 \n = n^2 / 2 \n '''\n\n\ndef game(n):\n    return [n * * 2, 2] if n % 2 else [n * * 2 / / 2]\n",
  "583d10c03f02f41462000137": "def max_sum(arr, ranges):\r\n    return max(sum(arr[start: stop + 1]) for start, stop in ranges)\r\n",
  "5748838ce2fab90b86001b1a": "from math import pi\n\n\ndef square_area(A):\n    return round((2 * A / pi) * * 2, 2)\n",
  "57d0089e05c186ccb600035e": "def equable_triangle(a, b, c):\n    p = a + b + c\n    ph = p / 2\n    return p * p == ph * (ph - a) * (ph - b) * (ph - c)\n",
  "580a0347430590220e000091": "def area(d, l):\r\n    return \"Not a rectangle\" if d <= l else round(l * (d * d - l * l) * * .5, 2)\r\n",
  "537baa6f8f4b300b5900106c": "def circle_area(r):\r\n    if r > 0:\r\n    return r ** 2 * 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989\r\n    else:\r\n    raise ValueError\r\n",
  "5474be18b2bc28ff92000fbd": "from random import random as rand\n\n\ndef area_of_the_shape(f, n=10000):\n    return sum(f(rand(), rand()) for _ in range(n)) / n\n",
  "57da5365a82a1998440000a9": "def you_are_a_cube(cube):\r\n    return round(cube * * (1 / 3)) * * 3 == cube\r\n",
  "57aa218e72292d98d500240f": "def heron(a, b, c):\r\n    s = (a + b + c) / 2\r\n    return round((s * (s - a) * (s - b) * (s - c)) * * 0.5, 2)\r\n",
  "5887a6fe0cfe64850800161c": "def area_largest_square(r):\r\n    return 2 * r * * 2\r\n",
  "55aa075506463dac6600010d": "CACHE = {}\r\n\r\n\r\ndef squared_cache(number):\r\n    if number not in CACHE:\r\n    divisors = [x for x in range(1, number + 1) if number % x == 0]\r\n    CACHE[number] = sum([x * x for x in divisors])\r\n    return CACHE[number]\r\n\r\n    return CACHE[number]\r\n\r\n    def list_squared(m, n):\r\n    ret = []\r\n\r\n    for number in range(m, n + 1):\r\n    divisors_sum = squared_cache(number)\r\n    if (divisors_sum * * 0.5). is_integer():\r\n    ret . append([number, divisors_sum])\r\n\r\n    return ret\r\n",
  "54a2e93b22d236498400134b": "BUTTONS = ['1', 'abc2', 'def3',\r\n           'ghi4', 'jkl5', 'mno6',\r\n           'pqrs7', 'tuv8', 'wxyz9',\r\n           '*', ' 0', '#']\r\n\r\n\r\ndef presses(phrase):\r\n    return sum(1 + button . find(c) for c in phrase . lower() for button in BUTTONS if c in button)\r\n",
  "525f039017c7cd0e1a000a26": "def palindrome_chain_length(n):\r\n    steps = 0\r\n    while str(n) != str(n)[:: - 1]:\r\n    n = n + int(str(n)[:: - 1])\r\n    steps += 1\r\n    return steps\r\n",
  "544aed4c4a30184e960010f4": "def divisors(num):\r\n    l = [a for a in range(2, num) if num % a == 0]\r\n    if len(l) == 0:\r\n    return str(num) + \" is prime\"\r\n    return l\r\n",
  "5541f58a944b85ce6d00006a": "def productFib(prod):\r\n    a, b = 0, 1\r\n    while prod > a * b:\r\n    a, b = b, a + b\r\n    return [a, b, prod == a * b]\r\n",
  "57fb09ef2b5314a8a90001ed": "def replace_exclamation(s):\r\n    return '' . join('!' if c in 'aeiouAEIOU' else c for c in s)\r\n",
  "57faece99610ced690000165": "def remove(s):\r\n    return s . rstrip(\"!\")\r\n",
  "567b468357ed7411be00004a": "def mapPopulationFit(population, fitness):\r\n    return [ChromosomeWrap(c, fitness(c)) for c in population]\r\n",
  "567d71b93f8a50f461000019": "def crossover(chromosome1, chromosome2, index):\r\n    return [chromosome1[: index] + chromosome2[index:], chromosome2[: index] + chromosome1[index:]]\r\n",
  "567b39b27d0a4606a5000057": "from random import random\n\n\ndef mutate(chromosome, p):\n    res = ''\n    for s in chromosome:\n    res += str(1 - int(s)) if random() < p else s\n    return res\n",
  "567d609f1c16d7369c000008": "import random\n\n\ndef generate(length):\n    return ('{:0{}b}' . format(random . getrandbits(length), length)\n            if length > 0\n            else '')\n",
  "57f36495c0bb25ecf50000e7": "def find(n):\r\n    return sum(e for e in range(1, n + 1) if e % 3 == 0 or e % 5 == 0)\r\n",
  "56b58d11e3a3a7cade000792": "def sexy_prime(x, y):\r\n    return abs(x - y) == 6 and is_prime(x) and is_prime(y)\r\n\r\n    # A bit overkill for this kata, but excellent efficiency!\r\n\r\n    def is_prime(n):\r\n    factors = 0\r\n    for k in (2, 3):\r\n    while n % k == 0:\r\n    n / /= k\r\n    factors += 1\r\n    k = 5\r\n    step = 2\r\n    while k * k <= n:\r\n    if n % k:\r\n    k += step\r\n    step = 6 - step\r\n    else:\r\n    n / /= k\r\n    factors += 1\r\n    if n > 1:\r\n    factors += 1\r\n    return factors == 1\r\n",
  "55e6125ad777b540d9000042": "def get_count(words=\"\"):\r\n    if not isinstance(words, str):\r\n    return {'vowels': 0, 'consonants': 0}\r\n    letter = \"\" . join([c . lower() for c in words if c . isalpha()])\r\n    vowel = \"\" . join([c for c in letter if c in 'aeiou'])\r\n    consonant = \"\" . join([c for c in letter if c not in 'aeiou'])\r\n    return {'vowels': len(vowel), 'consonants': len(consonant)}\r\n",
  "589478160c0f8a40870000bc": "def arrow_area(a, b):\r\n    return a * b / 4.0\r\n",
  "5572f7c346eb58ae9c000047": "def pattern(n):\r\n    return '\\n' . join(str(i) * i for i in xrange(1, n + 1))\r\n",
  "56484848ba95170a8000004d": "def gps(s, x):\r\n    if len(x) < 2:\r\n    return 0\r\n    a = max(x[i] - x[i - 1] for i in range(1, len(x)))\r\n    return a * 3600.0 / s\r\n",
  "55733d3ef7c43f8b0700007c": "def pattern(n):\r\n    return \"\\n\" . join([\"\" . join([str(y) for y in range(n, x, - 1)]) for x in range(n)])\r\n",
  "5506b230a11c0aeab3000c1f": "def evaporator(content, evap_per_day, threshold):\n    n = 0\n    current = 100\n    percent = 1 - evap_per_day / 100.0\n    while current > threshold:\n    current *= percent\n    n += 1\n    return n\n",
  "56214b6864fe8813f1000019": "from preloaded import *\r\nhealth = 100\r\nposition = 0\r\ncoins = 0\r\n\r\n\r\ndef main():\r\n    roll_dice()\r\n    move()\r\n    combat()\r\n    get_coins()\r\n    buy_health()\r\n    print_status()\r\n",
  "55c90cad4b0fe31a7200001f": "def build_string(* args):\r\n    return \"I like {}!\" . format(\", \" . join(args))\r\n",
  "55dc4520094bbaf50e0000cb": "def am_i_wilson(n):\r\n    return n in (5, 13, 563)\r\n",
  "56c22c5ae8b139416c00175d": "def match(candidate, job):\r\n    return candidate['min_salary'] * 0.9 <= job['max_salary']\r\n",
  "545991b4cbae2a5fda000158": "def include(arr, item):\r\n    return item in arr\r\n",
  "54598d1fcbae2ae05200112c": "def _all(seq, fun):\r\n    return all(map(fun, seq))\r\n",
  "56530b444e831334c0000020": "def chromosome_check(sperm):\r\n    return 'Congratulations! You\\'re going to have a {}.' . format('son' if 'Y' in sperm else 'daughter')\r\n",
  "5601c5f6ba804403c7000004": "def bar_triang(a, b, c):\r\n    return [round(sum(x) / 3.0, 4) for x in zip(a, b, c)]\r\n",
  "565f5825379664a26b00007c": "def get_size(w, h, d):\r\n    area = 2 * (w * h + h * d + w * d)\r\n    volume = w * h * d\r\n    return [area, volume]\r\n",
  "57a5c31ce298a7e6b7000334": "def bin_to_decimal(inp):\r\n    return int(inp, 2)\r\n",
  "56a25ba95df27b7743000016": "def validate_code(code):\r\n    return str(code). startswith(('1', '2', '3'))\r\n",
  "574c5075d27783851800169e": "def animals(heads, legs):\r\n    chickens, cows = 2 * heads - legs / 2, legs / 2 - heads\r\n    if chickens < 0 or cows < 0 or not chickens == int(chickens) or not cows == int(cows):\r\n    return \"No solutions\"\r\n    return chickens, cows\r\n",
  "57096af70dad013aa200007b": "def logical_calc(array, op):\r\n    res = array[0]\r\n    for x in array[1:]:\r\n    if op == \"AND\":\r\n    res &= x\r\n    elif op == \"OR\":\r\n    res |= x\r\n    else:\r\n    res ^= x\r\n    return res  # boolean\r\n",
  "56a3f08aa9a6cc9b75000023": "import re\n\n\ndef validate_usr(un):\n    return re . match('^[a-z0-9_]{4,16}$', un) != None\n",
  "557b5e0bddf29d861400005d": "def converter(mpg):\r\n    # your code here\r\n    return round(mpg / 4.54609188 * 1.609344, 2)\r\n",
  "55a75e2d0803fea18f00009d": "def find_slope(points):\r\n    x1, y1, x2, y2 = points\r\n    if x2 - x1 == 0:\r\n    return \"undefined\"\r\n    return str((y2 - y1) / / (x2 - x1))\r\n",
  "5763bb0af716cad8fb000580": "''' PROOF: \n number of cuts = x \n The total number of cubes = (x+1)^3 \n the number of all blue cubes = (x-1)^3 \n Number of cubes with one or more red squares: \n = (x+1)^3 - (x-1)^3 \n = (x+1)(x+1)(x+1) - (x-1)(x-1)(x-1) \n = x^3 + 3x^2 + 3x + 1 - (x^3 - 3x^2 + 3x -1 ) \n = 6x^2 + 2 \n '''\n\n\ndef count_squares(x):\n    return 6 * x * * 2 + 2\n",
  "56c5847f27be2c3db20009c3": "fruit = {1: 'kiwi', 2: 'pear', 3: 'kiwi', 4: 'banana', 5: 'melon', 6: 'banana', 7: 'melon',\r\n         8: 'pineapple', 9: 'apple', 10: 'pineapple', 11: 'cucumber', 12: 'pineapple',\r\n         13: 'cucumber', 14: 'orange', 15: 'grape', 16: 'orange', 17: 'grape', 18: 'apple',\r\n         19: 'grape', 20: 'cherry', 21: 'pear', 22: 'cherry', 23: 'pear', 24: 'kiwi',\r\n         25: 'banana', 26: 'kiwi', 27: 'apple', 28: 'melon', 29: 'banana', 30: 'melon',\r\n         31: 'pineapple', 32: 'melon', 33: 'pineapple', 34: 'cucumber', 35: 'orange',\r\n         36: 'apple', 37: 'orange', 38: 'grape', 39: 'orange', 40: 'grape', 41: 'cherry',\r\n         42: 'pear', 43: 'cherry', 44: 'pear', 45: 'apple', 46: 'pear', 47: 'kiwi',\r\n         48: 'banana', 49: 'kiwi', 50: 'banana', 51: 'melon', 52: 'pineapple', 53: 'melon',\r\n         54: 'apple', 55: 'cucumber', 56: 'pineapple', 57: 'cucumber', 58: 'orange',\r\n         59: 'cucumber', 60: 'orange', 61: 'grape', 62: 'cherry', 63: 'apple',\r\n         64: 'cherry', 65: 'pear', 66: 'cherry', 67: 'pear', 68: 'kiwi', 69: 'pear',\r\n         70: 'kiwi', 71: 'banana', 72: 'apple', 73: 'banana', 74: 'melon',\r\n         75: 'pineapple', 76: 'melon', 77: 'pineapple', 78: 'cucumber', 79: 'pineapple',\r\n         80: 'cucumber', 81: 'apple', 82: 'grape', 83: 'orange', 84: 'grape', 85: 'cherry',\r\n         86: 'grape', 87: 'cherry', 88: 'pear', 89: 'cherry', 90: 'apple', 91: 'kiwi',\r\n         92: 'banana', 93: 'kiwi', 94: 'banana', 95: 'melon', 96: 'banana', 97: 'melon',\r\n         98: 'pineapple', 99: 'apple', 100: 'pineapple'}\r\n\r\n\r\ndef subtract_sum(n):\r\n    n -= (sum([int(i) for i in str(n)]))\r\n    while not n in fruit:\r\n    n -= (sum([int(i) for i in str(n)]))\r\n    return fruit[n]\r\n",
  "5786f8404c4709148f0006bf": "def starting_mark(height):\r\n    return round(9.45 + (10.67 - 9.45) / (1.83 - 1.52) * (height - 1.52), 2)\r\n",
  "57cff961eca260b71900008f": "def is_vow(inp):\r\n    return [chr(n) if chr(n) in \"aeiou\" else n for n in inp]\r\n",
  "57613fb1033d766171000d60": "def uefa_euro_2016(teams, scores):\r\n    return f\"At match { teams [ 0 ]} - { teams [ 1 ]} , { 'teams played draw.' if scores [ 0 ] == scores [ 1 ] else teams [ scores . index ( max ( scores ))] + ' won!' } \"\r\n",
  "57b58827d2a31c57720012e8": "def fuel_price(litres, price_per_liter):\r\n    discount = int(min(litres, 10) / 2) * 5 / 100\r\n    return round((price_per_liter - discount) * litres, 2)\r\n",
  "55eea63119278d571d00006a": "def next_id(arr):\r\n    t = 0\r\n    while t in arr:\r\n    t += 1\r\n    return t\r\n",
  "57a5015d72292ddeb8000b31": "def is_palindrome(string):\r\n    return str(string)[:: - 1] == str(string)\r\n",
  "56e2f59fb2ed128081001328": "def print_array(arr):\r\n    return ',' . join(map(str, arr))\r\n",
  "55f73f66d160f1f1db000059": "def combine_names(first, last):\r\n    return first + \" \" + last\r\n",
  "57a37f3cbb99449513000cd8": "def get_number_from_string(string):\r\n    return int('' . join(x for x in string if x . isdigit()))\r\n",
  "567bf4f7ee34510f69000032": "def is_digit(n):\r\n    return n . isdigit() and len(n) == 1\r\n",
  "56a946cd7bd95ccab2000055": "def lowercase_count(strng):\r\n    return sum(a . islower() for a in strng)\r\n",
  "57a77726bb9944d000000b06": "def mango(quantity, price):\r\n    return (quantity - quantity / / 3) * price\r\n",
  "586669a8442e3fc307000048": "from math import pi\r\n\r\n\r\nclass Shape:\r\n    def __init__(self, area): self . area = area\r\n    def __lt__(self, rhs): return self . area < rhs . area\r\n    class Rectangle (Shape):\r\n    def __init__(self, w, h): super(). __init__(w * h)\r\n\r\n    class Square (Rectangle):\r\n    def __init__(self, s): super(). __init__(s, s)\r\n\r\n    class Triangle (Shape):\r\n    def __init__(self, b, h): super(). __init__(b * h / 2)\r\n\r\n    class Circle (Shape):\r\n    def __init__(self, r): super(). __init__(pi * r * * 2)\r\n\r\n    CustomShape = Shape\r\n",
  "53f1015fa9fe02cbda00111a": "import random\r\n\r\n\r\nclass Ghost (object):\r\n    def __init__(self):\r\n    self . color = random . choice([\"white\", \"yellow\", \"purple\", \"red\"])\r\n",
  "55805ab490c73741b7000064": "def make_backronym(acronym):\r\n    return ' ' . join(dictionary[char . upper()] for char in acronym)\r\n",
  "55a14f75ceda999ced000048": "def temple_strings(obj, feature):\r\n    return f\" { obj } are { feature } \"\r\n",
  "568018a64f35f0c613000054": "class Guesser:\n    def __init__(self, number, lives):\n    self . number = number\n    self . lives = lives\n    def guess(self, n):\n    if self . lives < 1:\n        raise \"Too many guesses!\"\n    if self . number == n:\n        return True\n    self . lives -= 1\n    return False\n",
  "55c0ac142326fdf18d0000af": "class Cube:\r\n\t def __init__(self, side=0):\r\n\t\t self . _side = abs(side)\r\n\r\n\t def get_side(self):\r\n\t\t \"\"\"Return the side of the Cube\"\"\"\r\n return self . _side \r\n def set_side ( self , new_side ):\r\n\t\t \"\"\"Set the value of the Cube's side.\"\"\" \r\n self . _side = abs ( new_side )",
  "56200d610758762fb0000002": "def add_five(num):\r\n    return num + 5\r\n",
  "57cfdf34902f6ba3d300001e": "def two_sort(lst):\r\n    return '***' . join(min(lst))\r\n",
  "569e09850a8e371ab200000b": "def pre_fizz(n):\r\n    # your code here\r\n    return list(range(1, n + 1))\r\n",
  "578fdcfc75ffd1112c0001a1": "def bin_rota(arr):\r\n    return [name for i, row in enumerate(arr) for name in (reversed(row) if i & 1 else row)]\r\n",
  "57c1ab3949324c321600013f": "def to_leet_speak(str):\r\n    return str . translate(str . maketrans(\"ABCEGHILOSTZ\", \"@8(36#!10$72\"))\r\n",
  "5641a03210e973055a00000d": "def two_decimal_places(n):\r\n    return round(n, 2)\r\n",
  "56f3a1e899b386da78000732": "def partlist(arr):\r\n    return [(' ' . join(arr[: i]), ' ' . join(arr[i:])) for i in range(1, len(arr))]\r\n",
  "57d2807295497e652b000139": "def averages(arr):\r\n    return [(arr[x] + arr[x + 1]) / 2 for x in range(len(arr or []) - 1)]\r\n",
  "539ee3b6757843632d00026b": "def capitals(word):\r\n    return [i for (i, c) in enumerate(word) if c . isupper()]\r\n",
  "55e2adece53b4cdcb900006c": "from datetime import datetime, timedelta\r\n\r\n\r\ndef race(v1, v2, g):\r\n    if v1 >= v2:\r\n    return None\r\n    else:\r\n    sec = timedelta(seconds=int((g * 3600 / (v2 - v1))))\r\n    d = datetime(1, 1, 1) + sec\r\n    return [d . hour, d . minute, d . second]\r\n",
  "5663f5305102699bad000056": "def mxdiflg(a1, a2):\r\n    if a1 and a2:\r\n    return max(\r\n        len(max(a1, key=len)) - len(min(a2, key=len)),\r\n        len(max(a2, key=len)) - len(min(a1, key=len)))\r\n    return - 1\r\n",
  "573992c724fc289553000e95": "def smallest(n):\r\n\t s = str(n)\r\n\t min1, from1, to1 = n, 0, 0\r\n for i in range ( len ( s )):\r\n\t\t removed = s [: i ] + s [ i + 1 :]\r\n\t\t for j in range ( len ( removed ) + 1 ):\r\n\t\t\t num = int ( removed [: j ] + s [ i ] + removed [ j :])\r\n\t\t\t if ( num < min1 ):\r\n\t\t\t\t min1 , from1 , to1 = num , i , j \r\n return [ min1 , from1 , to1 ]",
  "566fc12495810954b1000030": "def nb_dig(n, d):\r\n    return sum(str(i * i). count(str(d)) for i in range(n + 1))\r\n",
  "55eeddff3f64c954c2000059": "from itertools import groupby\n\n\ndef sum_consecutives(s):\n    return [sum(group) for c, group in groupby(s)]\n",
  "56a4872cbb65f3a610000026": "def max_rot(n):\r\n    s, arr = str(n), [n]\r\n    for i in range(len(s)):\r\n    s = s[: i] + s[i + 1:] + s[i]\r\n    arr . append(int(s))\r\n    return max(arr)\r\n",
  "54d418bd099d650fa000032d": "def vampire_test(x, y):\r\n    return sorted(str(x * y)) == sorted(str(x) + str(y))\r\n",
  "5375f921003bf62192000746": "import re\r\nregex = re . compile('[a-z]{4,}', re . IGNORECASE)\r\n\r\n\r\ndef replace(match):\r\n    word = match . group(0)\r\n    return word[0] + str(len(word) - 2) + word[- 1]\r\n\r\n    def abbreviate(s):\r\n    return regex . sub(replace, s)\r\n",
  "57814d79a56c88e3e0000786": "def decrypt(text, n):\r\n    if text in (\"\", None):\r\n    return text\r\n    ndx = len(text) / / 2\r\n    for i in range(n):\r\n    a = text[: ndx]\r\n    b = text[ndx:]\r\n    text = \"\" . join(b[i: i + 1] + a[i: i + 1] for i in range(ndx + 1))\r\n    return text\r\n    def encrypt(text, n):\r\n    for i in range(n):\r\n    text = text[1:: 2] + text[:: 2]\r\n    return text\r\n",
  "54b80308488cb6cd31000161": "BRACES = {'(': ')', '[': ']', '{': '}'}\r\n\r\n\r\ndef group_check(s):\r\n    stack = []\r\n    for b in s:\r\n    c = BRACES . get(b)\r\n    if c:\r\n    stack . append(c)\r\n    elif not stack or stack . pop() != b:\r\n    return False\r\n    return not stack\r\n",
  "54bf1c2cd5b56cc47f0007a1": "def duplicate_count(s):\r\n    return len([c for c in set(s . lower()) if s . lower(). count(c) > 1])\r\n",
  "5648b12ce68d9daa6b000099": "def number(bus_stops):\r\n    return sum([stop[0] - stop[1] for stop in bus_stops])\r\n",
  "54eb33e5bc1a25440d000891": "def decompose(n, a=None):\r\n    if a == None:\r\n        a = n * n\r\n    if a == 0:\r\n        return []\r\n    for m in range(min(n - 1, int(a * * .5)), 0, - 1):\r\n    sub = decompose(m, a - m * m)\r\n    if sub != None:\r\n        return sub + [m]\r\n",
  "588f3e0dfa74475a2600002a": "from itertools import product\r\n\r\n\r\ndef possibilities(pattern):\r\n    pattern_format = pattern . replace('?', '{}')\r\n    return [pattern_format . format(* values) for values in product('10', repeat=pattern . count('?'))]\r\n",
  "583203e6eb35d7980400002a": "from re import findall\n\n\ndef count_smileys(arr):\n    return len(list(findall(r\"[:;][-~]?[)D]\", \" \" . join(arr))))\n",
  "57ed4cef7b45ef8774000014": "def boredom(staff):\r\n    lookup = {\r\n        \"accounts\": 1,\r\n        \"finance\": 2,\r\n        \"canteen\": 10,\r\n        \"regulation\": 3,\r\n        \"trading\": 6,\r\n        \"change\": 6,\r\n        \"IS\": 8,\r\n        \"retail\": 5,\r\n        \"cleaning\": 4,\r\n        \"pissing about\": 25\r\n    }\r\n    n = sum(lookup[s] for s in staff . values())\r\n    if n <= 80:\r\n    return \"kill me now\"\r\n    if n < 100:\r\n    return \"i can handle this\"\r\n    return \"party time!!\"\r\n",
  "586f6741c66d18c22800010a": "def sequence_sum(start, end, step):\r\n    return sum(range(start, end + 1, step))\r\n",
  "559ce00b70041bc7b600013d": "def finance(n):\r\n    return n * (n + 1) * (n + 2) / 2\r\n",
  "52c4dd683bfd3b434c000292": "def is_incrementing(number): return str(number) in '1234567890'\r\n\r\n\r\ndef is_decrementing(number): return str(number) in '9876543210'\r\n\r\n\r\ndef is_palindrome(number): return str(number) == str(number)[:: - 1]\r\n\r\n\r\ndef is_round(number): return set(str(number)[1:]) == set('0')\r\n\r\n\r\ndef is_interesting(number, awesome_phrases):\r\n    tests = (is_round, is_incrementing, is_decrementing,\r\n             is_palindrome, awesome_phrases . __contains__)\r\n\r\n    for num, color in zip(range(number, number + 3), (2, 1, 1)):\r\n    if num >= 100 and any(test(num) for test in tests):\r\n    return color\r\n    return 0\r\n",
  "539de388a540db7fec000642": "import datetime\r\n\r\n\r\ndef check_coupon(entered_code, correct_code, current_date, expiration_date):\r\n    if entered_code is correct_code:\r\n    return (datetime . datetime . strptime(current_date, '%B %d, %Y') <= datetime . datetime . strptime(expiration_date, '%B %d, %Y'))\r\n    return False\r\n",
  "5513795bd3fafb56c200049e": "def count_by(x, n):\r\n    return [i * x for i in range(1, n + 1)]\r\n",
  "555eded1ad94b00403000071": "def series_sum(n):\r\n    return '{:.2f}' . format(sum(1.0 / (3 * i + 1) for i in range(n)))\r\n",
  "55c933c115a8c426ac000082": "def eval_object(v):\r\n    return {\"+\": v['a'] + v['b'],\r\n            \"-\": v['a'] - v['b'],\r\n            \"/\": v['a'] / v['b'],\r\n            \"*\": v['a'] * v['b'],\r\n            \"%\": v['a'] % v['b'],\r\n            \"**\": v['a'] * * v['b'], }. get(v['operation'])\r\n",
  "55c606e6babfc5b2c500007c": "def filter_numbers(string):\r\n    return \"\" . join(x for x in string if not x . isdigit())\r\n",
  "55c423ecf847fbcba100002b": "import re\r\n\r\n\r\ndef filter_words(phrase):\r\n    return re . sub(\"(bad|mean|ugly|horrible|hideous)\", \"awesome\",\r\n                    phrase, flags=re . IGNORECASE)\r\n",
  "57193694938fcdfe3a001dd7": "from ipaddress import ip_address\r\n\r\n\r\ndef ipValidator(address):\r\n    try:\r\n    ip_address(address)\r\n    return True\r\n    except ValueError:\r\n    return False\r\n",
  "566dc566f6ea9a14b500007b": "def kata_13_december(lst):\r\n    return [item for item in lst if item & 1]\r\n",
  "563cf89eb4747c5fb100001b": "def remove_smallest(numbers):\r\n    a = numbers[:]\r\n    if a:\r\n    a . remove(min(a))\r\n    return a\r\n",
  "558fc85d8fd1938afb000014": "def sum_two_smallest_numbers(numbers):\r\n    return sum(sorted(numbers)[: 2])\r\n",
  "56a5d994ac971f1ac500003e": "def longest_consec(strarr, k):\r\n    result = \"\"\r\n    if k > 0 and len(strarr) >= k:\r\n    for index in range(len(strarr) - k + 1):\r\n    s = '' . join(strarr[index: index + k])\r\n    if len(s) > len(result):\r\n    result = s\r\n    return result\r\n",
  "5772382d509c65de7e000982": "from itertools import islice, count\r\n\r\n\r\ndef u1():\r\n    a = {1: 1, 2: 1}\r\n    yield a[1]\r\n    yield a[2]\r\n    for n in count(3):\r\n    a[n] = a[n - a[n - 1]] + a[n - a[n - 2]]\r\n    yield a[n]\r\n\r\n    def length_sup_u_k(n, k):\r\n    return len(list(filter(lambda x: x >= k, islice(u1(), 1, n))))\r\n\r\n    def comp(n):\r\n    return sum(k1 < k0 for k0, k1 in zip(list(islice(u1(), 1, n)), list(islice(u1(), 2, n))))\r\n",
  "57e5a6a67fbcc9ba900021cd": "from preloaded import Node\n\n\ndef array_to_tree(arr, i=0):\n    if i >= len(arr):\n    return None\n    return Node(arr[i], array_to_tree(arr, 2 * i + 1), array_to_tree(arr, 2 * i + 2))\n",
  "57591ef494aba64d14000526": "def j_n(n):\r\n    j = [0]\r\n    a = [1]\r\n    for i in range(1, n):\r\n    j . append((i - a[j[i - 1]]))\r\n    a . append((i - j[a[i - 1]]))\r\n    return j, a\r\n    def john(n):\r\n    return j_n(n)[0]\r\n\r\n    def ann(n):\r\n    return j_n(n)[1]\r\n\r\n    def sum_john(n):\r\n    return sum(john(n))\r\n\r\n    def sum_ann(n):\r\n        return sum(ann(n))\r\n",
  "57dd79bff6df9b103b00010f": "from preloaded import TreeNode\r\n\r\n\r\ndef is_perfect(tree: TreeNode) - > bool:\r\n\r\n    def check_lvl(n: int, lvl: list[TreeNode]):\r\n    return not lvl or len(lvl) == n and check_lvl(\r\n        2 * n, [x for node in lvl for x in (node . left, node . right) if x]\r\n    )\r\n\r\n    return check_lvl(1, [tree] if tree else [])\r\n",
  "57e5279b7cf1aea5cf000359": "from preloaded import TreeNode\r\n\r\n\r\ndef max_sum(root: TreeNode) - > int:\r\n    if root is None:\r\n    return 0\r\n    elif root . left is None:\r\n    return root . value + max_sum(root . right)\r\n    elif root . right is None:\r\n    return root . value + max_sum(root . left)\r\n    else:\r\n    return root . value + max(max_sum(root . left), max_sum(root . right))\r\n",
  "58373ba351e3b615de0001c3": "def mormons(starting_number, reach, target):\n    missions = 0\n    while starting_number < target:\n    starting_number += starting_number * reach\n    missions += 1\n    return missions\n    # def mormons(start, reach, target, missions=0):\n    # if start >= target:\n    # return missions\n    # return mormons(start + (start * reach), reach, target, missions + 1)\n",
  "541af676b589989aed0009e7": "def count_change(money, coins):\r\n    if money < 0:\r\n    return 0\r\n    if money == 0:\r\n    return 1\r\n    if money > 0 and not coins:\r\n    return 0\r\n    return count_change(money - coins[- 1], coins) + count_change(money, coins[: - 1])\r\n",
  "5324945e2ece5e1f32000370": "def sum_strings(x, y):\r\n    l, res, carry = max(len(x), len(y)), \"\", 0\r\n    x, y = x . zfill(l), y . zfill(l)\r\n    for i in range(l - 1, - 1, - 1):\r\n    carry, d = divmod(int(x[i]) + int(y[i]) + carry, 10)\r\n    res += str(d)\r\n    return (\"1\" * carry + res[:: - 1]). lstrip(\"0\") or \"0\"\r\n",
  "556e0fccc392c527f20000c5": "def Xbonacci(signature, n):\r\n    output, x = signature[: n], len(signature)\r\n    while len(output) < n:\r\n    output . append(sum(output[- x:]))\r\n    return output\r\n",
  "556deca17c58da83c00002db": "def tribonacci(signature, n):\r\n    res = signature[: n]\r\n    for i in range(n - 3):\r\n        res . append(sum(res[- 3:]))\r\n    return res\r\n",
  "555615a77ebc7c2c8a0000b8": "def tickets(people):\r\n    till = {100.0: 0, 50.0: 0, 25.0: 0}\r\n\r\n    for paid in people:\r\n    till[paid] += 1\r\n    change = paid - 25.0\r\n    for bill in (50, 25):\r\n    while (bill <= change and till[bill] > 0):\r\n    till[bill] -= 1\r\n    change -= bill\r\n    if change != 0:\r\n    return 'NO'\r\n    return 'YES'\r\n",
  "55035eb47451fb61c0000288": "SCORE = {'O': '0', 'o': '0', 'k': '1'}\r\n\r\n\r\ndef okkOokOo(s):\r\n    return '' . join(chr(int('' . join(SCORE . get(a, '') for a in word), 2))\r\n                     for word in s . split('?'))\r\n",
  "54e320dcebe1e583250008fd": "from math import factorial\r\nfrom itertools import dropwhile\r\nDIGITS = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\r\nBASIS = [factorial(n) for n in range(len(DIGITS))]\r\n\r\n\r\ndef dec2FactString(nb):\r\n    representation = []\r\n    for b in reversed(BASIS):\r\n    representation . append(DIGITS[nb / / b])\r\n    nb %= b\r\n    return \"\" . join(dropwhile(lambda x: x == \"0\", representation))\r\n\r\n    def factString2Dec(string):\r\n    return sum(BASIS[i] * DIGITS . index(d) for i, d in enumerate(reversed(string)))\r\n",
  "552c028c030765286c00007d": "def iq_test(numbers):\r\n    e = [int(i) % 2 == 0 for i in numbers . split()]\r\n\r\n    return e . index(True) + 1 if e . count(True) == 1 else e . index(False) + 1\r\n",
  "550f22f4d758534c1100025a": "opposite = {'NORTH': 'SOUTH', 'EAST': 'WEST', 'SOUTH': 'NORTH', 'WEST': 'EAST'}\r\n\r\n\r\ndef dirReduc(plan):\r\n    new_plan = []\r\n    for d in plan:\r\n    if new_plan and new_plan[- 1] == opposite[d]:\r\n    new_plan . pop()\r\n    else:\r\n    new_plan . append(d)\r\n    return new_plan\r\n",
  "564057bc348c7200bd0000ff": "array = [1, 10, 9, 12, 3, 4]\r\n\r\n\r\ndef thirt(n):\r\n    total = sum([int(c) * array[i % 6]\r\n                for i, c in enumerate(reversed(str(n)))])\r\n    if n == total:\r\n    return total\r\n    return thirt(total)\r\n",
  "55a29405bc7d2efaff00007c": "def going(n):\r\n    s = 1.0\r\n    for i in range(2, n + 1):\r\n    s = s / i + 1\r\n    return int(s * 1e6) / 1e6\r\n",
  "566543703c72200f0b0000c9": "def epidemic(tm, n, s, i, b, a):\r\n    def f(s, i, r):\r\n    dt = tm / n\r\n    for t in range(n):\r\n    s, i, r = s - dt * b * s * i, i + dt * (b * s * i - a * i), r + dt * i * a\r\n    yield i\r\n    return int(max(f(s, i, 0)))\r\n",
  "54784a99b5339e1eaf000807": "def get_function(sequence):\r\n    slope = sequence[1] - sequence[0]\r\n    for x in range(1, 5):\r\n    if sequence[x] - sequence[x - 1] != slope:\r\n    return \"Non-linear sequence\"\r\n    return lambda a: slope * a + sequence[0]\r\n",
  "57f6ad55cca6e045d2000627": "def square_or_square_root(arr):\r\n    result = []\r\n    for x in arr:\r\n    root = x * * 0.5\r\n    if root . is_integer():\r\n    result . append(root)\r\n    else:\r\n    result . append(x * x)\r\n    return result\r\n",
  "57a55c8b72292d057b000594": "def reverse(st):\r\n    # Your Code Here\r\n    return \" \" . join(st . split()[:: - 1])\r\n",
  "588e0f11b7b4a5b373000041": "def lowest_temp(t):\r\n    return min((int(x) for x in t . split()), default=None)\r\n",
  "559a28007caad2ac4e000083": "def fib(n):\r\n    a, b = 0, 1\r\n    for i in range(n + 1):\r\n    if i == 0:\r\n    yield b\r\n    else:\r\n    a, b = b, a + b\r\n    yield b\r\n    def perimeter(n):\r\n    return sum(fib(n)) * 4\r\n",
  "5508249a98b3234f420000fb": "from string import ascii_lowercase as abc, ascii_uppercase as ABC\r\nfrom math import ceil\r\n\r\n\r\ndef _code(string, shift, mode):\r\n    return '' . join(\r\n        abc[(abc . index(c) + i * mode + shift) % len(abc)] if c in abc else\r\n        ABC[(ABC . index(c) + i * mode + shift) % len(ABC)] if c in ABC else c\r\n        for i, c in enumerate(string))\r\n\r\n    def moving_shift(string, shift):\r\n    encoded = _code(string, shift, 1)\r\n    cut = int(ceil(len(encoded) / 5.0))\r\n    return [encoded[i: i + cut] for i in range(0, 5 * cut, cut)]\r\n\r\n    def demoving_shift(arr, shift):\r\n    return _code('' . join(arr), - shift, - 1)\r\n",
  "54c9fcad28ec4c6e680011aa": "def is_merge(s, part1, part2):\r\n    if not part1:\r\n    return s == part2\r\n    if not part2:\r\n    return s == part1\r\n    if not s:\r\n    return part1 + part2 == ''\r\n    if s[0] == part1[0] and is_merge(s[1:], part1[1:], part2):\r\n    return True\r\n    if s[0] == part2[0] and is_merge(s[1:], part1, part2[1:]):\r\n    return True\r\n    return False\r\n",
  "526a569ca578d7e6e300034e": "def convert(input, source, target):\r\n    base_in = len(source)\r\n    base_out = len(target)\r\n    acc = 0\r\n    out = ''\r\n    for d in input:\r\n    acc *= base_in\r\n    acc += source . index(d)\r\n    while acc != 0:\r\n    d = target[acc % base_out]\r\n    acc = acc / base_out\r\n    out = d + out\r\n    return out if out else target[0]\r\n",
  "556b85b433fb5e899200003f": "def gcd(a, b): return b if not a else gcd(b % a, a)\r\n\r\n\r\ndef sign(a): return a if a == 0 else abs(a) / a\r\n\r\n\r\ndef mixed_fraction(s):\r\n    a, b = [int(x) for x in s . split(\"/\")]\r\n\r\n    if int(b) == 0:\r\n    raise ZeroDivisionError\r\n    d, m = divmod(abs(a), abs(b))\r\n    g = gcd(m, b)\r\n\r\n    s = \"-\" if sign(a) * sign(b) == - 1 else \"\"\r\n    a = str(d) if d != 0 else \"\"\r\n    b = \"%i/%i\" % (m / g, abs(b) / g) if m != 0 else \"\"\r\n    return s + \" \" . join([a, b]). strip() or \"0\"\r\n",
  "52bc74d4ac05d0945d00054e": "def first_non_repeating_letter(string):\r\n    string_lower = string . lower()\r\n    for i, letter in enumerate(string_lower):\r\n    if string_lower . count(letter) == 1:\r\n    return string[i]\r\n\r\n    return \"\"\r\n",
  "55466989aeecab5aac00003e": "def sqInRect(lng, wdth):\r\n    if lng == wdth:\r\n    return None\r\n    if lng < wdth:\r\n    wdth, lng = lng, wdth\r\n    res = []\r\n    while lng != wdth:\r\n    res . append(wdth)\r\n    lng = lng - wdth\r\n    if lng < wdth:\r\n    wdth, lng = lng, wdth\r\n    res . append(wdth)\r\n    return res\r\n",
  "576757b1df89ecf5bd00073b": "def tower_builder(n):\r\n    return [(\"*\" * (i * 2 - 1)). center(n * 2 - 1) for i in range(1, n + 1)]\r\n",
  "5503013e34137eeeaa001648": "def diamond(n):\n    if n < 0 or n % 2 == 0:\n    return None\n    result = \"*\" * n + \"\\n\"\n    spaces = 1\n    n = n - 2\n    while n > 0:\n    current = \" \" * spaces + \"*\" * n + \"\\n\"\n    spaces = spaces + 1\n    n = n - 2\n    result = current + result + current\n    return result\n",
  "559536379512a64472000053": "def play_pass(s, n):\r\n\r\n    # Step 1, 2, 3\r\n    shiftText = \"\"\r\n    for char in s:\r\n    if char . isdigit():\r\n    shiftText += str(9 - int(char))\r\n    elif char . isalpha():\r\n    shifted = ord(char . lower()) + n\r\n    shiftText += chr(shifted) if shifted <= ord('z') else chr(shifted - 26)\r\n    else:\r\n    shiftText += char\r\n    # Step 4\r\n    caseText = \"\"\r\n    for i in range(len(shiftText)):\r\n    caseText += shiftText[i]. upper() if i % 2 == 0 else shiftText[i]. lower()\r\n\r\n    # Step 5\r\n    return caseText[:: - 1]\r\n",
  "52761ee4cffbc69732000738": "def goodVsEvil(good, evil):\r\n\r\n    points_good = [1, 2, 3, 3, 4, 10]\r\n    points_evil = [1, 2, 2, 2, 3, 5, 10]\r\n\r\n    good = sum([int(x) * y for x, y in zip(good . split(), points_good)])\r\n    evil = sum([int(x) * y for x, y in zip(evil . split(), points_evil)])\r\n\r\n    result = 'Battle Result: '\r\n    if good < evil:\r\n    return result + 'Evil eradicates all trace of Good'\r\n    elif good > evil:\r\n    return result + 'Good triumphs over Evil'\r\n    else:\r\n    return result + 'No victor on this battle field'\r\n",
  "54d7660d2daf68c619000d95": "import math\r\nimport functools\r\n\r\n\r\ndef convertFracts(lst):\r\n    def lcm(a, b): return abs(a * b) / / math . gcd(a, b)\r\n    tmp_list = list(map(lambda x: x[1], list(lst)))\r\n    lcm_num = functools . reduce(lcm, tmp_list)\r\n    return list(map(lambda x: [x[0] * lcm_num / / x[1], lcm_num], list(lst)))\r\n",
  "57b06f90e298a7b53d000a86": "def queue_time(customers, n):\r\n    l = [0] * n\r\n    for i in customers:\r\n    l[l . index(min(l))] += i\r\n    return max(l)\r\n",
  "56269eb78ad2e4ced1000013": "def find_next_square(sq):\n    root = sq ** 0.5\n    if root.is_integer():\n        return (root + 1)**2\n    return -1",
  "56606694ec01347ce800001b": "def is_triangle(a, b, c):\n    return (a<b+c) and (b<a+c) and (c<a+b)",
  "566be96bb3174e155300001b": "\"\"\"\nh = vt-0.5gt^2\nlet h = 0 [that is, when the ball has returned to the ground]\n=> 0 = vt-0.5gt^2\n=> 0.5gt^2 = vt\n=> 0.5gt = v\n=> t = 2v/g - the total time the ball is in the air.\n=> t at max height  = v/g\n\"\"\"\n\ndef max_ball(v0):\n    return round(10*v0/9.81/3.6)",
  "58635f1b2489549be50003f1": "from math import sqrt\n\ndef quadratic_formula(a, b, c):    \n    delta = b * b - 4 * a *c\n    root1 = (-b - sqrt(delta)) / (2 * a)     \n    root2 = (-b + sqrt(delta)) / (2 * a)     \n    return [root1, root2]",
  "56445c4755d0e45b8c00010a": "def fortune(f, p, c, n, i):\r\n    for _ in range(n - 1):\r\n    f = int(f * (100 + p) / 100 - c)\r\n    c = int(c * (100 + i) / 100)\r\n    if f < 0:\r\n    return False\r\n    return True\r\n",
  "55b42574ff091733d900002f": "def friend(x):\r\n    return [f for f in x if len(f) == 4]\r\n",
  "50654ddff44f800200000004": "def multiply(a, b):\r\n    return a * b\r\n"
}